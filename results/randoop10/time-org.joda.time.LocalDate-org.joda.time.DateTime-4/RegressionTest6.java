import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test3001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3001");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        int int7 = mutableDateTime6.getYearOfEra();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        mutablePeriod11.addHours((int) (byte) -1);
        mutablePeriod11.addYears(2022);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.LocalTime localTime20 = localTime3.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.LocalTime localTime25 = localTime23.withMillisOfDay((int) '#');
        org.joda.time.LocalTime.Property property26 = localTime25.minuteOfHour();
        int int27 = localTime3.compareTo((org.joda.time.ReadablePartial) localTime25);
        org.joda.time.LocalTime.Property property28 = localTime3.hourOfDay();
        org.joda.time.LocalTime localTime30 = property28.addCopy(1645514213504L);
        org.joda.time.LocalTime localTime31 = property28.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime33 = property28.addNoWrapToCopy(939);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime31);
    }

    @Test
    public void test3002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3002");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.months();
        mutablePeriod3.set(durationFieldType4, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.months();
        boolean boolean8 = mutablePeriod3.isSupported(durationFieldType7);
        int int9 = mutablePeriod3.getDays();
        org.joda.time.Period period10 = mutablePeriod3.toPeriod();
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test3003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3003");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight0.toMutableDateTime();
        boolean boolean5 = dateMidnight0.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.minusWeeks((int) ' ');
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear((int) (byte) 1);
        int int12 = dateTime11.getDayOfMonth();
        boolean boolean13 = dateMidnight0.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test3004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3004");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(26294787, 820, 0, 1586);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26294787 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3005");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        int int7 = mutableDateTime6.getYearOfEra();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        mutablePeriod11.addHours((int) (byte) -1);
        mutablePeriod11.addYears(2022);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.LocalTime localTime20 = localTime3.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.LocalTime localTime22 = localTime20.plusSeconds(100);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 3);
        mutablePeriod24.addMonths(11);
        org.joda.time.LocalTime localTime27 = localTime22.plus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.Period period29 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period31 = period29.minusYears(8);
        org.joda.time.Period period33 = period29.withYears(2);
        org.joda.time.Period period35 = period33.plusMillis((int) (byte) 10);
        org.joda.time.Period period37 = period35.plusDays((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight38.withDayOfYear((int) (short) 10);
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime48 = timeOfDay43.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType50 = periodType49.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight42, (org.joda.time.ReadableInstant) dateTime45, periodType50);
        org.joda.time.PeriodType periodType52 = periodType50.withDaysRemoved();
        org.joda.time.Period period53 = period37.normalizedStandard(periodType52);
        org.joda.time.LocalTime localTime54 = localTime27.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.DateTime dateTime55 = localTime54.toDateTimeToday();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test3006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3006");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight0.toMutableDateTime();
        boolean boolean5 = dateMidnight0.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.withCenturyOfEra(0);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.months();
        mutablePeriod12.set(durationFieldType13, (int) 'a');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100, chronology24);
        boolean boolean26 = durationFieldType13.isSupported(chronology24);
        boolean boolean27 = durationFieldType8.isSupported(chronology24);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay((java.lang.Object) dateMidnight7, chronology24);
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(chronology24);
        org.joda.time.DateTimeField dateTimeField30 = chronology24.secondOfMinute();
        java.lang.String str32 = dateTimeField30.getAsShortText(0L);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
    }

    @Test
    public void test3007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3007");
        org.joda.time.Period period1 = org.joda.time.Period.millis(590);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test3008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3008");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfSecond(436);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusSeconds(31);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMillis(26184964);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.dayOfMonth();
        java.util.Locale locale14 = java.util.Locale.PRC;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.fromCalendarFields(calendar15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.era();
        boolean boolean20 = localDateTime18.isSupported(dateTimeFieldType19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusMonths(436);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.minusMillis((-1));
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusMillis(2122);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = localDateTime22.isSupported(dateTimeFieldType28);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime10.withFields((org.joda.time.ReadablePartial) localDateTime22);
        int int31 = localDateTime10.getSecondOfMinute();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514460937,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=0,MILLISECOND=937,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645514460937,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=0,MILLISECOND=937,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 29 + "'", int31 == 29);
    }

    @Test
    public void test3009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3009");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusDays(86399999);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        java.lang.String str29 = mutablePeriod23.toString();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) mutablePeriod23);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusWeeks(0);
        boolean boolean37 = mutablePeriod23.equals((java.lang.Object) 0);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.months();
        mutablePeriod42.set(durationFieldType43, (int) 'a');
        org.joda.time.ReadableDuration readableDuration46 = null;
        mutablePeriod42.add(readableDuration46);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay38.minus((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay48.plusYears((int) 'a');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = yearMonthDay50.getFieldTypes();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0.034S" + "'", str29, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
    }

    @Test
    public void test3010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3010");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Interval interval21 = localDate17.toInterval(dateTimeZone20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        boolean boolean38 = interval28.contains((org.joda.time.ReadableInterval) interval36);
        boolean boolean39 = interval21.isBefore((org.joda.time.ReadableInterval) interval36);
        long long40 = interval36.getStartMillis();
        boolean boolean41 = interval6.overlaps((org.joda.time.ReadableInterval) interval36);
        org.joda.time.DateTime dateTime42 = interval6.getEnd();
        java.lang.String str43 = interval6.toString();
        java.lang.String str44 = interval6.toString();
        org.joda.time.Interval interval45 = interval6.toInterval();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType49);
        int int51 = mutablePeriod50.getMonths();
        org.joda.time.Interval interval52 = new org.joda.time.Interval(readableInstant46, (org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.Chronology chronology53 = interval52.getChronology();
        org.joda.time.MutableInterval mutableInterval54 = interval52.toMutableInterval();
        org.joda.time.LocalDate localDate55 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        boolean boolean57 = localDate55.isSupported(dateTimeFieldType56);
        org.joda.time.LocalDate.Property property58 = localDate55.yearOfEra();
        org.joda.time.Interval interval59 = localDate55.toInterval();
        boolean boolean60 = interval59.isBeforeNow();
        org.joda.time.Interval interval61 = interval59.toInterval();
        boolean boolean62 = interval61.containsNow();
        boolean boolean63 = mutableInterval54.contains((org.joda.time.ReadableInterval) interval61);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval67 = new org.joda.time.Interval(readableDuration64, (org.joda.time.ReadableInstant) dateTime66);
        long long68 = interval67.getEndMillis();
        org.joda.time.ReadableInstant readableInstant69 = null;
        boolean boolean70 = interval67.isBefore(readableInstant69);
        boolean boolean71 = mutableInterval54.isBefore((org.joda.time.ReadableInterval) interval67);
        boolean boolean72 = interval6.overlaps((org.joda.time.ReadableInterval) interval67);
        org.joda.time.DateTime dateTime73 = interval6.getEnd();
        org.joda.time.DateTime dateTime75 = dateTime73.plusSeconds(0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645514461812L + "'", long40 == 1645514461812L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T07:21:01.812Z/2022-02-22T07:21:01.846Z" + "'", str43, "2022-02-22T07:21:01.812Z/2022-02-22T07:21:01.846Z");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T07:21:01.812Z/2022-02-22T07:21:01.846Z" + "'", str44, "2022-02-22T07:21:01.812Z/2022-02-22T07:21:01.846Z");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(mutableInterval54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    public void test3011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3011");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateTime dateTime9 = dateTime3.plusYears((-1));
        org.joda.time.Chronology chronology10 = dateTime3.getChronology();
        int int11 = dateTime3.getMillisOfDay();
        org.joda.time.DateTime dateTime12 = dateTime3.toDateTime();
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = null;
        boolean boolean15 = localDate13.isSupported(dateTimeFieldType14);
        org.joda.time.LocalDate.Property property16 = localDate13.yearOfEra();
        org.joda.time.Interval interval17 = localDate13.toInterval();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfMonth();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        mutablePeriod26.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        java.lang.String str32 = mutablePeriod26.toString();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadablePeriod) mutablePeriod26);
        mutablePeriod26.setValue(0, 2022);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod26.setPeriod((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((long) (byte) 0);
        long long42 = duration41.getMillis();
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) (byte) 0);
        long long45 = duration44.getMillis();
        int int46 = duration41.compareTo((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Duration duration48 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration44, 10);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime50 = dateMidnight49.toMutableDateTime();
        mutableDateTime50.add((long) 1);
        org.joda.time.DateTime dateTime53 = mutableDateTime50.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.years();
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime50, readableDuration54, periodType55);
        org.joda.time.Chronology chronology57 = mutableDateTime50.getChronology();
        org.joda.time.MutableDateTime mutableDateTime58 = org.joda.time.MutableDateTime.now(chronology57);
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime62 = dateTime60.withDayOfYear((int) (byte) 1);
        int int63 = dateTime62.getDayOfMonth();
        org.joda.time.Duration duration65 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime66 = dateTime62.minus((org.joda.time.ReadableDuration) duration65);
        mutableDateTime58.add((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Duration duration69 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean70 = duration65.isShorterThan((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Duration duration72 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean73 = duration65.isLongerThan((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Duration duration75 = duration44.withDurationAdded((org.joda.time.ReadableDuration) duration72, 999);
        org.joda.time.LocalDate localDate76 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property77 = localDate76.dayOfYear();
        org.joda.time.DateMidnight dateMidnight78 = localDate76.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight79 = localDate76.toDateMidnight();
        org.joda.time.Period period80 = duration44.toPeriodTo((org.joda.time.ReadableInstant) dateMidnight79);
        long long81 = duration44.getStandardDays();
        org.joda.time.Interval interval82 = interval17.withDurationAfterStart((org.joda.time.ReadableDuration) duration44);
        long long83 = duration44.getStandardHours();
        org.joda.time.DateTime dateTime84 = dateTime12.plus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.PeriodType periodType85 = org.joda.time.PeriodType.hours();
        org.joda.time.Period period86 = duration44.toPeriod(periodType85);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 86399999 + "'", int11 == 86399999);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0.034S" + "'", str32, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(period86);
    }

    @Test
    public void test3012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3012");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        java.lang.String str5 = dateTime1.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = dateTime1.withMonthOfYear(22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str5, "1969-12-31T23:59:59.999Z");
    }

    @Test
    public void test3013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3013");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfYear((int) (short) 10);
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime10 = timeOfDay5.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType12 = periodType11.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight4, (org.joda.time.ReadableInstant) dateTime7, periodType12);
        int int14 = dateMidnight4.getDayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) ' ', chronology16);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.months();
        mutablePeriod21.set(durationFieldType22, (int) 'a');
        mutablePeriod17.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        mutablePeriod21.setDays(0);
        mutablePeriod21.clear();
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime30 = dateMidnight29.toMutableDateTime();
        mutableDateTime30.add((long) 1);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight33.toMutableDateTime();
        mutableDateTime34.add((long) 1);
        org.joda.time.DateTime dateTime37 = mutableDateTime34.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.years();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime34, readableDuration38, periodType39);
        java.lang.String str41 = mutableDateTime34.toString();
        mutableDateTime34.addMinutes((int) ' ');
        int int44 = mutableDateTime34.getCenturyOfEra();
        mutablePeriod21.setPeriod((org.joda.time.ReadableInstant) mutableDateTime30, (org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight4.plus((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateMidnight.Property property47 = dateMidnight46.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight46.withCenturyOfEra(34);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str41, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 20 + "'", int44 == 20);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateMidnight49);
    }

    @Test
    public void test3014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3014");
        org.joda.time.Period period2 = new org.joda.time.Period(1645514300333L, (long) 156);
    }

    @Test
    public void test3015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3015");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        int int7 = mutablePeriod6.getMonths();
        org.joda.time.Interval interval8 = new org.joda.time.Interval(readableInstant2, (org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.Chronology chronology9 = interval8.getChronology();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100, chronology9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 2022, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = dateTime11.toLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime11.withDayOfMonth(437);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 437 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test3016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3016");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay4 = dateTime3.toYearMonthDay();
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withYear(59);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay4.withMonthOfYear(12);
        int[] intArray10 = yearMonthDay4.getValues();
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay4.year();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[1969, 4, 30]");
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test3017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3017");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfMonth();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        mutablePeriod16.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod20);
        java.lang.String str22 = mutablePeriod16.toString();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadablePeriod) mutablePeriod16);
        mutablePeriod16.setValue(0, 2022);
        mutablePeriod16.addDays((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime31 = dateMidnight30.toMutableDateTime();
        mutableDateTime31.add((long) 1);
        org.joda.time.DateTime dateTime34 = mutableDateTime31.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.years();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime31, readableDuration35, periodType36);
        org.joda.time.Chronology chronology38 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfEra();
        mutablePeriod16.add(35417L, chronology38);
        int int41 = mutablePeriod16.getMonths();
        org.joda.time.Interval interval42 = interval7.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutablePeriod44.add(readableDuration45);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType50);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.months();
        mutablePeriod51.set(durationFieldType52, (int) 'a');
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType59);
        int int61 = mutablePeriod60.getMonths();
        org.joda.time.Interval interval62 = new org.joda.time.Interval(readableInstant56, (org.joda.time.ReadablePeriod) mutablePeriod60);
        org.joda.time.Chronology chronology63 = interval62.getChronology();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (short) 100, chronology63);
        boolean boolean65 = durationFieldType52.isSupported(chronology63);
        mutablePeriod44.setPeriod((long) '4', chronology63);
        org.joda.time.Interval interval67 = interval42.withChronology(chronology63);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0.034S" + "'", str22, "PT0.034S");
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(interval67);
    }

    @Test
    public void test3018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3018");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        mutableDateTime6.add((long) 1);
        mutableDateTime6.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        mutableDateTime14.add((long) 1);
        org.joda.time.DateTime dateTime17 = mutableDateTime14.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, readableDuration18, periodType19);
        org.joda.time.Chronology chronology21 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(chronology21);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(20);
        boolean boolean30 = mutableDateTime22.isBefore((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime.Property property31 = dateTime29.weekOfWeekyear();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfMonth();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType43);
        mutablePeriod40.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        java.lang.String str46 = mutablePeriod40.toString();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadablePeriod) mutablePeriod40);
        mutablePeriod40.setValue(0, 2022);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod40.setPeriod((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration55 = new org.joda.time.Duration((long) (byte) 0);
        long long56 = duration55.getMillis();
        org.joda.time.Duration duration58 = new org.joda.time.Duration((long) (byte) 0);
        long long59 = duration58.getMillis();
        int int60 = duration55.compareTo((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Duration duration62 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration58, 10);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime64 = dateMidnight63.toMutableDateTime();
        mutableDateTime64.add((long) 1);
        org.joda.time.DateTime dateTime67 = mutableDateTime64.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.years();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime64, readableDuration68, periodType69);
        org.joda.time.Chronology chronology71 = mutableDateTime64.getChronology();
        org.joda.time.MutableDateTime mutableDateTime72 = org.joda.time.MutableDateTime.now(chronology71);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime76 = dateTime74.withDayOfYear((int) (byte) 1);
        int int77 = dateTime76.getDayOfMonth();
        org.joda.time.Duration duration79 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime80 = dateTime76.minus((org.joda.time.ReadableDuration) duration79);
        mutableDateTime72.add((org.joda.time.ReadableDuration) duration79);
        org.joda.time.Duration duration83 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean84 = duration79.isShorterThan((org.joda.time.ReadableDuration) duration83);
        org.joda.time.Duration duration86 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean87 = duration79.isLongerThan((org.joda.time.ReadableDuration) duration86);
        org.joda.time.Duration duration89 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration86, 999);
        org.joda.time.Duration duration91 = duration58.plus(35417L);
        org.joda.time.DateTime dateTime92 = dateTime29.minus((org.joda.time.ReadableDuration) duration91);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime97 = dateTime92.withTime(21791, 32772, 26316680, 575);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21791 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT0.034S" + "'", str46, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test3019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3019");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        int int16 = mutablePeriod8.getMonths();
        mutablePeriod8.setSeconds(26272337);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test3020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3020");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Interval interval21 = localDate17.toInterval(dateTimeZone20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        boolean boolean38 = interval28.contains((org.joda.time.ReadableInterval) interval36);
        boolean boolean39 = interval21.isBefore((org.joda.time.ReadableInterval) interval36);
        long long40 = interval36.getStartMillis();
        boolean boolean41 = interval6.overlaps((org.joda.time.ReadableInterval) interval36);
        org.joda.time.DateTime dateTime42 = interval6.getEnd();
        java.lang.String str43 = interval6.toString();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType47);
        int int49 = mutablePeriod48.getMonths();
        org.joda.time.Interval interval50 = new org.joda.time.Interval(readableInstant44, (org.joda.time.ReadablePeriod) mutablePeriod48);
        boolean boolean51 = interval6.isBefore((org.joda.time.ReadableInterval) interval50);
        org.joda.time.DateTime dateTime52 = interval50.getStart();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime54 = dateTime52.withSecondOfMinute(26294787);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26294787 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645514462393L + "'", long40 == 1645514462393L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T07:21:02.393Z/2022-02-22T07:21:02.427Z" + "'", str43, "2022-02-22T07:21:02.393Z/2022-02-22T07:21:02.427Z");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test3021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3021");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.minusYears(702);
        org.joda.time.DateTime dateTime12 = dateTime8.withCenturyOfEra(2022);
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = null;
        org.joda.time.format.DateTimeParser dateTimeParser14 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter13, dateTimeParser14);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType19 = periodType18.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        int int25 = mutablePeriod24.getMonths();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(readableInstant20, (org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        int int34 = mutablePeriod33.getMonths();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(readableInstant29, (org.joda.time.ReadablePeriod) mutablePeriod33);
        int[] intArray38 = chronology27.get((org.joda.time.ReadablePeriod) mutablePeriod33, 1L, (long) 4);
        org.joda.time.Period period39 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType18, chronology27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter15.withChronology(chronology27);
        org.joda.time.format.DateTimeParser dateTimeParser41 = dateTimeFormatter40.getParser();
        org.joda.time.Chronology chronology42 = dateTimeFormatter40.getChronology();
        java.util.Locale locale43 = dateTimeFormatter40.getLocale();
        java.lang.Integer int44 = dateTimeFormatter40.getPivotYear();
        org.joda.time.Chronology chronology45 = dateTimeFormatter40.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter40.withDefaultYear((int) ' ');
        org.joda.time.Chronology chronology48 = dateTimeFormatter40.getChronolgy();
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime8.toMutableDateTime(chronology48);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNull(dateTimeParser41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertNull(int44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
    }

    @Test
    public void test3022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3022");
        org.joda.time.Period period1 = org.joda.time.Period.days((int) (short) -1);
        org.joda.time.Period period3 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period5 = period3.minusYears(8);
        org.joda.time.Period period7 = period3.withYears(2);
        org.joda.time.Period period9 = period7.plusMillis((int) (byte) 10);
        org.joda.time.Period period11 = period9.plusMinutes(32772);
        org.joda.time.Period period12 = period1.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period14 = period12.plusMinutes(1);
        org.joda.time.MutablePeriod mutablePeriod15 = period12.toMutablePeriod();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
    }

    @Test
    public void test3023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3023");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.weekOfWeekyear();
        mutableDateTime3.setSecondOfMinute((int) (byte) 1);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType13 = periodType12.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        int int28 = mutablePeriod27.getMonths();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableInstant23, (org.joda.time.ReadablePeriod) mutablePeriod27);
        int[] intArray32 = chronology21.get((org.joda.time.ReadablePeriod) mutablePeriod27, 1L, (long) 4);
        org.joda.time.Period period33 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType12, chronology21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter9.withChronology(chronology21);
        boolean boolean35 = dateTimeFormatter34.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter36 = dateTimeFormatter34.getPrinter();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType40);
        int int42 = mutablePeriod41.getMonths();
        org.joda.time.Interval interval43 = new org.joda.time.Interval(readableInstant37, (org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.dayOfYear();
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.now(chronology44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter34.withChronology(chronology44);
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime3.toMutableDateTime(chronology44);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime53 = dateMidnight52.toMutableDateTime();
        java.lang.String str54 = mutableDateTime53.toString();
        mutableDateTime53.setMonthOfYear(1);
        mutableDateTime53.addWeekyears(4);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((long) (byte) 0);
        long long61 = duration60.getMillis();
        org.joda.time.Duration duration63 = new org.joda.time.Duration((long) (byte) 0);
        long long64 = duration63.getMillis();
        int int65 = duration60.compareTo((org.joda.time.ReadableDuration) duration63);
        mutableDateTime53.add((org.joda.time.ReadableDuration) duration60, 26162430);
        org.joda.time.Duration duration68 = duration60.toDuration();
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight51.minus((org.joda.time.ReadableDuration) duration60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.withWeekOfWeekyear(26296609);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26296609 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(dateTimePrinter36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str54, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(dateMidnight69);
    }

    @Test
    public void test3024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3024");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.secondOfDay();
        boolean boolean5 = mutableDateTime1.isEqualNow();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime8 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime10 = localTime8.withMillisOfDay((int) '#');
        org.joda.time.LocalTime.Property property11 = localTime10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        mutableDateTime1.setRounding(dateTimeField12);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("53");
        boolean boolean17 = timeZone16.observesDaylightTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfMonth();
        org.joda.time.DateTime dateTime24 = dateTime21.plusSeconds(10);
        org.joda.time.DateTime.Property property25 = dateTime24.year();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime30 = dateTime28.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime31 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay26.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean37 = timeOfDay33.isSupported(dateTimeFieldType36);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime41 = dateTime39.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property42 = dateTime41.dayOfMonth();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType45);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType49);
        mutablePeriod46.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod50);
        java.lang.String str52 = mutablePeriod46.toString();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadablePeriod) mutablePeriod46);
        mutablePeriod46.setValue(0, 2022);
        mutablePeriod46.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay59 = timeOfDay33.plus((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.TimeOfDay.Property property60 = timeOfDay59.millisOfSecond();
        org.joda.time.DurationField durationField61 = property60.getDurationField();
        org.joda.time.TimeOfDay timeOfDay62 = property60.getTimeOfDay();
        int int63 = property60.getMaximumValueOverall();
        java.util.Locale locale65 = java.util.Locale.CHINA;
        java.util.Locale locale66 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(locale66);
        java.lang.String str68 = locale65.getDisplayVariant(locale66);
        org.joda.time.TimeOfDay timeOfDay69 = property60.setCopy("1", locale65);
        java.lang.String str70 = property25.getAsShortText(locale65);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone16, locale65);
        java.lang.String str72 = dateTimeField12.getAsShortText((long) 26309432, locale65);
        java.lang.String str73 = dateTimeField12.getName();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT0.034S" + "'", str52, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 999 + "'", int63 == 999);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1645514462521,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=2,MILLISECOND=521,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1969" + "'", str70, "1969");
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=1645514462521,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=2,MILLISECOND=521,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "18" + "'", str72, "18");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "minuteOfHour" + "'", str73, "minuteOfHour");
    }

    @Test
    public void test3025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3025");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusDays(86399999);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        java.lang.String str29 = mutablePeriod23.toString();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) mutablePeriod23);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusWeeks(0);
        boolean boolean37 = mutablePeriod23.equals((java.lang.Object) 0);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime41 = dateMidnight40.toMutableDateTime();
        int int42 = mutableDateTime41.getYearOfEra();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType45);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.months();
        mutablePeriod46.set(durationFieldType47, (int) 'a');
        mutablePeriod46.addHours((int) (byte) -1);
        mutablePeriod46.addYears(2022);
        mutableDateTime41.add((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime58 = dateMidnight57.toMutableDateTime();
        mutableDateTime58.add((long) 1);
        org.joda.time.DateTime dateTime61 = mutableDateTime58.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.years();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime58, readableDuration62, periodType63);
        java.lang.String str65 = mutableDateTime58.toString();
        org.joda.time.Chronology chronology66 = mutableDateTime58.getChronology();
        mutablePeriod46.setPeriod(1645514159651L, (long) (short) -1, chronology66);
        boolean boolean68 = yearMonthDay8.equals((java.lang.Object) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            int int70 = yearMonthDay8.getValue(63);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 63");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0.034S" + "'", str29, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str65, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test3026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3026");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.LocalDate localDate2 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate3 = property1.roundFloorCopy();
        org.joda.time.LocalDate localDate4 = property1.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test3027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3027");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = null;
        boolean boolean7 = localDate5.isSupported(dateTimeFieldType6);
        org.joda.time.LocalDate.Property property8 = localDate5.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        long long11 = dateTimeField9.remainder((long) 10);
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        boolean boolean14 = localDate12.isSupported(dateTimeFieldType13);
        int int15 = localDate12.getWeekOfWeekyear();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDate12, locale16);
        java.lang.String str18 = locale16.getISO3Language();
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str20 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet19);
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.lang.String[] strArray26 = new java.lang.String[] { "PT0.034S", "53" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strList27);
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray35 = new java.lang.String[] { "PT0.034S", "53" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList36);
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strList36);
        java.lang.String[] strArray47 = new java.lang.String[] { "it_IT", "months", "53", "hi!", "months", "it_IT", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight50.plusYears((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.withYear((int) (byte) 0);
        boolean boolean57 = strSet48.remove((java.lang.Object) dateMidnight56);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList59 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strSet48, filteringMode58);
        java.lang.String str60 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strList59);
        java.util.Locale locale61 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleAttributes();
        java.util.stream.Stream<java.lang.String> strStream63 = strSet62.stream();
        java.lang.Object[] objArray64 = strSet62.toArray();
        int int65 = strSet62.size();
        java.util.List<java.lang.String> strList66 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet62);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap67 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList68 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap67);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap69 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList70 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList4, strMap69);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022" + "'", str17, "2022");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "jpn" + "'", str18, "jpn");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(strStream63);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(languageRangeList68);
        org.junit.Assert.assertNotNull(languageRangeList70);
    }

    @Test
    public void test3028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3028");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight19.toMutableDateTime();
        java.lang.String str21 = mutableDateTime20.toString();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime20.monthOfYear();
        int int23 = property22.get();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.getMutableDateTime();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.lang.String str28 = dateTimeZone26.getName((long) 100);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone26);
        mutableDateTime24.setZone(dateTimeZone26);
        mutableDateTime9.setZoneRetainFields(dateTimeZone26);
        java.lang.String str32 = mutableDateTime9.toString();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        int int38 = mutablePeriod37.getMonths();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableInstant33, (org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType45);
        int int47 = mutablePeriod46.getMonths();
        org.joda.time.Interval interval48 = new org.joda.time.Interval(readableInstant42, (org.joda.time.ReadablePeriod) mutablePeriod46);
        int[] intArray51 = chronology40.get((org.joda.time.ReadablePeriod) mutablePeriod46, 1L, (long) 4);
        org.joda.time.DurationField durationField52 = chronology40.eras();
        org.joda.time.DateTimeField dateTimeField53 = chronology40.centuryOfEra();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType57);
        int int59 = mutablePeriod58.getMonths();
        org.joda.time.Interval interval60 = new org.joda.time.Interval(readableInstant54, (org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.Chronology chronology61 = interval60.getChronology();
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay(chronology61);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay62.minusMonths((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight65 = yearMonthDay64.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime67 = dateMidnight66.toMutableDateTime();
        mutableDateTime67.add((long) 1);
        mutableDateTime67.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime67.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone73 = mutableDateTime67.getZone();
        org.joda.time.DateTime dateTime74 = yearMonthDay64.toDateTimeAtCurrentTime(dateTimeZone73);
        org.joda.time.Chronology chronology75 = chronology40.withZone(dateTimeZone73);
        org.joda.time.DateTime dateTime76 = mutableDateTime9.toDateTime(chronology40);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str21, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T07:21:03.448Z" + "'", str32, "2022-02-22T07:21:03.448Z");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test3029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3029");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology4 = dateMidnight3.getChronology();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDayOfMonth(8);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.DateTime dateTime13 = dateTime10.plusSeconds(10);
        org.joda.time.DateTime dateTime15 = dateTime10.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        int int18 = dateMidnight3.get(dateTimeFieldType16);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime1.property(dateTimeFieldType16);
        java.util.Date date20 = mutableDateTime1.toDate();
        int int21 = mutableDateTime1.getYearOfEra();
        long long22 = mutableDateTime1.getMillis();
        org.joda.time.DateTime dateTime23 = mutableDateTime1.toDateTimeISO();
        int int24 = dateTime23.getDayOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str2, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645488000000L + "'", long22 == 1645488000000L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 53 + "'", int24 == 53);
    }

    @Test
    public void test3030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3030");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.Duration duration6 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime7 = dateTime3.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.DateTime dateTime9 = dateTime3.minusDays(86399);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes(26340276);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime11.withTime(26432389, 39, 69, 53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26432389 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test3031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3031");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 321);
        org.junit.Assert.assertNotNull(timeOfDay1);
    }

    @Test
    public void test3032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3032");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.roundHalfFloor();
        mutableDateTime9.setMinuteOfDay(22);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setTime(59, 26162616, (int) 'a', 12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test3033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3033");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime5 = dateTime3.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime6 = timeOfDay1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay1.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean12 = timeOfDay8.isSupported(dateTimeFieldType11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfMonth();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        mutablePeriod21.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        java.lang.String str27 = mutablePeriod21.toString();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadablePeriod) mutablePeriod21);
        mutablePeriod21.setValue(0, 2022);
        mutablePeriod21.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay8.plus((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.TimeOfDay.Property property35 = timeOfDay34.millisOfSecond();
        org.joda.time.DurationField durationField36 = property35.getDurationField();
        org.joda.time.TimeOfDay timeOfDay37 = property35.getTimeOfDay();
        int int38 = property35.getMaximumValueOverall();
        java.util.Locale locale40 = java.util.Locale.CHINA;
        java.util.Locale locale41 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(locale41);
        java.lang.String str43 = locale40.getDisplayVariant(locale41);
        org.joda.time.TimeOfDay timeOfDay44 = property35.setCopy("1", locale40);
        org.joda.time.DateTime dateTime45 = timeOfDay44.toDateTimeToday();
        org.joda.time.Chronology chronology46 = timeOfDay44.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.months();
        org.joda.time.TimeOfDay timeOfDay48 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 26311262, chronology46);
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay48.plusSeconds(56);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay48.minusHours(24);
        int int53 = timeOfDay52.size();
        java.lang.String str54 = timeOfDay52.toString();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0.034S" + "'", str27, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 999 + "'", int38 == 999);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1645514463626,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=3,MILLISECOND=626,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "T07:18:31.262" + "'", str54, "T07:18:31.262");
    }

    @Test
    public void test3034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3034");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        org.joda.time.LocalDate localDate4 = localDate1.withDayOfYear(59);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        mutableDateTime6.add((long) 1);
        org.joda.time.DateTime dateTime9 = mutableDateTime6.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.era();
        boolean boolean11 = mutableDateTime6.isSupported(dateTimeFieldType10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime6.hourOfDay();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekyearOfCentury();
        long long23 = dateTimeField21.roundHalfFloor((long) 1);
        mutableDateTime6.setRounding(dateTimeField21, (int) (byte) 0);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.months();
        mutablePeriod29.set(durationFieldType30, (int) 'a');
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType37);
        int int39 = mutablePeriod38.getMonths();
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableInstant34, (org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 100, chronology41);
        boolean boolean43 = durationFieldType30.isSupported(chronology41);
        mutableDateTime6.add(durationFieldType30, (int) ' ');
        org.joda.time.LocalDate localDate47 = localDate4.withFieldAdded(durationFieldType30, 2122);
        org.joda.time.LocalDate localDate49 = localDate47.withWeekyear(26242316);
        org.joda.time.LocalDate localDate51 = localDate49.withWeekyear(610);
        org.joda.time.LocalDate localDate53 = localDate49.minusYears(54);
        org.joda.time.LocalDate.Property property54 = localDate53.weekOfWeekyear();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test3035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3035");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusDays(86399999);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        java.lang.String str29 = mutablePeriod23.toString();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) mutablePeriod23);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusWeeks(0);
        boolean boolean37 = mutablePeriod23.equals((java.lang.Object) 0);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        org.joda.time.YearMonthDay yearMonthDay42 = property39.addWrapFieldToCopy(26200578);
        java.lang.String str43 = property39.getAsText();
        java.lang.String str44 = property39.getAsShortText();
        java.lang.String str45 = property39.getAsString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay47 = property39.setCopy(34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0.034S" + "'", str29, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u6708" + "'", str43, "\u6708");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2" + "'", str44, "2");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2" + "'", str45, "2");
    }

    @Test
    public void test3036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3036");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay4 = dateTime3.toYearMonthDay();
        org.joda.time.DateTime dateTime6 = dateTime3.minusSeconds(26322);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight7.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property12 = dateMidnight7.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight7.withMillis((long) 5);
        org.joda.time.Interval interval15 = dateMidnight14.toInterval();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight16.toMutableDateTime();
        java.lang.String str18 = mutableDateTime17.toString();
        mutableDateTime17.setMonthOfYear(1);
        mutableDateTime17.addWeekyears(4);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        long long25 = duration24.getMillis();
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        long long28 = duration27.getMillis();
        int int29 = duration24.compareTo((org.joda.time.ReadableDuration) duration27);
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration24, 26162430);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.years();
        java.lang.String str33 = periodType32.toString();
        org.joda.time.PeriodType periodType34 = periodType32.withMinutesRemoved();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight14, (org.joda.time.ReadableDuration) duration24, periodType34);
        org.joda.time.PeriodType periodType37 = periodType34.withYearsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period38 = new org.joda.time.Period((java.lang.Object) 26322, periodType34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str18, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PeriodType[Years]" + "'", str33, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType37);
    }

    @Test
    public void test3037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3037");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.year();
        org.joda.time.DateMidnight dateMidnight3 = localDate0.toDateMidnight();
        org.joda.time.LocalDate localDate5 = localDate0.withCenturyOfEra(437);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test3038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3038");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.now();
        int int3 = localTime2.size();
        org.joda.time.LocalTime.Property property4 = localTime2.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property4.addCopy((int) (short) 100);
        boolean boolean7 = mutableDateTime1.equals((java.lang.Object) (short) 100);
        int int8 = mutableDateTime1.getRoundingMode();
        int int9 = mutableDateTime1.getEra();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test3039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3039");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.weekOfWeekyear();
        mutableDateTime3.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        int int11 = dateTime10.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTime dateTime16 = dateTime10.plusYears((-1));
        org.joda.time.Chronology chronology17 = dateTime10.getChronology();
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime3.toMutableDateTime(chronology17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.hourOfDay();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime21 = dateMidnight20.toMutableDateTime();
        mutableDateTime21.add((long) 1);
        org.joda.time.DateTime dateTime24 = mutableDateTime21.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.years();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime21, readableDuration25, periodType26);
        java.lang.String str28 = mutableDateTime21.toString();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime21.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime30 = property29.roundHalfCeiling();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType35);
        int int37 = mutablePeriod36.getMonths();
        org.joda.time.Interval interval38 = new org.joda.time.Interval(readableInstant32, (org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType44);
        int int46 = mutablePeriod45.getMonths();
        org.joda.time.Interval interval47 = new org.joda.time.Interval(readableInstant41, (org.joda.time.ReadablePeriod) mutablePeriod45);
        int[] intArray50 = chronology39.get((org.joda.time.ReadablePeriod) mutablePeriod45, 1L, (long) 4);
        org.joda.time.DateTimeField dateTimeField51 = chronology39.monthOfYear();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(2L, chronology39);
        org.joda.time.DateTime.Property property53 = dateTime52.weekOfWeekyear();
        mutableDateTime30.setMillis((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean55 = mutableDateTime18.isBefore((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType59);
        int int61 = mutablePeriod60.getMonths();
        org.joda.time.Interval interval62 = new org.joda.time.Interval(readableInstant56, (org.joda.time.ReadablePeriod) mutablePeriod60);
        org.joda.time.Interval interval63 = interval62.toInterval();
        org.joda.time.Interval interval64 = interval62.toInterval();
        org.joda.time.Duration duration66 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.Interval interval67 = interval62.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration66);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property70 = dateTime69.secondOfDay();
        org.joda.time.DateTime dateTime72 = dateTime69.withEra(1);
        org.joda.time.DateTime dateTime74 = dateTime69.plusMillis(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int76 = dateTime69.get(dateTimeFieldType75);
        org.joda.time.DateTime dateTime78 = dateTime69.withYear((int) (byte) 10);
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.hours();
        org.joda.time.Period period80 = duration66.toPeriodFrom((org.joda.time.ReadableInstant) dateTime69, periodType79);
        org.joda.time.DateTime dateTime81 = dateTime52.plus((org.joda.time.ReadableDuration) duration66);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str28, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 31 + "'", int76 == 31);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(dateTime81);
    }

    @Test
    public void test3040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3040");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromDateFields(date5);
        date5.setMinutes(32769);
        java.lang.Object obj9 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType13 = periodType12.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        int int28 = mutablePeriod27.getMonths();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableInstant23, (org.joda.time.ReadablePeriod) mutablePeriod27);
        int[] intArray32 = chronology21.get((org.joda.time.ReadablePeriod) mutablePeriod27, 1L, (long) 4);
        org.joda.time.Period period33 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType12, chronology21);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(obj9, chronology21);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone37);
        org.joda.time.DateTime dateTime39 = localDate34.toDateTimeAtMidnight(dateTimeZone37);
        int int40 = localDate34.getWeekyear();
        org.joda.time.LocalDate localDate42 = localDate34.withDayOfYear((int) (short) 1);
        org.joda.time.LocalDate.Property property43 = localDate34.dayOfMonth();
        boolean boolean44 = date5.equals((java.lang.Object) localDate34);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Sep 26 21:09:00 GMT 1907");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test3041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3041");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        mutableDateTime1.addMinutes((int) ' ');
        int int11 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = dateTime14.withWeekOfWeekyear((int) '4');
        boolean boolean20 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property21 = dateTime14.minuteOfDay();
        int int22 = property21.getLeapAmount();
        org.joda.time.DateTime dateTime23 = property21.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime23.withDurationAdded((long) 'x', 2);
        org.joda.time.DateTime dateTime27 = dateTime26.withTimeAtStartOfDay();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime29 = dateMidnight28.toMutableDateTime();
        mutableDateTime29.add((long) 1);
        org.joda.time.DateTime dateTime32 = mutableDateTime29.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.era();
        boolean boolean34 = mutableDateTime29.isSupported(dateTimeFieldType33);
        int int35 = dateTime26.get(dateTimeFieldType33);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.era();
        org.joda.time.DateMidnight dateMidnight38 = property37.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.withMonthOfYear(11);
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now();
        int int42 = localTime41.size();
        java.util.Locale locale43 = java.util.Locale.ITALY;
        boolean boolean44 = localTime41.equals((java.lang.Object) locale43);
        org.joda.time.LocalTime localTime46 = localTime41.minusSeconds((int) 'a');
        org.joda.time.Chronology chronology47 = localTime41.getChronology();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight38.withFields((org.joda.time.ReadablePartial) localTime41);
        boolean boolean49 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateMidnight38);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str8, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test3042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3042");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusYears((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withYear((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plusDays((int) (byte) 100);
        org.joda.time.Interval interval9 = dateMidnight6.toInterval();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.era();
        org.joda.time.DateMidnight dateMidnight20 = property19.roundHalfEvenCopy();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        long long24 = duration23.getMillis();
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property26 = localDate25.dayOfYear();
        org.joda.time.DateMidnight dateMidnight27 = localDate25.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.Hours hours29 = duration23.toStandardHours();
        org.joda.time.Interval interval30 = interval21.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfMonth();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType38);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType42);
        mutablePeriod39.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        java.lang.String str45 = mutablePeriod39.toString();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.Interval interval47 = interval30.gap((org.joda.time.ReadableInterval) interval46);
        org.joda.time.Interval interval48 = interval9.gap((org.joda.time.ReadableInterval) interval46);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime52 = dateTime50.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property53 = dateTime52.dayOfMonth();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType56);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType60);
        mutablePeriod57.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod61);
        java.lang.String str63 = mutablePeriod57.toString();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadablePeriod) mutablePeriod57);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Interval interval66 = interval64.withDurationAfterStart(readableDuration65);
        org.joda.time.Interval interval67 = interval66.toInterval();
        org.joda.time.ReadableInterval readableInterval68 = null;
        boolean boolean69 = interval66.overlaps(readableInterval68);
        boolean boolean70 = interval48.isAfter(readableInterval68);
        long long71 = interval48.getStartMillis();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT0.034S" + "'", str45, "PT0.034S");
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "PT0.034S" + "'", str63, "PT0.034S");
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-62162640000000L) + "'", long71 == (-62162640000000L));
    }

    @Test
    public void test3043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3043");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(chronology7);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(chronology7);
        org.joda.time.DateTimeZone dateTimeZone13 = chronology7.getZone();
        boolean boolean14 = dateTimeZone13.isFixed();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test3044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3044");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.TimeOfDay timeOfDay36 = property34.getTimeOfDay();
        int int37 = property34.getMaximumValueOverall();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.lang.String str40 = locale38.getDisplayLanguage();
        java.lang.String str41 = property34.getAsText(locale38);
        java.util.Set<java.lang.String> strSet42 = locale38.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 999 + "'", int37 == 999);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str40, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "753" + "'", str41, "753");
        org.junit.Assert.assertNotNull(strSet42);
    }

    @Test
    public void test3045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3045");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime7 = dateMidnight4.toMutableDateTime();
        boolean boolean9 = dateMidnight4.isEqual((long) 2);
        int int10 = dateMidnight4.getMillisOfDay();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = localDate11.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        long long17 = dateTimeField15.remainder((long) 10);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        boolean boolean20 = localDate18.isSupported(dateTimeFieldType19);
        int int21 = localDate18.getWeekOfWeekyear();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.lang.String str23 = dateTimeField15.getAsText((org.joda.time.ReadablePartial) localDate18, locale22);
        java.util.Calendar calendar24 = dateMidnight4.toCalendar(locale22);
        java.lang.String str25 = dateTimeField2.getAsText(451, locale22);
        java.lang.String str26 = locale22.getISO3Country();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "451" + "'", str25, "451");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test3046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3046");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusDays(86399999);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        java.lang.String str29 = mutablePeriod23.toString();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) mutablePeriod23);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusWeeks(0);
        boolean boolean37 = mutablePeriod23.equals((java.lang.Object) 0);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property39.getFieldType();
        org.joda.time.DateTimeField dateTimeField42 = property39.getField();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0.034S" + "'", str29, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test3047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3047");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        int int6 = mutablePeriod5.getMonths();
        org.joda.time.Interval interval7 = new org.joda.time.Interval(readableInstant1, (org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100, chronology8);
        java.lang.String str11 = dateTime9.toString("53");
        org.joda.time.DateTime dateTime13 = dateTime9.plusHours(70);
        org.joda.time.DateTime dateTime15 = dateTime13.minus((long) 26299664);
        org.joda.time.DateTime dateTime17 = dateTime13.minusYears(879);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "53" + "'", str11, "53");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test3048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3048");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property5 = dateMidnight0.weekOfWeekyear();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate.Property property9 = localDate6.yearOfEra();
        org.joda.time.Interval interval10 = localDate6.toInterval();
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.plusMillis(20);
        boolean boolean14 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight0);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime15.setDayOfMonth(57);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 57 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3049");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight0.toMutableDateTime();
        boolean boolean5 = dateMidnight0.isEqual((long) 2);
        int int6 = dateMidnight0.getMillisOfDay();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDate7.isSupported(dateTimeFieldType8);
        org.joda.time.LocalDate.Property property10 = localDate7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        long long13 = dateTimeField11.remainder((long) 10);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        int int17 = localDate14.getWeekOfWeekyear();
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localDate14, locale18);
        java.util.Calendar calendar20 = dateMidnight0.toCalendar(locale18);
        java.util.Date date21 = calendar20.getTime();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue Feb 22 00:00:00 GMT 2022");
    }

    @Test
    public void test3050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3050");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDayOfMonth(8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime12.plusSeconds(10);
        org.joda.time.DateTime dateTime17 = dateTime12.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property19 = dateTime17.property(dateTimeFieldType18);
        int int20 = dateMidnight5.get(dateTimeFieldType18);
        int int21 = localDateTime2.indexOf(dateTimeFieldType18);
        int int22 = localDateTime2.getDayOfMonth();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514465671,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=5,MILLISECOND=671,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
    }

    @Test
    public void test3051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3051");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime12 = property10.add(1645514410475L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645514410475 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str8, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test3052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3052");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = dateTime6.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test3053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3053");
        java.util.Date date0 = new java.util.Date();
        java.lang.String str1 = date0.toGMTString();
        date0.setMonth((int) (short) -1);
        date0.setHours(482);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromDateFields(date0);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.plusYears(2);
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay6, (org.joda.time.ReadablePartial) yearMonthDay15);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (short) 10);
        org.joda.time.LocalDate.Property property23 = localDate22.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property23.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay.Property property25 = yearMonthDay6.property(dateTimeFieldType24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Tue Jan 11 02:21:05 GMT 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "22 Feb 2022 07:21:05 GMT" + "'", str1, "22 Feb 2022 07:21:05 GMT");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
    }

    @Test
    public void test3054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3054");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7, (int) (byte) 1);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.secondOfDay();
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.fromCalendarFields(calendar12);
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfCeilingCopy();
        java.util.Locale locale17 = java.util.Locale.PRC;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.fromCalendarFields(calendar18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.withDayOfMonth(8);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property30 = dateTime29.dayOfMonth();
        org.joda.time.DateTime dateTime32 = dateTime29.plusSeconds(10);
        org.joda.time.DateTime dateTime34 = dateTime29.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property36 = dateTime34.property(dateTimeFieldType35);
        int int37 = dateMidnight22.get(dateTimeFieldType35);
        int int38 = localDateTime19.indexOf(dateTimeFieldType35);
        int int39 = localDateTime19.getMillisOfDay();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime16, (org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.Period period42 = period40.withMillis(22);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period40, 12);
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime1.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime45.setMinuteOfHour(26160118);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26160118 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645514465788,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=5,MILLISECOND=788,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645514465788,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=5,MILLISECOND=788,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 26465788 + "'", int39 == 26465788);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(mutableDateTime45);
    }

    @Test
    public void test3055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3055");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        mutableDateTime6.add((long) 1);
        mutableDateTime6.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        mutableDateTime14.add((long) 1);
        org.joda.time.DateTime dateTime17 = mutableDateTime14.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, readableDuration18, periodType19);
        org.joda.time.Chronology chronology21 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(chronology21);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(20);
        boolean boolean30 = mutableDateTime22.isBefore((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime.Property property31 = dateTime29.weekOfWeekyear();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfMonth();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType43);
        mutablePeriod40.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        java.lang.String str46 = mutablePeriod40.toString();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadablePeriod) mutablePeriod40);
        mutablePeriod40.setValue(0, 2022);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod40.setPeriod((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration55 = new org.joda.time.Duration((long) (byte) 0);
        long long56 = duration55.getMillis();
        org.joda.time.Duration duration58 = new org.joda.time.Duration((long) (byte) 0);
        long long59 = duration58.getMillis();
        int int60 = duration55.compareTo((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Duration duration62 = duration52.withDurationAdded((org.joda.time.ReadableDuration) duration58, 10);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime64 = dateMidnight63.toMutableDateTime();
        mutableDateTime64.add((long) 1);
        org.joda.time.DateTime dateTime67 = mutableDateTime64.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.years();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime64, readableDuration68, periodType69);
        org.joda.time.Chronology chronology71 = mutableDateTime64.getChronology();
        org.joda.time.MutableDateTime mutableDateTime72 = org.joda.time.MutableDateTime.now(chronology71);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime76 = dateTime74.withDayOfYear((int) (byte) 1);
        int int77 = dateTime76.getDayOfMonth();
        org.joda.time.Duration duration79 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime80 = dateTime76.minus((org.joda.time.ReadableDuration) duration79);
        mutableDateTime72.add((org.joda.time.ReadableDuration) duration79);
        org.joda.time.Duration duration83 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean84 = duration79.isShorterThan((org.joda.time.ReadableDuration) duration83);
        org.joda.time.Duration duration86 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean87 = duration79.isLongerThan((org.joda.time.ReadableDuration) duration86);
        org.joda.time.Duration duration89 = duration58.withDurationAdded((org.joda.time.ReadableDuration) duration86, 999);
        org.joda.time.Duration duration91 = duration58.plus(35417L);
        org.joda.time.DateTime dateTime92 = dateTime29.minus((org.joda.time.ReadableDuration) duration91);
        org.joda.time.YearMonthDay yearMonthDay93 = dateTime29.toYearMonthDay();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT0.034S" + "'", str46, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(yearMonthDay93);
    }

    @Test
    public void test3056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3056");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval15.withDurationAfterStart(readableDuration16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        mutableDateTime19.add((long) 1);
        org.joda.time.DateTime dateTime22 = mutableDateTime19.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime19, readableDuration23, periodType24);
        java.lang.String str26 = mutableDateTime19.toString();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime19.millisOfSecond();
        boolean boolean28 = interval15.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        mutableDateTime19.addWeeks(9);
        mutableDateTime19.add((long) 2022);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime19.toMutableDateTime();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime39 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay34.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay41.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean45 = timeOfDay41.isSupported(dateTimeFieldType44);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property50 = dateTime49.dayOfMonth();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType53);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType57);
        mutablePeriod54.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod58);
        java.lang.String str60 = mutablePeriod54.toString();
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadablePeriod) mutablePeriod54);
        mutablePeriod54.setValue(0, 2022);
        mutablePeriod54.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay67 = timeOfDay41.plus((org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.TimeOfDay.Property property68 = timeOfDay67.millisOfSecond();
        org.joda.time.DurationField durationField69 = property68.getDurationField();
        org.joda.time.TimeOfDay timeOfDay70 = property68.getTimeOfDay();
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime72 = dateMidnight71.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.millisOfSecond();
        mutableDateTime72.set(dateTimeFieldType73, 0);
        int int76 = timeOfDay70.get(dateTimeFieldType73);
        boolean boolean77 = mutableDateTime19.isSupported(dateTimeFieldType73);
        int int78 = mutableDateTime19.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime19.setDateTime(270, 70, 26162285, 0, 69, 0, 26206928);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str26, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PT0.034S" + "'", str60, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 901 + "'", int76 == 901);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
    }

    @Test
    public void test3057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3057");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.DateTimeField dateTimeField36 = property34.getField();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType40);
        int int42 = mutablePeriod41.getMonths();
        org.joda.time.Interval interval43 = new org.joda.time.Interval(readableInstant37, (org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.weekyearOfCentury();
        long long48 = dateTimeField45.getDifferenceAsLong((long) 436, 1645514168237L);
        java.util.Locale locale50 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str51 = dateTimeField45.getAsText((long) 5, locale50);
        java.lang.String str52 = locale50.getDisplayScript();
        int int53 = dateTimeField36.getMaximumTextLength(locale50);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-52L) + "'", long48 == (-52L));
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "70" + "'", str51, "70");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
    }

    @Test
    public void test3058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3058");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        org.joda.time.format.DateTimeParser dateTimeParser28 = dateTimeFormatter27.getParser();
        org.joda.time.Chronology chronology29 = dateTimeFormatter27.getChronology();
        java.util.Locale locale30 = dateTimeFormatter27.getLocale();
        java.lang.Integer int31 = dateTimeFormatter27.getPivotYear();
        org.joda.time.Chronology chronology32 = dateTimeFormatter27.getChronology();
        java.lang.Appendable appendable33 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfMonth();
        org.joda.time.DateTime dateTime41 = dateTime38.plusSeconds(10);
        org.joda.time.DateTime dateTime43 = dateTime38.minus((long) (short) -1);
        org.joda.time.DateTime dateTime45 = dateTime43.plusMonths(26167775);
        org.joda.time.LocalDate localDate46 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property47 = localDate46.dayOfYear();
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.Interval interval50 = localDate46.toInterval(dateTimeZone49);
        long long53 = dateTimeZone49.adjustOffset((long) 11, true);
        long long57 = dateTimeZone49.convertLocalToUTC(1645514159731L, true, (long) (short) 100);
        org.joda.time.DateTime dateTime58 = dateTime43.withZone(dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) 26181768, dateTimeZone49);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter27.printTo(appendable33, (org.joda.time.ReadableInstant) dateMidnight59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(dateTimeParser28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNull(locale30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 11L + "'", long53 == 11L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1645514159731L + "'", long57 == 1645514159731L);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test3059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3059");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        int int9 = property6.getMinimumValue();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514466861,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=6,MILLISECOND=861,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test3060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3060");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.TimeOfDay timeOfDay36 = property34.getTimeOfDay();
        int int37 = property34.getMaximumValueOverall();
        java.lang.String str38 = property34.getAsShortText();
        java.lang.String str39 = property34.getAsString();
        org.joda.time.TimeOfDay timeOfDay40 = property34.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 999 + "'", int37 == 999);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "924" + "'", str38, "924");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "924" + "'", str39, "924");
        org.junit.Assert.assertNotNull(timeOfDay40);
    }

    @Test
    public void test3061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3061");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withYearOfEra(86399999);
        int int8 = localDateTime7.getSecondOfMinute();
        int int9 = localDateTime7.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withYearOfEra(2119);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.millisOfSecond();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514466918,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=6,MILLISECOND=918,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 863999 + "'", int9 == 863999);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test3062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3062");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setValue(0, 2022);
        mutablePeriod8.addDays((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight22.toMutableDateTime();
        mutableDateTime23.add((long) 1);
        org.joda.time.DateTime dateTime26 = mutableDateTime23.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.years();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime23, readableDuration27, periodType28);
        org.joda.time.Chronology chronology30 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        mutablePeriod8.add(35417L, chronology30);
        mutablePeriod8.addDays((int) (byte) -1);
        java.lang.String str35 = mutablePeriod8.toString();
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.yearOfCentury();
        int int38 = dateMidnight36.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight36.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight40.withDurationAdded((long) (byte) 0, (int) (short) 10);
        org.joda.time.DateMidnight.Property property44 = dateMidnight43.dayOfYear();
        org.joda.time.Duration duration45 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType50);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.months();
        mutablePeriod51.set(durationFieldType52, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.months();
        boolean boolean56 = mutablePeriod51.isSupported(durationFieldType55);
        int int57 = mutablePeriod47.indexOf(durationFieldType55);
        java.lang.String str58 = durationFieldType55.getName();
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType63);
        int int65 = mutablePeriod64.getMonths();
        org.joda.time.Interval interval66 = new org.joda.time.Interval(readableInstant60, (org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.Interval interval67 = interval66.toInterval();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType71);
        int int73 = mutablePeriod72.getMonths();
        org.joda.time.Interval interval74 = new org.joda.time.Interval(readableInstant68, (org.joda.time.ReadablePeriod) mutablePeriod72);
        org.joda.time.Interval interval75 = interval74.toInterval();
        boolean boolean76 = interval67.contains((org.joda.time.ReadableInterval) interval74);
        org.joda.time.Chronology chronology77 = interval67.getChronology();
        org.joda.time.Period period78 = new org.joda.time.Period((long) 59, chronology77);
        org.joda.time.DateTimeField dateTimeField79 = chronology77.halfdayOfDay();
        org.joda.time.DurationField durationField80 = chronology77.hours();
        boolean boolean81 = durationFieldType55.isSupported(chronology77);
        int int82 = mutablePeriod8.indexOf(durationFieldType55);
        org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime85 = dateMidnight84.toMutableDateTime();
        mutableDateTime85.add((long) 1);
        mutableDateTime85.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property90 = mutableDateTime85.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone91 = mutableDateTime85.getZone();
        org.joda.time.LocalDateTime localDateTime92 = new org.joda.time.LocalDateTime(0L, dateTimeZone91);
        java.lang.String str93 = dateTimeZone91.getID();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime94 = new org.joda.time.DateTime((java.lang.Object) int82, dateTimeZone91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "P2022Y-2DT35.451S" + "'", str35, "P2022Y-2DT35.451S");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "months" + "'", str58, "months");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime85);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Etc/UTC" + "'", str93, "Etc/UTC");
    }

    @Test
    public void test3063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3063");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        org.joda.time.Chronology chronology9 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekOfWeekyear();
        org.joda.time.DurationField durationField11 = dateTimeField10.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = timeOfDay12.getFieldTypes();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str17 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) timeOfDay12, 32770, locale15);
        java.util.Locale.setDefault(locale15);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        int int25 = mutablePeriod24.getMonths();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(readableInstant20, (org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.dayOfYear();
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now(chronology27);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology27);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 9, chronology27);
        org.joda.time.DateTimeField dateTimeField34 = chronology27.weekyear();
        org.joda.time.DurationField durationField35 = chronology27.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((java.lang.Object) locale15, chronology27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str8, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "32770" + "'", str17, "32770");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test3064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3064");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.months();
        mutablePeriod4.set(durationFieldType5, (int) 'a');
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        int int14 = mutablePeriod13.getMonths();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 100, chronology16);
        boolean boolean18 = durationFieldType5.isSupported(chronology16);
        boolean boolean19 = durationFieldType0.isSupported(chronology16);
        org.joda.time.DateTimeField dateTimeField20 = chronology16.yearOfCentury();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime23 = localTime21.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutablePeriod25.add(readableDuration26);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.months();
        mutablePeriod32.set(durationFieldType33, (int) 'a');
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType40);
        int int42 = mutablePeriod41.getMonths();
        org.joda.time.Interval interval43 = new org.joda.time.Interval(readableInstant37, (org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) 100, chronology44);
        boolean boolean46 = durationFieldType33.isSupported(chronology44);
        mutablePeriod25.setPeriod((long) '4', chronology44);
        org.joda.time.LocalTime localTime48 = localTime23.minus((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.LocalTime.Property property49 = localTime48.millisOfSecond();
        org.joda.time.LocalTime localTime50 = property49.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property54 = dateTime53.secondOfDay();
        org.joda.time.DateTime dateTime56 = dateTime53.withEra(1);
        org.joda.time.DateTime dateTime58 = dateTime53.plusMillis(0);
        org.joda.time.DateTime.Property property59 = dateTime53.hourOfDay();
        java.util.Locale locale60 = java.util.Locale.ITALY;
        java.lang.String str61 = locale60.getDisplayName();
        int int62 = property59.getMaximumShortTextLength(locale60);
        java.lang.String str63 = dateTimeField20.getAsShortText((org.joda.time.ReadablePartial) localTime50, 26172160, locale60);
        // The following exception was thrown during execution in test generation
        try {
            long long66 = dateTimeField20.set((long) 76, "687");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 687 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "italien (Italie)" + "'", str61, "italien (Italie)");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "26172160" + "'", str63, "26172160");
    }

    @Test
    public void test3065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3065");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.hourOfDay();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyearOfCentury();
        long long18 = dateTimeField16.roundHalfFloor((long) 1);
        mutableDateTime1.setRounding(dateTimeField16, (int) (byte) 0);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.months();
        mutablePeriod24.set(durationFieldType25, (int) 'a');
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        int int34 = mutablePeriod33.getMonths();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(readableInstant29, (org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100, chronology36);
        boolean boolean38 = durationFieldType25.isSupported(chronology36);
        mutableDateTime1.add(durationFieldType25, (int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.era();
        int int42 = mutableDateTime1.get(dateTimeFieldType41);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(locale44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = mutableDateTime1.toString("11 Jan 2022 02:20:52 GMT", locale44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: J");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1645514466997,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=6,MILLISECOND=997,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test3066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3066");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval3 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        boolean boolean5 = interval3.equals((java.lang.Object) 1L);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withMillis((long) (short) 0);
        boolean boolean9 = interval3.isBefore((org.joda.time.ReadableInstant) dateMidnight6);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((long) (byte) 0);
        long long12 = duration11.getStandardDays();
        org.joda.time.Interval interval13 = interval3.withDurationAfterStart((org.joda.time.ReadableDuration) duration11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime17.plusSeconds(10);
        org.joda.time.DateTime dateTime22 = dateTime17.minus((long) (short) -1);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMonths(26167775);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime26 = dateMidnight25.toMutableDateTime();
        mutableDateTime26.add((long) 1);
        org.joda.time.DateTime dateTime29 = mutableDateTime26.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.years();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime26, readableDuration30, periodType31);
        org.joda.time.Chronology chronology33 = mutableDateTime26.getChronology();
        org.joda.time.DateTime dateTime34 = dateTime24.toDateTime(chronology33);
        org.joda.time.Period period35 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime.Property property36 = dateTime34.dayOfYear();
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.fromMillisOfDay((long) 7);
        org.joda.time.LocalTime localTime40 = localTime38.minusMillis(26196152);
        org.joda.time.LocalTime localTime42 = localTime40.minusHours(32769);
        org.joda.time.DateTime dateTime43 = dateTime34.withFields((org.joda.time.ReadablePartial) localTime42);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test3067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3067");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate7 = property3.setCopy(2022);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfWeek();
        org.joda.time.LocalDate.Property property9 = localDate7.yearOfEra();
        org.joda.time.LocalDate localDate11 = localDate7.plusYears(26230722);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField13 = localDate7.getField(438);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 438");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test3068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3068");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekyear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514467060,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=7,MILLISECOND=60,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test3069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3069");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay4 = dateTime3.toYearMonthDay();
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withYear(59);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = property8.addToCopy(26164327);
        java.lang.String str12 = property8.getAsString();
        org.joda.time.DurationField durationField13 = property8.getRangeDurationField();
        org.joda.time.YearMonthDay yearMonthDay14 = property8.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.plusMonths(0);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "4" + "'", str12, "4");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
    }

    @Test
    public void test3070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3070");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutablePeriod4.add(readableDuration5);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100, chronology23);
        boolean boolean25 = durationFieldType12.isSupported(chronology23);
        mutablePeriod4.setPeriod((long) '4', chronology23);
        org.joda.time.LocalTime localTime27 = localTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod4);
        int int28 = localTime27.getMillisOfSecond();
        org.joda.time.Period period30 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period32 = period30.minusYears(8);
        org.joda.time.Period period34 = period30.withSeconds(11);
        int int35 = period34.getMinutes();
        org.joda.time.Period period36 = period34.toPeriod();
        org.joda.time.Period period38 = period34.plusWeeks(11);
        org.joda.time.Period period40 = period34.withDays(270);
        org.joda.time.LocalTime localTime41 = localTime27.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Chronology chronology42 = localTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.secondOfDay();
        org.joda.time.DateMidnight dateMidnight44 = org.joda.time.DateMidnight.now(chronology42);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 131 + "'", int28 == 131);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateMidnight44);
    }

    @Test
    public void test3071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3071");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateTime dateTime9 = dateTime3.plusYears((-1));
        org.joda.time.DateTime dateTime11 = dateTime9.withMillisOfSecond(0);
        boolean boolean12 = dateTime9.isAfterNow();
        org.joda.time.DateTime dateTime14 = dateTime9.minusMinutes(26200205);
        java.util.Locale locale15 = java.util.Locale.PRC;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.fromCalendarFields(calendar16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology21 = dateMidnight20.getChronology();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.withDayOfMonth(8);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfMonth();
        org.joda.time.DateTime dateTime30 = dateTime27.plusSeconds(10);
        org.joda.time.DateTime dateTime32 = dateTime27.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property34 = dateTime32.property(dateTimeFieldType33);
        int int35 = dateMidnight20.get(dateTimeFieldType33);
        int int36 = localDateTime17.indexOf(dateTimeFieldType33);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime17.minusWeeks(8);
        int int39 = localDateTime38.size();
        org.joda.time.LocalDateTime.Property property40 = localDateTime38.secondOfMinute();
        long long41 = property40.remainder();
        boolean boolean42 = dateTime9.equals((java.lang.Object) long41);
        org.joda.time.DateTime dateTime43 = dateTime9.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = dateTime43.withMonthOfYear(473);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 473 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645514467148,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=7,MILLISECOND=148,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(property40);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 148L + "'", long41 == 148L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test3072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3072");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        boolean boolean28 = dateTimeFormatter27.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter29 = dateTimeFormatter27.getPrinter();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfYear();
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.now(chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter27.withChronology(chronology37);
        boolean boolean43 = dateTimeFormatter42.isPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter44 = null;
        org.joda.time.format.DateTimeParser dateTimeParser45 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter44, dateTimeParser45);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType50 = periodType49.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType54);
        int int56 = mutablePeriod55.getMonths();
        org.joda.time.Interval interval57 = new org.joda.time.Interval(readableInstant51, (org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.Chronology chronology58 = interval57.getChronology();
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType63);
        int int65 = mutablePeriod64.getMonths();
        org.joda.time.Interval interval66 = new org.joda.time.Interval(readableInstant60, (org.joda.time.ReadablePeriod) mutablePeriod64);
        int[] intArray69 = chronology58.get((org.joda.time.ReadablePeriod) mutablePeriod64, 1L, (long) 4);
        org.joda.time.Period period70 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType49, chronology58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter46.withChronology(chronology58);
        java.lang.Integer int72 = dateTimeFormatter71.getPivotYear();
        org.joda.time.Chronology chronology73 = dateTimeFormatter71.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter42.withChronology(chronology73);
        java.lang.StringBuffer stringBuffer75 = null;
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType79);
        int int81 = mutablePeriod80.getMonths();
        org.joda.time.Interval interval82 = new org.joda.time.Interval(readableInstant76, (org.joda.time.ReadablePeriod) mutablePeriod80);
        org.joda.time.Chronology chronology83 = interval82.getChronology();
        org.joda.time.YearMonthDay yearMonthDay84 = new org.joda.time.YearMonthDay(chronology83);
        org.joda.time.YearMonthDay yearMonthDay86 = yearMonthDay84.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay88 = yearMonthDay84.plusYears(2);
        org.joda.time.DateTimeZone dateTimeZone90 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate91 = new org.joda.time.LocalDate(1L, dateTimeZone90);
        org.joda.time.Period period92 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay88, (org.joda.time.ReadablePartial) localDate91);
        int[] intArray93 = yearMonthDay88.getValues();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter42.printTo(stringBuffer75, (org.joda.time.ReadablePartial) yearMonthDay88);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(dateTimePrinter29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(yearMonthDay86);
        org.junit.Assert.assertNotNull(yearMonthDay88);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(intArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[2024, 2, 22]");
    }

    @Test
    public void test3073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3073");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.centuryOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType8 = periodType7.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        int int14 = mutablePeriod13.getMonths();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType21);
        int int23 = mutablePeriod22.getMonths();
        org.joda.time.Interval interval24 = new org.joda.time.Interval(readableInstant18, (org.joda.time.ReadablePeriod) mutablePeriod22);
        int[] intArray27 = chronology16.get((org.joda.time.ReadablePeriod) mutablePeriod22, 1L, (long) 4);
        org.joda.time.Period period28 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType7, chronology16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter4.withChronology(chronology16);
        org.joda.time.DateTimeField dateTimeField30 = chronology16.year();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight0.withChronology(chronology16);
        org.joda.time.DateTimeField dateTimeField32 = chronology16.hourOfDay();
        long long35 = dateTimeField32.add(1645514317069L, 13);
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645561117069L + "'", long35 == 1645561117069L);
    }

    @Test
    public void test3074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3074");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod18, 1L, (long) 4);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType3, chronology12);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(obj0, chronology12);
        org.joda.time.DurationField durationField26 = chronology12.millis();
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.YearMonthDay.Property property28 = yearMonthDay27.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime32 = dateMidnight29.toMutableDateTime();
        boolean boolean34 = dateMidnight29.isEqual((long) 2);
        int int35 = dateMidnight29.getMillisOfDay();
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        boolean boolean38 = localDate36.isSupported(dateTimeFieldType37);
        org.joda.time.LocalDate.Property property39 = localDate36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        long long42 = dateTimeField40.remainder((long) 10);
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = localDate43.isSupported(dateTimeFieldType44);
        int int46 = localDate43.getWeekOfWeekyear();
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.lang.String str48 = dateTimeField40.getAsText((org.joda.time.ReadablePartial) localDate43, locale47);
        java.util.Calendar calendar49 = dateMidnight29.toCalendar(locale47);
        java.lang.String str50 = locale47.getLanguage();
        java.util.Locale locale51 = java.util.Locale.UK;
        java.lang.String str52 = locale47.getDisplayVariant(locale51);
        java.lang.String str53 = locale51.getDisplayLanguage();
        java.lang.String str54 = property28.getAsShortText(locale51);
        org.joda.time.DateTimeField dateTimeField55 = property28.getField();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 10L + "'", long42 == 10L);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022" + "'", str48, "2022");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ja" + "'", str50, "ja");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "anglais" + "'", str53, "anglais");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "22" + "'", str54, "22");
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test3075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3075");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        long long6 = dateTimeField4.remainder((long) 10);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDate7.isSupported(dateTimeFieldType8);
        int int10 = localDate7.getWeekOfWeekyear();
        java.util.Locale locale11 = java.util.Locale.JAPANESE;
        java.lang.String str12 = dateTimeField4.getAsText((org.joda.time.ReadablePartial) localDate7, locale11);
        java.lang.String str13 = locale11.getISO3Language();
        java.util.Set<java.lang.String> strSet14 = locale11.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator15 = strSet14.spliterator();
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        boolean boolean18 = localDate16.isSupported(dateTimeFieldType17);
        org.joda.time.LocalDate.Property property19 = localDate16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        long long22 = dateTimeField20.remainder((long) 10);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = localDate23.isSupported(dateTimeFieldType24);
        int int26 = localDate23.getWeekOfWeekyear();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.lang.String str28 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDate23, locale27);
        java.lang.String str29 = locale27.getISO3Language();
        java.util.Set<java.lang.String> strSet30 = locale27.getUnicodeLocaleAttributes();
        java.util.Spliterator<java.lang.String> strSpliterator31 = strSet30.spliterator();
        boolean boolean32 = strSet14.addAll((java.util.Collection<java.lang.String>) strSet30);
        java.util.Iterator<java.lang.String> strItor33 = strSet14.iterator();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) strItor33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.util.Collections$EmptyIterator");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "jpn" + "'", str13, "jpn");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strSpliterator15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022" + "'", str28, "2022");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "jpn" + "'", str29, "jpn");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(strSpliterator31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strItor33);
    }

    @Test
    public void test3076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3076");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = dateTime1.withDayOfYear(26272873);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26272873 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test3077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3077");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(12);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight6.toMutableDateTime();
        boolean boolean11 = dateMidnight6.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight6.minusWeeks((int) ' ');
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfYear((int) (byte) 1);
        int int18 = dateTime17.getDayOfMonth();
        boolean boolean19 = dateMidnight6.isAfter((org.joda.time.ReadableInstant) dateTime17);
        java.util.GregorianCalendar gregorianCalendar20 = dateTime17.toGregorianCalendar();
        boolean boolean21 = dateTime3.equals((java.lang.Object) dateTime17);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        mutablePeriod25.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.months();
        mutablePeriod34.set(durationFieldType35, (int) 'a');
        mutablePeriod25.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType44);
        int int46 = mutablePeriod45.getMonths();
        org.joda.time.Interval interval47 = new org.joda.time.Interval(readableInstant41, (org.joda.time.ReadablePeriod) mutablePeriod45);
        org.joda.time.Chronology chronology48 = interval47.getChronology();
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay(chronology48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType53);
        int int55 = mutablePeriod54.getMonths();
        org.joda.time.Interval interval56 = new org.joda.time.Interval(readableInstant50, (org.joda.time.ReadablePeriod) mutablePeriod54);
        int[] intArray59 = chronology48.get((org.joda.time.ReadablePeriod) mutablePeriod54, 1L, (long) 4);
        mutablePeriod25.setPeriod((long) 'a', (long) (short) -1, chronology48);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(chronology48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval62 = new org.joda.time.Interval((java.lang.Object) boolean21, chronology48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514467293,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=7,MILLISECOND=293,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 0, 0, 0, 0, 0, 3]");
    }

    @Test
    public void test3078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3078");
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.centuryOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = null;
        org.joda.time.format.DateTimeParser dateTimeParser4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser4);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType9 = periodType8.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        int int15 = mutablePeriod14.getMonths();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(readableInstant10, (org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        int int24 = mutablePeriod23.getMonths();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableInstant19, (org.joda.time.ReadablePeriod) mutablePeriod23);
        int[] intArray28 = chronology17.get((org.joda.time.ReadablePeriod) mutablePeriod23, 1L, (long) 4);
        org.joda.time.Period period29 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType8, chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter5.withChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField31 = chronology17.year();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight1.withChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField33 = chronology17.weekyear();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology17);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(1645514278390L, chronology17);
        org.junit.Assert.assertNotNull(dateMidnight1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test3079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3079");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay4 = dateTime3.toYearMonthDay();
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withYear(59);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = property8.addToCopy(26164327);
        org.joda.time.YearMonthDay yearMonthDay12 = property8.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.minusDays(26296396);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField16 = yearMonthDay14.getField(249);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 249");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
    }

    @Test
    public void test3080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3080");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        int int7 = mutableDateTime6.getYearOfEra();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        mutablePeriod11.addHours((int) (byte) -1);
        mutablePeriod11.addYears(2022);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.LocalTime localTime20 = localTime3.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.LocalTime localTime22 = localTime20.plusSeconds(100);
        org.joda.time.LocalTime.Property property23 = localTime22.hourOfDay();
        org.joda.time.LocalTime localTime25 = localTime22.withMillisOfDay(37);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test3081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3081");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Interval interval21 = localDate17.toInterval(dateTimeZone20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        boolean boolean38 = interval28.contains((org.joda.time.ReadableInterval) interval36);
        boolean boolean39 = interval21.isBefore((org.joda.time.ReadableInterval) interval36);
        long long40 = interval36.getStartMillis();
        boolean boolean41 = interval6.overlaps((org.joda.time.ReadableInterval) interval36);
        org.joda.time.DateTime dateTime42 = interval6.getEnd();
        java.lang.String str43 = interval6.toString();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType47);
        int int49 = mutablePeriod48.getMonths();
        org.joda.time.Interval interval50 = new org.joda.time.Interval(readableInstant44, (org.joda.time.ReadablePeriod) mutablePeriod48);
        boolean boolean51 = interval6.isBefore((org.joda.time.ReadableInterval) interval50);
        org.joda.time.DateTime dateTime52 = interval50.getStart();
        java.lang.Object obj53 = null;
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType57 = periodType56.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType61);
        int int63 = mutablePeriod62.getMonths();
        org.joda.time.Interval interval64 = new org.joda.time.Interval(readableInstant58, (org.joda.time.ReadablePeriod) mutablePeriod62);
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        org.joda.time.YearMonthDay yearMonthDay66 = new org.joda.time.YearMonthDay(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType70);
        int int72 = mutablePeriod71.getMonths();
        org.joda.time.Interval interval73 = new org.joda.time.Interval(readableInstant67, (org.joda.time.ReadablePeriod) mutablePeriod71);
        int[] intArray76 = chronology65.get((org.joda.time.ReadablePeriod) mutablePeriod71, 1L, (long) 4);
        org.joda.time.Period period77 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType56, chronology65);
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate(obj53, chronology65);
        java.util.TimeZone timeZone80 = null;
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forTimeZone(timeZone80);
        org.joda.time.MutableDateTime mutableDateTime82 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone81);
        org.joda.time.DateTime dateTime83 = localDate78.toDateTimeAtMidnight(dateTimeZone81);
        int int84 = localDate78.getWeekyear();
        org.joda.time.LocalDate localDate86 = localDate78.withDayOfYear((int) (short) 1);
        boolean boolean87 = interval50.equals((java.lang.Object) (short) 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645514467720L + "'", long40 == 1645514467720L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T07:21:07.720Z/2022-02-22T07:21:07.754Z" + "'", str43, "2022-02-22T07:21:07.720Z/2022-02-22T07:21:07.754Z");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2022 + "'", int84 == 2022);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test3082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3082");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("CHN");
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        int int7 = mutableDateTime6.getYearOfEra();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.now();
        int int9 = localTime8.size();
        org.joda.time.LocalTime.Property property10 = localTime8.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localTime8.toDateTimeToday(dateTimeZone11);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime6, dateTimeZone11);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfMonth();
        int int19 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) 32770, dateTimeZone11);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Locale.setDefault(locale22);
        java.lang.String str24 = dateTimeZone11.getShortName((long) 26276332, locale22);
        java.util.Set<java.lang.String> strSet25 = locale22.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = timeZone1.getDisplayName(true, 1970, locale22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 1970");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertNotNull(strSet25);
    }

    @Test
    public void test3083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3083");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfEra();
        org.joda.time.LocalDate.Property property3 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate5 = localDate0.withYear(26168880);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) 100, chronology14);
        org.joda.time.Chronology chronology16 = chronology14.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) 26168880, chronology14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test3084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3084");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Interval interval15 = interval14.toInterval();
        boolean boolean16 = interval7.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property21 = dateTime20.weekOfWeekyear();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property26 = dateTime25.minuteOfHour();
        org.joda.time.DateTime dateTime27 = property26.roundCeilingCopy();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean29 = interval7.contains((org.joda.time.ReadableInterval) interval28);
        java.lang.String str30 = interval7.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T07:21:07.766Z/2022-02-22T07:21:07.800Z" + "'", str30, "2022-02-22T07:21:07.766Z/2022-02-22T07:21:07.800Z");
    }

    @Test
    public void test3085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3085");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusWeeks(0);
        boolean boolean22 = mutablePeriod8.equals((java.lang.Object) 0);
        mutablePeriod8.clear();
        mutablePeriod8.setSeconds((int) 'x');
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test3086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3086");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate localDate4 = localDate0.plusMonths((int) '#');
        org.joda.time.LocalDate.Property property5 = localDate4.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property5.setCopy(54);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) ' ', chronology9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.months();
        mutablePeriod14.set(durationFieldType15, (int) 'a');
        mutablePeriod10.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        mutablePeriod14.setDays(0);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        mutablePeriod14.setPeriod(0L, chronology29);
        org.joda.time.MutablePeriod mutablePeriod31 = mutablePeriod14.toMutablePeriod();
        java.lang.Object obj32 = mutablePeriod14.clone();
        org.joda.time.LocalDate localDate33 = localDate7.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((java.lang.Object) mutablePeriod14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MutablePeriod");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0S");
        org.junit.Assert.assertNotNull(localDate33);
    }

    @Test
    public void test3087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3087");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra((int) (byte) 0);
        java.util.Date date9 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay10 = org.joda.time.YearMonthDay.fromDateFields(date9);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusYears(2022);
        org.joda.time.DateTime dateTime13 = dateTime1.withFields((org.joda.time.ReadablePartial) yearMonthDay10);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay10.plusYears(1907);
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
    }

    @Test
    public void test3088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3088");
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(0, 26160118, 598, 26382314, 40, 26382355, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26382314 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test3089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3089");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.year();
        int int7 = localDateTime2.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withMonthOfYear(26352737);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26352737 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514467947,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=7,MILLISECOND=947,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
    }

    @Test
    public void test3090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3090");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight11 = yearMonthDay10.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        mutableDateTime13.add((long) 1);
        mutableDateTime13.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime13.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime13.getZone();
        org.joda.time.DateTime dateTime20 = yearMonthDay10.toDateTimeAtCurrentTime(dateTimeZone19);
        java.lang.String str22 = dateTimeZone19.getShortName(1645514361623L);
        int int24 = dateTimeZone19.getOffsetFromLocal((long) 26174743);
        int int26 = dateTimeZone19.getStandardOffset((long) 26293596);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test3091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3091");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        org.joda.time.LocalDate localDate4 = localDate1.withDayOfYear(59);
        org.joda.time.DateTime dateTime5 = localDate4.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate7 = localDate4.withWeekyear(26360866);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test3092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3092");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.year();
        int int7 = localDateTime2.getWeekyear();
        int int8 = localDateTime2.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.plusMonths(141);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514468006,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=8,MILLISECOND=6,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test3093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3093");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours(1);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 399, dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval7 = new org.joda.time.Interval(1645514449818L, 1645514375652L, dateTimeZone4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
    }

    @Test
    public void test3094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3094");
        org.joda.time.Period period1 = org.joda.time.Period.months((-219));
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate2.yearOfEra();
        org.joda.time.Interval interval6 = localDate2.toInterval();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDate localDate9 = localDate2.withFieldAdded(durationFieldType7, 20);
        org.joda.time.Period period11 = period1.withFieldAdded(durationFieldType7, 26166853);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(period11);
    }

    @Test
    public void test3095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3095");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.DateMidnight dateMidnight2 = localDate0.toDateMidnight();
        org.joda.time.LocalDate.Property property3 = localDate0.weekOfWeekyear();
        org.joda.time.LocalDate localDate5 = localDate0.plusMonths(12);
        org.joda.time.LocalDate localDate7 = localDate0.withWeekyear(2189219);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test3096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3096");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate7 = property3.setCopy(2022);
        org.joda.time.LocalDate localDate8 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate10 = property3.addToCopy(365);
        org.joda.time.DateTimeField dateTimeField11 = property3.getField();
        org.joda.time.LocalDate localDate12 = property3.getLocalDate();
        org.joda.time.LocalDate localDate13 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDate.Property property14 = localDate13.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = localDate13.withEra(26449986);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26449986 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test3097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3097");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight0.toMutableDateTime();
        boolean boolean5 = dateMidnight0.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.minusWeeks((int) ' ');
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear((int) (byte) 1);
        int int12 = dateTime11.getDayOfMonth();
        boolean boolean13 = dateMidnight0.isAfter((org.joda.time.ReadableInstant) dateTime11);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime11.toGregorianCalendar();
        gregorianCalendar14.setFirstDayOfWeek(63);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
    }

    @Test
    public void test3098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3098");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        int int14 = mutablePeriod13.getMonths();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadablePeriod) mutablePeriod13);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePeriod) mutablePeriod13, 1L, (long) 4);
        org.joda.time.DateTimeField dateTimeField19 = chronology7.secondOfMinute();
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology7);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test3099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3099");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone2);
        int int4 = mutableDateTime3.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.plus(readableDuration7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight5.withYearOfEra(12);
        mutableDateTime3.setTime((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withMillis((long) 2013);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight13);
    }

    @Test
    public void test3100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3100");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        int int6 = mutablePeriod5.getMonths();
        org.joda.time.Interval interval7 = new org.joda.time.Interval(readableInstant1, (org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.dayOfYear();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int int28 = mutablePeriod20.getMonths();
        mutablePeriod20.setPeriod((long) (byte) 0);
        int[] intArray33 = chronology8.get((org.joda.time.ReadablePeriod) mutablePeriod20, 10L, (long) 26162430);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 'u', chronology8);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 7, 16, 2, 420]");
    }

    @Test
    public void test3101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3101");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.minusMonths((int) (short) -1);
        int int16 = yearMonthDay13.size();
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        boolean boolean20 = localDate18.isSupported(dateTimeFieldType19);
        org.joda.time.LocalDate.Property property21 = localDate18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        long long24 = dateTimeField22.remainder((long) 10);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        boolean boolean27 = localDate25.isSupported(dateTimeFieldType26);
        int int28 = localDate25.getWeekOfWeekyear();
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.lang.String str30 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDate25, locale29);
        java.lang.String str31 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay13, 2000, locale29);
        org.joda.time.DurationField durationField32 = dateTimeField4.getLeapDurationField();
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property34 = localDate33.dayOfYear();
        org.joda.time.DateMidnight dateMidnight35 = localDate33.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight36 = localDate33.toDateMidnight();
        org.joda.time.LocalDate.Property property37 = localDate33.year();
        int int38 = localDate33.getDayOfWeek();
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDate33, locale39);
        java.lang.String str41 = dateTimeField4.toString();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2000" + "'", str31, "2000");
        org.junit.Assert.assertNull(durationField32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022" + "'", str40, "2022");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DateTimeField[yearOfEra]" + "'", str41, "DateTimeField[yearOfEra]");
    }

    @Test
    public void test3102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3102");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMonths(436);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime10 = property9.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMonths((int) 'x');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDate(39, 26242316, 59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26242316 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514469024,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=9,MILLISECOND=24,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test3103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3103");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.Interval interval4 = localDate0.toInterval(dateTimeZone3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        boolean boolean21 = interval11.contains((org.joda.time.ReadableInterval) interval19);
        boolean boolean22 = interval4.isBefore((org.joda.time.ReadableInterval) interval19);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        int int28 = mutablePeriod27.getMonths();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableInstant23, (org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.MutableInterval mutableInterval31 = interval29.toMutableInterval();
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = localDate32.isSupported(dateTimeFieldType33);
        org.joda.time.LocalDate.Property property35 = localDate32.yearOfEra();
        org.joda.time.Interval interval36 = localDate32.toInterval();
        boolean boolean37 = interval36.isBeforeNow();
        org.joda.time.Interval interval38 = interval36.toInterval();
        boolean boolean39 = interval38.containsNow();
        boolean boolean40 = mutableInterval31.contains((org.joda.time.ReadableInterval) interval38);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight41.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.withDayOfYear(9);
        org.joda.time.Interval interval48 = dateMidnight47.toInterval();
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        boolean boolean51 = localDate49.isSupported(dateTimeFieldType50);
        org.joda.time.LocalDate.Property property52 = localDate49.yearOfEra();
        org.joda.time.DateTimeField dateTimeField53 = property52.getField();
        org.joda.time.LocalDate localDate54 = property52.roundCeilingCopy();
        int int55 = localDate54.getDayOfMonth();
        int int56 = localDate54.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Interval interval58 = localDate54.toInterval(dateTimeZone57);
        org.joda.time.Interval interval59 = interval48.gap((org.joda.time.ReadableInterval) interval58);
        boolean boolean61 = interval59.contains((long) 86399);
        org.joda.time.MutableInterval mutableInterval62 = interval59.toMutableInterval();
        org.joda.time.Interval interval63 = interval38.overlap((org.joda.time.ReadableInterval) interval59);
        boolean boolean64 = interval19.contains((org.joda.time.ReadableInterval) interval63);
        long long65 = interval63.getStartMillis();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutableInterval31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(mutableInterval62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1645488000000L + "'", long65 == 1645488000000L);
    }

    @Test
    public void test3104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3104");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        long long24 = duration23.getStandardDays();
        org.joda.time.Duration duration25 = duration16.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.Duration duration28 = duration23.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Seconds seconds29 = duration27.toStandardSeconds();
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime31 = dateMidnight30.toMutableDateTime();
        mutableDateTime31.add((long) 1);
        org.joda.time.DateTime dateTime34 = mutableDateTime31.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.years();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime31, readableDuration35, periodType36);
        java.lang.String str38 = mutableDateTime31.toString();
        org.joda.time.Chronology chronology39 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.weekOfWeekyear();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.months();
        mutablePeriod44.set(durationFieldType45, (int) 'a');
        mutablePeriod44.addHours((int) (byte) -1);
        mutablePeriod44.addYears(2022);
        int[] intArray54 = chronology39.get((org.joda.time.ReadablePeriod) mutablePeriod44, 35417L, (long) 4);
        org.joda.time.DateTimeField dateTimeField55 = chronology39.hourOfDay();
        boolean boolean56 = duration27.equals((java.lang.Object) chronology39);
        org.joda.time.Duration duration58 = org.joda.time.Duration.millis(1641116552725L);
        org.joda.time.Duration duration59 = duration27.plus((org.joda.time.ReadableDuration) duration58);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str38, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 0, 0, 0, 0, 0, -35, -413]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration59);
    }

    @Test
    public void test3105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3105");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        java.util.Locale locale2 = java.util.Locale.ITALY;
        boolean boolean3 = localTime0.equals((java.lang.Object) locale2);
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay((long) (short) 10);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.plusMinutes((int) (byte) 100);
        org.joda.time.DateTime dateTime8 = timeOfDay5.toDateTimeToday();
        org.joda.time.LocalTime localTime9 = localTime0.withFields((org.joda.time.ReadablePartial) timeOfDay5);
        org.joda.time.TimeOfDay.Property property10 = timeOfDay5.minuteOfHour();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test3106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3106");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Days days8 = period7.toStandardDays();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, (long) 2, periodType11);
        int int13 = period12.getWeeks();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Period period16 = period12.withFieldAdded(durationFieldType14, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period18 = period7.withFieldAdded(durationFieldType14, (-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'halfdays'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test3107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3107");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        int int10 = mutableDateTime9.getMinuteOfDay();
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getDisplayScript();
        java.lang.String str14 = mutableDateTime9.toString("\ud504\ub791\uc2a4\uc5b4", locale12);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight15.toMutableDateTime();
        mutableDateTime16.add((long) 1);
        org.joda.time.DateTime dateTime19 = mutableDateTime16.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime16, readableDuration20, periodType21);
        java.lang.String str23 = mutableDateTime16.toString();
        org.joda.time.Chronology chronology24 = mutableDateTime16.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.days();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.hourOfHalfday();
        int int28 = dateTimeField26.getMaximumValue((long) 26197883);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfMonth();
        org.joda.time.DateTime dateTime36 = dateTime33.plusSeconds(10);
        org.joda.time.DateTime.Property property37 = dateTime36.year();
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime42 = dateTime40.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime43 = timeOfDay38.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.TimeOfDay timeOfDay45 = timeOfDay38.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay45.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean49 = timeOfDay45.isSupported(dateTimeFieldType48);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime53 = dateTime51.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property54 = dateTime53.dayOfMonth();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType57);
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType61);
        mutablePeriod58.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod62);
        java.lang.String str64 = mutablePeriod58.toString();
        org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadablePeriod) mutablePeriod58);
        mutablePeriod58.setValue(0, 2022);
        mutablePeriod58.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay71 = timeOfDay45.plus((org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.TimeOfDay.Property property72 = timeOfDay71.millisOfSecond();
        org.joda.time.DurationField durationField73 = property72.getDurationField();
        org.joda.time.TimeOfDay timeOfDay74 = property72.getTimeOfDay();
        int int75 = property72.getMaximumValueOverall();
        java.util.Locale locale77 = java.util.Locale.CHINA;
        java.util.Locale locale78 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(locale78);
        java.lang.String str80 = locale77.getDisplayVariant(locale78);
        org.joda.time.TimeOfDay timeOfDay81 = property72.setCopy("1", locale77);
        java.lang.String str82 = property37.getAsShortText(locale77);
        java.lang.String str83 = dateTimeField26.getAsText(459, locale77);
        java.lang.String str84 = locale12.getDisplayName(locale77);
        java.lang.String str85 = locale77.getDisplayLanguage();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 441 + "'", int10 == 441);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str14, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str23, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 11 + "'", int28 == 11);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT0.034S" + "'", str64, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(timeOfDay74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 999 + "'", int75 == 999);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar79);
// flaky:         org.junit.Assert.assertEquals(calendar79.toString(), "java.util.GregorianCalendar[time=1645514470224,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=10,MILLISECOND=224,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(timeOfDay81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "1969" + "'", str82, "1969");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "459" + "'", str83, "459");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u65e5\u6587" + "'", str84, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "chinois" + "'", str85, "chinois");
    }

    @Test
    public void test3108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3108");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        int int6 = mutablePeriod5.getMonths();
        org.joda.time.Interval interval7 = new org.joda.time.Interval(readableInstant1, (org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        int int14 = mutablePeriod13.getMonths();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        boolean boolean17 = interval7.contains((org.joda.time.ReadableInterval) interval15);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfYear();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.Interval interval22 = localDate18.toInterval(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        int int28 = mutablePeriod27.getMonths();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableInstant23, (org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType34);
        int int36 = mutablePeriod35.getMonths();
        org.joda.time.Interval interval37 = new org.joda.time.Interval(readableInstant31, (org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        boolean boolean39 = interval29.contains((org.joda.time.ReadableInterval) interval37);
        boolean boolean40 = interval22.isBefore((org.joda.time.ReadableInterval) interval37);
        long long41 = interval37.getStartMillis();
        boolean boolean42 = interval7.overlaps((org.joda.time.ReadableInterval) interval37);
        org.joda.time.DateTime dateTime43 = interval7.getEnd();
        java.lang.String str44 = interval7.toString();
        java.lang.Object obj45 = null;
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType49 = periodType48.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType53);
        int int55 = mutablePeriod54.getMonths();
        org.joda.time.Interval interval56 = new org.joda.time.Interval(readableInstant50, (org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.Chronology chronology57 = interval56.getChronology();
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay(chronology57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType62);
        int int64 = mutablePeriod63.getMonths();
        org.joda.time.Interval interval65 = new org.joda.time.Interval(readableInstant59, (org.joda.time.ReadablePeriod) mutablePeriod63);
        int[] intArray68 = chronology57.get((org.joda.time.ReadablePeriod) mutablePeriod63, 1L, (long) 4);
        org.joda.time.Period period69 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType48, chronology57);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate(obj45, chronology57);
        org.joda.time.DateTimeField dateTimeField71 = chronology57.yearOfEra();
        org.joda.time.Interval interval72 = interval7.withChronology(chronology57);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) 2, chronology57);
        mutablePeriod73.addHours(26172160);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645514470315L + "'", long41 == 1645514470315L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T07:21:10.314Z/2022-02-22T07:21:10.348Z" + "'", str44, "2022-02-22T07:21:10.314Z/2022-02-22T07:21:10.348Z");
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(interval72);
    }

    @Test
    public void test3109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3109");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.months();
        mutablePeriod3.set(durationFieldType4, (int) 'a');
        mutablePeriod3.addHours((int) (byte) -1);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        boolean boolean14 = mutablePeriod3.equals((java.lang.Object) int13);
        int int15 = mutablePeriod3.getYears();
        mutablePeriod3.setHours(482);
        int int18 = mutablePeriod3.getMillis();
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 34 + "'", int18 == 34);
    }

    @Test
    public void test3110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3110");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.plusYears(2);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(1L, dateTimeZone14);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay12, (org.joda.time.ReadablePartial) localDate15);
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(dateTimeZone18);
        long long22 = dateTimeZone18.nextTransition(1L);
        org.joda.time.DateMidnight dateMidnight23 = yearMonthDay12.toDateMidnight(dateTimeZone18);
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = null;
        org.joda.time.format.DateTimeParser dateTimeParser25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter24, dateTimeParser25);
        java.lang.Object obj27 = null;
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType31 = periodType30.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType35);
        int int37 = mutablePeriod36.getMonths();
        org.joda.time.Interval interval38 = new org.joda.time.Interval(readableInstant32, (org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(chronology39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType44);
        int int46 = mutablePeriod45.getMonths();
        org.joda.time.Interval interval47 = new org.joda.time.Interval(readableInstant41, (org.joda.time.ReadablePeriod) mutablePeriod45);
        int[] intArray50 = chronology39.get((org.joda.time.ReadablePeriod) mutablePeriod45, 1L, (long) 4);
        org.joda.time.Period period51 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType30, chronology39);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate(obj27, chronology39);
        org.joda.time.DurationField durationField53 = chronology39.millis();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter26.withChronology(chronology39);
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay12.withChronologyRetainFields(chronology39);
        org.joda.time.TimeOfDay timeOfDay57 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime61 = dateTime59.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime62 = timeOfDay57.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay57.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay66 = timeOfDay64.plusMillis((int) (short) -1);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime70 = dateTime68.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property71 = dateTime70.dayOfMonth();
        org.joda.time.DateTime dateTime73 = dateTime70.plusSeconds(10);
        org.joda.time.DateTime dateTime75 = dateTime70.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property77 = dateTime75.property(dateTimeFieldType76);
        boolean boolean78 = timeOfDay64.isSupported(dateTimeFieldType76);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay.Property property79 = yearMonthDay56.property(dateTimeFieldType76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'era' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test3111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3111");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.LocalDate.Property property4 = localDate0.yearOfEra();
        int int5 = localDate0.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate7 = localDate0.withWeekyear(26160118);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears(610);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((java.lang.Object) localDate9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test3112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3112");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        mutableDateTime1.addMinutes((int) ' ');
        int int11 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = dateTime14.withWeekOfWeekyear((int) '4');
        boolean boolean20 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property21 = dateTime14.minuteOfDay();
        int int22 = property21.getMinimumValue();
        org.joda.time.DateTime dateTime23 = property21.withMinimumValue();
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        java.lang.String str25 = dateTime23.toString();
        org.joda.time.DateTime.Property property26 = dateTime23.weekOfWeekyear();
        org.joda.time.Period period28 = org.joda.time.Period.hours((int) 'x');
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadablePeriod) period28);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str8, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1969-12-31T00:00:59.999Z" + "'", str25, "1969-12-31T00:00:59.999Z");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(period28);
    }

    @Test
    public void test3113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3113");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        boolean boolean28 = dateTimeFormatter27.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter29 = dateTimeFormatter27.getPrinter();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfYear();
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.now(chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter27.withChronology(chronology37);
        boolean boolean43 = dateTimeFormatter42.isPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter44 = null;
        org.joda.time.format.DateTimeParser dateTimeParser45 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter44, dateTimeParser45);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType50 = periodType49.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType54);
        int int56 = mutablePeriod55.getMonths();
        org.joda.time.Interval interval57 = new org.joda.time.Interval(readableInstant51, (org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.Chronology chronology58 = interval57.getChronology();
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType63);
        int int65 = mutablePeriod64.getMonths();
        org.joda.time.Interval interval66 = new org.joda.time.Interval(readableInstant60, (org.joda.time.ReadablePeriod) mutablePeriod64);
        int[] intArray69 = chronology58.get((org.joda.time.ReadablePeriod) mutablePeriod64, 1L, (long) 4);
        org.joda.time.Period period70 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType49, chronology58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter46.withChronology(chronology58);
        java.lang.Integer int72 = dateTimeFormatter71.getPivotYear();
        org.joda.time.Chronology chronology73 = dateTimeFormatter71.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter42.withChronology(chronology73);
        org.joda.time.format.DateTimeParser dateTimeParser75 = dateTimeFormatter74.getParser();
        boolean boolean76 = dateTimeFormatter74.isParser();
        java.lang.Integer int77 = dateTimeFormatter74.getPivotYear();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(dateTimePrinter29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNull(dateTimeParser75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(int77);
    }

    @Test
    public void test3114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3114");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime3.size();
        org.joda.time.LocalTime.Property property5 = localTime3.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = localTime3.toDateTimeToday(dateTimeZone6);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime1, dateTimeZone6);
        boolean boolean9 = mutableDateTime1.isBeforeNow();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setTime(399, 26246487, 0, 32770);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 399 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test3115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3115");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.hourOfHalfday();
        org.joda.time.DurationField durationField11 = chronology8.millis();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.weekOfWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test3116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3116");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = timeOfDay0.getFieldTypes();
        org.joda.time.Chronology chronology2 = timeOfDay0.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay0.withMillisOfSecond(4);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = timeOfDay0.getFieldTypes();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        boolean boolean22 = interval12.contains((org.joda.time.ReadableInterval) interval20);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime24 = dateMidnight23.toMutableDateTime();
        mutableDateTime24.add((long) 1);
        org.joda.time.DateTime dateTime27 = mutableDateTime24.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.years();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime24, readableDuration28, periodType29);
        java.lang.String str31 = mutableDateTime24.toString();
        mutableDateTime24.addMinutes((int) ' ');
        int int34 = mutableDateTime24.getCenturyOfEra();
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime40 = timeOfDay35.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime42 = dateTime37.withWeekOfWeekyear((int) '4');
        boolean boolean43 = mutableDateTime24.isBefore((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime.Property property44 = dateTime37.minuteOfDay();
        int int45 = property44.getMinimumValue();
        org.joda.time.DateTime dateTime46 = property44.withMinimumValue();
        org.joda.time.DateTime dateTime47 = property44.roundCeilingCopy();
        boolean boolean48 = interval12.isAfter((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Chronology chronology49 = interval12.getChronology();
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay0.withChronologyRetainFields(chronology49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField52 = timeOfDay50.getField(99);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 99");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str31, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20 + "'", int34 == 20);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(timeOfDay50);
    }

    @Test
    public void test3117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3117");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval3 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        long long4 = interval3.getEndMillis();
        long long5 = interval3.toDurationMillis();
        org.joda.time.DateTime dateTime6 = interval3.getEnd();
        org.joda.time.DateTime dateTime7 = interval3.getStart();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfCentury();
        int int10 = dateMidnight8.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        mutableDateTime14.add((long) 1);
        mutableDateTime14.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime14.weekOfWeekyear();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight8, (org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Interval interval21 = interval3.gap((org.joda.time.ReadableInterval) interval20);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        java.lang.String str23 = periodType22.toString();
        org.joda.time.PeriodType periodType24 = periodType22.withMinutesRemoved();
        org.joda.time.PeriodType periodType25 = periodType24.withYearsRemoved();
        org.joda.time.PeriodType periodType26 = periodType25.withMillisRemoved();
        org.joda.time.PeriodType periodType27 = periodType25.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(periodType25);
        boolean boolean29 = interval3.equals((java.lang.Object) periodType25);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PeriodType[Years]" + "'", str23, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test3118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3118");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime dateTime8 = dateTime3.minus((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime3.minusDays(26160118);
        org.joda.time.DateTime dateTime12 = dateTime10.minusSeconds(14);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test3119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3119");
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100, chronology12);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 10, (int) (byte) 1, 3, (int) (short) 1, chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField17 = chronology12.hourOfHalfday();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test3120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3120");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        mutableDateTime1.addMinutes((int) ' ');
        int int11 = mutableDateTime1.getCenturyOfEra();
        mutableDateTime1.setDayOfYear(4);
        mutableDateTime1.setTime(1645514165730L);
        org.joda.time.Period period17 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period19 = period17.minusYears(8);
        org.joda.time.Period period21 = period17.withSeconds(11);
        int int22 = period21.getMinutes();
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period21);
        org.joda.time.MutablePeriod mutablePeriod24 = period21.toMutablePeriod();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str8, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod24);
    }

    @Test
    public void test3121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3121");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (byte) 0);
        long long2 = duration1.getMillis();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfYear();
        org.joda.time.DateMidnight dateMidnight5 = localDate3.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.Hours hours7 = duration1.toStandardHours();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        mutableDateTime9.add((long) 1);
        org.joda.time.DateTime dateTime12 = mutableDateTime9.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.era();
        boolean boolean14 = mutableDateTime9.isSupported(dateTimeFieldType13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime9.hourOfDay();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekyearOfCentury();
        long long26 = dateTimeField24.roundHalfFloor((long) 1);
        mutableDateTime9.setRounding(dateTimeField24, (int) (byte) 0);
        mutableDateTime9.setTime((long) 10);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime();
        boolean boolean32 = mutableDateTime9.isBefore((org.joda.time.ReadableInstant) mutableDateTime31);
        java.lang.Object obj33 = mutableDateTime9.clone();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime9.minuteOfDay();
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType36 = periodType35.withWeeksRemoved();
        org.joda.time.PeriodType periodType37 = periodType35.withMillisRemoved();
        org.joda.time.Period period38 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime9, periodType37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period40 = period38.plusMonths(26369806);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "2022-02-22T00:00:00.010Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "2022-02-22T00:00:00.010Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "2022-02-22T00:00:00.010Z");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period38);
    }

    @Test
    public void test3122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3122");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.plusYears(2);
        java.util.Date date18 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay19 = org.joda.time.YearMonthDay.fromDateFields(date18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.minusYears(2022);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay19.plusYears(32770);
        java.lang.String str25 = yearMonthDay19.toString("0");
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay8, (org.joda.time.ReadablePartial) yearMonthDay19, periodType26);
        org.joda.time.DateTime dateTime28 = yearMonthDay19.toDateTimeAtMidnight();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test3123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3123");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withDayOfMonth(8);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.DateTime dateTime10 = dateTime7.plusSeconds(10);
        org.joda.time.DateTime dateTime12 = dateTime7.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        int int15 = dateMidnight0.get(dateTimeFieldType13);
        org.joda.time.Period period17 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period19 = period17.minusYears(8);
        org.joda.time.Period period21 = period17.withSeconds(11);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType34);
        int int36 = mutablePeriod35.getMonths();
        org.joda.time.Interval interval37 = new org.joda.time.Interval(readableInstant31, (org.joda.time.ReadablePeriod) mutablePeriod35);
        int[] intArray40 = chronology29.get((org.joda.time.ReadablePeriod) mutablePeriod35, 1L, (long) 4);
        org.joda.time.PeriodType periodType41 = mutablePeriod35.getPeriodType();
        org.joda.time.Period period42 = period17.normalizedStandard(periodType41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight0.withPeriodAdded((org.joda.time.ReadablePeriod) period17, 0);
        org.joda.time.DateMidnight.Property property45 = dateMidnight0.weekyear();
        org.joda.time.DateMidnight dateMidnight46 = property45.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight46);
    }

    @Test
    public void test3124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3124");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.DurationField durationField2 = property1.getRangeDurationField();
        org.joda.time.LocalDate localDate3 = property1.roundHalfEvenCopy();
        long long4 = property1.remainder();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test3125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3125");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        org.joda.time.format.DateTimeParser dateTimeParser4 = dateTimeFormatter2.getParser();
        java.lang.Integer int5 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withZoneUTC();
        java.io.Writer writer7 = null;
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay((long) (short) 10);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.plusMinutes((int) (byte) 100);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay9.withMillisOfSecond(365);
        org.joda.time.Chronology chronology14 = timeOfDay9.getChronology();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay9.plusMinutes(5);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer7, (org.joda.time.ReadablePartial) timeOfDay9);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNull(dateTimeParser4);
        org.junit.Assert.assertNull(int5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(timeOfDay16);
    }

    @Test
    public void test3126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3126");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        org.joda.time.DateTime.Property property7 = dateTime1.hourOfDay();
        int int8 = dateTime1.getDayOfWeek();
        org.joda.time.DateTime dateTime10 = dateTime1.minusMonths(26343001);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime1.withDate(0, 70, 535);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test3127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3127");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test3128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3128");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfEra();
        org.joda.time.LocalDate.Property property3 = localDate0.monthOfYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test3129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3129");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("2022-02-22T07:21:07.720Z/2022-02-22T07:21:07.754Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:21:07.720Z/2022-02-22T07:21:...\" is malformed at \"T07:21:07.720Z/2022-02-22T07:21:...\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3130");
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        int int8 = mutablePeriod7.getMonths();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableInstant3, (org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.Chronology chronology10 = interval9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay((int) (byte) 10, 20, 22, chronology10);
        org.joda.time.DateTimeField dateTimeField15 = chronology10.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.monthOfYear();
        int int17 = dateTimeField16.getMaximumValue();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder21 = builder19.setLocale(locale20);
        java.lang.String str22 = locale20.getVariant();
        java.lang.String str23 = dateTimeField16.getAsShortText((long) 26382314, locale20);
        java.lang.String str24 = locale20.toLanguageTag();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "janv." + "'", str23, "janv.");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fr" + "'", str24, "fr");
    }

    @Test
    public void test3131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3131");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.lang.String str9 = dateTimeZone7.getName((long) 100);
        org.joda.time.DateTime dateTime10 = dateTime5.withZoneRetainFields(dateTimeZone7);
        org.joda.time.DateTime dateTime11 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property12 = dateTime5.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test3132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3132");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfDay(436);
        org.joda.time.Chronology chronology8 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfEra();
        boolean boolean12 = property11.isLeap();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514472092,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=12,MILLISECOND=92,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3133");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = localTime1.plusMinutes(0);
        org.joda.time.Period period6 = org.joda.time.Period.months(5);
        int int7 = period6.getMinutes();
        org.joda.time.Period period8 = period6.toPeriod();
        org.joda.time.LocalTime localTime9 = localTime4.minus((org.joda.time.ReadablePeriod) period6);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test3134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3134");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromDateFields(date5);
        org.joda.time.LocalTime localTime8 = localTime6.withMillisOfDay(26223340);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime11 = localTime9.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutablePeriod13.add(readableDuration14);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.months();
        mutablePeriod20.set(durationFieldType21, (int) 'a');
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100, chronology32);
        boolean boolean34 = durationFieldType21.isSupported(chronology32);
        mutablePeriod13.setPeriod((long) '4', chronology32);
        org.joda.time.LocalTime localTime36 = localTime11.minus((org.joda.time.ReadablePeriod) mutablePeriod13);
        int int37 = localTime36.getMillisOfSecond();
        org.joda.time.Period period39 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period41 = period39.minusYears(8);
        org.joda.time.Period period43 = period39.withSeconds(11);
        int int44 = period43.getMinutes();
        org.joda.time.Period period45 = period43.toPeriod();
        org.joda.time.Period period47 = period43.plusWeeks(11);
        org.joda.time.Period period49 = period43.withDays(270);
        org.joda.time.LocalTime localTime50 = localTime36.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        long long53 = duration52.getStandardDays();
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone56);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime57.weekOfWeekyear();
        mutableDateTime57.setSecondOfMinute((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime57.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration52, (org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.LocalTime localTime63 = localTime36.minus((org.joda.time.ReadablePeriod) mutablePeriod62);
        org.joda.time.LocalTime localTime64 = localTime6.withFields((org.joda.time.ReadablePartial) localTime63);
        int int65 = localTime6.getSecondOfMinute();
        org.joda.time.LocalTime localTime67 = localTime6.minusMillis(535);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 133 + "'", int37 == 133);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(localTime67);
    }

    @Test
    public void test3135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3135");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        org.joda.time.DateTime dateTime8 = dateTime6.minusHours((-1));
        org.joda.time.DateTime dateTime10 = dateTime6.withYear((int) (byte) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfDay();
        org.joda.time.DateTime dateTime12 = property11.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test3136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3136");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 399, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone2);
        int int5 = localDateTime4.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
    }

    @Test
    public void test3137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3137");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalDate localDate3 = localDate1.withCenturyOfEra((int) (short) 0);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str7 = dateTimeZone5.getName((long) 100);
        org.joda.time.DateTime dateTime8 = localDate3.toDateTimeAtStartOfDay(dateTimeZone5);
        int int9 = localDate3.getEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test3138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3138");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        int int9 = mutablePeriod3.getMinutes();
        java.lang.String str10 = mutablePeriod3.toString();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        mutablePeriod14.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.months();
        mutablePeriod23.set(durationFieldType24, (int) 'a');
        mutablePeriod14.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        int int33 = mutablePeriod32.getMonths();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableInstant28, (org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfMonth();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType42);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType46);
        mutablePeriod43.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod47);
        java.lang.String str49 = mutablePeriod43.toString();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Interval interval52 = interval50.withDurationAfterStart(readableDuration51);
        boolean boolean53 = interval34.isBefore((org.joda.time.ReadableInterval) interval50);
        mutablePeriod23.setPeriod((org.joda.time.ReadableInterval) interval34);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType58);
        int int60 = mutablePeriod59.getMonths();
        org.joda.time.Interval interval61 = new org.joda.time.Interval(readableInstant55, (org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.Interval interval62 = interval61.toInterval();
        boolean boolean63 = interval34.isAfter((org.joda.time.ReadableInterval) interval61);
        org.joda.time.Interval interval64 = interval34.toInterval();
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval64);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0.034S" + "'", str10, "PT0.034S");
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT0.034S" + "'", str49, "PT0.034S");
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(interval64);
    }

    @Test
    public void test3139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3139");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setValue(0, 2022);
        mutablePeriod8.addDays((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight22.toMutableDateTime();
        mutableDateTime23.add((long) 1);
        org.joda.time.DateTime dateTime26 = mutableDateTime23.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.years();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime23, readableDuration27, periodType28);
        org.joda.time.Chronology chronology30 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        mutablePeriod8.add(35417L, chronology30);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.year();
        org.joda.time.DurationField durationField34 = chronology30.eras();
        org.joda.time.DateTimeField dateTimeField35 = chronology30.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test3140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3140");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(63113904000000L);
        java.util.Date date2 = localDateTime1.toDate();
        org.joda.time.LocalDate localDate3 = localDateTime1.toLocalDate();
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 GMT 3970");
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test3141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3141");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMonths(436);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMinimumValue();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        int int17 = mutablePeriod16.getMonths();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableInstant12, (org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology19.getZone();
        org.joda.time.DateTimeField dateTimeField24 = chronology19.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(0L, chronology19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) localDateTime10, chronology19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514472263,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=12,MILLISECOND=263,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test3142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3142");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        mutableDateTime1.addMinutes((int) ' ');
        int int11 = mutableDateTime1.getCenturyOfEra();
        mutableDateTime1.setDayOfYear(4);
        mutableDateTime1.setTime(1645514165730L);
        org.joda.time.Period period17 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period19 = period17.minusYears(8);
        org.joda.time.Period period21 = period17.withSeconds(11);
        int int22 = period21.getMinutes();
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period21.minusMillis(13);
        org.joda.time.Period period27 = period21.withDays(26439109);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str8, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test3143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3143");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setValue(0, 2022);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration20);
        mutablePeriod8.setPeriod((long) 5);
        org.joda.time.format.PeriodFormatter periodFormatter24 = null;
        java.lang.String str25 = mutablePeriod8.toString(periodFormatter24);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0.005S" + "'", str25, "PT0.005S");
    }

    @Test
    public void test3144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3144");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMonths(436);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusMillis(26180820);
        org.joda.time.LocalDateTime.Property property11 = localDateTime4.weekyear();
        java.lang.String str12 = property11.getAsString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514472316,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=12,MILLISECOND=316,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
    }

    @Test
    public void test3145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3145");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        calendar1.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        int int11 = timeZone10.getRawOffset();
        boolean boolean12 = timeZone10.observesDaylightTime();
        java.time.ZoneId zoneId13 = timeZone10.toZoneId();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=426,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(zoneId13);
    }

    @Test
    public void test3146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3146");
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.yearOfCentury();
        int int5 = dateMidnight3.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime11 = timeOfDay6.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        boolean boolean12 = dateMidnight3.isEqual((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight3.withCenturyOfEra(0);
        int int15 = dateMidnight14.getYear();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight16.toMutableDateTime();
        mutableDateTime17.add((long) 1);
        org.joda.time.DateTime dateTime20 = mutableDateTime17.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime17, readableDuration21, periodType22);
        java.lang.String str24 = mutableDateTime17.toString();
        org.joda.time.Chronology chronology25 = mutableDateTime17.getChronology();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight14.withChronology(chronology25);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((int) (short) 100, 5, (int) (byte) 10, chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekyearOfCentury();
        java.lang.String str29 = dateTimeField28.getName();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str24, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "weekyearOfCentury" + "'", str29, "weekyearOfCentury");
    }

    @Test
    public void test3147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3147");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime2.getCenturyOfEra();
        int int7 = localDateTime2.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.secondOfMinute();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514472455,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=12,MILLISECOND=455,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20 + "'", int6 == 20);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test3148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3148");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        int int7 = mutableDateTime6.getYearOfEra();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        mutablePeriod11.addHours((int) (byte) -1);
        mutablePeriod11.addYears(2022);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.LocalTime localTime20 = localTime3.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.LocalTime localTime22 = localTime20.plusSeconds(100);
        org.joda.time.LocalTime localTime24 = localTime20.plusSeconds(2922789);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime26 = dateMidnight25.toMutableDateTime();
        mutableDateTime26.add((long) 1);
        mutableDateTime26.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime26.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime26.dayOfYear();
        int int33 = property32.getMaximumValue();
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime35 = dateMidnight34.toMutableDateTime();
        mutableDateTime35.add((long) 1);
        org.joda.time.DateTime dateTime38 = mutableDateTime35.toDateTimeISO();
        mutableDateTime35.addDays((int) (short) 10);
        long long41 = property32.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime35.property(dateTimeFieldType42);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime35.millisOfSecond();
        org.joda.time.DateTime dateTime45 = localTime20.toDateTime((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.days();
        mutableDateTime35.add(durationFieldType46, 0);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime35.dayOfMonth();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 365 + "'", int33 == 365);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 35417L + "'", long41 == 35417L);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test3149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3149");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight0.toMutableDateTime();
        boolean boolean5 = dateMidnight0.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.withCenturyOfEra(0);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.months();
        mutablePeriod12.set(durationFieldType13, (int) 'a');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100, chronology24);
        boolean boolean26 = durationFieldType13.isSupported(chronology24);
        boolean boolean27 = durationFieldType8.isSupported(chronology24);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay((java.lang.Object) dateMidnight7, chronology24);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 3);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight7.withZoneRetainFields(dateTimeZone31);
        long long35 = dateTimeZone31.convertLocalToUTC(63113904000000L, false);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone31);
        java.lang.String str37 = dateTimeZone31.toString();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 63113900220000L + "'", long35 == 63113900220000L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+01:03" + "'", str37, "+01:03");
    }

    @Test
    public void test3150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3150");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', chronology1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.months();
        mutablePeriod6.set(durationFieldType7, (int) 'a');
        mutablePeriod2.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod6);
        mutablePeriod6.setDays(0);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        mutablePeriod6.setPeriod(0L, chronology21);
        org.joda.time.MutablePeriod mutablePeriod23 = mutablePeriod6.toMutablePeriod();
        org.joda.time.PeriodType periodType24 = mutablePeriod23.getPeriodType();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight25.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property30 = dateMidnight25.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight25.withMillis((long) 5);
        org.joda.time.DateMidnight.Property property33 = dateMidnight25.yearOfEra();
        org.joda.time.DateMidnight dateMidnight35 = property33.setCopy(436);
        org.joda.time.Period period37 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period39 = period37.minusYears(8);
        org.joda.time.Period period41 = period37.withSeconds(11);
        int int42 = period41.getMinutes();
        java.lang.String str43 = period41.toString();
        boolean boolean44 = dateMidnight35.equals((java.lang.Object) period41);
        org.joda.time.Period period46 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period48 = period46.minusYears(8);
        org.joda.time.Period period50 = period46.withSeconds(11);
        int int51 = period50.getMinutes();
        org.joda.time.Period period52 = period50.toPeriod();
        org.joda.time.Period period54 = period50.plusWeeks(11);
        org.joda.time.Period period56 = period50.withDays(270);
        org.joda.time.Period period58 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period60 = period58.minusYears(8);
        org.joda.time.Period period62 = period58.withSeconds(11);
        int int63 = period62.getMinutes();
        org.joda.time.Period period64 = period62.toPeriod();
        org.joda.time.LocalDate localDate65 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = null;
        boolean boolean67 = localDate65.isSupported(dateTimeFieldType66);
        org.joda.time.LocalDate.Property property68 = localDate65.yearOfEra();
        org.joda.time.DateTimeField dateTimeField69 = property68.getField();
        org.joda.time.DurationField durationField70 = property68.getDurationField();
        boolean boolean71 = durationField70.isPrecise();
        boolean boolean72 = period62.equals((java.lang.Object) boolean71);
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime74 = dateMidnight73.toMutableDateTime();
        mutableDateTime74.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType77 = org.joda.time.DurationFieldType.months();
        mutableDateTime74.add(durationFieldType77, (int) (byte) 1);
        org.joda.time.Period period81 = period62.withFieldAdded(durationFieldType77, 70);
        int int82 = period56.get(durationFieldType77);
        org.joda.time.Period period84 = period41.withField(durationFieldType77, (-1));
        int int85 = periodType24.indexOf(durationFieldType77);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutablePeriod23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT11S" + "'", str43, "PT11S");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test3151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3151");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime5 = property4.roundCeilingCopy();
        org.joda.time.DateTime dateTime6 = property4.roundFloorCopy();
        org.joda.time.DateTime dateTime7 = dateTime6.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime9 = dateTime6.plusDays(6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay((long) 4, chronology11);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.plusSeconds(26311426);
        org.joda.time.Period period16 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period18 = period16.minusYears(8);
        org.joda.time.Period period20 = period16.withSeconds(11);
        org.joda.time.Period period22 = period16.minusMillis(22);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay14.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime24 = dateTime9.withFields((org.joda.time.ReadablePartial) timeOfDay23);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test3152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3152");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay4 = dateTime3.toYearMonthDay();
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withYear(59);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        int int9 = property8.getMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay10 = property8.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay12 = property8.addToCopy(26184696);
        org.joda.time.DateTimeField dateTimeField13 = property8.getField();
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder17 = builder15.setLocale(locale16);
        java.util.Locale.Builder builder19 = builder17.setVariant("");
        java.util.Locale.Builder builder20 = builder19.clear();
        java.util.Locale.Builder builder22 = builder19.setLanguage("era");
        java.util.Locale.Builder builder23 = builder19.clear();
        java.util.Locale locale24 = builder19.build();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay25 = property8.setCopy("DurationField[millis]", locale24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DurationField[millis]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
    }

    @Test
    public void test3153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3153");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusYears((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, readableDuration5);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime8 = dateMidnight7.toMutableDateTime();
        mutableDateTime8.add((long) 1);
        org.joda.time.DateTime dateTime11 = mutableDateTime8.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.era();
        boolean boolean13 = mutableDateTime8.isSupported(dateTimeFieldType12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime8.hourOfDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        int int20 = mutablePeriod19.getMonths();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekyearOfCentury();
        long long25 = dateTimeField23.roundHalfFloor((long) 1);
        mutableDateTime8.setRounding(dateTimeField23, (int) (byte) 0);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.months();
        mutablePeriod31.set(durationFieldType32, (int) 'a');
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        int int41 = mutablePeriod40.getMonths();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableInstant36, (org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 100, chronology43);
        boolean boolean45 = durationFieldType32.isSupported(chronology43);
        mutableDateTime8.add(durationFieldType32, (int) ' ');
        int int48 = mutableDateTime8.getSecondOfMinute();
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.LocalDate localDate51 = org.joda.time.LocalDate.now(dateTimeZone50);
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now(dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight53 = org.joda.time.DateMidnight.now();
        int int54 = dateTimeZone50.getOffset((org.joda.time.ReadableInstant) dateMidnight53);
        mutableDateTime8.setZoneRetainFields(dateTimeZone50);
        org.joda.time.Duration duration56 = mutablePeriod6.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime8);
        int int57 = mutableDateTime8.getYear();
        java.util.Date date58 = mutableDateTime8.toDate();
        mutableDateTime8.addYears(40);
        org.joda.time.ReadableInstant readableInstant61 = null;
        mutableDateTime8.setTime(readableInstant61);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2024 + "'", int57 == 2024);
        org.junit.Assert.assertNotNull(date58);
// flaky:         org.junit.Assert.assertEquals(date58.toString(), "Tue Oct 22 00:00:00 GMT 2024");
    }

    @Test
    public void test3154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3154");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withDurationAdded((long) (byte) 0, (int) (short) 10);
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight9 = property8.withMaximumValue();
        int int10 = dateMidnight9.getYearOfEra();
        org.joda.time.DateMidnight.Property property11 = dateMidnight9.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
    }

    @Test
    public void test3155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3155");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-22T07:19:38.113Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-22T07:19:38.113Z' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3156");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight2.toMutableDateTime();
        mutableDateTime3.add((long) 1);
        org.joda.time.DateTime dateTime6 = mutableDateTime3.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime3, readableDuration7, periodType8);
        java.lang.String str10 = mutableDateTime3.toString();
        mutableDateTime3.addMinutes((int) ' ');
        int int13 = mutableDateTime3.getCenturyOfEra();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime19 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime21 = dateTime16.withWeekOfWeekyear((int) '4');
        boolean boolean22 = mutableDateTime3.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property23 = dateTime16.minuteOfDay();
        int int24 = property23.getMinimumValue();
        org.joda.time.DateTime dateTime25 = property23.withMinimumValue();
        org.joda.time.DateTime dateTime26 = property23.roundCeilingCopy();
        org.joda.time.Interval interval27 = duration1.toIntervalTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime29 = dateMidnight28.toMutableDateTime();
        mutableDateTime29.add((long) 1);
        org.joda.time.DateTime dateTime32 = mutableDateTime29.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.years();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime29, readableDuration33, periodType34);
        org.joda.time.Chronology chronology36 = mutableDateTime29.getChronology();
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(chronology36);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime41 = dateTime39.withDayOfYear((int) (byte) 1);
        int int42 = dateTime41.getDayOfMonth();
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime45 = dateTime41.minus((org.joda.time.ReadableDuration) duration44);
        mutableDateTime37.add((org.joda.time.ReadableDuration) duration44);
        boolean boolean47 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime50 = dateTime49.toLocalTime();
        org.joda.time.LocalTime localTime52 = localTime50.withMillisOfSecond(399);
        boolean boolean53 = duration44.equals((java.lang.Object) localTime52);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str10, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test3157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3157");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.DateMidnight dateMidnight2 = localDate0.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = localDate0.toDateMidnight();
        org.joda.time.LocalDate.Property property4 = localDate0.year();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.LocalDate localDate15 = localDate0.minus((org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Interval interval16 = localDate15.toInterval();
        long long17 = interval16.toDurationMillis();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 86400000L + "'", long17 == 86400000L);
    }

    @Test
    public void test3158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3158");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateTime dateTime9 = dateTime3.plusYears((-1));
        org.joda.time.Chronology chronology10 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfHalfday();
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.years();
        boolean boolean14 = durationField13.isPrecise();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3159");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusWeeks(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfYear((int) (byte) 1);
        int int10 = dateTime9.getDayOfMonth();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight5.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = localDate15.toDateMidnight();
        org.joda.time.Chronology chronology18 = localDate15.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight5.withFields((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.year();
        org.joda.time.DateMidnight dateMidnight25 = property23.addWrapFieldToCopy(0);
        org.joda.time.DateMidnight dateMidnight26 = property23.getDateMidnight();
        org.joda.time.DateTimeField dateTimeField27 = property23.getField();
        org.joda.time.DateMidnight dateMidnight28 = property23.roundHalfEvenCopy();
        int int29 = dateMidnight28.getWeekOfWeekyear();
        int int30 = dateMidnight28.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test3160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3160");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        java.util.Locale locale2 = java.util.Locale.CHINA;
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale3);
        java.lang.String str5 = locale2.getDisplayVariant(locale3);
        java.util.Calendar calendar6 = dateMidnight0.toCalendar(locale3);
        calendar6.setLenient(false);
        boolean boolean9 = calendar6.isWeekDateSupported();
        int int11 = calendar6.getMinimum(12);
        calendar6.setTimeInMillis((long) 26192136);
        calendar6.set((-2720), 53, 7, 2922789, 437);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone("53");
        boolean boolean22 = timeZone21.observesDaylightTime();
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str24 = locale23.getCountry();
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        java.util.Locale locale28 = java.util.Locale.CHINA;
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale29);
        java.lang.String str31 = locale28.getDisplayVariant(locale29);
        java.util.Calendar calendar32 = dateMidnight26.toCalendar(locale29);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale29.getDisplayCountry(locale33);
        java.lang.String str35 = locale25.getDisplayLanguage(locale33);
        java.lang.String str36 = locale23.getDisplayLanguage(locale25);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone21, locale25);
        calendar37.setFirstDayOfWeek(10);
        int int40 = calendar37.getMinimalDaysInFirstWeek();
        int int41 = calendar37.getFirstDayOfWeek();
        int int42 = calendar6.compareTo(calendar37);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514472736,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=12,MILLISECOND=736,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-2720,MONTH=53,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=7,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=7,HOUR_OF_DAY=2922789,MINUTE=437,SECOND=32,MILLISECOND=136,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "CA" + "'", str24, "CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645514472736,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=12,MILLISECOND=736,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(calendar32);
        org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str35, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "fran\347ais" + "'", str36, "fran\347ais");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645514472736,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=10,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=12,MILLISECOND=736,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 10 + "'", int41 == 10);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test3161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3161");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        int int6 = mutablePeriod5.getMonths();
        org.joda.time.Interval interval7 = new org.joda.time.Interval(readableInstant1, (org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100, chronology8);
        org.joda.time.DurationField durationField10 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.dayOfMonth();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = timeOfDay12.getFieldTypes();
        org.joda.time.Chronology chronology14 = timeOfDay12.getChronology();
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.lang.String str17 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) timeOfDay12, 0, locale16);
        java.util.Set<java.lang.Character> charSet18 = locale16.getExtensionKeys();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertNotNull(charSet18);
    }

    @Test
    public void test3162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3162");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime dateTime8 = dateTime3.minus((long) (short) -1);
        org.joda.time.DateTime dateTime9 = dateTime3.toDateTimeISO();
        int int10 = dateTime9.getYear();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfMonth();
        org.joda.time.DateTime dateTime17 = dateTime14.plusSeconds(10);
        org.joda.time.DateTime dateTime19 = dateTime14.minus((long) (short) -1);
        boolean boolean20 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval24 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = interval24.equals((java.lang.Object) 1L);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.withMillis((long) (short) 0);
        boolean boolean30 = interval24.isBefore((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) (byte) 0);
        long long33 = duration32.getStandardDays();
        org.joda.time.Interval interval34 = interval24.withDurationAfterStart((org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.parse("2022-02-22T00:00:00.001Z");
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardMinutes((long) 9);
        org.joda.time.DateTime dateTime39 = dateTime36.plus((org.joda.time.ReadableDuration) duration38);
        boolean boolean40 = interval34.contains((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime36);
        boolean boolean42 = dateTime19.isAfterNow();
        org.joda.time.DateTime dateTime43 = dateTime19.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1969 + "'", int10 == 1969);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test3163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3163");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusWeeks(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        int int17 = dateTime16.getDayOfMonth();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime20 = dateTime16.minus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight12.minus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property23 = localDate22.dayOfYear();
        org.joda.time.DateMidnight dateMidnight24 = localDate22.toDateMidnight();
        org.joda.time.Chronology chronology25 = localDate22.getChronology();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight12.withFields((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight12.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime31 = dateMidnight30.toMutableDateTime();
        mutableDateTime31.add((long) 1);
        org.joda.time.DateTime dateTime34 = mutableDateTime31.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.years();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime31, readableDuration35, periodType36);
        org.joda.time.Chronology chronology38 = mutableDateTime31.getChronology();
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now(chronology38);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime43 = dateTime41.withDayOfYear((int) (byte) 1);
        int int44 = dateTime43.getDayOfMonth();
        org.joda.time.Duration duration46 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime47 = dateTime43.minus((org.joda.time.ReadableDuration) duration46);
        mutableDateTime39.add((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean51 = duration46.isShorterThan((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((long) (byte) 0);
        long long54 = duration53.getStandardDays();
        org.joda.time.Duration duration55 = duration46.plus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.Duration duration58 = duration53.minus((org.joda.time.ReadableDuration) duration57);
        long long59 = duration58.getStandardSeconds();
        boolean boolean60 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Minutes minutes61 = duration28.toStandardMinutes();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration28, periodType62);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(1L, dateTimeZone65);
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(dateTimeZone65);
        int int69 = dateMidnight68.getWeekOfWeekyear();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateMidnight68);
        org.joda.time.Period period72 = period70.minusMinutes((-1613978169));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 8 + "'", int69 == 8);
        org.junit.Assert.assertNotNull(period72);
    }

    @Test
    public void test3164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3164");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusYears((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withYear((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plusDays((int) (byte) 100);
        java.util.Locale locale9 = java.util.Locale.PRC;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale9);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.fromCalendarFields(calendar10);
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withCenturyOfEra(365);
        int int15 = localDateTime11.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withSecondOfMinute(51);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.days();
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale19);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.fromCalendarFields(calendar20);
        org.joda.time.DateTime dateTime22 = localDateTime21.toDateTime();
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours(12);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime26 = dateMidnight25.toMutableDateTime();
        mutableDateTime26.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.months();
        mutableDateTime26.add(durationFieldType29, (int) (byte) 1);
        org.joda.time.DateTime dateTime33 = dateTime24.withFieldAdded(durationFieldType29, 0);
        boolean boolean34 = periodType18.isSupported(durationFieldType29);
        boolean boolean35 = localDateTime17.isSupported(durationFieldType29);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight6.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight6.minusYears(26200205);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645514472931,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=12,MILLISECOND=931,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645514472931,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=12,MILLISECOND=931,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
    }

    @Test
    public void test3165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3165");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        org.joda.time.Chronology chronology9 = mutableDateTime1.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.hours();
        long long13 = durationField10.add(1645514190173L, 1645514235824L);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str8, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5923852894480590173L + "'", long13 == 5923852894480590173L);
    }

    @Test
    public void test3166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3166");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Interval interval4 = localDate0.toInterval();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime8 = dateTime6.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfMonth();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        mutablePeriod13.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        java.lang.String str19 = mutablePeriod13.toString();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod13.setValue(0, 2022);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) (byte) 0);
        long long29 = duration28.getMillis();
        org.joda.time.Duration duration31 = new org.joda.time.Duration((long) (byte) 0);
        long long32 = duration31.getMillis();
        int int33 = duration28.compareTo((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration35 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration31, 10);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight36.toMutableDateTime();
        mutableDateTime37.add((long) 1);
        org.joda.time.DateTime dateTime40 = mutableDateTime37.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.years();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime37, readableDuration41, periodType42);
        org.joda.time.Chronology chronology44 = mutableDateTime37.getChronology();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(chronology44);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfYear((int) (byte) 1);
        int int50 = dateTime49.getDayOfMonth();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime53 = dateTime49.minus((org.joda.time.ReadableDuration) duration52);
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean57 = duration52.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration59 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean60 = duration52.isLongerThan((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Duration duration62 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration59, 999);
        org.joda.time.LocalDate localDate63 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property64 = localDate63.dayOfYear();
        org.joda.time.DateMidnight dateMidnight65 = localDate63.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight66 = localDate63.toDateMidnight();
        org.joda.time.Period period67 = duration31.toPeriodTo((org.joda.time.ReadableInstant) dateMidnight66);
        long long68 = duration31.getStandardDays();
        org.joda.time.Interval interval69 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime((long) (short) 10, dateTimeZone71);
        boolean boolean73 = interval69.isAfter((org.joda.time.ReadableInstant) mutableDateTime72);
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime72.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime76 = property74.add((long) 17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime78 = property74.set("+00:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"+00:00\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0.034S" + "'", str19, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(mutableDateTime76);
    }

    @Test
    public void test3167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3167");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone2);
        int int4 = mutableDateTime3.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.plus(readableDuration7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight5.withYearOfEra(12);
        mutableDateTime3.setTime((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime3.hourOfDay();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(100, 4, (int) (byte) 10, (int) (short) 1, (int) (short) 1, (int) '4');
        org.joda.time.DateTime dateTime22 = dateTime19.withDurationAdded((long) (byte) 100, 6);
        org.joda.time.DateTime dateTime24 = dateTime19.withSecondOfMinute((int) (short) 0);
        org.joda.time.DateTime dateTime26 = dateTime19.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime28 = dateTime19.plusWeeks(48);
        boolean boolean29 = mutableDateTime3.equals((java.lang.Object) 48);
        mutableDateTime3.addDays(26200278);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test3168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3168");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.Interval interval4 = localDate0.toInterval(dateTimeZone3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        boolean boolean21 = interval11.contains((org.joda.time.ReadableInterval) interval19);
        boolean boolean22 = interval4.isBefore((org.joda.time.ReadableInterval) interval19);
        long long23 = interval19.getEndMillis();
        boolean boolean25 = interval19.isAfter(1645514414013L);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645514473070L + "'", long23 == 1645514473070L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test3169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3169");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-22T00:00:00.001Z");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((long) 9);
        org.joda.time.DateTime dateTime4 = dateTime1.plus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        boolean boolean21 = interval11.contains((org.joda.time.ReadableInterval) interval19);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        boolean boolean38 = interval28.contains((org.joda.time.ReadableInterval) interval36);
        boolean boolean39 = interval11.overlaps((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((long) 86399);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType45);
        int int47 = mutablePeriod46.getMonths();
        org.joda.time.Interval interval48 = new org.joda.time.Interval(readableInstant42, (org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType54);
        int int56 = mutablePeriod55.getMonths();
        org.joda.time.Interval interval57 = new org.joda.time.Interval(readableInstant51, (org.joda.time.ReadablePeriod) mutablePeriod55);
        int[] intArray60 = chronology49.get((org.joda.time.ReadablePeriod) mutablePeriod55, 1L, (long) 4);
        org.joda.time.PeriodType periodType61 = mutablePeriod55.getPeriodType();
        org.joda.time.Period period62 = duration41.toPeriod(periodType61);
        boolean boolean63 = interval28.equals((java.lang.Object) duration41);
        org.joda.time.DateTime dateTime64 = interval28.getStart();
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.years();
        java.lang.String str66 = periodType65.toString();
        org.joda.time.PeriodType periodType67 = periodType65.withMinutesRemoved();
        org.joda.time.PeriodType periodType68 = periodType65.withHoursRemoved();
        org.joda.time.Period period69 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime64, periodType65);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period71 = period69.withWeeks(26365673);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PeriodType[Years]" + "'", str66, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(period69);
    }

    @Test
    public void test3170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3170");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight0.toMutableDateTime();
        boolean boolean5 = dateMidnight0.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.minusWeeks((int) ' ');
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear((int) (byte) 1);
        int int12 = dateTime11.getDayOfMonth();
        boolean boolean13 = dateMidnight0.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withTimeAtStartOfDay();
        int int15 = dateTime14.getYear();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property19 = dateTime18.secondOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.withEra(1);
        org.joda.time.DateTime dateTime23 = dateTime18.plusMillis(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int25 = dateTime18.get(dateTimeFieldType24);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime31 = dateTime29.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime32 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay27.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean38 = timeOfDay34.isSupported(dateTimeFieldType37);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime42 = dateTime40.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfMonth();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType46);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType50);
        mutablePeriod47.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod51);
        java.lang.String str53 = mutablePeriod47.toString();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadablePeriod) mutablePeriod47);
        mutablePeriod47.setValue(0, 2022);
        mutablePeriod47.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay34.plus((org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.TimeOfDay.Property property61 = timeOfDay60.millisOfSecond();
        org.joda.time.DurationField durationField62 = property61.getDurationField();
        org.joda.time.TimeOfDay timeOfDay63 = property61.getTimeOfDay();
        int int64 = property61.getMaximumValueOverall();
        int int65 = property61.getMaximumValueOverall();
        java.util.Locale.Builder builder67 = new java.util.Locale.Builder();
        java.util.Locale locale68 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder69 = builder67.setLocale(locale68);
        java.lang.String str70 = locale68.getVariant();
        org.joda.time.TimeOfDay timeOfDay71 = property61.setCopy("569", locale68);
        java.lang.String str72 = dateTime18.toString("856", locale68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = dateTime14.toString("java.util.GregorianCalendar[time=-1652447278000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1917,MONTH=7,WEEK_OF_YEAR=34,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=233,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=52,SECOND=2,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", locale68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: j");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1969 + "'", int15 == 1969);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 31 + "'", int25 == 31);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PT0.034S" + "'", str53, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 999 + "'", int64 == 999);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 999 + "'", int65 == 999);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(timeOfDay71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "856" + "'", str72, "856");
    }

    @Test
    public void test3171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3171");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(1645514350497L);
    }

    @Test
    public void test3172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3172");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay7.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay14 = timeOfDay7.withMinuteOfHour(26206928);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26206928 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test3173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3173");
        java.util.Date date5 = new java.util.Date(482, (-53), 26167775, 722, 26254453);
        date5.setDate(26414296);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed May 20 08:13:00 GMT 146392");
    }

    @Test
    public void test3174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3174");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromDateFields(date5);
        java.time.Instant instant7 = date5.toInstant();
        date5.setTime((long) 2922789);
        java.util.Date date15 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromDateFields(date15);
        java.time.Instant instant17 = date15.toInstant();
        boolean boolean18 = date5.after(date15);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.fromDateFields(date5);
        int int20 = localDate19.getWeekOfWeekyear();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:48:42 GMT 1970");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(instant7);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test3175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3175");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        int int14 = mutablePeriod13.getMonths();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadablePeriod) mutablePeriod13);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePeriod) mutablePeriod13, 1L, (long) 4);
        org.joda.time.DurationField durationField19 = chronology7.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = durationField19.add(1645514190173L, 26200278);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test3176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3176");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime3.size();
        org.joda.time.LocalTime.Property property5 = localTime3.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = localTime3.toDateTimeToday(dateTimeZone6);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime1, dateTimeZone6);
        int int9 = mutableDateTime1.getMinuteOfDay();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.years();
        java.lang.String str13 = periodType12.toString();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.Period period22 = new org.joda.time.Period(1645514159731L, (long) 2022, periodType12, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.weekyearOfCentury();
        mutableDateTime1.setRounding(dateTimeField23);
        boolean boolean25 = dateTimeField23.isSupported();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PeriodType[Years]" + "'", str13, "PeriodType[Years]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test3177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3177");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate localDate4 = localDate0.withWeekyear((int) (short) 100);
        int int5 = localDate0.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property6 = localDate0.monthOfYear();
        org.joda.time.DurationField durationField7 = property6.getLeapDurationField();
        org.joda.time.DurationFieldType durationFieldType8 = durationField7.getType();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(durationFieldType8);
    }

    @Test
    public void test3178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3178");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("53");
        boolean boolean2 = timeZone1.observesDaylightTime();
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = locale3.getCountry();
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale9);
        java.lang.String str11 = locale8.getDisplayVariant(locale9);
        java.util.Calendar calendar12 = dateMidnight6.toCalendar(locale9);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale9.getDisplayCountry(locale13);
        java.lang.String str15 = locale5.getDisplayLanguage(locale13);
        java.lang.String str16 = locale3.getDisplayLanguage(locale5);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone1, locale5);
        calendar17.setFirstDayOfWeek(10);
        int int20 = calendar17.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CA" + "'", str4, "CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645514473328,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=13,MILLISECOND=328,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str15, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fran\347ais" + "'", str16, "fran\347ais");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645514473328,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=10,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=13,MILLISECOND=328,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test3179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3179");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.years();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(chronology13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.minusMonths((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight17 = yearMonthDay16.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        mutableDateTime19.add((long) 1);
        mutableDateTime19.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime19.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime19.getZone();
        org.joda.time.DateTime dateTime26 = yearMonthDay16.toDateTimeAtCurrentTime(dateTimeZone25);
        int int28 = dateTimeZone25.getStandardOffset(1L);
        org.joda.time.Chronology chronology29 = chronology4.withZone(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField30 = chronology4.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test3180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3180");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        int int11 = dateTime10.getDayOfMonth();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime10.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime6.withDurationAdded((org.joda.time.ReadableDuration) duration13, 3);
        int int17 = localDateTime6.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime6.plusYears(15);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.yearOfEra();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514473387,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=13,MILLISECOND=387,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 13 + "'", int17 == 13);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test3181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3181");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 53, chronology1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = null;
        org.joda.time.format.DateTimeParser dateTimeParser4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser4);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType9 = periodType8.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        int int15 = mutablePeriod14.getMonths();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(readableInstant10, (org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        int int24 = mutablePeriod23.getMonths();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableInstant19, (org.joda.time.ReadablePeriod) mutablePeriod23);
        int[] intArray28 = chronology17.get((org.joda.time.ReadablePeriod) mutablePeriod23, 1L, (long) 4);
        org.joda.time.Period period29 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType8, chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter5.withChronology(chronology17);
        org.joda.time.format.DateTimeParser dateTimeParser31 = dateTimeFormatter30.getParser();
        org.joda.time.Chronology chronology32 = dateTimeFormatter30.getChronology();
        java.util.Locale locale33 = dateTimeFormatter30.getLocale();
        java.lang.Integer int34 = dateTimeFormatter30.getPivotYear();
        org.joda.time.Chronology chronology35 = dateTimeFormatter30.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter30.withDefaultYear((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone38 = dateTimeFormatter37.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser39 = dateTimeFormatter37.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter37.withPivotYear(19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter37.withPivotYear(625);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = dateTime2.toString(dateTimeFormatter43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNull(dateTimeParser31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNull(locale33);
        org.junit.Assert.assertNull(int34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNull(dateTimeZone38);
        org.junit.Assert.assertNull(dateTimeParser39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
    }

    @Test
    public void test3182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3182");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.era();
        boolean boolean7 = mutableDateTime2.isSupported(dateTimeFieldType6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.hourOfDay();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        int int14 = mutablePeriod13.getMonths();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekyearOfCentury();
        long long19 = dateTimeField17.roundHalfFloor((long) 1);
        mutableDateTime2.setRounding(dateTimeField17, (int) (byte) 0);
        mutableDateTime2.setTime((long) 10);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime();
        boolean boolean25 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) mutableDateTime24);
        java.lang.Object obj26 = mutableDateTime2.clone();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime28 = property27.roundHalfFloor();
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime32 = dateMidnight29.toMutableDateTime();
        boolean boolean34 = dateMidnight29.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight29.minusWeeks((int) ' ');
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime40 = dateTime38.withDayOfYear((int) (byte) 1);
        int int41 = dateTime40.getDayOfMonth();
        boolean boolean42 = dateMidnight29.isAfter((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime.Property property44 = dateTime40.property(dateTimeFieldType43);
        mutableDateTime28.set(dateTimeFieldType43, 0);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime50 = dateTime48.minusWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay51 = dateTime50.toYearMonthDay();
        java.lang.Object obj52 = null;
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType56 = periodType55.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType60);
        int int62 = mutablePeriod61.getMonths();
        org.joda.time.Interval interval63 = new org.joda.time.Interval(readableInstant57, (org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.Chronology chronology64 = interval63.getChronology();
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType69);
        int int71 = mutablePeriod70.getMonths();
        org.joda.time.Interval interval72 = new org.joda.time.Interval(readableInstant66, (org.joda.time.ReadablePeriod) mutablePeriod70);
        int[] intArray75 = chronology64.get((org.joda.time.ReadablePeriod) mutablePeriod70, 1L, (long) 4);
        org.joda.time.Period period76 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType55, chronology64);
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate(obj52, chronology64);
        org.joda.time.DurationField durationField78 = chronology64.millis();
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay51.withChronologyRetainFields(chronology64);
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType43.getField(chronology64);
        org.joda.time.Period period81 = new org.joda.time.Period((long) 3600000, chronology64);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "2022-02-22T00:00:00.010Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "2022-02-22T00:00:00.010Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "2022-02-22T00:00:00.010Z");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(dateTimeField80);
    }

    @Test
    public void test3183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3183");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test3184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3184");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateTime dateTime9 = dateTime3.plusYears((-1));
        org.joda.time.Chronology chronology10 = dateTime3.getChronology();
        int int11 = dateTime3.getMillisOfDay();
        org.joda.time.LocalTime localTime12 = dateTime3.toLocalTime();
        org.joda.time.DateTime.Property property13 = dateTime3.secondOfMinute();
        org.joda.time.DateTime.Property property14 = dateTime3.era();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 86399999 + "'", int11 == 86399999);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test3185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3185");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        boolean boolean9 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        mutableDateTime11.add((long) 1);
        mutableDateTime11.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime11.dayOfYear();
        int int18 = property17.getMaximumValue();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight19.toMutableDateTime();
        mutableDateTime20.add((long) 1);
        org.joda.time.DateTime dateTime23 = mutableDateTime20.toDateTimeISO();
        mutableDateTime20.addDays((int) (short) 10);
        long long26 = property17.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime20.property(dateTimeFieldType27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight0.property(dateTimeFieldType27);
        java.lang.String str30 = property29.getName();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 365 + "'", int18 == 365);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 35417L + "'", long26 == 35417L);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "clockhourOfHalfday" + "'", str30, "clockhourOfHalfday");
    }

    @Test
    public void test3186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3186");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setValue(0, 2022);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        long long24 = duration23.getMillis();
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) (byte) 0);
        long long27 = duration26.getMillis();
        int int28 = duration23.compareTo((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration30 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration26, 10);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime32 = dateMidnight31.toMutableDateTime();
        mutableDateTime32.add((long) 1);
        org.joda.time.DateTime dateTime35 = mutableDateTime32.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.years();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime32, readableDuration36, periodType37);
        org.joda.time.Chronology chronology39 = mutableDateTime32.getChronology();
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(chronology39);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfYear((int) (byte) 1);
        int int45 = dateTime44.getDayOfMonth();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime48 = dateTime44.minus((org.joda.time.ReadableDuration) duration47);
        mutableDateTime40.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean52 = duration47.isShorterThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean55 = duration47.isLongerThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration57 = duration26.withDurationAdded((org.joda.time.ReadableDuration) duration54, 999);
        org.joda.time.LocalDate localDate58 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property59 = localDate58.dayOfYear();
        org.joda.time.DateMidnight dateMidnight60 = localDate58.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight61 = localDate58.toDateMidnight();
        org.joda.time.Period period62 = duration26.toPeriodTo((org.joda.time.ReadableInstant) dateMidnight61);
        org.joda.time.DateMidnight.Property property63 = dateMidnight61.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime65 = dateMidnight64.toMutableDateTime();
        mutableDateTime65.add((long) 1);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime65.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property68.getFieldType();
        org.joda.time.DateMidnight.Property property70 = dateMidnight61.property(dateTimeFieldType69);
        org.joda.time.DateMidnight dateMidnight71 = property70.getDateMidnight();
        java.util.Locale locale74 = java.util.Locale.forLanguageTag("482");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight75 = property70.setCopy("weekyearOfCentury", locale74);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"weekyearOfCentury\" for secondOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "");
    }

    @Test
    public void test3187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3187");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        int int6 = dateTime5.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = dateTime5.withYearOfCentury(26192581);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26192581 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 13 + "'", int6 == 13);
    }

    @Test
    public void test3188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3188");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        org.joda.time.DateTime dateTime8 = dateTime1.plusHours(5);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        mutableDateTime10.add((long) 1);
        org.joda.time.DateTime dateTime13 = mutableDateTime10.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.years();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime10, readableDuration14, periodType15);
        org.joda.time.Chronology chronology17 = mutableDateTime10.getChronology();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology17);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear((int) (byte) 1);
        int int23 = dateTime22.getDayOfMonth();
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime26 = dateTime22.minus((org.joda.time.ReadableDuration) duration25);
        mutableDateTime18.add((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean30 = duration25.isShorterThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) (byte) 0);
        long long33 = duration32.getMillis();
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property35 = localDate34.dayOfYear();
        org.joda.time.DateMidnight dateMidnight36 = localDate34.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Hours hours38 = duration32.toStandardHours();
        org.joda.time.Hours hours39 = duration32.toStandardHours();
        boolean boolean40 = duration25.isEqual((org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTime dateTime41 = dateTime8.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTime dateTime43 = dateTime41.minusDays(26173324);
        org.joda.time.Instant instant44 = dateTime43.toInstant();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertNotNull(hours39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(instant44);
    }

    @Test
    public void test3189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3189");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Interval interval4 = localDate0.toInterval();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime8 = dateTime6.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfMonth();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        mutablePeriod13.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        java.lang.String str19 = mutablePeriod13.toString();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod13.setValue(0, 2022);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) (byte) 0);
        long long29 = duration28.getMillis();
        org.joda.time.Duration duration31 = new org.joda.time.Duration((long) (byte) 0);
        long long32 = duration31.getMillis();
        int int33 = duration28.compareTo((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration35 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration31, 10);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight36.toMutableDateTime();
        mutableDateTime37.add((long) 1);
        org.joda.time.DateTime dateTime40 = mutableDateTime37.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.years();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime37, readableDuration41, periodType42);
        org.joda.time.Chronology chronology44 = mutableDateTime37.getChronology();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(chronology44);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfYear((int) (byte) 1);
        int int50 = dateTime49.getDayOfMonth();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime53 = dateTime49.minus((org.joda.time.ReadableDuration) duration52);
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean57 = duration52.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration59 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean60 = duration52.isLongerThan((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Duration duration62 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration59, 999);
        org.joda.time.LocalDate localDate63 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property64 = localDate63.dayOfYear();
        org.joda.time.DateMidnight dateMidnight65 = localDate63.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight66 = localDate63.toDateMidnight();
        org.joda.time.Period period67 = duration31.toPeriodTo((org.joda.time.ReadableInstant) dateMidnight66);
        long long68 = duration31.getStandardDays();
        org.joda.time.Interval interval69 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime((long) (short) 10, dateTimeZone71);
        boolean boolean73 = interval69.isAfter((org.joda.time.ReadableInstant) mutableDateTime72);
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime72.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime75 = property74.roundFloor();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0.034S" + "'", str19, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
    }

    @Test
    public void test3190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3190");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusWeeks(0);
        org.joda.time.DateMidnight.Property property6 = dateMidnight3.dayOfYear();
        org.joda.time.DateMidnight dateMidnight7 = property6.roundHalfCeilingCopy();
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.fromCalendarFields(calendar9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (short) 1);
        int int13 = localDateTime12.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusDays(12);
        int int16 = localDateTime15.getSecondOfMinute();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        java.lang.String str20 = periodType19.toString();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        int int26 = mutablePeriod25.getMonths();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableInstant21, (org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.Period period29 = new org.joda.time.Period(1645514159731L, (long) 2022, periodType19, chronology28);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime15.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime15.minus((org.joda.time.ReadableDuration) duration32);
        int int34 = localDateTime15.getHourOfDay();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight7.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.withWeekyear(26300068);
        org.joda.time.DateMidnight.Property property38 = dateMidnight35.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645514473685,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=13,MILLISECOND=685,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26473684 + "'", int13 == 26473684);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 13 + "'", int16 == 13);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PeriodType[Years]" + "'", str20, "PeriodType[Years]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 7 + "'", int34 == 7);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test3191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3191");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("22 Feb 2022 07:17:11 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=22 feb 2022 07:17:11 gmt");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3192");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        java.lang.String str9 = periodType8.toString();
        org.joda.time.PeriodType periodType10 = periodType8.withMinutesRemoved();
        org.joda.time.PeriodType periodType11 = periodType10.withYearsRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withMillisRemoved();
        org.joda.time.PeriodType periodType13 = periodType11.withHoursRemoved();
        org.joda.time.PeriodType periodType14 = periodType13.withMillisRemoved();
        int int15 = periodType14.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period16 = new org.joda.time.Period(119, 21, 50, 43, 43, 535, 26311426, 32772, periodType14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[Years]" + "'", str9, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test3193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3193");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay4 = dateTime3.toYearMonthDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod18, 1L, (long) 4);
        org.joda.time.PeriodType periodType24 = mutablePeriod18.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay4.minus((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight26.toMutableDateTime();
        java.lang.String str28 = mutableDateTime27.toString();
        mutableDateTime27.setMonthOfYear(1);
        mutableDateTime27.addWeekyears(4);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((long) (byte) 0);
        long long35 = duration34.getMillis();
        org.joda.time.Duration duration37 = new org.joda.time.Duration((long) (byte) 0);
        long long38 = duration37.getMillis();
        int int39 = duration34.compareTo((org.joda.time.ReadableDuration) duration37);
        mutableDateTime27.add((org.joda.time.ReadableDuration) duration34, 26162430);
        long long42 = duration34.getMillis();
        long long43 = duration34.getStandardSeconds();
        mutablePeriod18.setPeriod((org.joda.time.ReadableDuration) duration34);
        int int45 = mutablePeriod18.getMillis();
        mutablePeriod18.addMinutes(26184696);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str28, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test3194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3194");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.months();
        mutableDateTime1.add(durationFieldType4, (int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        mutableDateTime1.setZoneRetainFields(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        org.joda.time.Duration duration12 = new org.joda.time.Duration(0L);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration12, 1);
        org.joda.time.Days days15 = duration12.toStandardDays();
        java.util.TimeZone timeZone17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusWeeks(0);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfYear((int) (byte) 1);
        int int26 = dateTime25.getDayOfMonth();
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime29 = dateTime25.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight21.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property32 = localDate31.dayOfYear();
        org.joda.time.DateMidnight dateMidnight33 = localDate31.toDateMidnight();
        org.joda.time.Chronology chronology34 = localDate31.getChronology();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight21.withFields((org.joda.time.ReadablePartial) localDate31);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight21.withDayOfYear(70);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight39 = property38.roundHalfEvenCopy();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateMidnight39);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration12);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(days15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight39);
    }

    @Test
    public void test3195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3195");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate localDate4 = localDate0.withWeekyear((int) (short) 100);
        int int5 = localDate0.getWeekOfWeekyear();
        java.lang.String str6 = localDate0.toString();
        org.joda.time.DateTime dateTime7 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property8 = dateTime7.minuteOfHour();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22" + "'", str6, "2022-02-22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test3196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3196");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        int int11 = dateTime10.getDayOfMonth();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime10.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime6.withDurationAdded((org.joda.time.ReadableDuration) duration13, 3);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime6.minusDays(2922789);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.yearOfCentury();
        int int21 = dateMidnight19.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight19.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withDurationAdded((long) (byte) 0, (int) (short) 10);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime28 = dateMidnight27.toMutableDateTime();
        mutableDateTime28.add((long) 1);
        mutableDateTime28.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime28.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone34 = mutableDateTime28.getZone();
        boolean boolean35 = dateTimeZone34.isFixed();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight23.withZoneRetainFields(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = localDateTime18.toDateTime(dateTimeZone34);
        int int38 = localDateTime18.getSecondOfMinute();
        int[] intArray39 = localDateTime18.getValues();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514473799,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=13,MILLISECOND=799,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 13 + "'", int38 == 13);
        org.junit.Assert.assertNotNull(intArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[-5981, 10, 27, 26473831]");
    }

    @Test
    public void test3197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3197");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime7 = dateMidnight4.toMutableDateTime();
        boolean boolean9 = dateMidnight4.isEqual((long) 2);
        int int10 = dateMidnight3.compareTo((org.joda.time.ReadableInstant) dateMidnight4);
        boolean boolean12 = dateMidnight4.isBefore(295620100L);
        org.joda.time.YearMonthDay yearMonthDay13 = dateMidnight4.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (short) 10, dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime16.toMutableDateTime();
        java.lang.Object obj18 = mutableDateTime17.clone();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime22.toYearMonthDay();
        java.lang.Object obj24 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType28 = periodType27.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        int int34 = mutablePeriod33.getMonths();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(readableInstant29, (org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        int int43 = mutablePeriod42.getMonths();
        org.joda.time.Interval interval44 = new org.joda.time.Interval(readableInstant38, (org.joda.time.ReadablePeriod) mutablePeriod42);
        int[] intArray47 = chronology36.get((org.joda.time.ReadablePeriod) mutablePeriod42, 1L, (long) 4);
        org.joda.time.Period period48 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType27, chronology36);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(obj24, chronology36);
        org.joda.time.DurationField durationField50 = chronology36.millis();
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay23.withChronologyRetainFields(chronology36);
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay(obj18, chronology36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((java.lang.Object) yearMonthDay13, chronology36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T00:00:00.010Z");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(yearMonthDay51);
    }

    @Test
    public void test3198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3198");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant(1645514159651L);
        java.util.Calendar.Builder builder4 = builder2.setInstant((long) 2024);
        java.util.Calendar.Builder builder6 = builder2.setLenient(false);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 2000, dateTimeZone10);
        java.util.TimeZone timeZone13 = dateTimeZone10.toTimeZone();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime19 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay14.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean25 = timeOfDay21.isSupported(dateTimeFieldType24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property30 = dateTime29.dayOfMonth();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType37);
        mutablePeriod34.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        java.lang.String str40 = mutablePeriod34.toString();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadablePeriod) mutablePeriod34);
        mutablePeriod34.setValue(0, 2022);
        mutablePeriod34.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay21.plus((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.TimeOfDay.Property property48 = timeOfDay47.millisOfSecond();
        org.joda.time.DurationField durationField49 = property48.getDurationField();
        org.joda.time.TimeOfDay timeOfDay50 = property48.getTimeOfDay();
        int int51 = property48.getMaximumValueOverall();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType56);
        int int58 = mutablePeriod57.getMonths();
        org.joda.time.Interval interval59 = new org.joda.time.Interval(readableInstant53, (org.joda.time.ReadablePeriod) mutablePeriod57);
        org.joda.time.Chronology chronology60 = interval59.getChronology();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (short) 100, chronology60);
        org.joda.time.DurationField durationField62 = chronology60.centuries();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.dayOfMonth();
        org.joda.time.TimeOfDay timeOfDay64 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray65 = timeOfDay64.getFieldTypes();
        org.joda.time.Chronology chronology66 = timeOfDay64.getChronology();
        java.util.Locale locale68 = java.util.Locale.CHINA;
        java.lang.String str69 = dateTimeField63.getAsText((org.joda.time.ReadablePartial) timeOfDay64, 0, locale68);
        int int70 = property48.getMaximumShortTextLength(locale68);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone13, locale68);
        java.util.Calendar.Builder builder72 = builder2.setTimeZone(timeZone13);
        int int74 = timeZone13.getOffset((long) 14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = timeZone13.getDisplayName(true, 618);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 618");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT0.034S" + "'", str40, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 999 + "'", int51 == 999);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "0" + "'", str69, "0");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=1645514473845,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=13,MILLISECOND=845,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test3199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3199");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property5 = dateMidnight0.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.withMillis((long) 5);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.withEra(1);
        org.joda.time.DateTime dateTime14 = dateTime9.plusMillis(0);
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTime();
        boolean boolean16 = dateMidnight7.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime19 = dateTime18.toLocalTime();
        org.joda.time.LocalTime localTime21 = localTime19.withMillisOfDay((int) '#');
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean23 = localTime21.isSupported(durationFieldType22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight7.withFieldAdded(durationFieldType22, 26275508);
        org.joda.time.DateTime dateTime26 = dateMidnight25.toDateTime();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test3200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3200");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval3 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        long long4 = interval3.getEndMillis();
        long long5 = interval3.toDurationMillis();
        org.joda.time.Chronology chronology6 = interval3.getChronology();
        org.joda.time.DateTime dateTime7 = interval3.getStart();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        boolean boolean24 = interval14.contains((org.joda.time.ReadableInterval) interval22);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        int int38 = mutablePeriod37.getMonths();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableInstant33, (org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        boolean boolean41 = interval31.contains((org.joda.time.ReadableInterval) interval39);
        boolean boolean42 = interval14.overlaps((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) 86399);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType48);
        int int50 = mutablePeriod49.getMonths();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableInstant45, (org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType57);
        int int59 = mutablePeriod58.getMonths();
        org.joda.time.Interval interval60 = new org.joda.time.Interval(readableInstant54, (org.joda.time.ReadablePeriod) mutablePeriod58);
        int[] intArray63 = chronology52.get((org.joda.time.ReadablePeriod) mutablePeriod58, 1L, (long) 4);
        org.joda.time.PeriodType periodType64 = mutablePeriod58.getPeriodType();
        org.joda.time.Period period65 = duration44.toPeriod(periodType64);
        boolean boolean66 = interval31.equals((java.lang.Object) duration44);
        org.joda.time.DateTime dateTime67 = interval31.getStart();
        org.joda.time.Interval interval68 = interval3.gap((org.joda.time.ReadableInterval) interval31);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Interval interval70 = interval3.withDurationBeforeEnd(readableDuration69);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(interval70);
    }

    @Test
    public void test3201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3201");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.weekOfWeekyear();
        mutableDateTime3.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        int int11 = dateTime10.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTime dateTime16 = dateTime10.plusYears((-1));
        org.joda.time.Chronology chronology17 = dateTime10.getChronology();
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime3.toMutableDateTime(chronology17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundFloor();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime20.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test3202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3202");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        org.joda.time.LocalDate localDate4 = localDate1.withDayOfYear(59);
        java.util.Date date5 = localDate1.toDate();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(chronology13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay14.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay14.minusDays(86399999);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfMonth();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        mutablePeriod29.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        java.lang.String str35 = mutablePeriod29.toString();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadablePeriod) mutablePeriod29);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.minusWeeks(0);
        boolean boolean43 = mutablePeriod29.equals((java.lang.Object) 0);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay14.minus((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType47);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.months();
        mutablePeriod48.set(durationFieldType49, (int) 'a');
        org.joda.time.ReadableDuration readableDuration52 = null;
        mutablePeriod48.add(readableDuration52);
        org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay44.minus((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.Period period55 = mutablePeriod48.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate57 = localDate1.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod48, 26085257);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 97 * 26085257");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT0.034S" + "'", str35, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(yearMonthDay54);
        org.junit.Assert.assertNotNull(period55);
    }

    @Test
    public void test3203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3203");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        int int6 = mutablePeriod5.getMonths();
        org.joda.time.Interval interval7 = new org.joda.time.Interval(readableInstant1, (org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(chronology8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        int int15 = mutablePeriod14.getMonths();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(readableInstant10, (org.joda.time.ReadablePeriod) mutablePeriod14);
        int[] intArray19 = chronology8.get((org.joda.time.ReadablePeriod) mutablePeriod14, 1L, (long) 4);
        org.joda.time.DateTimeField dateTimeField20 = chronology8.monthOfYear();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(2L, chronology8);
        org.joda.time.DateTime.Property property22 = dateTime21.weekOfWeekyear();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfMonth();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType30);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType34);
        mutablePeriod31.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        java.lang.String str37 = mutablePeriod31.toString();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadablePeriod) mutablePeriod31);
        mutablePeriod31.setValue(0, 2022);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod31.setPeriod((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((long) (byte) 0);
        long long47 = duration46.getMillis();
        org.joda.time.Duration duration49 = new org.joda.time.Duration((long) (byte) 0);
        long long50 = duration49.getMillis();
        int int51 = duration46.compareTo((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Duration duration53 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration49, 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType58);
        int int60 = mutablePeriod59.getMonths();
        org.joda.time.Interval interval61 = new org.joda.time.Interval(readableInstant55, (org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.Chronology chronology62 = interval61.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType54.getField(chronology62);
        org.joda.time.Period period67 = duration49.toPeriod(chronology62);
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime21, chronology62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime70 = dateTime21.withSecondOfMinute(26459182);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26459182 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT0.034S" + "'", str37, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(period67);
    }

    @Test
    public void test3204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3204");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("1 Jan 2022 00:00:00 GMT");
        java.lang.String str2 = timeZone1.getID();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = timeZone1.getDisplayName(false, 86399999);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 86399999");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
    }

    @Test
    public void test3205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3205");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusYears((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withYear((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plusDays((int) (byte) 100);
        java.util.Locale locale9 = java.util.Locale.PRC;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale9);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.fromCalendarFields(calendar10);
        org.joda.time.DateTime dateTime12 = localDateTime11.toDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withCenturyOfEra(365);
        int int15 = localDateTime11.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withSecondOfMinute(51);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.days();
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale19);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.fromCalendarFields(calendar20);
        org.joda.time.DateTime dateTime22 = localDateTime21.toDateTime();
        org.joda.time.DateTime dateTime24 = dateTime22.plusHours(12);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime26 = dateMidnight25.toMutableDateTime();
        mutableDateTime26.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.months();
        mutableDateTime26.add(durationFieldType29, (int) (byte) 1);
        org.joda.time.DateTime dateTime33 = dateTime24.withFieldAdded(durationFieldType29, 0);
        boolean boolean34 = periodType18.isSupported(durationFieldType29);
        boolean boolean35 = localDateTime17.isSupported(durationFieldType29);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight6.withFields((org.joda.time.ReadablePartial) localDateTime17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight38 = dateMidnight6.withDayOfYear(26454564);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26454564 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645514475027,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=15,MILLISECOND=27,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645514475027,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=15,MILLISECOND=27,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateMidnight36);
    }

    @Test
    public void test3206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3206");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        long long24 = duration23.getStandardDays();
        org.joda.time.Duration duration25 = duration16.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Period period28 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period30 = period28.minusYears(8);
        org.joda.time.Period period32 = period28.withSeconds(11);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        int int38 = mutablePeriod37.getMonths();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableInstant33, (org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType45);
        int int47 = mutablePeriod46.getMonths();
        org.joda.time.Interval interval48 = new org.joda.time.Interval(readableInstant42, (org.joda.time.ReadablePeriod) mutablePeriod46);
        int[] intArray51 = chronology40.get((org.joda.time.ReadablePeriod) mutablePeriod46, 1L, (long) 4);
        org.joda.time.PeriodType periodType52 = mutablePeriod46.getPeriodType();
        org.joda.time.Period period53 = period28.normalizedStandard(periodType52);
        org.joda.time.Period period54 = duration25.toPeriodTo(readableInstant26, periodType52);
        org.joda.time.Period period56 = period54.multipliedBy(26192581);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period54, readableInstant57);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
    }

    @Test
    public void test3207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3207");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 32770);
    }

    @Test
    public void test3208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3208");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        int int9 = mutablePeriod3.getMonths();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.yearOfCentury();
        int int12 = dateMidnight10.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime18 = timeOfDay13.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        boolean boolean19 = dateMidnight10.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime21 = dateMidnight20.toMutableDateTime();
        mutableDateTime21.add((long) 1);
        mutableDateTime21.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime21.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime21.dayOfYear();
        int int28 = property27.getMaximumValue();
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime30 = dateMidnight29.toMutableDateTime();
        mutableDateTime30.add((long) 1);
        org.joda.time.DateTime dateTime33 = mutableDateTime30.toDateTimeISO();
        mutableDateTime30.addDays((int) (short) 10);
        long long36 = property27.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.property(dateTimeFieldType37);
        org.joda.time.DateMidnight.Property property39 = dateMidnight10.property(dateTimeFieldType37);
        org.joda.time.DateMidnight dateMidnight40 = org.joda.time.DateMidnight.now();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.DateMidnight.Property property42 = dateMidnight10.year();
        org.joda.time.DateMidnight dateMidnight43 = property42.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 365 + "'", int28 == 365);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 35417L + "'", long36 == 35417L);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateMidnight43);
    }

    @Test
    public void test3209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3209");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withMinuteOfHour(0);
        int int9 = localDateTime2.getDayOfMonth();
        int int10 = localDateTime2.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.plusMonths(26223340);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = localDateTime12.toString("Temps universel coordonn\351");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514476402,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=16,MILLISECOND=402,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test3210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3210");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.hourOfDay();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyearOfCentury();
        long long18 = dateTimeField16.roundHalfFloor((long) 1);
        mutableDateTime1.setRounding(dateTimeField16, (int) (byte) 0);
        mutableDateTime1.setTime((long) 10);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        boolean boolean24 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime23);
        java.lang.Object obj25 = mutableDateTime1.clone();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.roundHalfFloor();
        int int28 = mutableDateTime27.getWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "2022-02-22T00:00:00.010Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "2022-02-22T00:00:00.010Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "2022-02-22T00:00:00.010Z");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
    }

    @Test
    public void test3211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3211");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        mutablePeriod15.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        java.lang.String str21 = mutablePeriod15.toString();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Interval interval24 = interval22.withDurationAfterStart(readableDuration23);
        boolean boolean25 = interval6.isBefore((org.joda.time.ReadableInterval) interval22);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        int int31 = mutablePeriod30.getMonths();
        org.joda.time.Interval interval32 = new org.joda.time.Interval(readableInstant26, (org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType37);
        int int39 = mutablePeriod38.getMonths();
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableInstant34, (org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        boolean boolean42 = interval32.contains((org.joda.time.ReadableInterval) interval40);
        long long43 = interval40.getEndMillis();
        org.joda.time.Interval interval44 = interval22.gap((org.joda.time.ReadableInterval) interval40);
        org.joda.time.DateTime dateTime45 = interval40.getStart();
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime45.toYearMonthDay();
        org.joda.time.DateTime dateTime48 = dateTime45.plusMinutes(26200709);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.034S" + "'", str21, "PT0.034S");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645514476468L + "'", long43 == 1645514476468L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test3212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3212");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime6 = dateTime4.withDayOfYear((int) (byte) 1);
        int int7 = dateTime6.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.DateTime dateTime12 = dateTime6.plusYears((-1));
        org.joda.time.Chronology chronology13 = dateTime6.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(381, (int) 'a', 26293596, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test3213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3213");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        boolean boolean28 = dateTimeFormatter27.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter29 = dateTimeFormatter27.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter27.withDefaultYear(1);
        java.io.Writer writer32 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalDate.Property property35 = localDate34.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        org.joda.time.LocalDate localDate37 = property35.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter27.printTo(writer32, (org.joda.time.ReadablePartial) localDate37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(dateTimePrinter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
    }

    @Test
    public void test3214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3214");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusWeeks(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfYear((int) (byte) 1);
        int int10 = dateTime9.getDayOfMonth();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight5.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = localDate15.toDateMidnight();
        org.joda.time.Chronology chronology18 = localDate15.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight5.withFields((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.year();
        org.joda.time.DateMidnight dateMidnight25 = property23.addWrapFieldToCopy(0);
        org.joda.time.DateMidnight dateMidnight26 = property23.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight28 = property23.addToCopy(0);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight30 = property29.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight30);
    }

    @Test
    public void test3215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3215");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (byte) 0);
        long long2 = duration1.getMillis();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfYear();
        org.joda.time.DateMidnight dateMidnight5 = localDate3.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.Hours hours7 = duration1.toStandardHours();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        mutableDateTime9.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutableDateTime9.add(durationFieldType12, (int) (byte) 1);
        int int15 = mutableDateTime9.getSecondOfMinute();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType17 = periodType16.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) mutableDateTime9, periodType17);
        org.joda.time.Duration duration20 = duration1.minus(1645514252464L);
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Period period23 = period21.withMonths(43);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 3);
        mutablePeriod25.addMonths(11);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration32 = null;
        mutablePeriod31.add(readableDuration32);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.months();
        mutablePeriod37.set(durationFieldType38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType45);
        int int47 = mutablePeriod46.getMonths();
        org.joda.time.Interval interval48 = new org.joda.time.Interval(readableInstant42, (org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 100, chronology49);
        boolean boolean51 = durationFieldType38.isSupported(chronology49);
        mutablePeriod31.add(durationFieldType38, (int) (byte) 0);
        boolean boolean54 = mutablePeriod29.isSupported(durationFieldType38);
        mutablePeriod25.add(durationFieldType38, 58);
        org.joda.time.Period period58 = period23.withFieldAdded(durationFieldType38, 329);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds59 = period58.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Seconds as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(period58);
    }

    @Test
    public void test3216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3216");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100, 4, (int) (byte) 10, (int) (short) 1, (int) (short) 1, (int) '4');
        org.joda.time.DateTime dateTime7 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        org.joda.time.DateTime.Property property9 = dateTime7.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test3217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3217");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("T02:16:51.752");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test3218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3218");
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekyearOfCentury();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(1645514182844L, chronology12);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1645514182811L, (long) 25, chronology12);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) 26413686, 1645514410681L, chronology12);
        boolean boolean20 = interval18.isAfter((long) 26272337);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test3219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3219");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.DateTime dateTime2 = mutableDateTime0.toDateTimeISO();
        org.joda.time.DateTime dateTime5 = dateTime2.withDurationAdded((long) 766, 37);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test3220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3220");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("+00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"+00:00\" is malformed at \":00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3221");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutablePeriod4.add(readableDuration5);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100, chronology23);
        boolean boolean25 = durationFieldType12.isSupported(chronology23);
        mutablePeriod4.setPeriod((long) '4', chronology23);
        org.joda.time.LocalTime localTime27 = localTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.LocalTime.Property property28 = localTime27.minuteOfHour();
        org.joda.time.LocalTime.Property property29 = localTime27.millisOfSecond();
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime31 = dateMidnight30.toMutableDateTime();
        mutableDateTime31.add((long) 1);
        org.joda.time.DateTime dateTime34 = mutableDateTime31.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        boolean boolean36 = mutableDateTime31.isSupported(dateTimeFieldType35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime31.hourOfDay();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        int int43 = mutablePeriod42.getMonths();
        org.joda.time.Interval interval44 = new org.joda.time.Interval(readableInstant38, (org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.Chronology chronology45 = interval44.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.weekyearOfCentury();
        long long48 = dateTimeField46.roundHalfFloor((long) 1);
        mutableDateTime31.setRounding(dateTimeField46, (int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology53 = dateMidnight52.getChronology();
        java.util.Locale locale54 = java.util.Locale.CHINA;
        java.util.Locale locale55 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(locale55);
        java.lang.String str57 = locale54.getDisplayVariant(locale55);
        java.util.Calendar calendar58 = dateMidnight52.toCalendar(locale55);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale55.getDisplayCountry(locale59);
        java.lang.String str61 = dateTimeField46.getAsText((long) 1439, locale59);
        java.lang.String str62 = property29.getAsText(locale59);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1645514476577,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=16,MILLISECOND=577,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(calendar58);
        org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "70" + "'", str61, "70");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "577" + "'", str62, "577");
    }

    @Test
    public void test3222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3222");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period3 = period1.minusYears(8);
        org.joda.time.Period period5 = period1.withYears(2);
        org.joda.time.Period period7 = period5.plusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) ' ', chronology9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.months();
        mutablePeriod14.set(durationFieldType15, (int) 'a');
        mutablePeriod10.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        mutablePeriod14.setDays(0);
        mutablePeriod14.clear();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight22.toMutableDateTime();
        mutableDateTime23.add((long) 1);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight26.toMutableDateTime();
        mutableDateTime27.add((long) 1);
        org.joda.time.DateTime dateTime30 = mutableDateTime27.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.years();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime27, readableDuration31, periodType32);
        java.lang.String str34 = mutableDateTime27.toString();
        mutableDateTime27.addMinutes((int) ' ');
        int int37 = mutableDateTime27.getCenturyOfEra();
        mutablePeriod14.setPeriod((org.joda.time.ReadableInstant) mutableDateTime23, (org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.Period period39 = mutablePeriod14.toPeriod();
        org.joda.time.Period period40 = period5.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.Period period42 = period5.plusMinutes(2122);
        org.joda.time.Period period44 = period42.withDays(26184964);
        java.lang.String str45 = period44.toString();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str34, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20 + "'", int37 == 20);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "P2Y26184964DT2122M100S" + "'", str45, "P2Y26184964DT2122M100S");
    }

    @Test
    public void test3223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3223");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.months();
        mutablePeriod3.set(durationFieldType4, (int) 'a');
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutablePeriod3.add(readableDuration7);
        mutablePeriod3.addMinutes(436);
        org.joda.time.MutablePeriod mutablePeriod11 = mutablePeriod3.copy();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        int int17 = mutablePeriod16.getMonths();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableInstant12, (org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Interval interval20 = interval18.withStartMillis(0L);
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = null;
        boolean boolean23 = localDate21.isSupported(dateTimeFieldType22);
        org.joda.time.LocalDate localDate25 = localDate21.withWeekyear((int) (short) 100);
        int int26 = localDate21.getWeekOfWeekyear();
        org.joda.time.Interval interval27 = localDate21.toInterval();
        boolean boolean28 = interval18.isAfter((org.joda.time.ReadableInterval) interval27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        int int34 = mutablePeriod33.getMonths();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(readableInstant29, (org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType40);
        int int42 = mutablePeriod41.getMonths();
        org.joda.time.Interval interval43 = new org.joda.time.Interval(readableInstant37, (org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        boolean boolean45 = interval35.contains((org.joda.time.ReadableInterval) interval43);
        boolean boolean46 = interval27.isAfter((org.joda.time.ReadableInterval) interval35);
        long long47 = interval27.toDurationMillis();
        mutablePeriod11.add((org.joda.time.ReadableInterval) interval27);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 86400000L + "'", long47 == 86400000L);
    }

    @Test
    public void test3224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3224");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateTime dateTime9 = dateTime3.plusYears((-1));
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        java.lang.String str12 = mutableDateTime11.toString();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.withDayOfMonth(8);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfMonth();
        org.joda.time.DateTime dateTime23 = dateTime20.plusSeconds(10);
        org.joda.time.DateTime dateTime25 = dateTime20.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property27 = dateTime25.property(dateTimeFieldType26);
        int int28 = dateMidnight13.get(dateTimeFieldType26);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime11.property(dateTimeFieldType26);
        org.joda.time.DateTime.Property property30 = dateTime9.property(dateTimeFieldType26);
        int int31 = dateTime9.getMinuteOfDay();
        org.joda.time.DateTime dateTime33 = dateTime9.plusWeeks(459);
        org.joda.time.ReadablePartial readablePartial34 = null;
        org.joda.time.DateTime dateTime35 = dateTime9.withFields(readablePartial34);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime35.toMutableDateTimeISO();
        org.joda.time.TimeOfDay timeOfDay37 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime41 = dateTime39.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime42 = timeOfDay37.toDateTime((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime44 = dateTime39.withWeekOfWeekyear((int) '4');
        org.joda.time.DateTime.Property property45 = dateTime39.yearOfCentury();
        org.joda.time.TimeOfDay timeOfDay46 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime51 = timeOfDay46.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay46.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay53.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean57 = timeOfDay53.isSupported(dateTimeFieldType56);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime61 = dateTime59.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property62 = dateTime61.dayOfMonth();
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType65);
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType69);
        mutablePeriod66.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod70);
        java.lang.String str72 = mutablePeriod66.toString();
        org.joda.time.Interval interval73 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadablePeriod) mutablePeriod66);
        mutablePeriod66.setValue(0, 2022);
        mutablePeriod66.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay79 = timeOfDay53.plus((org.joda.time.ReadablePeriod) mutablePeriod66);
        org.joda.time.TimeOfDay.Property property80 = timeOfDay79.millisOfSecond();
        org.joda.time.DurationField durationField81 = property80.getDurationField();
        org.joda.time.TimeOfDay timeOfDay82 = property80.getTimeOfDay();
        int int83 = property80.getMaximumValueOverall();
        java.util.Locale locale85 = java.util.Locale.CHINA;
        java.util.Locale locale86 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar87 = java.util.Calendar.getInstance(locale86);
        java.lang.String str88 = locale85.getDisplayVariant(locale86);
        org.joda.time.TimeOfDay timeOfDay89 = property80.setCopy("1", locale85);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = property80.getFieldType();
        org.joda.time.DurationFieldType durationFieldType91 = dateTimeFieldType90.getRangeDurationType();
        boolean boolean92 = dateTime39.isSupported(dateTimeFieldType90);
        boolean boolean93 = mutableDateTime36.isSupported(dateTimeFieldType90);
        org.joda.time.DateTime dateTime94 = mutableDateTime36.toDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str12, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1439 + "'", int31 == 1439);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "PT0.034S" + "'", str72, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(timeOfDay82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 999 + "'", int83 == 999);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar87);
// flaky:         org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=1645514476712,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=16,MILLISECOND=712,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(timeOfDay89);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertNotNull(durationFieldType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(dateTime94);
    }

    @Test
    public void test3225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3225");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.weekOfWeekyear();
        mutableDateTime3.setSecondOfMinute((int) (byte) 1);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType13 = periodType12.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        int int28 = mutablePeriod27.getMonths();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableInstant23, (org.joda.time.ReadablePeriod) mutablePeriod27);
        int[] intArray32 = chronology21.get((org.joda.time.ReadablePeriod) mutablePeriod27, 1L, (long) 4);
        org.joda.time.Period period33 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType12, chronology21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter9.withChronology(chronology21);
        boolean boolean35 = dateTimeFormatter34.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter36 = dateTimeFormatter34.getPrinter();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType40);
        int int42 = mutablePeriod41.getMonths();
        org.joda.time.Interval interval43 = new org.joda.time.Interval(readableInstant37, (org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.dayOfYear();
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.now(chronology44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter34.withChronology(chronology44);
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime3.toMutableDateTime(chronology44);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight(chronology44);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime53 = dateMidnight52.toMutableDateTime();
        java.lang.String str54 = mutableDateTime53.toString();
        mutableDateTime53.setMonthOfYear(1);
        mutableDateTime53.addWeekyears(4);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((long) (byte) 0);
        long long61 = duration60.getMillis();
        org.joda.time.Duration duration63 = new org.joda.time.Duration((long) (byte) 0);
        long long64 = duration63.getMillis();
        int int65 = duration60.compareTo((org.joda.time.ReadableDuration) duration63);
        mutableDateTime53.add((org.joda.time.ReadableDuration) duration60, 26162430);
        org.joda.time.Duration duration68 = duration60.toDuration();
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight51.minus((org.joda.time.ReadableDuration) duration60);
        int int70 = dateMidnight51.getSecondOfDay();
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime72 = dateMidnight71.toMutableDateTime();
        java.lang.String str73 = mutableDateTime72.toString();
        mutableDateTime72.setMonthOfYear(1);
        mutableDateTime72.addWeekyears(4);
        org.joda.time.Duration duration79 = new org.joda.time.Duration((long) (byte) 0);
        long long80 = duration79.getMillis();
        org.joda.time.Duration duration82 = new org.joda.time.Duration((long) (byte) 0);
        long long83 = duration82.getMillis();
        int int84 = duration79.compareTo((org.joda.time.ReadableDuration) duration82);
        mutableDateTime72.add((org.joda.time.ReadableDuration) duration79, 26162430);
        org.joda.time.Duration duration87 = duration79.toDuration();
        org.joda.time.DateMidnight dateMidnight89 = dateMidnight51.withDurationAdded((org.joda.time.ReadableDuration) duration79, 26242316);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(dateTimePrinter36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str54, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str73, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(dateMidnight89);
    }

    @Test
    public void test3226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3226");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.TimeOfDay timeOfDay36 = property34.getTimeOfDay();
        java.lang.String str37 = property34.getAsShortText();
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale39);
        java.lang.String str41 = locale38.getDisplayVariant(locale39);
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("GMT");
        java.lang.String str44 = locale39.getDisplayScript(locale43);
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.lang.String str46 = locale45.getDisplayScript();
        java.lang.String str47 = locale45.getLanguage();
        java.lang.String str48 = locale43.getDisplayVariant(locale45);
        int int49 = property34.getMaximumTextLength(locale43);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property34.getFieldType();
        java.lang.String str51 = property34.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(timeOfDay36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "931" + "'", str37, "931");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1645514476898,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=16,MILLISECOND=898,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "gmt");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ja" + "'", str47, "ja");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Property[millisOfSecond]" + "'", str51, "Property[millisOfSecond]");
    }

    @Test
    public void test3227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3227");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(900874181690414847L);
    }

    @Test
    public void test3228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3228");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval3 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        long long4 = interval3.getEndMillis();
        long long5 = interval3.toDurationMillis();
        org.joda.time.Chronology chronology6 = interval3.getChronology();
        org.joda.time.DateTime dateTime7 = interval3.getStart();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        boolean boolean24 = interval14.contains((org.joda.time.ReadableInterval) interval22);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        int int38 = mutablePeriod37.getMonths();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableInstant33, (org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        boolean boolean41 = interval31.contains((org.joda.time.ReadableInterval) interval39);
        boolean boolean42 = interval14.overlaps((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) 86399);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType48);
        int int50 = mutablePeriod49.getMonths();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableInstant45, (org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType57);
        int int59 = mutablePeriod58.getMonths();
        org.joda.time.Interval interval60 = new org.joda.time.Interval(readableInstant54, (org.joda.time.ReadablePeriod) mutablePeriod58);
        int[] intArray63 = chronology52.get((org.joda.time.ReadablePeriod) mutablePeriod58, 1L, (long) 4);
        org.joda.time.PeriodType periodType64 = mutablePeriod58.getPeriodType();
        org.joda.time.Period period65 = duration44.toPeriod(periodType64);
        boolean boolean66 = interval31.equals((java.lang.Object) duration44);
        org.joda.time.DateTime dateTime67 = interval31.getStart();
        org.joda.time.Interval interval68 = interval3.gap((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Duration duration69 = interval3.toDuration();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType73);
        int int75 = mutablePeriod74.getMonths();
        org.joda.time.Interval interval76 = new org.joda.time.Interval(readableInstant70, (org.joda.time.ReadablePeriod) mutablePeriod74);
        org.joda.time.Chronology chronology77 = interval76.getChronology();
        org.joda.time.YearMonthDay yearMonthDay78 = new org.joda.time.YearMonthDay(chronology77);
        org.joda.time.YearMonthDay yearMonthDay80 = yearMonthDay78.minusMonths((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight81 = yearMonthDay80.toDateMidnight();
        org.joda.time.DateMidnight.Property property82 = dateMidnight81.dayOfMonth();
        org.joda.time.DateMidnight.Property property83 = dateMidnight81.dayOfWeek();
        org.joda.time.Interval interval84 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration69, (org.joda.time.ReadableInstant) dateMidnight81);
        org.joda.time.DateTime dateTime85 = interval84.getStart();
        org.joda.time.DateTime dateTime87 = dateTime85.minusDays(309);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(yearMonthDay80);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test3229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3229");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.plusYears(2);
        int[] intArray13 = yearMonthDay8.getValues();
        int int14 = yearMonthDay8.getDayOfMonth();
        org.joda.time.DateTime dateTime15 = yearMonthDay8.toDateTimeAtCurrentTime();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[2022, 2, 22]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test3230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3230");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (short) 10);
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        java.lang.String str3 = localDate1.toString();
        org.joda.time.LocalDate.Property property4 = localDate1.yearOfEra();
        org.joda.time.LocalDate localDate6 = property4.setCopy("391");
        org.joda.time.DateTime dateTime7 = localDate6.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 10);
        org.joda.time.LocalDate.Property property10 = localDate9.yearOfCentury();
        java.lang.String str11 = localDate9.toString();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(dateTimeZone13);
        boolean boolean15 = dateTimeZone13.isFixed();
        org.joda.time.Interval interval16 = localDate9.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate18 = localDate9.plusMonths(26337997);
        org.joda.time.DateTime dateTime19 = dateTime7.withFields((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTimeISO();
        int int21 = dateTime19.getDayOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test3231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3231");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 26196152, 1645514213504L);
    }

    @Test
    public void test3232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3232");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.TimeOfDay timeOfDay36 = property34.getTimeOfDay();
        int int37 = property34.getMaximumValueOverall();
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale40);
        java.lang.String str42 = locale39.getDisplayVariant(locale40);
        org.joda.time.TimeOfDay timeOfDay43 = property34.setCopy("1", locale39);
        org.joda.time.DateTime dateTime44 = timeOfDay43.toDateTimeToday();
        org.joda.time.Chronology chronology45 = timeOfDay43.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.months();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType50);
        int int52 = mutablePeriod51.getMonths();
        org.joda.time.Interval interval53 = new org.joda.time.Interval(readableInstant47, (org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay(chronology54);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType59);
        int int61 = mutablePeriod60.getMonths();
        org.joda.time.Interval interval62 = new org.joda.time.Interval(readableInstant56, (org.joda.time.ReadablePeriod) mutablePeriod60);
        int[] intArray65 = chronology54.get((org.joda.time.ReadablePeriod) mutablePeriod60, 1L, (long) 4);
        org.joda.time.DurationField durationField66 = chronology54.eras();
        org.joda.time.DateTimeField dateTimeField67 = chronology54.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField68 = chronology54.clockhourOfDay();
        java.lang.String str69 = chronology54.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval70 = new org.joda.time.Interval((java.lang.Object) durationField46, chronology54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.field.ImpreciseDateTimeField$LinkedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 999 + "'", int37 == 999);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645514477004,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=17,MILLISECOND=4,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str69, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test3233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3233");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusWeeks(26310637);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test3234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3234");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone2);
        long long5 = dateTimeZone2.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone2);
        org.joda.time.LocalDate localDate9 = localDate7.withYear((int) (byte) -1);
        org.joda.time.Period period11 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period13 = period11.minusYears(8);
        org.joda.time.Period period15 = period11.withSeconds(11);
        int int16 = period15.getMinutes();
        org.joda.time.Period period17 = period15.toPeriod();
        org.joda.time.Period period19 = period15.plusWeeks(11);
        org.joda.time.Period period21 = period15.withDays(270);
        org.joda.time.Period period23 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period25 = period23.minusYears(8);
        org.joda.time.Period period27 = period23.withSeconds(11);
        int int28 = period27.getMinutes();
        org.joda.time.Period period29 = period27.toPeriod();
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = null;
        boolean boolean32 = localDate30.isSupported(dateTimeFieldType31);
        org.joda.time.LocalDate.Property property33 = localDate30.yearOfEra();
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        org.joda.time.DurationField durationField35 = property33.getDurationField();
        boolean boolean36 = durationField35.isPrecise();
        boolean boolean37 = period27.equals((java.lang.Object) boolean36);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight38.toMutableDateTime();
        mutableDateTime39.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.months();
        mutableDateTime39.add(durationFieldType42, (int) (byte) 1);
        org.joda.time.Period period46 = period27.withFieldAdded(durationFieldType42, 70);
        int int47 = period21.get(durationFieldType42);
        boolean boolean48 = localDate7.isSupported(durationFieldType42);
        org.joda.time.DateTime dateTime49 = localDate7.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test3235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3235");
        org.joda.time.DateMidnight dateMidnight0 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.minusWeeks(9);
        org.joda.time.DateMidnight.Property property4 = dateMidnight0.monthOfYear();
        java.lang.String str5 = dateMidnight0.toString();
        org.junit.Assert.assertNotNull(dateMidnight0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str5, "2022-02-22T00:00:00.000Z");
    }

    @Test
    public void test3236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3236");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        org.joda.time.DateTimeField dateTimeField28 = chronology14.year();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) (short) 10, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight32.toMutableDateTime();
        mutableDateTime33.add((long) 1);
        org.joda.time.DateTime dateTime36 = mutableDateTime33.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.years();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime33, readableDuration37, periodType38);
        org.joda.time.Chronology chronology40 = mutableDateTime33.getChronology();
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now(chronology40);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime45 = dateTime43.withDayOfYear((int) (byte) 1);
        int int46 = dateTime45.getDayOfMonth();
        org.joda.time.Duration duration48 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime49 = dateTime45.minus((org.joda.time.ReadableDuration) duration48);
        mutableDateTime41.add((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime52 = dateMidnight51.toMutableDateTime();
        java.lang.String str53 = mutableDateTime52.toString();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime52.monthOfYear();
        int int55 = property54.get();
        org.joda.time.MutableDateTime mutableDateTime56 = property54.getMutableDateTime();
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        java.lang.String str60 = dateTimeZone58.getName((long) 100);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(dateTimeZone58);
        mutableDateTime56.setZone(dateTimeZone58);
        mutableDateTime41.setZoneRetainFields(dateTimeZone58);
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(dateTimeZone58);
        mutableDateTime31.setZoneRetainFields(dateTimeZone58);
        long long70 = dateTimeZone58.convertLocalToUTC((long) 26327723, true, 1645514184143L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeField28, dateTimeZone58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str53, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 26327723L + "'", long70 == 26327723L);
    }

    @Test
    public void test3237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3237");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusDays(86399999);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        java.lang.String str29 = mutablePeriod23.toString();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) mutablePeriod23);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusWeeks(0);
        boolean boolean37 = mutablePeriod23.equals((java.lang.Object) 0);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay8.monthOfYear();
        int int40 = property39.getMaximumValueOverall();
        int int41 = property39.get();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0.034S" + "'", str29, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 12 + "'", int40 == 12);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
    }

    @Test
    public void test3238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3238");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.millisOfDay();
        long long7 = chronology2.add((long) 26161854, (long) 26382355, 26275508);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 693209806023194L + "'", long7 == 693209806023194L);
    }

    @Test
    public void test3239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3239");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.TimeOfDay timeOfDay36 = property34.getTimeOfDay();
        int int37 = property34.getMaximumValueOverall();
        int int38 = property34.getMaximumValueOverall();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType42);
        int int44 = mutablePeriod43.getMonths();
        org.joda.time.Interval interval45 = new org.joda.time.Interval(readableInstant39, (org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.weekyearOfCentury();
        long long50 = dateTimeField47.getDifferenceAsLong((long) 436, 1645514168237L);
        java.util.Locale locale52 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str53 = dateTimeField47.getAsText((long) 5, locale52);
        int int54 = property34.getMaximumShortTextLength(locale52);
        org.joda.time.Duration duration57 = new org.joda.time.Duration(1645514172000L, (long) 11);
        java.lang.String str58 = duration57.toString();
        boolean boolean59 = property34.equals((java.lang.Object) duration57);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = property34.getFieldType();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 999 + "'", int37 == 999);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 999 + "'", int38 == 999);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-52L) + "'", long50 == (-52L));
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "70" + "'", str53, "70");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PT-1645514171.989S" + "'", str58, "PT-1645514171.989S");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
    }

    @Test
    public void test3240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3240");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setValue(0, 2022);
        mutablePeriod8.addDays((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight22.toMutableDateTime();
        mutableDateTime23.add((long) 1);
        org.joda.time.DateTime dateTime26 = mutableDateTime23.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.years();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime23, readableDuration27, periodType28);
        org.joda.time.Chronology chronology30 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        mutablePeriod8.add(35417L, chronology30);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.year();
        org.joda.time.DurationField durationField34 = chronology30.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long37 = durationField34.subtract(0L, 1645514295395L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test3241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3241");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(2514077640000L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks(26215723);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusWeeks(26295619);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test3242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3242");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        mutableDateTime6.add((long) 1);
        mutableDateTime6.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        mutableDateTime14.add((long) 1);
        org.joda.time.DateTime dateTime17 = mutableDateTime14.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, readableDuration18, periodType19);
        org.joda.time.Chronology chronology21 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(chronology21);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime22.secondOfDay();
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) (byte) 0);
        long long27 = duration26.getMillis();
        long long28 = duration26.getMillis();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime22, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime22.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime22.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime22.weekyear();
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.minusWeeks(0);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime42 = dateTime40.withDayOfYear((int) (byte) 1);
        int int43 = dateTime42.getDayOfMonth();
        org.joda.time.Duration duration45 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime46 = dateTime42.minus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight38.minus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property49 = localDate48.dayOfYear();
        org.joda.time.DateMidnight dateMidnight50 = localDate48.toDateMidnight();
        org.joda.time.Chronology chronology51 = localDate48.getChronology();
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight38.withFields((org.joda.time.ReadablePartial) localDate48);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight38.withDayOfYear(70);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight38.minusYears(26286492);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight38.minusYears(56);
        int int59 = dateMidnight58.getWeekOfWeekyear();
        int int60 = property32.getDifference((org.joda.time.ReadableInstant) dateMidnight58);
        org.joda.time.MutableDateTime mutableDateTime62 = property32.add(26172489);
        java.util.Locale locale65 = new java.util.Locale("\ud504\ub791\uc2a4\uc5b4", "it_IT");
        java.util.Locale locale68 = new java.util.Locale("\ud504\ub791\uc2a4\uc5b4", "it_IT");
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime72 = dateTime70.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property73 = dateTime72.minuteOfHour();
        org.joda.time.DateTime dateTime74 = property73.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField75 = property73.getField();
        org.joda.time.LocalDate localDate77 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property78 = localDate77.dayOfYear();
        java.util.Locale locale80 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(locale80);
        java.lang.String str82 = localDate77.toString("0", locale80);
        java.lang.String str83 = dateTimeField75.getAsShortText((long) 2022, locale80);
        java.lang.String str84 = locale68.getDisplayVariant(locale80);
        java.lang.String str85 = locale65.getDisplayScript(locale80);
        int int86 = property32.getMaximumShortTextLength(locale65);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 108 + "'", int60 == 108);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertEquals(locale65.toString(), "\ud504\ub791\uc2a4\uc5b4_IT_IT");
        org.junit.Assert.assertEquals(locale68.toString(), "\ud504\ub791\uc2a4\uc5b4_IT_IT");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar81);
// flaky:         org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=1645514480869,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=20,MILLISECOND=869,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0" + "'", str82, "0");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "0" + "'", str83, "0");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 9 + "'", int86 == 9);
    }

    @Test
    public void test3243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3243");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property5 = dateMidnight0.weekOfWeekyear();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate.Property property9 = localDate6.yearOfEra();
        org.joda.time.Interval interval10 = localDate6.toInterval();
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.plusMillis(20);
        boolean boolean14 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime16 = dateTime13.minusDays(10);
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime19 = property17.addToCopy(63113900220000L);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        int int25 = mutablePeriod24.getMonths();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(readableInstant20, (org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(chronology27);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay28.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay28.minusDays(86399999);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfMonth();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType42);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType46);
        mutablePeriod43.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod47);
        java.lang.String str49 = mutablePeriod43.toString();
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadablePeriod) mutablePeriod43);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusWeeks(0);
        boolean boolean57 = mutablePeriod43.equals((java.lang.Object) 0);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay28.minus((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.YearMonthDay.Property property59 = yearMonthDay28.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay60 = property59.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay61 = property59.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay61.minusYears(0);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = property17.compareTo((org.joda.time.ReadablePartial) yearMonthDay63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfHour' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT0.034S" + "'", str49, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
    }

    @Test
    public void test3244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3244");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        int int7 = mutableDateTime6.getYearOfEra();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        mutablePeriod11.addHours((int) (byte) -1);
        mutablePeriod11.addYears(2022);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.LocalTime localTime20 = localTime3.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.LocalTime localTime25 = localTime23.withMillisOfDay((int) '#');
        org.joda.time.LocalTime.Property property26 = localTime25.minuteOfHour();
        int int27 = localTime3.compareTo((org.joda.time.ReadablePartial) localTime25);
        org.joda.time.LocalTime.Property property28 = localTime3.hourOfDay();
        org.joda.time.LocalTime localTime30 = property28.addCopy(1645514213504L);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime32 = dateMidnight31.toMutableDateTime();
        mutableDateTime32.add((long) 1);
        org.joda.time.DateTime dateTime35 = mutableDateTime32.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.years();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime32, readableDuration36, periodType37);
        java.lang.String str39 = mutableDateTime32.toString();
        mutableDateTime32.addMinutes((int) ' ');
        int int42 = mutableDateTime32.getCenturyOfEra();
        mutableDateTime32.setDayOfYear(4);
        mutableDateTime32.setTime(1645514165730L);
        org.joda.time.Period period48 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period50 = period48.minusYears(8);
        org.joda.time.Period period52 = period48.withSeconds(11);
        int int53 = period52.getMinutes();
        mutableDateTime32.add((org.joda.time.ReadablePeriod) period52);
        org.joda.time.Period period56 = period52.minusMillis(13);
        org.joda.time.LocalTime localTime58 = localTime30.withPeriodAdded((org.joda.time.ReadablePeriod) period52, 26223309);
        org.joda.time.Chronology chronology59 = localTime30.getChronology();
        int int60 = localTime30.size();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str39, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20 + "'", int42 == 20);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
    }

    @Test
    public void test3245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3245");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime6 = dateTime3.withMillisOfDay(13);
        org.joda.time.DateTime dateTime8 = dateTime3.plusHours(722);
        org.joda.time.DateTime dateTime10 = dateTime3.withMinuteOfHour(56);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test3246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3246");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateTime dateTime9 = dateTime3.plusYears((-1));
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(1L, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        mutableDateTime14.add((long) 1);
        org.joda.time.DateTime dateTime17 = mutableDateTime14.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, readableDuration18, periodType19);
        org.joda.time.Chronology chronology21 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(chronology21);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime26 = dateTime24.withDayOfYear((int) (byte) 1);
        int int27 = dateTime26.getDayOfMonth();
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime30 = dateTime26.minus((org.joda.time.ReadableDuration) duration29);
        mutableDateTime22.add((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean34 = duration29.isShorterThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((long) (byte) 0);
        long long37 = duration36.getStandardDays();
        org.joda.time.Duration duration38 = duration29.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.Duration duration41 = duration36.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.years();
        java.lang.String str45 = periodType44.toString();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType49);
        int int51 = mutablePeriod50.getMonths();
        org.joda.time.Interval interval52 = new org.joda.time.Interval(readableInstant46, (org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.Chronology chronology53 = interval52.getChronology();
        org.joda.time.Period period54 = new org.joda.time.Period(1645514159731L, (long) 2022, periodType44, chronology53);
        org.joda.time.Period period55 = duration40.toPeriod(periodType44);
        org.joda.time.LocalDate localDate57 = localDate12.withPeriodAdded((org.joda.time.ReadablePeriod) period55, 2022);
        org.joda.time.DateTime dateTime58 = dateTime3.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.DateTime.Property property59 = dateTime3.dayOfWeek();
        int int60 = dateTime3.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PeriodType[Years]" + "'", str45, "PeriodType[Years]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test3247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3247");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusWeeks(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfYear((int) (byte) 1);
        int int10 = dateTime9.getDayOfMonth();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight5.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = localDate15.toDateMidnight();
        org.joda.time.Chronology chronology18 = localDate15.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight5.withFields((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime24 = dateMidnight23.toMutableDateTime();
        mutableDateTime24.add((long) 1);
        org.joda.time.DateTime dateTime27 = mutableDateTime24.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.years();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime24, readableDuration28, periodType29);
        org.joda.time.Chronology chronology31 = mutableDateTime24.getChronology();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(chronology31);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfYear((int) (byte) 1);
        int int37 = dateTime36.getDayOfMonth();
        org.joda.time.Duration duration39 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime40 = dateTime36.minus((org.joda.time.ReadableDuration) duration39);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean44 = duration39.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((long) (byte) 0);
        long long47 = duration46.getStandardDays();
        org.joda.time.Duration duration48 = duration39.plus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.Duration duration51 = duration46.minus((org.joda.time.ReadableDuration) duration50);
        long long52 = duration51.getStandardSeconds();
        boolean boolean53 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration51);
        long long54 = duration51.getStandardSeconds();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime58 = dateTime56.minusWeeks((int) '#');
        org.joda.time.DateTime dateTime60 = dateTime58.plusHours((int) (byte) 100);
        org.joda.time.DateTime dateTime62 = dateTime58.withDayOfWeek((int) (byte) 1);
        org.joda.time.DateTime dateTime64 = dateTime62.plusYears((int) (byte) 0);
        int int65 = dateTime62.getSecondOfDay();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 86399 + "'", int65 == 86399);
    }

    @Test
    public void test3248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3248");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType3 = periodType2.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        int int9 = mutablePeriod8.getMonths();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableInstant4, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Chronology chronology11 = interval10.getChronology();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        int[] intArray22 = chronology11.get((org.joda.time.ReadablePeriod) mutablePeriod17, 1L, (long) 4);
        org.joda.time.Period period23 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType2, chronology11);
        org.joda.time.Period period25 = period23.plusMillis(0);
        org.joda.time.Period period27 = new org.joda.time.Period((long) 24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period28 = period23.plus((org.joda.time.ReadablePeriod) period27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(period25);
    }

    @Test
    public void test3249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3249");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.secondOfDay();
        boolean boolean5 = mutableDateTime1.isEqualNow();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime8 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime10 = localTime8.withMillisOfDay((int) '#');
        org.joda.time.LocalTime.Property property11 = localTime10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        mutableDateTime1.setRounding(dateTimeField12);
        long long15 = dateTimeField12.roundHalfFloor((long) 26173324);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 26160000L + "'", long15 == 26160000L);
    }

    @Test
    public void test3250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3250");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutableInterval mutableInterval8 = interval6.toMutableInterval();
        org.joda.time.DateTime dateTime9 = mutableInterval8.getStart();
        org.joda.time.DateTime.Property property10 = dateTime9.monthOfYear();
        org.joda.time.DateTime dateTime13 = dateTime9.withDurationAdded(1000L, 26421183);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test3251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3251");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 10, (long) ' ');
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(100, 4, (int) (byte) 10, (int) (short) 1, (int) (short) 1, (int) '4');
        org.joda.time.DateTime dateTime10 = dateTime9.withTimeAtStartOfDay();
        boolean boolean11 = interval2.contains((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime13 = dateTime9.withMillis(29335068995000L);
        org.joda.time.DateTime.Property property14 = dateTime9.yearOfEra();
        int int15 = dateTime9.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test3252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3252");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusYears((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, readableDuration5);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime8 = dateMidnight7.toMutableDateTime();
        mutableDateTime8.add((long) 1);
        org.joda.time.DateTime dateTime11 = mutableDateTime8.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.era();
        boolean boolean13 = mutableDateTime8.isSupported(dateTimeFieldType12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime8.hourOfDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        int int20 = mutablePeriod19.getMonths();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekyearOfCentury();
        long long25 = dateTimeField23.roundHalfFloor((long) 1);
        mutableDateTime8.setRounding(dateTimeField23, (int) (byte) 0);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.months();
        mutablePeriod31.set(durationFieldType32, (int) 'a');
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        int int41 = mutablePeriod40.getMonths();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableInstant36, (org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 100, chronology43);
        boolean boolean45 = durationFieldType32.isSupported(chronology43);
        mutableDateTime8.add(durationFieldType32, (int) ' ');
        int int48 = mutableDateTime8.getSecondOfMinute();
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.LocalDate localDate51 = org.joda.time.LocalDate.now(dateTimeZone50);
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now(dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight53 = org.joda.time.DateMidnight.now();
        int int54 = dateTimeZone50.getOffset((org.joda.time.ReadableInstant) dateMidnight53);
        mutableDateTime8.setZoneRetainFields(dateTimeZone50);
        org.joda.time.Duration duration56 = mutablePeriod6.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime8);
        java.util.TimeZone timeZone58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forTimeZone(timeZone58);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight61.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime64 = dateMidnight61.toMutableDateTime();
        boolean boolean66 = dateMidnight61.isEqual((long) 2);
        int int67 = dateMidnight60.compareTo((org.joda.time.ReadableInstant) dateMidnight61);
        org.joda.time.Interval interval68 = dateMidnight60.toInterval();
        org.joda.time.Chronology chronology69 = interval68.getChronology();
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime8, chronology69);
        mutableDateTime8.add(730L);
        java.lang.String str73 = mutableDateTime8.toString();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2024-10-22T00:00:00.731Z" + "'", str73, "2024-10-22T00:00:00.731Z");
    }

    @Test
    public void test3253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3253");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime localTime3 = localTime0.plusMillis(11);
        int int4 = localTime0.size();
        org.joda.time.LocalTime.Property property5 = localTime0.millisOfDay();
        org.joda.time.LocalTime localTime6 = property5.roundCeilingCopy();
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = property5.getAsShortText(locale7);
        org.joda.time.LocalTime localTime10 = property5.setCopy(7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localTime10.getFieldTypes();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "26482925" + "'", str8, "26482925");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
    }

    @Test
    public void test3254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3254");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime3.size();
        org.joda.time.LocalTime.Property property5 = localTime3.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = localTime3.toDateTimeToday(dateTimeZone6);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime1, dateTimeZone6);
        org.joda.time.LocalTime localTime10 = localTime8.plusMillis((int) ' ');
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        int int16 = mutablePeriod15.getMonths();
        org.joda.time.Interval interval17 = new org.joda.time.Interval(readableInstant11, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone22 = chronology18.getZone();
        org.joda.time.DateTime dateTime23 = localTime8.toDateTimeToday(dateTimeZone22);
        org.joda.time.Period period25 = org.joda.time.Period.days((int) (short) -1);
        org.joda.time.Period period27 = period25.minusMinutes((int) (byte) 0);
        org.joda.time.Period period29 = period25.minusWeeks((int) '#');
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime32 = dateTime31.toLocalTime();
        org.joda.time.LocalTime localTime34 = localTime32.withMillisOfDay((int) '#');
        org.joda.time.LocalTime.Property property35 = localTime34.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutablePeriod37.add(readableDuration38);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.months();
        mutablePeriod44.set(durationFieldType45, (int) 'a');
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType52);
        int int54 = mutablePeriod53.getMonths();
        org.joda.time.Interval interval55 = new org.joda.time.Interval(readableInstant49, (org.joda.time.ReadablePeriod) mutablePeriod53);
        org.joda.time.Chronology chronology56 = interval55.getChronology();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (short) 100, chronology56);
        boolean boolean58 = durationFieldType45.isSupported(chronology56);
        mutablePeriod37.setPeriod((long) '4', chronology56);
        int[] intArray60 = mutablePeriod37.getValues();
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType63);
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.months();
        mutablePeriod64.set(durationFieldType65, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType68 = org.joda.time.DurationFieldType.months();
        boolean boolean69 = mutablePeriod64.isSupported(durationFieldType68);
        int int70 = mutablePeriod37.indexOf(durationFieldType68);
        boolean boolean71 = localTime34.isSupported(durationFieldType68);
        int int72 = period25.indexOf(durationFieldType68);
        boolean boolean73 = localTime8.isSupported(durationFieldType68);
        org.joda.time.LocalTime localTime75 = localTime8.minusMillis((int) 'u');
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 0, 0, 0, 0, 0, 0, 52]");
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localTime75);
    }

    @Test
    public void test3255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3255");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        mutableDateTime1.addMinutes((int) ' ');
        int int11 = mutableDateTime1.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMillisOfSecond(26318904);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26318904 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str8, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
    }

    @Test
    public void test3256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3256");
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minusWeeks(0);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfYear((int) (byte) 1);
        int int15 = dateTime14.getDayOfMonth();
        org.joda.time.Duration duration17 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime18 = dateTime14.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight10.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfYear();
        org.joda.time.DateMidnight dateMidnight22 = localDate20.toDateMidnight();
        org.joda.time.Chronology chronology23 = localDate20.getChronology();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight10.withFields((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight10.minus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.year();
        org.joda.time.DateTimeZone dateTimeZone29 = dateMidnight27.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(26299822, 26196307, 321, 381, 47, dateTimeZone29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 381 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
    }

    @Test
    public void test3257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3257");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight0.toMutableDateTime();
        boolean boolean5 = dateMidnight0.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.minusWeeks((int) ' ');
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear((int) (byte) 1);
        int int12 = dateTime11.getDayOfMonth();
        boolean boolean13 = dateMidnight0.isAfter((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.yearOfCentury();
        boolean boolean18 = dateMidnight15.isBefore((long) 2);
        org.joda.time.Duration duration20 = org.joda.time.Duration.millis((long) 20);
        org.joda.time.Duration duration21 = org.joda.time.Duration.ZERO;
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks((int) '#');
        org.joda.time.LocalDateTime localDateTime27 = dateTime24.toLocalDateTime();
        mutableDateTime22.setDate((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.PeriodType periodType30 = periodType29.withWeeksRemoved();
        org.joda.time.Period period31 = duration21.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime22, periodType29);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight15, (org.joda.time.ReadableDuration) duration20, periodType29);
        boolean boolean33 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test3258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3258");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        java.lang.Integer int28 = dateTimeFormatter27.getPivotYear();
        org.joda.time.Chronology chronology29 = dateTimeFormatter27.getChronolgy();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.dayOfMonth();
        int int33 = dateTimeField31.getLeapAmount(26293596L);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test3259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3259");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(19, 26200709, 26396653, 26411388, 26463515, 598, 26291536);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26411388 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3260");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(12);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight6.toMutableDateTime();
        boolean boolean11 = dateMidnight6.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight6.minusWeeks((int) ' ');
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfYear((int) (byte) 1);
        int int18 = dateTime17.getDayOfMonth();
        boolean boolean19 = dateMidnight6.isAfter((org.joda.time.ReadableInstant) dateTime17);
        java.util.GregorianCalendar gregorianCalendar20 = dateTime17.toGregorianCalendar();
        boolean boolean21 = dateTime3.equals((java.lang.Object) dateTime17);
        int int22 = dateTime17.getYear();
        org.joda.time.DateTime dateTime24 = dateTime17.plusHours(26191187);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514483178,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=23,MILLISECOND=178,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1969 + "'", int22 == 1969);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test3261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3261");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutablePeriod4.add(readableDuration5);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100, chronology23);
        boolean boolean25 = durationFieldType12.isSupported(chronology23);
        mutablePeriod4.setPeriod((long) '4', chronology23);
        org.joda.time.LocalTime localTime27 = localTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.LocalTime.Property property28 = localTime27.millisOfSecond();
        org.joda.time.LocalTime localTime29 = property28.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval30 = new org.joda.time.Interval((java.lang.Object) localTime29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime29);
    }

    @Test
    public void test3262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3262");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        int int7 = mutablePeriod6.getMonths();
        org.joda.time.Interval interval8 = new org.joda.time.Interval(readableInstant2, (org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.Chronology chronology9 = interval8.getChronology();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100, chronology9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 2022, chronology9);
        org.joda.time.DateTimeField dateTimeField12 = chronology9.monthOfYear();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test3263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3263");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        java.lang.Integer int28 = dateTimeFormatter27.getPivotYear();
        org.joda.time.Chronology chronology29 = dateTimeFormatter27.getChronolgy();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.yearOfEra();
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = dateTime32.withDayOfYear(32770);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32770 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test3264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3264");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        java.util.Locale locale6 = java.util.Locale.PRC;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.fromCalendarFields(calendar7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withDayOfMonth(8);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime18.plusSeconds(10);
        org.joda.time.DateTime dateTime23 = dateTime18.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property25 = dateTime23.property(dateTimeFieldType24);
        int int26 = dateMidnight11.get(dateTimeFieldType24);
        int int27 = localDateTime8.indexOf(dateTimeFieldType24);
        int int28 = localDateTime8.getMillisOfDay();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime5, (org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.Period period31 = period29.withMillis(22);
        org.joda.time.Period period33 = period31.withWeeks(26229404);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType35 = periodType34.withMinutesRemoved();
        org.joda.time.Period period36 = period31.normalizedStandard(periodType35);
        org.joda.time.Period period38 = period31.minusWeeks(438);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514483276,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=23,MILLISECOND=276,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645514483276,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=23,MILLISECOND=276,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 26483276 + "'", int28 == 26483276);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
    }

    @Test
    public void test3265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3265");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime5 = property4.roundCeilingCopy();
        org.joda.time.DateTime dateTime6 = property4.roundFloorCopy();
        org.joda.time.DateTime dateTime7 = property4.roundFloorCopy();
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks(196);
        int int10 = dateTime7.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 86340000 + "'", int10 == 86340000);
    }

    @Test
    public void test3266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3266");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval15.withDurationAfterStart(readableDuration16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        mutableDateTime19.add((long) 1);
        org.joda.time.DateTime dateTime22 = mutableDateTime19.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime19, readableDuration23, periodType24);
        java.lang.String str26 = mutableDateTime19.toString();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime19.millisOfSecond();
        boolean boolean28 = interval15.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        mutableDateTime19.addWeeks(9);
        mutableDateTime19.add((long) 2022);
        int int33 = mutableDateTime19.getMinuteOfHour();
        int int34 = mutableDateTime19.getSecondOfDay();
        int int35 = mutableDateTime19.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str26, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test3267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3267");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        int int10 = dateTimeField9.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-292275054) + "'", int10 == (-292275054));
    }

    @Test
    public void test3268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3268");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime7 = dateMidnight4.toMutableDateTime();
        boolean boolean9 = dateMidnight4.isEqual((long) 2);
        int int10 = dateMidnight3.compareTo((org.joda.time.ReadableInstant) dateMidnight4);
        org.joda.time.Interval interval11 = dateMidnight3.toInterval();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        int int17 = mutablePeriod16.getMonths();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableInstant12, (org.joda.time.ReadablePeriod) mutablePeriod16);
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale19);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.fromCalendarFields(calendar20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMillisOfSecond(436);
        boolean boolean26 = interval18.equals((java.lang.Object) localDateTime23);
        org.joda.time.Interval interval27 = interval11.gap((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight28.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withDayOfYear(9);
        org.joda.time.Interval interval35 = dateMidnight34.toInterval();
        org.joda.time.DateTime dateTime36 = interval35.getEnd();
        boolean boolean37 = interval18.abuts((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Interval interval38 = interval18.toInterval();
        org.joda.time.Interval interval39 = interval38.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645514483389,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=23,MILLISECOND=389,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
    }

    @Test
    public void test3269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3269");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (short) 10, dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.monthOfYear();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale5);
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromCalendarFields(calendar6);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.minusDays(1439);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        mutableDateTime11.add((long) 1);
        org.joda.time.DateTime dateTime14 = mutableDateTime11.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.years();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime11, readableDuration15, periodType16);
        org.joda.time.Chronology chronology18 = mutableDateTime11.getChronology();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(chronology18);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfYear((int) (byte) 1);
        int int24 = dateTime23.getDayOfMonth();
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime27 = dateTime23.minus((org.joda.time.ReadableDuration) duration26);
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean31 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration33 = new org.joda.time.Duration((long) (byte) 0);
        long long34 = duration33.getStandardDays();
        org.joda.time.Duration duration35 = duration26.plus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.Duration duration38 = duration33.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.years();
        java.lang.String str42 = periodType41.toString();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType46);
        int int48 = mutablePeriod47.getMonths();
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readableInstant43, (org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.Period period51 = new org.joda.time.Period(1645514159731L, (long) 2022, periodType41, chronology50);
        org.joda.time.Period period52 = duration37.toPeriod(periodType41);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay9.minus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.DateTime dateTime54 = yearMonthDay53.toDateTimeAtMidnight();
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) dateTime54);
        mutableDateTime3.setMillis(1641116552302L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645514483435,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=23,MILLISECOND=435,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PeriodType[Years]" + "'", str42, "PeriodType[Years]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test3270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3270");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 436, 35417L);
        java.lang.Object obj3 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePeriod) mutablePeriod21, 1L, (long) 4);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType6, chronology15);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(obj3, chronology15);
        org.joda.time.DurationField durationField29 = chronology15.millis();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField31 = chronology15.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((java.lang.Object) mutablePeriod2, chronology15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MutablePeriod");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test3271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3271");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        long long10 = dateTimeField8.roundHalfFloor((long) 1);
        int int13 = dateTimeField8.getDifference(825603617373359651L, (long) 'x');
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        boolean boolean17 = localDate15.isSupported(dateTimeFieldType16);
        org.joda.time.LocalDate.Property property18 = localDate15.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        long long21 = dateTimeField19.remainder((long) 10);
        java.lang.String str22 = dateTimeField19.toString();
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str25 = locale24.getCountry();
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology28 = dateMidnight27.getChronology();
        java.util.Locale locale29 = java.util.Locale.CHINA;
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale30);
        java.lang.String str32 = locale29.getDisplayVariant(locale30);
        java.util.Calendar calendar33 = dateMidnight27.toCalendar(locale30);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale30.getDisplayCountry(locale34);
        java.lang.String str36 = locale26.getDisplayLanguage(locale34);
        java.lang.String str37 = locale24.getDisplayLanguage(locale26);
        java.util.Locale.setDefault(locale26);
        java.util.Locale locale39 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology41 = dateMidnight40.getChronology();
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        java.lang.String str45 = locale42.getDisplayVariant(locale43);
        java.util.Calendar calendar46 = dateMidnight40.toCalendar(locale43);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale43.getDisplayCountry(locale47);
        java.lang.String str49 = locale39.getDisplayLanguage(locale47);
        java.lang.String str50 = locale26.getDisplayCountry(locale47);
        java.lang.String str51 = dateTimeField19.getAsShortText(26160000L, locale26);
        java.lang.String str52 = locale26.getCountry();
        java.lang.String str53 = dateTimeField8.getAsText(1645514296714L, locale26);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26162337 + "'", int13 == 26162337);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DateTimeField[yearOfEra]" + "'", str22, "DateTimeField[yearOfEra]");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CA" + "'", str25, "CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645514483478,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=23,MILLISECOND=478,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str36, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "fran\347ais" + "'", str37, "fran\347ais");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1645514483478,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=23,MILLISECOND=478,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str49, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uce90\ub098\ub2e4" + "'", str50, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970" + "'", str51, "1970");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "CA" + "'", str52, "CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "22" + "'", str53, "22");
    }

    @Test
    public void test3272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3272");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfYear();
        int int8 = property7.getMaximumValue();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        mutableDateTime10.add((long) 1);
        org.joda.time.DateTime dateTime13 = mutableDateTime10.toDateTimeISO();
        mutableDateTime10.addDays((int) (short) 10);
        long long16 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime10);
        mutableDateTime10.setMillisOfSecond(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear((int) (byte) 1);
        int int23 = dateTime22.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime25 = dateMidnight24.toMutableDateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime25.dayOfMonth();
        mutableDateTime25.addYears(365);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfMonth();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType37);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        mutablePeriod38.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod42);
        java.lang.String str44 = mutablePeriod38.toString();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadablePeriod) mutablePeriod38);
        mutablePeriod38.setValue(0, 2022);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod38.setPeriod((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((long) (byte) 0);
        long long54 = duration53.getMillis();
        org.joda.time.Duration duration56 = new org.joda.time.Duration((long) (byte) 0);
        long long57 = duration56.getMillis();
        int int58 = duration53.compareTo((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration60 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration56, 10);
        long long61 = duration60.getMillis();
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime63 = dateMidnight62.toMutableDateTime();
        mutableDateTime63.add((long) 1);
        org.joda.time.DateTime dateTime66 = mutableDateTime63.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.years();
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime63, readableDuration67, periodType68);
        org.joda.time.Chronology chronology70 = mutableDateTime63.getChronology();
        org.joda.time.MutableDateTime mutableDateTime71 = org.joda.time.MutableDateTime.now(chronology70);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime75 = dateTime73.withDayOfYear((int) (byte) 1);
        int int76 = dateTime75.getDayOfMonth();
        org.joda.time.Duration duration78 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime79 = dateTime75.minus((org.joda.time.ReadableDuration) duration78);
        mutableDateTime71.add((org.joda.time.ReadableDuration) duration78);
        org.joda.time.Duration duration82 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean83 = duration78.isShorterThan((org.joda.time.ReadableDuration) duration82);
        boolean boolean84 = duration60.isLongerThan((org.joda.time.ReadableDuration) duration78);
        mutableDateTime25.add((org.joda.time.ReadableDuration) duration78, 2122);
        long long87 = duration78.getMillis();
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration78);
        org.joda.time.MutableDateTime.Property property89 = mutableDateTime10.monthOfYear();
        java.lang.Object obj90 = mutableDateTime10.clone();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 365 + "'", int8 == 365);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 35417L + "'", long16 == 35417L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT0.034S" + "'", str44, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals(obj90.toString(), "2022-03-04T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "2022-03-04T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "2022-03-04T00:00:00.000Z");
    }

    @Test
    public void test3273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3273");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Interval interval4 = localDate0.toInterval();
        boolean boolean5 = interval4.isBeforeNow();
        org.joda.time.Interval interval6 = interval4.toInterval();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime8 = localDate7.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = dateTime10.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property12 = dateTime10.dayOfMonth();
        boolean boolean13 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property14 = dateTime10.monthOfYear();
        org.joda.time.DateTime dateTime16 = dateTime10.minusWeeks(24);
        boolean boolean17 = dateTime10.isAfterNow();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test3274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3274");
        java.util.Date date1 = new java.util.Date((long) 26179299);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 07:16:19 GMT 1970");
    }

    @Test
    public void test3275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3275");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate7 = property3.setCopy(2022);
        org.joda.time.LocalDate localDate8 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate10 = property3.addToCopy(365);
        org.joda.time.DateTimeField dateTimeField11 = property3.getField();
        org.joda.time.LocalDate localDate12 = property3.getLocalDate();
        org.joda.time.LocalDate localDate13 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDate.Property property14 = localDate13.centuryOfEra();
        org.joda.time.LocalDate localDate15 = property14.getLocalDate();
        org.joda.time.LocalDate localDate17 = property14.addWrapFieldToCopy(26218208);
        org.joda.time.Interval interval18 = localDate17.toInterval();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(interval18);
    }

    @Test
    public void test3276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3276");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.dayOfMonth();
        mutableDateTime6.addYears(365);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.millisOfDay();
        mutableDateTime6.addYears(26344079);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfYear((int) (byte) 1);
        int int18 = dateTime17.getDayOfMonth();
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime21 = dateTime17.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfMonth();
        org.joda.time.DateTime dateTime28 = dateTime25.plusSeconds(10);
        org.joda.time.DateTime.Property property29 = dateTime28.year();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime dateTime32 = dateTime28.minusHours((int) (byte) 100);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime6.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
    }

    @Test
    public void test3277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3277");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.minusYears((int) '#');
        org.joda.time.DateTime.Property property7 = dateTime1.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = property7.setCopy("Ora media di Greenwich");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Ora media di Greenwich\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test3278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3278");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 26229404);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight2.toMutableDateTime();
        int int4 = mutableDateTime3.getYearOfEra();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.months();
        mutablePeriod8.set(durationFieldType9, (int) 'a');
        mutablePeriod8.addHours((int) (byte) -1);
        mutablePeriod8.addYears(2022);
        mutableDateTime3.add((org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.year();
        java.lang.String str18 = property17.toString();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.roundCeiling();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfMonth();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        mutablePeriod28.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        java.lang.String str34 = mutablePeriod28.toString();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadablePeriod) mutablePeriod28);
        mutablePeriod28.setValue(0, 2022);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod28.setPeriod((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((long) (byte) 0);
        long long44 = duration43.getMillis();
        org.joda.time.Duration duration46 = new org.joda.time.Duration((long) (byte) 0);
        long long47 = duration46.getMillis();
        int int48 = duration43.compareTo((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Duration duration50 = duration40.withDurationAdded((org.joda.time.ReadableDuration) duration46, 10);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime52 = dateMidnight51.toMutableDateTime();
        mutableDateTime52.add((long) 1);
        org.joda.time.DateTime dateTime55 = mutableDateTime52.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.years();
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime52, readableDuration56, periodType57);
        org.joda.time.Chronology chronology59 = mutableDateTime52.getChronology();
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now(chronology59);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime64 = dateTime62.withDayOfYear((int) (byte) 1);
        int int65 = dateTime64.getDayOfMonth();
        org.joda.time.Duration duration67 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime68 = dateTime64.minus((org.joda.time.ReadableDuration) duration67);
        mutableDateTime60.add((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Duration duration71 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean72 = duration67.isShorterThan((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Duration duration74 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean75 = duration67.isLongerThan((org.joda.time.ReadableDuration) duration74);
        org.joda.time.Duration duration77 = duration46.withDurationAdded((org.joda.time.ReadableDuration) duration74, 999);
        org.joda.time.LocalDate localDate78 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property79 = localDate78.dayOfYear();
        org.joda.time.DateMidnight dateMidnight80 = localDate78.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight81 = localDate78.toDateMidnight();
        org.joda.time.Period period82 = duration46.toPeriodTo((org.joda.time.ReadableInstant) dateMidnight81);
        org.joda.time.DateMidnight.Property property83 = dateMidnight81.dayOfYear();
        boolean boolean84 = mutableDateTime19.equals((java.lang.Object) dateMidnight81);
        boolean boolean85 = dateMidnight1.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Property[year]" + "'", str18, "Property[year]");
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0.034S" + "'", str34, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test3279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3279");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant(1645514159651L);
        java.util.Calendar.Builder builder6 = builder2.setWeekDate(292269054, 26187085, 349);
        java.util.Calendar.Builder builder10 = builder2.setWeekDate(20, 54, 3600000);
        java.util.Calendar.Builder builder14 = builder10.setDate(43, 25, 26258407);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight15.toMutableDateTime();
        int int17 = mutableDateTime16.getYearOfEra();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.months();
        mutablePeriod21.set(durationFieldType22, (int) 'a');
        mutablePeriod21.addHours((int) (byte) -1);
        mutablePeriod21.addYears(2022);
        mutableDateTime16.add((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight32.toMutableDateTime();
        mutableDateTime33.add((long) 1);
        org.joda.time.DateTime dateTime36 = mutableDateTime33.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.years();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime33, readableDuration37, periodType38);
        java.lang.String str40 = mutableDateTime33.toString();
        org.joda.time.Chronology chronology41 = mutableDateTime33.getChronology();
        mutablePeriod21.setPeriod(1645514159651L, (long) (short) -1, chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.dayOfMonth();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType46);
        int[] intArray50 = chronology41.get((org.joda.time.ReadablePeriod) mutablePeriod47, (long) 10, 1645514176224L);
        org.joda.time.Period period52 = org.joda.time.Period.months(117);
        org.joda.time.Period period54 = period52.plusMinutes(26166853);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.minutes();
        int int56 = period54.get(durationFieldType55);
        mutablePeriod47.add(durationFieldType55, (-292275054));
        int[] intArray59 = mutablePeriod47.getValues();
        java.util.Calendar.Builder builder60 = builder10.setFields(intArray59);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime62 = dateMidnight61.toMutableDateTime();
        java.lang.String str63 = mutableDateTime62.toString();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime62.monthOfYear();
        java.lang.String str65 = mutableDateTime62.toString();
        int int66 = mutableDateTime62.getDayOfYear();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime62.weekyear();
        org.joda.time.MutableDateTime mutableDateTime68 = property67.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property67.getFieldType();
        org.joda.time.DateTimeField dateTimeField70 = property67.getField();
        java.util.Locale locale73 = java.util.Locale.JAPANESE;
        java.lang.String str74 = locale73.getDisplayScript();
        java.util.Locale locale75 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str76 = locale73.getDisplayVariant(locale75);
        java.util.Set<java.lang.String> strSet77 = locale75.getUnicodeLocaleAttributes();
        long long78 = dateTimeField70.set((long) 26294414, "134", locale75);
        java.util.Set<java.lang.String> strSet79 = locale75.getUnicodeLocaleAttributes();
        java.util.Calendar.Builder builder80 = builder60.setLocale(locale75);
        boolean boolean81 = locale75.hasExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str40, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[52, 1, 3, 0, 7, 16, 16, 214]");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 26166853 + "'", int56 == 26166853);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 0, 0, 0, -292275054, 0, 34]");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str63, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str65, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 53 + "'", int66 == 53);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-57937999305586L) + "'", long78 == (-57937999305586L));
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test3280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3280");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.TimeOfDay timeOfDay36 = property34.getTimeOfDay();
        java.util.Locale locale37 = java.util.Locale.JAPANESE;
        java.lang.String str38 = locale37.getDisplayScript();
        java.lang.String str39 = property34.getAsText(locale37);
        java.lang.String str40 = property34.getAsString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "774" + "'", str39, "774");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "774" + "'", str40, "774");
    }

    @Test
    public void test3281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3281");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.secondOfDay();
        int int5 = property4.getLeapAmount();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight6.toMutableDateTime();
        boolean boolean11 = dateMidnight6.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight6.minusWeeks((int) ' ');
        int int14 = property4.compareTo((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.DateTimeField dateTimeField15 = property4.getField();
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        boolean boolean18 = localDate16.isSupported(dateTimeFieldType17);
        org.joda.time.LocalDate.Property property19 = localDate16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        org.joda.time.DurationField durationField21 = property19.getDurationField();
        org.joda.time.LocalDate localDate23 = property19.setCopy(2022);
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = localDate23.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType34);
        int int36 = mutablePeriod35.getMonths();
        org.joda.time.Interval interval37 = new org.joda.time.Interval(readableInstant31, (org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(chronology38);
        java.lang.Object obj40 = null;
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType44 = periodType43.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType48);
        int int50 = mutablePeriod49.getMonths();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableInstant45, (org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType57);
        int int59 = mutablePeriod58.getMonths();
        org.joda.time.Interval interval60 = new org.joda.time.Interval(readableInstant54, (org.joda.time.ReadablePeriod) mutablePeriod58);
        int[] intArray63 = chronology52.get((org.joda.time.ReadablePeriod) mutablePeriod58, 1L, (long) 4);
        org.joda.time.Period period64 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType43, chronology52);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(obj40, chronology52);
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone68);
        org.joda.time.DateTime dateTime70 = localDate65.toDateTimeAtMidnight(dateTimeZone68);
        int[] intArray72 = chronology38.get((org.joda.time.ReadablePartial) localDate65, 1645514171723L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray74 = dateTimeField15.add((org.joda.time.ReadablePartial) localDate23, (int) (byte) 10, intArray72, 26475045);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[2022, 2, 22]");
    }

    @Test
    public void test3282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3282");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfYear(9);
        org.joda.time.Interval interval7 = dateMidnight6.toInterval();
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableDuration9, (org.joda.time.ReadableInstant) dateTime11);
        long long13 = interval12.getEndMillis();
        long long14 = interval12.toDurationMillis();
        org.joda.time.Chronology chronology15 = interval12.getChronology();
        java.lang.String str16 = chronology15.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((java.lang.Object) interval7, chronology15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Interval");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str16, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test3283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3283");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromDateFields(date5);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay6.minusYears(2022);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        mutableDateTime10.add((long) 1);
        org.joda.time.DateTime dateTime13 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.era();
        boolean boolean15 = mutableDateTime10.isSupported(dateTimeFieldType14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime10.hourOfDay();
        boolean boolean17 = yearMonthDay6.equals((java.lang.Object) property16);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay6.plusMonths(26206928);
        org.joda.time.YearMonthDay.Property property20 = yearMonthDay6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property20.getFieldType();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfMonth();
        org.joda.time.DateTime dateTime28 = dateTime25.plusSeconds(10);
        org.joda.time.DateTime.Property property29 = dateTime28.year();
        org.joda.time.DateTime dateTime30 = property29.roundFloorCopy();
        org.joda.time.DateTime.Property property31 = dateTime30.weekyear();
        boolean boolean32 = property20.equals((java.lang.Object) dateTime30);
        org.joda.time.YearMonthDay yearMonthDay33 = property20.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.minusYears(26437853);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
    }

    @Test
    public void test3284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3284");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromDateFields(date5);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay6.minusYears(2022);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        mutableDateTime10.add((long) 1);
        org.joda.time.DateTime dateTime13 = mutableDateTime10.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.era();
        boolean boolean15 = mutableDateTime10.isSupported(dateTimeFieldType14);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime10.hourOfDay();
        boolean boolean17 = yearMonthDay6.equals((java.lang.Object) property16);
        org.joda.time.MutableDateTime mutableDateTime19 = property16.addWrapField(26162285);
        org.joda.time.MutableDateTime mutableDateTime21 = property16.addWrapField(558);
        org.joda.time.MutableDateTime mutableDateTime22 = property16.roundFloor();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test3285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3285");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', chronology1);
        java.util.Locale locale3 = java.util.Locale.PRC;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale3);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromCalendarFields(calendar4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMillis((int) (short) 1);
        int int8 = localDateTime7.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusDays(12);
        org.joda.time.Duration duration12 = new org.joda.time.Duration((long) (byte) 0);
        long long13 = duration12.getStandardDays();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration12, 26161854);
        org.joda.time.Minutes minutes16 = duration12.toStandardMinutes();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        mutableDateTime18.add((long) 1);
        org.joda.time.DateTime dateTime21 = mutableDateTime18.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.years();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime18, readableDuration22, periodType23);
        java.lang.String str25 = mutableDateTime18.toString();
        org.joda.time.Chronology chronology26 = mutableDateTime18.getChronology();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(chronology26);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration12, chronology26);
        mutablePeriod2.addMillis((-7));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514483878,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=23,MILLISECOND=878,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 26483877 + "'", int8 == 26483877);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str25, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test3286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3286");
        java.util.Date date5 = new java.util.Date(100, (-1), (int) (byte) 1, (int) (byte) 100, (int) (short) 0);
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.fromDateFields(date5);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime8 = dateMidnight7.toMutableDateTime();
        int int9 = mutableDateTime8.getYearOfEra();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.months();
        mutablePeriod13.set(durationFieldType14, (int) 'a');
        mutablePeriod13.addHours((int) (byte) -1);
        mutablePeriod13.addYears(2022);
        mutableDateTime8.add((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime25 = dateMidnight24.toMutableDateTime();
        mutableDateTime25.add((long) 1);
        org.joda.time.DateTime dateTime28 = mutableDateTime25.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.years();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime25, readableDuration29, periodType30);
        java.lang.String str32 = mutableDateTime25.toString();
        org.joda.time.Chronology chronology33 = mutableDateTime25.getChronology();
        mutablePeriod13.setPeriod(1645514159651L, (long) (short) -1, chronology33);
        boolean boolean35 = timeOfDay6.equals((java.lang.Object) mutablePeriod13);
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay6.minusMillis(26174743);
        org.joda.time.TimeOfDay.Property property38 = timeOfDay6.minuteOfHour();
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone41);
        long long44 = dateTimeZone41.previousTransition((long) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay(dateTimeZone41);
        java.util.TimeZone timeZone46 = dateTimeZone41.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((java.lang.Object) property38, dateTimeZone41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.TimeOfDay$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sun Dec 05 04:00:00 GMT 1999");
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str32, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-1L) + "'", long44 == (-1L));
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Temps universel coordonn\351");
    }

    @Test
    public void test3287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3287");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, (long) 2, periodType2);
        int int4 = period3.getWeeks();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Period period7 = period3.withFieldAdded(durationFieldType5, 0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear((int) (byte) 1);
        int int12 = dateTime11.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.DateTime dateTime17 = dateTime11.plusYears((-1));
        org.joda.time.Chronology chronology18 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.joda.time.DurationField durationField20 = chronology18.years();
        org.joda.time.DurationFieldType durationFieldType21 = durationField20.getType();
        org.joda.time.Period period23 = period7.withFieldAdded(durationFieldType21, 115);
        org.joda.time.Period period25 = org.joda.time.Period.weeks(10);
        org.joda.time.Period period27 = period25.withDays(2022);
        org.joda.time.Period period28 = period23.plus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period30 = period25.withMinutes(532);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
    }

    @Test
    public void test3288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3288");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(12);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime7 = dateMidnight6.toMutableDateTime();
        mutableDateTime7.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.months();
        mutableDateTime7.add(durationFieldType10, (int) (byte) 1);
        org.joda.time.DateTime dateTime14 = dateTime5.withFieldAdded(durationFieldType10, 0);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone17);
        org.joda.time.DateTime dateTime19 = dateTime14.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(32770);
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = dateTime21.isEqual(readableInstant22);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514483938,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=23,MILLISECOND=938,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test3289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3289");
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight.Property property2 = dateMidnight1.centuryOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = null;
        org.joda.time.format.DateTimeParser dateTimeParser4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser4);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType9 = periodType8.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        int int15 = mutablePeriod14.getMonths();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(readableInstant10, (org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        int int24 = mutablePeriod23.getMonths();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableInstant19, (org.joda.time.ReadablePeriod) mutablePeriod23);
        int[] intArray28 = chronology17.get((org.joda.time.ReadablePeriod) mutablePeriod23, 1L, (long) 4);
        org.joda.time.Period period29 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType8, chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter5.withChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField31 = chronology17.year();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight1.withChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField33 = chronology17.hourOfDay();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(1645514171723L, chronology17);
        org.junit.Assert.assertNotNull(dateMidnight1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test3290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3290");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        mutableDateTime1.setMonthOfYear(1);
        mutableDateTime1.addWeekyears(4);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((long) (byte) 0);
        long long9 = duration8.getMillis();
        org.joda.time.Duration duration11 = new org.joda.time.Duration((long) (byte) 0);
        long long12 = duration11.getMillis();
        int int13 = duration8.compareTo((org.joda.time.ReadableDuration) duration11);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration8, 26162430);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight16.toMutableDateTime();
        mutableDateTime17.add((long) 1);
        org.joda.time.DateTime dateTime20 = mutableDateTime17.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime17, readableDuration21, periodType22);
        org.joda.time.Chronology chronology24 = mutableDateTime17.getChronology();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime1.weekOfWeekyear();
        boolean boolean28 = mutableDateTime1.isEqual((long) 26334385);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str2, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test3291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3291");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        int int2 = strSet1.size();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfYear();
        org.joda.time.DateMidnight dateMidnight5 = localDate3.toDateMidnight();
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        long long10 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime9);
        boolean boolean11 = strSet1.contains((java.lang.Object) property7);
        org.joda.time.LocalDate localDate13 = property7.addWrapFieldToCopy(12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = property7.setCopy("+00:00:00.021");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"+00:00:00.021\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test3292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3292");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime3.size();
        org.joda.time.LocalTime.Property property5 = localTime3.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = localTime3.toDateTimeToday(dateTimeZone6);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime1, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.year();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight11.toMutableDateTime();
        boolean boolean16 = dateMidnight11.isEqual((long) 2);
        int int17 = dateMidnight11.getMillisOfDay();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight11.minusDays((int) 'x');
        boolean boolean20 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateMidnight19);
        int int21 = dateMidnight19.getYearOfCentury();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 21 + "'", int21 == 21);
    }

    @Test
    public void test3293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3293");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval15.withDurationAfterStart(readableDuration16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        mutableDateTime19.add((long) 1);
        org.joda.time.DateTime dateTime22 = mutableDateTime19.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime19, readableDuration23, periodType24);
        java.lang.String str26 = mutableDateTime19.toString();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime19.millisOfSecond();
        boolean boolean28 = interval15.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        mutableDateTime19.addWeeks(9);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime19.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime19.copy();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str26, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
    }

    @Test
    public void test3294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3294");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', chronology1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.months();
        mutablePeriod6.set(durationFieldType7, (int) 'a');
        mutablePeriod2.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod6);
        mutablePeriod6.setDays(0);
        mutablePeriod6.clear();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime15 = dateMidnight14.toMutableDateTime();
        mutableDateTime15.add((long) 1);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        mutableDateTime19.add((long) 1);
        org.joda.time.DateTime dateTime22 = mutableDateTime19.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime19, readableDuration23, periodType24);
        java.lang.String str26 = mutableDateTime19.toString();
        mutableDateTime19.addMinutes((int) ' ');
        int int29 = mutableDateTime19.getCenturyOfEra();
        mutablePeriod6.setPeriod((org.joda.time.ReadableInstant) mutableDateTime15, (org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime15.era();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime15.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime33 = property32.roundFloor();
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str26, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
    }

    @Test
    public void test3295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3295");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.minusYears(702);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(309);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test3296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3296");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (short) 10);
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        java.lang.String str3 = localDate1.toString();
        org.joda.time.LocalDate.Property property4 = localDate1.yearOfEra();
        org.joda.time.LocalDate localDate6 = property4.setCopy("391");
        org.joda.time.LocalDate localDate8 = property4.addWrapFieldToCopy(27425238);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test3297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3297");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.Duration duration6 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime7 = dateTime3.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfMonth();
        org.joda.time.DateTime dateTime14 = dateTime11.plusSeconds(10);
        org.joda.time.DateTime.Property property15 = dateTime14.year();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        mutableDateTime18.add((long) 1);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.secondOfDay();
        java.lang.Object obj22 = mutableDateTime18.clone();
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = localDate23.isSupported(dateTimeFieldType24);
        org.joda.time.LocalDate localDate27 = localDate23.withWeekyear((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime29 = dateMidnight28.toMutableDateTime();
        java.lang.String str30 = mutableDateTime29.toString();
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight31.withDayOfMonth(8);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfMonth();
        org.joda.time.DateTime dateTime41 = dateTime38.plusSeconds(10);
        org.joda.time.DateTime dateTime43 = dateTime38.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property45 = dateTime43.property(dateTimeFieldType44);
        int int46 = dateMidnight31.get(dateTimeFieldType44);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime29.property(dateTimeFieldType44);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime49 = dateMidnight48.toMutableDateTime();
        mutableDateTime49.add((long) 1);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime49.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property52.getFieldType();
        mutableDateTime29.set(dateTimeFieldType53, 0);
        boolean boolean56 = localDate27.isSupported(dateTimeFieldType53);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime((long) (short) 10, dateTimeZone58);
        org.joda.time.DateTime dateTime60 = localDate27.toDateTimeAtStartOfDay(dateTimeZone58);
        java.util.TimeZone timeZone61 = dateTimeZone58.toTimeZone();
        long long63 = dateTimeZone58.previousTransition(1645514308112L);
        mutableDateTime18.setZone(dateTimeZone58);
        org.joda.time.DateTime dateTime65 = dateTime14.withZoneRetainFields(dateTimeZone58);
        int int66 = dateTime14.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str30, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1645514308112L + "'", long63 == 1645514308112L);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 4 + "'", int66 == 4);
    }

    @Test
    public void test3298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3298");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setValue(0, 2022);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        long long24 = duration23.getMillis();
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) (byte) 0);
        long long27 = duration26.getMillis();
        int int28 = duration23.compareTo((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration30 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration26, 10);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime32 = dateMidnight31.toMutableDateTime();
        mutableDateTime32.add((long) 1);
        org.joda.time.DateTime dateTime35 = mutableDateTime32.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.years();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime32, readableDuration36, periodType37);
        org.joda.time.Chronology chronology39 = mutableDateTime32.getChronology();
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(chronology39);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfYear((int) (byte) 1);
        int int45 = dateTime44.getDayOfMonth();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime48 = dateTime44.minus((org.joda.time.ReadableDuration) duration47);
        mutableDateTime40.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean52 = duration47.isShorterThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean55 = duration47.isLongerThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration57 = duration26.withDurationAdded((org.joda.time.ReadableDuration) duration54, 999);
        org.joda.time.LocalDate localDate58 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property59 = localDate58.dayOfYear();
        org.joda.time.DateMidnight dateMidnight60 = localDate58.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight61 = localDate58.toDateMidnight();
        org.joda.time.Period period62 = duration26.toPeriodTo((org.joda.time.ReadableInstant) dateMidnight61);
        org.joda.time.DateMidnight.Property property63 = dateMidnight61.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight64 = property63.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight65 = property63.getDateMidnight();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateMidnight65);
    }

    @Test
    public void test3299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3299");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone5);
        long long8 = dateTimeZone5.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime9 = localDateTime2.toDateTime(dateTimeZone5);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = localDateTime2.getFieldType((int) (byte) 1);
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = localDateTime2.toString("85", locale13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusSeconds(54);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514484351,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=24,MILLISECOND=351,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "85" + "'", str15, "85");
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test3300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3300");
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.yearOfCentury();
        int int5 = dateMidnight3.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime11 = timeOfDay6.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        boolean boolean12 = dateMidnight3.isEqual((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight3.withCenturyOfEra(0);
        int int15 = dateMidnight14.getYear();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight16.toMutableDateTime();
        mutableDateTime17.add((long) 1);
        org.joda.time.DateTime dateTime20 = mutableDateTime17.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime17, readableDuration21, periodType22);
        java.lang.String str24 = mutableDateTime17.toString();
        org.joda.time.Chronology chronology25 = mutableDateTime17.getChronology();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight14.withChronology(chronology25);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((int) (short) 100, 5, (int) (byte) 10, chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.monthOfYear();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime31 = dateTime30.toLocalTime();
        org.joda.time.LocalTime localTime33 = localTime31.withMillisOfDay((int) '#');
        org.joda.time.LocalTime.Property property34 = localTime33.minuteOfHour();
        org.joda.time.LocalTime localTime36 = localTime33.plusMinutes(26162337);
        java.util.Locale locale37 = java.util.Locale.PRC;
        java.lang.String str38 = locale37.getISO3Country();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = dateTimeField28.getAsShortText((org.joda.time.ReadablePartial) localTime36, locale37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str24, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CHN" + "'", str38, "CHN");
    }

    @Test
    public void test3301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3301");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((java.lang.Object) "PT0.034S");
        int int2 = mutablePeriod1.size();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime4 = dateMidnight3.toMutableDateTime();
        mutableDateTime4.add((long) 1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime4.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
        int int9 = property7.getMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime11 = property7.addWrapField(12);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfDay();
        org.joda.time.DateTime dateTime16 = dateTime13.withEra(1);
        org.joda.time.DateTime dateTime18 = dateTime13.plusMillis(0);
        org.joda.time.DateTime.Property property19 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime20 = property19.roundHalfEvenCopy();
        mutablePeriod1.setPeriod((org.joda.time.ReadableInstant) mutableDateTime11, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime24 = dateMidnight23.toMutableDateTime();
        mutableDateTime24.add((long) 1);
        org.joda.time.DateTime dateTime27 = mutableDateTime24.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.years();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime24, readableDuration28, periodType29);
        java.lang.String str31 = mutableDateTime24.toString();
        org.joda.time.Chronology chronology32 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.weekOfWeekyear();
        mutablePeriod1.setPeriod((long) (short) 10, chronology32);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 86399 + "'", int9 == 86399);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str31, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test3302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3302");
        java.lang.Object obj2 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(obj2, chronology14);
        org.joda.time.DateTimeField dateTimeField28 = chronology14.yearOfEra();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology14);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1645514231343L, 1645514162225L, chronology14);
        mutablePeriod30.addHours(26294011);
        boolean boolean34 = mutablePeriod30.equals((java.lang.Object) 789L);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test3303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3303");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        boolean boolean28 = dateTimeFormatter27.isOffsetParsed();
        boolean boolean29 = dateTimeFormatter27.isPrinter();
        java.lang.Integer int30 = dateTimeFormatter27.getPivotYear();
        boolean boolean31 = dateTimeFormatter27.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = dateTimeFormatter27.getPrinter();
        org.joda.time.Chronology chronology33 = dateTimeFormatter27.getChronology();
        org.joda.time.format.DateTimePrinter dateTimePrinter34 = dateTimeFormatter27.getPrinter();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(dateTimePrinter32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNull(dateTimePrinter34);
    }

    @Test
    public void test3304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3304");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        org.joda.time.format.DateTimeParser dateTimeParser28 = dateTimeFormatter27.getParser();
        org.joda.time.Chronology chronology29 = dateTimeFormatter27.getChronology();
        java.util.Locale locale30 = dateTimeFormatter27.getLocale();
        java.lang.Integer int31 = dateTimeFormatter27.getPivotYear();
        org.joda.time.Chronology chronology32 = dateTimeFormatter27.getChronolgy();
        org.joda.time.Chronology chronology33 = chronology32.withUTC();
        java.util.Locale locale34 = java.util.Locale.PRC;
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale34);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.fromCalendarFields(calendar35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withMillisOfSecond(436);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.minusMonths(2022);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusHours(23);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.weekyear();
        org.joda.time.LocalDateTime localDateTime46 = property45.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight47.toMutableDateTime();
        mutableDateTime48.add((long) 1);
        org.joda.time.DateTime dateTime51 = mutableDateTime48.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.years();
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime48, readableDuration52, periodType53);
        org.joda.time.Chronology chronology55 = mutableDateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.clockhourOfHalfday();
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime58 = dateMidnight57.toMutableDateTime();
        mutableDateTime58.add((long) 1);
        org.joda.time.DateTime dateTime61 = mutableDateTime58.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.years();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime58, readableDuration62, periodType63);
        org.joda.time.Weeks weeks65 = period64.toStandardWeeks();
        int[] intArray68 = chronology55.get((org.joda.time.ReadablePeriod) period64, (long) 399, (long) 2024);
        // The following exception was thrown during execution in test generation
        try {
            chronology33.validate((org.joda.time.ReadablePartial) localDateTime46, intArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(dateTimeParser28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNull(locale30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645514484530,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=24,MILLISECOND=530,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(weeks65);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
    }

    @Test
    public void test3305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3305");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "PT0.034S", "53" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.lang.String[] strArray14 = new java.lang.String[] { "PT0.034S", "53" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList15);
        java.lang.String str18 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList15);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.lang.String[] strArray24 = new java.lang.String[] { "PT0.034S", "53" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray33 = new java.lang.String[] { "PT0.034S", "53" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList34);
        java.lang.String str37 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList34);
        java.lang.String[] strArray45 = new java.lang.String[] { "it_IT", "months", "53", "hi!", "months", "it_IT", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight48.plusYears((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.withYear((int) (byte) 0);
        boolean boolean55 = strSet46.remove((java.lang.Object) dateMidnight54);
        java.util.Locale.FilteringMode filteringMode56 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strSet46, filteringMode56);
        java.lang.String str58 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet46);
        java.util.Iterator<java.lang.String> strItor59 = strSet46.iterator();
        java.util.Locale locale60 = java.util.Locale.PRC;
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(locale60);
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.fromCalendarFields(calendar61);
        org.joda.time.DateTime dateTime63 = localDateTime62.toDateTime();
        org.joda.time.DateTime dateTime65 = dateTime63.plusHours(12);
        org.joda.time.DateTime dateTime66 = dateTime63.withTimeAtStartOfDay();
        org.joda.time.Period period68 = org.joda.time.Period.seconds(0);
        org.joda.time.DateTime dateTime69 = dateTime63.plus((org.joda.time.ReadablePeriod) period68);
        org.joda.time.Period period71 = period68.withMonths(26239483);
        boolean boolean72 = strSet46.contains((java.lang.Object) period68);
        java.lang.Object[] objArray73 = strSet46.toArray();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + filteringMode56 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode56.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(strItor59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar61);
// flaky:         org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=1645514484550,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=24,MILLISECOND=550,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[it_IT, months, 53, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[it_IT, months, 53, hi!]");
    }

    @Test
    public void test3306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3306");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusYears((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withYear((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plusDays((int) (byte) 100);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = null;
        org.joda.time.format.DateTimeParser dateTimeParser10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter9, dateTimeParser10);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType15 = periodType14.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        int[] intArray34 = chronology23.get((org.joda.time.ReadablePeriod) mutablePeriod29, 1L, (long) 4);
        org.joda.time.Period period35 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType14, chronology23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter11.withChronology(chronology23);
        org.joda.time.format.DateTimeParser dateTimeParser37 = dateTimeFormatter36.getParser();
        org.joda.time.Chronology chronology38 = dateTimeFormatter36.getChronology();
        java.util.Locale locale39 = dateTimeFormatter36.getLocale();
        java.lang.Integer int40 = dateTimeFormatter36.getPivotYear();
        org.joda.time.Chronology chronology41 = dateTimeFormatter36.getChronology();
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime43 = dateMidnight42.toMutableDateTime();
        mutableDateTime43.add((long) 1);
        org.joda.time.DateTime dateTime46 = mutableDateTime43.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.years();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime43, readableDuration47, periodType48);
        org.joda.time.Chronology chronology50 = mutableDateTime43.getChronology();
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now(chronology50);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime55 = dateTime53.withDayOfYear((int) (byte) 1);
        int int56 = dateTime55.getDayOfMonth();
        org.joda.time.Duration duration58 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime59 = dateTime55.minus((org.joda.time.ReadableDuration) duration58);
        mutableDateTime51.add((org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime62 = dateMidnight61.toMutableDateTime();
        java.lang.String str63 = mutableDateTime62.toString();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime62.monthOfYear();
        int int65 = property64.get();
        org.joda.time.MutableDateTime mutableDateTime66 = property64.getMutableDateTime();
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        java.lang.String str70 = dateTimeZone68.getName((long) 100);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate(dateTimeZone68);
        mutableDateTime66.setZone(dateTimeZone68);
        mutableDateTime51.setZoneRetainFields(dateTimeZone68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter36.withZone(dateTimeZone68);
        org.joda.time.MutableDateTime mutableDateTime75 = dateMidnight8.toMutableDateTime(dateTimeZone68);
        java.util.Locale locale77 = java.util.Locale.JAPANESE;
        java.lang.String str78 = locale77.getDisplayScript();
        java.util.Locale locale79 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str80 = locale77.getDisplayVariant(locale79);
        java.lang.String str81 = dateTimeZone68.getName(1645514159731L, locale77);
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNull(dateTimeParser37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNull(locale39);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str63, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00" + "'", str70, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00" + "'", str81, "+00:00");
    }

    @Test
    public void test3307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3307");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime6 = property4.withMaximumValue();
        java.lang.String str7 = localDateTime6.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514484654,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=24,MILLISECOND=654,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T07:59:24.654" + "'", str7, "2022-02-22T07:59:24.654");
    }

    @Test
    public void test3308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3308");
        org.joda.time.Period period2 = new org.joda.time.Period(1645514461812L, 1645514438009L);
    }

    @Test
    public void test3309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3309");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfMonth();
        org.joda.time.DateTime dateTime16 = dateTime13.plusSeconds(10);
        org.joda.time.DateTime dateTime18 = dateTime13.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property20 = dateTime18.property(dateTimeFieldType19);
        boolean boolean21 = timeOfDay7.isSupported(dateTimeFieldType19);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay7.plusHours(26168880);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.plusMinutes(26371835);
        int int26 = timeOfDay23.size();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
    }

    @Test
    public void test3310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3310");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology13.getZone();
        org.joda.time.DateTime dateTime18 = dateTime2.toDateTime(chronology13);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, readableInstant19);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.centuries();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test3311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3311");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        java.lang.Integer int28 = dateTimeFormatter27.getPivotYear();
        org.joda.time.Chronology chronology29 = dateTimeFormatter27.getChronolgy();
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.dayOfMonth();
        org.joda.time.DurationField durationField32 = chronology29.seconds();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(int28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test3312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3312");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutablePeriod1.add(readableDuration2);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.months();
        mutablePeriod8.set(durationFieldType9, (int) 'a');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100, chronology20);
        boolean boolean22 = durationFieldType9.isSupported(chronology20);
        mutablePeriod1.setPeriod((long) '4', chronology20);
        int[] intArray24 = mutablePeriod1.getValues();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.months();
        mutablePeriod28.set(durationFieldType29, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.months();
        boolean boolean33 = mutablePeriod28.isSupported(durationFieldType32);
        int int34 = mutablePeriod1.indexOf(durationFieldType32);
        mutablePeriod1.addMinutes((int) (byte) -1);
        mutablePeriod1.setDays((int) (short) -1);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 52]");
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test3313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3313");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.months();
        mutablePeriod6.set(durationFieldType7, (int) 'a');
        mutablePeriod6.addHours((int) (byte) -1);
        mutablePeriod6.addYears(2022);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        mutableDateTime18.add((long) 1);
        org.joda.time.DateTime dateTime21 = mutableDateTime18.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.years();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime18, readableDuration22, periodType23);
        java.lang.String str25 = mutableDateTime18.toString();
        org.joda.time.Chronology chronology26 = mutableDateTime18.getChronology();
        mutablePeriod6.setPeriod(1645514159651L, (long) (short) -1, chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.dayOfMonth();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        int[] intArray35 = chronology26.get((org.joda.time.ReadablePeriod) mutablePeriod32, (long) 10, 1645514176224L);
        org.joda.time.Period period37 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period39 = period37.minusYears(8);
        long long42 = chronology26.add((org.joda.time.ReadablePeriod) period39, 1641116552319L, 25);
        // The following exception was thrown during execution in test generation
        try {
            long long48 = chronology26.getDateTimeMillis((long) 620, 270, (int) 'u', (-2), 3);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 270 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str25, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[52, 1, 3, 0, 7, 16, 16, 214]");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-4670314547681L) + "'", long42 == (-4670314547681L));
    }

    @Test
    public void test3314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3314");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (short) 10, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime5 = dateMidnight4.toMutableDateTime();
        mutableDateTime5.add((long) 1);
        org.joda.time.DateTime dateTime8 = mutableDateTime5.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.years();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime5, readableDuration9, periodType10);
        org.joda.time.Chronology chronology12 = mutableDateTime5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology12);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfYear((int) (byte) 1);
        int int18 = dateTime17.getDayOfMonth();
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime21 = dateTime17.minus((org.joda.time.ReadableDuration) duration20);
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime24 = dateMidnight23.toMutableDateTime();
        java.lang.String str25 = mutableDateTime24.toString();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime24.monthOfYear();
        int int27 = property26.get();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.getMutableDateTime();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getName((long) 100);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone30);
        mutableDateTime28.setZone(dateTimeZone30);
        mutableDateTime13.setZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(dateTimeZone30);
        mutableDateTime3.setZoneRetainFields(dateTimeZone30);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = null;
        boolean boolean41 = localDate39.isSupported(dateTimeFieldType40);
        org.joda.time.LocalDate localDate43 = localDate39.withWeekyear((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime45 = dateMidnight44.toMutableDateTime();
        java.lang.String str46 = mutableDateTime45.toString();
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology48 = dateMidnight47.getChronology();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight47.withDayOfMonth(8);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime54 = dateTime52.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property55 = dateTime54.dayOfMonth();
        org.joda.time.DateTime dateTime57 = dateTime54.plusSeconds(10);
        org.joda.time.DateTime dateTime59 = dateTime54.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property61 = dateTime59.property(dateTimeFieldType60);
        int int62 = dateMidnight47.get(dateTimeFieldType60);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime45.property(dateTimeFieldType60);
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime65 = dateMidnight64.toMutableDateTime();
        mutableDateTime65.add((long) 1);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime65.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = property68.getFieldType();
        mutableDateTime45.set(dateTimeFieldType69, 0);
        boolean boolean72 = localDate43.isSupported(dateTimeFieldType69);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime((long) (short) 10, dateTimeZone74);
        org.joda.time.DateTime dateTime76 = localDate43.toDateTimeAtStartOfDay(dateTimeZone74);
        long long78 = dateTimeZone30.getMillisKeepLocal(dateTimeZone74, (long) 13);
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight(1645514376129L, dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str25, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str46, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 13L + "'", long78 == 13L);
    }

    @Test
    public void test3315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3315");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfDay((int) '#');
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = localTime4.getValue(26475045);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26475045");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test3316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3316");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        mutableDateTime1.addMinutes((int) ' ');
        int int11 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        mutablePeriod15.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        java.lang.String str21 = mutablePeriod15.toString();
        mutablePeriod15.setMinutes(9);
        mutablePeriod15.setSeconds((int) (byte) 100);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.MutablePeriod mutablePeriod27 = mutablePeriod15.copy();
        int int28 = mutablePeriod27.getDays();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str8, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.034S" + "'", str21, "PT0.034S");
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test3317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3317");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromDateFields(date5);
        java.time.Instant instant7 = date5.toInstant();
        int int8 = date5.getDate();
        date5.setSeconds(26166853);
        org.joda.time.YearMonthDay yearMonthDay11 = org.joda.time.YearMonthDay.fromDateFields(date5);
        org.joda.time.DateTime dateTime12 = yearMonthDay11.toDateTimeAtCurrentTime();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Jul 03 00:33:13 GMT 1908");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test3318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3318");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone2);
        int int4 = dateMidnight3.getDayOfMonth();
        java.util.Date date5 = dateMidnight3.toDate();
        int int6 = date5.getMinutes();
        long long7 = date5.getTime();
        date5.setSeconds(117);
        java.util.Date date13 = new java.util.Date(9, (-53), 26337997);
        boolean boolean14 = date5.before(date13);
        date13.setYear(48);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Dec 31 00:01:57 GMT 1969");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-86400000L) + "'", long7 == (-86400000L));
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Mon Jul 26 00:00:00 GMT 1948");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test3319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3319");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1645514165598L);
        java.lang.Object obj2 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(obj2, chronology14);
        org.joda.time.DurationField durationField28 = chronology14.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) localDateTime1, chronology14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test3320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3320");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        org.joda.time.Chronology chronology9 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekOfWeekyear();
        org.joda.time.DurationField durationField11 = dateTimeField10.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = timeOfDay12.getFieldTypes();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str17 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) timeOfDay12, 32770, locale15);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay12.secondOfMinute();
        int int19 = timeOfDay12.size();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime22 = dateMidnight21.toMutableDateTime();
        int int23 = mutableDateTime22.getYearOfEra();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.months();
        mutablePeriod27.set(durationFieldType28, (int) 'a');
        mutablePeriod27.addHours((int) (byte) -1);
        mutablePeriod27.addYears(2022);
        mutableDateTime22.add((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight38.toMutableDateTime();
        mutableDateTime39.add((long) 1);
        org.joda.time.DateTime dateTime42 = mutableDateTime39.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.years();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime39, readableDuration43, periodType44);
        java.lang.String str46 = mutableDateTime39.toString();
        org.joda.time.Chronology chronology47 = mutableDateTime39.getChronology();
        mutablePeriod27.setPeriod(1645514159651L, (long) (short) -1, chronology47);
        mutablePeriod27.setSeconds(26160118);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay20.minus((org.joda.time.ReadablePeriod) mutablePeriod27);
        mutablePeriod27.addYears(11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay55 = timeOfDay12.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod27, (-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -15 * -292275054");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str8, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "32770" + "'", str17, "32770");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str46, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(yearMonthDay51);
    }

    @Test
    public void test3321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3321");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra((int) (byte) 0);
        java.util.Date date9 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay10 = org.joda.time.YearMonthDay.fromDateFields(date9);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusYears(2022);
        org.joda.time.DateTime dateTime13 = dateTime1.withFields((org.joda.time.ReadablePartial) yearMonthDay10);
        org.joda.time.DateTime dateTime14 = dateTime1.withLaterOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime14.withEra(43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test3322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3322");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant(1645514159651L);
        java.util.Calendar.Builder builder4 = builder2.setInstant((long) 2024);
        java.util.Calendar.Builder builder6 = builder4.setLenient(false);
        java.util.Locale locale9 = new java.util.Locale("\ud504\ub791\uc2a4\uc5b4", "it_IT");
        java.util.Calendar.Builder builder10 = builder6.setLocale(locale9);
        java.util.Calendar.Builder builder12 = builder10.setInstant((long) 23);
        java.util.Date date18 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay19 = org.joda.time.YearMonthDay.fromDateFields(date18);
        java.time.Instant instant20 = date18.toInstant();
        date18.setTime((long) 2922789);
        date18.setHours(26223309);
        java.util.Calendar.Builder builder25 = builder10.setInstant(date18);
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime30 = dateTime28.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime31 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay26.withHourOfDay(10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = timeOfDay33.getFieldTypes();
        int[] intArray35 = timeOfDay33.getValues();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder36 = builder10.setFields(intArray35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: instant has been set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals(locale9.toString(), "\ud504\ub791\uc2a4\uc5b4_IT_IT");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Thu Jul 16 21:48:42 GMT 4961");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(intArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[10, 21, 25, 497]");
    }

    @Test
    public void test3323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3323");
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        mutableDateTime6.add((long) 1);
        org.joda.time.DateTime dateTime9 = mutableDateTime6.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.era();
        boolean boolean11 = mutableDateTime6.isSupported(dateTimeFieldType10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime6.hourOfDay();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekyearOfCentury();
        long long23 = dateTimeField21.roundHalfFloor((long) 1);
        mutableDateTime6.setRounding(dateTimeField21, (int) (byte) 0);
        mutableDateTime6.setTime((long) 10);
        mutableDateTime6.addYears(1969);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfYear();
        mutableDateTime6.setChronology(chronology37);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((-1645514169L), chronology37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay(26200578, 2020, 26162285, 26223309, chronology37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26200578 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test3324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3324");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', chronology1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.months();
        mutablePeriod6.set(durationFieldType7, (int) 'a');
        mutablePeriod2.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod6);
        mutablePeriod6.setDays(0);
        mutablePeriod6.clear();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime15 = dateMidnight14.toMutableDateTime();
        mutableDateTime15.add((long) 1);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        mutableDateTime19.add((long) 1);
        org.joda.time.DateTime dateTime22 = mutableDateTime19.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime19, readableDuration23, periodType24);
        java.lang.String str26 = mutableDateTime19.toString();
        mutableDateTime19.addMinutes((int) ' ');
        int int29 = mutableDateTime19.getCenturyOfEra();
        mutablePeriod6.setPeriod((org.joda.time.ReadableInstant) mutableDateTime15, (org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType37);
        int int39 = mutablePeriod38.getMonths();
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableInstant34, (org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 100, chronology41);
        org.joda.time.DurationField durationField43 = chronology41.centuries();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 53, (long) 26173324, chronology41);
        org.joda.time.DateTimeField dateTimeField46 = chronology41.era();
        org.joda.time.DateTimeField dateTimeField47 = chronology41.minuteOfHour();
        long long49 = dateTimeField47.roundHalfFloor(69427087891200000L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime15.setRounding(dateTimeField47, 37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 37");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str26, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 69427087891200000L + "'", long49 == 69427087891200000L);
    }

    @Test
    public void test3325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3325");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusDays((-1));
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withYearOfEra(26180820);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks(766);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYear(26347901);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514485625,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=25,MILLISECOND=625,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 625 + "'", int6 == 625);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test3326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3326");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        long long24 = duration23.getStandardDays();
        org.joda.time.Duration duration25 = duration16.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.Duration duration28 = duration23.minus((org.joda.time.ReadableDuration) duration27);
        java.util.Locale locale29 = java.util.Locale.PRC;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale29);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.fromCalendarFields(calendar30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.plusMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.withMinuteOfHour(0);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight38.toMutableDateTime();
        java.lang.String str40 = mutableDateTime39.toString();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime39.monthOfYear();
        mutableDateTime39.addHours((int) '#');
        org.joda.time.DateTime dateTime44 = localDateTime31.toDateTime((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.Interval interval45 = duration23.toIntervalTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Interval interval46 = interval45.toInterval();
        org.joda.time.Duration duration47 = interval45.toDuration();
        java.util.Locale locale48 = java.util.Locale.PRC;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale48);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.fromCalendarFields(calendar49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusMillis((int) (short) 1);
        int int53 = localDateTime52.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property54 = localDateTime52.hourOfDay();
        boolean boolean55 = duration47.equals((java.lang.Object) localDateTime52);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645514485636,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=25,MILLISECOND=636,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str40, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1645514485636,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=25,MILLISECOND=636,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 26485635 + "'", int53 == 26485635);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test3327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3327");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate7 = property3.setCopy(2022);
        org.joda.time.LocalDate localDate8 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfEra();
        org.joda.time.LocalDate localDate10 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate11 = property9.withMinimumValue();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test3328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3328");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone2);
        long long5 = dateTimeZone2.previousTransition((long) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay(dateTimeZone2);
        java.util.TimeZone timeZone7 = dateTimeZone2.toTimeZone();
        boolean boolean8 = timeZone7.useDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test3329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3329");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test3330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3330");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setValue(0, 2022);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        long long24 = duration23.getMillis();
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) (byte) 0);
        long long27 = duration26.getMillis();
        int int28 = duration23.compareTo((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration30 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration26, 10);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime32 = dateMidnight31.toMutableDateTime();
        mutableDateTime32.add((long) 1);
        org.joda.time.DateTime dateTime35 = mutableDateTime32.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.years();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime32, readableDuration36, periodType37);
        org.joda.time.Chronology chronology39 = mutableDateTime32.getChronology();
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(chronology39);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfYear((int) (byte) 1);
        int int45 = dateTime44.getDayOfMonth();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime48 = dateTime44.minus((org.joda.time.ReadableDuration) duration47);
        mutableDateTime40.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean52 = duration47.isShorterThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean55 = duration47.isLongerThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration57 = duration26.withDurationAdded((org.joda.time.ReadableDuration) duration54, 999);
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight58.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property63 = dateMidnight58.year();
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight58.withYearOfCentury(2);
        org.joda.time.Interval interval66 = duration54.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight65);
        int int67 = dateMidnight65.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 22 + "'", int67 == 22);
    }

    @Test
    public void test3331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3331");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.hourOfDay();
        java.lang.String str8 = property7.toString();
        org.joda.time.MutableDateTime mutableDateTime10 = property7.add(0);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalDate localDate14 = localDate12.withCenturyOfEra((int) (short) 0);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        java.lang.String str18 = dateTimeZone16.getName((long) 100);
        org.joda.time.DateTime dateTime19 = localDate14.toDateTimeAtStartOfDay(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = mutableDateTime10.toDateTime(dateTimeZone16);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(chronology29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType34);
        int int36 = mutablePeriod35.getMonths();
        org.joda.time.Interval interval37 = new org.joda.time.Interval(readableInstant31, (org.joda.time.ReadablePeriod) mutablePeriod35);
        int[] intArray40 = chronology29.get((org.joda.time.ReadablePeriod) mutablePeriod35, 1L, (long) 4);
        org.joda.time.DurationField durationField41 = chronology29.eras();
        org.joda.time.DateTimeField dateTimeField42 = chronology29.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period43 = new org.joda.time.Period((java.lang.Object) dateTimeZone16, periodType21, chronology29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[hourOfDay]" + "'", str8, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test3332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3332");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period3 = period1.minusYears(8);
        org.joda.time.Period period5 = period1.withYears(2);
        org.joda.time.Period period7 = period5.plusMillis((int) (byte) 10);
        org.joda.time.Period period9 = period7.plusDays((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) (short) 10);
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime20 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType22 = periodType21.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight14, (org.joda.time.ReadableInstant) dateTime17, periodType22);
        org.joda.time.PeriodType periodType24 = periodType22.withDaysRemoved();
        org.joda.time.Period period25 = period9.normalizedStandard(periodType24);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight26.toMutableDateTime();
        mutableDateTime27.add((long) 1);
        org.joda.time.DateTime dateTime30 = mutableDateTime27.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.years();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime27, readableDuration31, periodType32);
        java.lang.String str34 = mutableDateTime27.toString();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime27.millisOfSecond();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period25, (org.joda.time.ReadableInstant) mutableDateTime27);
        boolean boolean37 = mutableDateTime27.isAfterNow();
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight38.toMutableDateTime();
        mutableDateTime39.add((long) 1);
        org.joda.time.DateTime dateTime42 = mutableDateTime39.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.years();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime39, readableDuration43, periodType44);
        java.lang.String str46 = mutableDateTime39.toString();
        org.joda.time.Chronology chronology47 = mutableDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.weekOfWeekyear();
        org.joda.time.DurationField durationField49 = dateTimeField48.getRangeDurationField();
        java.util.Locale locale51 = java.util.Locale.CHINA;
        java.util.Locale locale52 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(locale52);
        java.lang.String str54 = locale51.getDisplayVariant(locale52);
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("GMT");
        java.lang.String str57 = locale52.getDisplayScript(locale56);
        java.util.Locale locale58 = java.util.Locale.JAPANESE;
        java.lang.String str59 = locale58.getDisplayScript();
        java.lang.String str60 = locale58.getLanguage();
        java.lang.String str61 = locale56.getDisplayVariant(locale58);
        java.lang.String str62 = dateTimeField48.getAsShortText((long) 17, locale58);
        org.joda.time.TimeOfDay timeOfDay63 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime67 = dateTime65.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime68 = timeOfDay63.toDateTime((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.TimeOfDay timeOfDay70 = timeOfDay63.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay72 = timeOfDay70.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean74 = timeOfDay70.isSupported(dateTimeFieldType73);
        int int75 = timeOfDay70.getHourOfDay();
        int int76 = dateTimeField48.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay70);
        mutableDateTime27.setRounding(dateTimeField48, 0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str34, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str46, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1645514485764,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=25,MILLISECOND=764,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "gmt");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ja" + "'", str60, "ja");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1" + "'", str62, "1");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(timeOfDay72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 10 + "'", int75 == 10);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test3333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3333");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        boolean boolean7 = dateTimeField6.isLenient();
        int int9 = dateTimeField6.getMaximumValue((long) 0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 999 + "'", int9 == 999);
    }

    @Test
    public void test3334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3334");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.lang.String str1 = locale0.getDisplayScript();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.months();
        mutablePeriod6.set(durationFieldType7, (int) 'a');
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        int int16 = mutablePeriod15.getMonths();
        org.joda.time.Interval interval17 = new org.joda.time.Interval(readableInstant11, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 100, chronology18);
        boolean boolean20 = durationFieldType7.isSupported(chronology18);
        boolean boolean21 = durationFieldType2.isSupported(chronology18);
        org.joda.time.DateTimeField dateTimeField22 = chronology18.yearOfCentury();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime25 = localTime23.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutablePeriod27.add(readableDuration28);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.months();
        mutablePeriod34.set(durationFieldType35, (int) 'a');
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType42);
        int int44 = mutablePeriod43.getMonths();
        org.joda.time.Interval interval45 = new org.joda.time.Interval(readableInstant39, (org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) 100, chronology46);
        boolean boolean48 = durationFieldType35.isSupported(chronology46);
        mutablePeriod27.setPeriod((long) '4', chronology46);
        org.joda.time.LocalTime localTime50 = localTime25.minus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalTime.Property property51 = localTime50.millisOfSecond();
        org.joda.time.LocalTime localTime52 = property51.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property56 = dateTime55.secondOfDay();
        org.joda.time.DateTime dateTime58 = dateTime55.withEra(1);
        org.joda.time.DateTime dateTime60 = dateTime55.plusMillis(0);
        org.joda.time.DateTime.Property property61 = dateTime55.hourOfDay();
        java.util.Locale locale62 = java.util.Locale.ITALY;
        java.lang.String str63 = locale62.getDisplayName();
        int int64 = property61.getMaximumShortTextLength(locale62);
        java.lang.String str65 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) localTime52, 26172160, locale62);
        java.lang.String str66 = locale0.getDisplayVariant(locale62);
        boolean boolean67 = locale62.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "italien (Italie)" + "'", str63, "italien (Italie)");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "26172160" + "'", str65, "26172160");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test3335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3335");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate((int) 'a', (int) (short) 1, 702);
        java.util.Locale locale5 = java.util.Locale.PRC;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale5);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromCalendarFields(calendar6);
        calendar6.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone15 = calendar6.getTimeZone();
        int int16 = timeZone15.getRawOffset();
        java.util.Calendar.Builder builder17 = builder4.setTimeZone(timeZone15);
        java.util.Calendar.Builder builder21 = builder4.setDate(26162616, 11, 32772);
        java.util.Calendar calendar22 = builder21.build();
        java.util.Locale locale23 = java.util.Locale.PRC;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(locale23);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.fromCalendarFields(calendar24);
        calendar24.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        boolean boolean34 = calendar24.before((java.lang.Object) 10L);
        long long35 = calendar24.getTimeInMillis();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getTimeZone("UnsupportedDurationField[eras]");
        calendar24.setTimeZone(timeZone37);
        java.util.Calendar.Builder builder39 = builder21.setTimeZone(timeZone37);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        long long47 = dateTimeZone43.convertLocalToUTC((long) 59, true, (long) 37);
        boolean boolean48 = dateTimeZone43.isFixed();
        long long50 = dateTimeZone43.nextTransition(1645514182844L);
        java.util.Locale locale51 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str52 = locale51.getCountry();
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology55 = dateMidnight54.getChronology();
        java.util.Locale locale56 = java.util.Locale.CHINA;
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(locale57);
        java.lang.String str59 = locale56.getDisplayVariant(locale57);
        java.util.Calendar calendar60 = dateMidnight54.toCalendar(locale57);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale57.getDisplayCountry(locale61);
        java.lang.String str63 = locale53.getDisplayLanguage(locale61);
        java.lang.String str64 = locale51.getDisplayLanguage(locale53);
        java.util.Locale.setDefault(locale53);
        boolean boolean66 = dateTimeZone43.equals((java.lang.Object) locale53);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = timeZone37.getDisplayName(true, 63, locale53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 63");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=0,MINUTE=2022,SECOND=32,MILLISECOND=34,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=825553110412800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=26162706,MONTH=7,WEEK_OF_YEAR=34,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=235,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1641116552034,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=32,MILLISECOND=34,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1641116552034L + "'", long35 == 1641116552034L);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 59L + "'", long47 == 59L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645514182844L + "'", long50 == 1645514182844L);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "CA" + "'", str52, "CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645514486035,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=26,MILLISECOND=35,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(calendar60);
        org.junit.Assert.assertEquals(calendar60.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str63, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "fran\347ais" + "'", str64, "fran\347ais");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test3336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3336");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.lang.String str9 = locale8.getDisplayScript();
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        java.lang.String str12 = dateTimeField6.getAsText(31, locale8);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = dateTimeField6.set(1645514156600L, 26200578);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26200578 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "31" + "'", str12, "31");
    }

    @Test
    public void test3337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3337");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology13.getZone();
        org.joda.time.DateTime dateTime18 = dateTime2.toDateTime(chronology13);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test3338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3338");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1645514361623L);
    }

    @Test
    public void test3339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3339");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Interval interval4 = localDate0.toInterval();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime8 = dateTime6.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfMonth();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        mutablePeriod13.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        java.lang.String str19 = mutablePeriod13.toString();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod13.setValue(0, 2022);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) (byte) 0);
        long long29 = duration28.getMillis();
        org.joda.time.Duration duration31 = new org.joda.time.Duration((long) (byte) 0);
        long long32 = duration31.getMillis();
        int int33 = duration28.compareTo((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration35 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration31, 10);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight36.toMutableDateTime();
        mutableDateTime37.add((long) 1);
        org.joda.time.DateTime dateTime40 = mutableDateTime37.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.years();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime37, readableDuration41, periodType42);
        org.joda.time.Chronology chronology44 = mutableDateTime37.getChronology();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(chronology44);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfYear((int) (byte) 1);
        int int50 = dateTime49.getDayOfMonth();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime53 = dateTime49.minus((org.joda.time.ReadableDuration) duration52);
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean57 = duration52.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration59 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean60 = duration52.isLongerThan((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Duration duration62 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration59, 999);
        org.joda.time.LocalDate localDate63 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property64 = localDate63.dayOfYear();
        org.joda.time.DateMidnight dateMidnight65 = localDate63.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight66 = localDate63.toDateMidnight();
        org.joda.time.Period period67 = duration31.toPeriodTo((org.joda.time.ReadableInstant) dateMidnight66);
        long long68 = duration31.getStandardDays();
        org.joda.time.Interval interval69 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration31);
        long long70 = duration31.getStandardHours();
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime72 = dateMidnight71.toMutableDateTime();
        java.lang.String str73 = mutableDateTime72.toString();
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime72.monthOfYear();
        mutableDateTime72.addYears(100);
        int int77 = mutableDateTime72.getWeekyear();
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime72.secondOfMinute();
        mutableDateTime72.setDate(0L);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime72.weekyear();
        org.joda.time.Interval interval82 = duration31.toIntervalFrom((org.joda.time.ReadableInstant) mutableDateTime72);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0.034S" + "'", str19, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str73, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2122 + "'", int77 == 2122);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(interval82);
    }

    @Test
    public void test3340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3340");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology7.getZone();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.weekyear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test3341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3341");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(1L, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone4);
        java.lang.String str9 = dateTimeZone4.getShortName((long) 1969);
        org.joda.time.Interval interval10 = localDate0.toInterval(dateTimeZone4);
        boolean boolean11 = interval10.isAfterNow();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00" + "'", str9, "+00:00");
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3342");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        org.joda.time.Duration duration3 = new org.joda.time.Duration(0L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.add((int) (short) 1);
        org.joda.time.Interval interval9 = property6.toInterval();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime14 = dateTime12.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property15 = dateTime14.minuteOfHour();
        org.joda.time.DateTime dateTime16 = property15.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField17 = property15.getField();
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfYear();
        java.util.Locale locale22 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale22);
        java.lang.String str24 = localDate19.toString("0", locale22);
        java.lang.String str25 = dateTimeField17.getAsShortText((long) 2022, locale22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime26 = property6.set("fran\347ais (Canada)", locale22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"franc?ais (Canada)\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645514487024,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=27,MILLISECOND=24,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
    }

    @Test
    public void test3343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3343");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay4 = dateTime3.toYearMonthDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod18, 1L, (long) 4);
        org.joda.time.PeriodType periodType24 = mutablePeriod18.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay4.minus((org.joda.time.ReadablePeriod) mutablePeriod18);
        mutablePeriod18.clear();
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property28 = localDate27.dayOfYear();
        org.joda.time.DateMidnight dateMidnight29 = localDate27.toDateMidnight();
        org.joda.time.LocalDate.Property property30 = localDate27.weekOfWeekyear();
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property32 = localDate27.year();
        org.joda.time.LocalDate localDate34 = localDate27.withYear((int) '#');
        org.joda.time.Period period36 = org.joda.time.Period.days((int) (short) -1);
        org.joda.time.Period period38 = period36.minusMinutes((int) (byte) 0);
        org.joda.time.Period period40 = period36.minusMinutes(32772);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.months();
        mutablePeriod44.set(durationFieldType45, (int) 'a');
        int int48 = period40.indexOf(durationFieldType45);
        org.joda.time.LocalDate localDate50 = localDate34.withFieldAdded(durationFieldType45, 26296609);
        boolean boolean51 = mutablePeriod18.isSupported(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test3344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3344");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.setHourOfDay((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime1.copy();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration6, (org.joda.time.ReadableInstant) dateTime8);
        long long10 = interval9.getEndMillis();
        long long11 = interval9.toDurationMillis();
        org.joda.time.Chronology chronology12 = interval9.getChronology();
        org.joda.time.DateTime dateTime13 = interval9.getStart();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        boolean boolean30 = interval20.contains((org.joda.time.ReadableInterval) interval28);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType34);
        int int36 = mutablePeriod35.getMonths();
        org.joda.time.Interval interval37 = new org.joda.time.Interval(readableInstant31, (org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType42);
        int int44 = mutablePeriod43.getMonths();
        org.joda.time.Interval interval45 = new org.joda.time.Interval(readableInstant39, (org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        boolean boolean47 = interval37.contains((org.joda.time.ReadableInterval) interval45);
        boolean boolean48 = interval20.overlaps((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((long) 86399);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType54);
        int int56 = mutablePeriod55.getMonths();
        org.joda.time.Interval interval57 = new org.joda.time.Interval(readableInstant51, (org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.Chronology chronology58 = interval57.getChronology();
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType63);
        int int65 = mutablePeriod64.getMonths();
        org.joda.time.Interval interval66 = new org.joda.time.Interval(readableInstant60, (org.joda.time.ReadablePeriod) mutablePeriod64);
        int[] intArray69 = chronology58.get((org.joda.time.ReadablePeriod) mutablePeriod64, 1L, (long) 4);
        org.joda.time.PeriodType periodType70 = mutablePeriod64.getPeriodType();
        org.joda.time.Period period71 = duration50.toPeriod(periodType70);
        boolean boolean72 = interval37.equals((java.lang.Object) duration50);
        org.joda.time.DateTime dateTime73 = interval37.getStart();
        org.joda.time.Interval interval74 = interval9.gap((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Period period75 = interval37.toPeriod();
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period75, 26272337);
        mutableDateTime1.addWeeks(45);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.PeriodType periodType84 = null;
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType84);
        int int86 = mutablePeriod85.getMonths();
        org.joda.time.Interval interval87 = new org.joda.time.Interval(readableInstant81, (org.joda.time.ReadablePeriod) mutablePeriod85);
        org.joda.time.Chronology chronology88 = interval87.getChronology();
        org.joda.time.DateTimeField dateTimeField89 = chronology88.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField90 = chronology88.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField91 = chronology88.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField92 = dateTimeFieldType80.getField(chronology88);
        org.joda.time.DurationField durationField93 = dateTimeField92.getDurationField();
        long long95 = dateTimeField92.roundFloor((-19045L));
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setRounding(dateTimeField92, 244);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 244");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + (-3600000L) + "'", long95 == (-3600000L));
    }

    @Test
    public void test3345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3345");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property16 = dateTime15.secondOfDay();
        org.joda.time.DateTime dateTime18 = dateTime15.withEra(1);
        org.joda.time.DateTime dateTime20 = dateTime15.plusMillis(0);
        org.joda.time.DateTime dateTime22 = dateTime15.plusHours(5);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime24 = dateMidnight23.toMutableDateTime();
        mutableDateTime24.add((long) 1);
        org.joda.time.DateTime dateTime27 = mutableDateTime24.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.years();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime24, readableDuration28, periodType29);
        org.joda.time.Chronology chronology31 = mutableDateTime24.getChronology();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(chronology31);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfYear((int) (byte) 1);
        int int37 = dateTime36.getDayOfMonth();
        org.joda.time.Duration duration39 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime40 = dateTime36.minus((org.joda.time.ReadableDuration) duration39);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean44 = duration39.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((long) (byte) 0);
        long long47 = duration46.getMillis();
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property49 = localDate48.dayOfYear();
        org.joda.time.DateMidnight dateMidnight50 = localDate48.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration46, (org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Hours hours52 = duration46.toStandardHours();
        org.joda.time.Hours hours53 = duration46.toStandardHours();
        boolean boolean54 = duration39.isEqual((org.joda.time.ReadableDuration) duration46);
        org.joda.time.DateTime dateTime55 = dateTime22.minus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime57 = dateMidnight56.toMutableDateTime();
        mutableDateTime57.add((long) 1);
        org.joda.time.DateTime dateTime60 = mutableDateTime57.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.era();
        boolean boolean62 = mutableDateTime57.isSupported(dateTimeFieldType61);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime57.hourOfDay();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType67);
        int int69 = mutablePeriod68.getMonths();
        org.joda.time.Interval interval70 = new org.joda.time.Interval(readableInstant64, (org.joda.time.ReadablePeriod) mutablePeriod68);
        org.joda.time.Chronology chronology71 = interval70.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.weekyearOfCentury();
        long long74 = dateTimeField72.roundHalfFloor((long) 1);
        mutableDateTime57.setRounding(dateTimeField72, (int) (byte) 0);
        mutableDateTime57.setTime((long) 10);
        org.joda.time.MutableDateTime mutableDateTime79 = new org.joda.time.MutableDateTime();
        boolean boolean80 = mutableDateTime57.isBefore((org.joda.time.ReadableInstant) mutableDateTime79);
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime82 = dateMidnight81.toMutableDateTime();
        mutableDateTime82.add((long) 1);
        org.joda.time.DateTime dateTime85 = mutableDateTime82.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration86 = null;
        org.joda.time.PeriodType periodType87 = org.joda.time.PeriodType.years();
        org.joda.time.Period period88 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime82, readableDuration86, periodType87);
        org.joda.time.Chronology chronology89 = mutableDateTime82.getChronology();
        org.joda.time.YearMonthDay yearMonthDay90 = new org.joda.time.YearMonthDay(chronology89);
        mutableDateTime79.setChronology(chronology89);
        org.joda.time.DateTime dateTime92 = dateTime55.withChronology(chronology89);
        java.lang.String str93 = chronology89.toString();
        org.joda.time.DateMidnight dateMidnight94 = new org.joda.time.DateMidnight(26196152, (int) (short) 1, 4, chronology89);
        org.joda.time.DateMidnight dateMidnight95 = org.joda.time.DateMidnight.now(chronology89);
        org.joda.time.YearMonthDay yearMonthDay96 = yearMonthDay10.withChronologyRetainFields(chronology89);
        int int97 = yearMonthDay96.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(hours52);
        org.junit.Assert.assertNotNull(hours53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str93, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateMidnight95);
        org.junit.Assert.assertNotNull(yearMonthDay96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 3 + "'", int97 == 3);
    }

    @Test
    public void test3346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3346");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDayOfMonth(8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime12.plusSeconds(10);
        org.joda.time.DateTime dateTime17 = dateTime12.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property19 = dateTime17.property(dateTimeFieldType18);
        int int20 = dateMidnight5.get(dateTimeFieldType18);
        int int21 = localDateTime2.indexOf(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime2.minusWeeks(8);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.monthOfYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514487170,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=27,MILLISECOND=170,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test3347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3347");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = dateTimeField8.set(1645514473032L, 141);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 141 for clockhourOfHalfday must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test3348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3348");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.TimeOfDay timeOfDay36 = property34.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay38 = property34.addToCopy(5);
        org.joda.time.TimeOfDay.Property property39 = timeOfDay38.millisOfSecond();
        java.lang.String str40 = property39.getAsShortText();
        java.util.Locale locale42 = java.util.Locale.PRC;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(locale42);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.fromCalendarFields(calendar43);
        org.joda.time.DateTime dateTime45 = localDateTime44.toDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withCenturyOfEra(365);
        org.joda.time.DateTimeField dateTimeField49 = localDateTime44.getField((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology52 = dateMidnight51.getChronology();
        java.util.Locale locale53 = java.util.Locale.CHINA;
        java.util.Locale locale54 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(locale54);
        java.lang.String str56 = locale53.getDisplayVariant(locale54);
        java.util.Calendar calendar57 = dateMidnight51.toCalendar(locale54);
        java.lang.String str58 = locale54.getDisplayVariant();
        java.lang.String str59 = dateTimeField49.getAsText(0L, locale54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay60 = property39.setCopy("janv.", locale54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"janv.\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(property39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "271" + "'", str40, "271");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645514487232,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=27,MILLISECOND=232,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=1645514487232,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=27,MILLISECOND=232,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970" + "'", str59, "1970");
    }

    @Test
    public void test3349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3349");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType3 = periodType2.withWeeksRemoved();
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime5 = dateMidnight4.toMutableDateTime();
        int int6 = mutableDateTime5.getYearOfEra();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.months();
        mutablePeriod10.set(durationFieldType11, (int) 'a');
        mutablePeriod10.addHours((int) (byte) -1);
        mutablePeriod10.addYears(2022);
        mutableDateTime5.add((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime22 = dateMidnight21.toMutableDateTime();
        mutableDateTime22.add((long) 1);
        org.joda.time.DateTime dateTime25 = mutableDateTime22.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.years();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime22, readableDuration26, periodType27);
        java.lang.String str29 = mutableDateTime22.toString();
        org.joda.time.Chronology chronology30 = mutableDateTime22.getChronology();
        mutablePeriod10.setPeriod(1645514159651L, (long) (short) -1, chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfMonth();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType35);
        int[] intArray39 = chronology30.get((org.joda.time.ReadablePeriod) mutablePeriod36, (long) 10, 1645514176224L);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(10L);
        int[] intArray43 = chronology30.get((org.joda.time.ReadablePeriod) mutablePeriod41, (long) 86399);
        org.joda.time.Period period44 = new org.joda.time.Period(0L, 1641116552319L, periodType2, chronology30);
        org.joda.time.Period period45 = period44.toPeriod();
        java.util.Date date47 = new java.util.Date(1645514223797L);
        boolean boolean48 = period45.equals((java.lang.Object) date47);
        int int49 = date47.getMinutes();
        date47.setYear(101);
        java.util.Locale locale52 = java.util.Locale.PRC;
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(locale52);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.fromCalendarFields(calendar53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusMillis((int) (short) 1);
        int int57 = localDateTime56.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.plusDays(12);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime56.withDayOfYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime56.plusMinutes(53);
        java.util.Locale locale64 = java.util.Locale.PRC;
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale64);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.fromCalendarFields(calendar65);
        org.joda.time.DateTime dateTime67 = localDateTime66.toDateTime();
        org.joda.time.LocalDateTime.Property property68 = localDateTime66.minuteOfHour();
        java.util.Locale locale69 = java.util.Locale.PRC;
        java.util.Calendar calendar70 = java.util.Calendar.getInstance(locale69);
        int int71 = property68.getMaximumShortTextLength(locale69);
        int int72 = property68.get();
        org.joda.time.LocalDateTime localDateTime73 = property68.roundCeilingCopy();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType78);
        org.joda.time.DurationFieldType durationFieldType80 = org.joda.time.DurationFieldType.months();
        mutablePeriod79.set(durationFieldType80, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType83 = org.joda.time.DurationFieldType.months();
        boolean boolean84 = mutablePeriod79.isSupported(durationFieldType83);
        int int85 = mutablePeriod75.indexOf(durationFieldType83);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime73.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod75, 8);
        org.joda.time.LocalDateTime localDateTime89 = new org.joda.time.LocalDateTime(2514077640000L);
        boolean boolean90 = localDateTime87.equals((java.lang.Object) localDateTime89);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime56.withFields((org.joda.time.ReadablePartial) localDateTime87);
        int int92 = localDateTime87.getDayOfWeek();
        java.util.Date date93 = localDateTime87.toDate();
        boolean boolean94 = date47.before(date93);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str29, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[52, 1, 3, 0, 7, 16, 16, 214]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, 0, 1, 26, 399]");
        org.junit.Assert.assertNotNull(period45);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Thu Feb 22 07:17:03 GMT 2001");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 17 + "'", int49 == 17);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1645514487256,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=27,MILLISECOND=256,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 26487255 + "'", int57 == 26487255);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1645514487256,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=27,MILLISECOND=256,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar70);
// flaky:         org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=1645514487256,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=27,MILLISECOND=256,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 21 + "'", int72 == 21);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertNotNull(date93);
// flaky:         org.junit.Assert.assertEquals(date93.toString(), "Tue Feb 22 07:22:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test3350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3350");
        org.joda.time.Period period1 = org.joda.time.Period.days((int) (short) -1);
        org.joda.time.Period period3 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period5 = period3.minusYears(8);
        org.joda.time.Period period7 = period3.withYears(2);
        org.joda.time.Period period9 = period7.plusMillis((int) (byte) 10);
        org.joda.time.Period period11 = period9.plusMinutes(32772);
        org.joda.time.Period period12 = period1.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period14 = period1.plusYears((int) (short) 1);
        org.joda.time.Period period15 = period1.normalizedStandard();
        org.joda.time.Period period17 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period19 = period17.minusYears(8);
        org.joda.time.Period period21 = period17.withSeconds(11);
        int int22 = period21.getMinutes();
        org.joda.time.Period period23 = period21.toPeriod();
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        boolean boolean26 = localDate24.isSupported(dateTimeFieldType25);
        org.joda.time.LocalDate.Property property27 = localDate24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        org.joda.time.DurationField durationField29 = property27.getDurationField();
        boolean boolean30 = durationField29.isPrecise();
        boolean boolean31 = period21.equals((java.lang.Object) boolean30);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight32.toMutableDateTime();
        mutableDateTime33.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.months();
        mutableDateTime33.add(durationFieldType36, (int) (byte) 1);
        org.joda.time.Period period40 = period21.withFieldAdded(durationFieldType36, 70);
        org.joda.time.MutablePeriod mutablePeriod41 = period21.toMutablePeriod();
        org.joda.time.Period period43 = period21.plusMinutes(999);
        org.joda.time.Period period44 = period1.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period46 = period44.plusHours(0);
        org.joda.time.Period period47 = period46.normalizedStandard();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period47);
    }

    @Test
    public void test3351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3351");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 32772, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime7 = dateMidnight6.toMutableDateTime();
        mutableDateTime7.add((long) 1);
        org.joda.time.DateTime dateTime10 = mutableDateTime7.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.years();
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime7, readableDuration11, periodType12);
        org.joda.time.Chronology chronology14 = mutableDateTime7.getChronology();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfYear((int) (byte) 1);
        int int20 = dateTime19.getDayOfMonth();
        org.joda.time.Duration duration22 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime23 = dateTime19.minus((org.joda.time.ReadableDuration) duration22);
        mutableDateTime15.add((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean27 = duration22.isShorterThan((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) (byte) 0);
        long long30 = duration29.getStandardDays();
        org.joda.time.Duration duration31 = duration22.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Period period34 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period36 = period34.minusYears(8);
        org.joda.time.Period period38 = period34.withSeconds(11);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType42);
        int int44 = mutablePeriod43.getMonths();
        org.joda.time.Interval interval45 = new org.joda.time.Interval(readableInstant39, (org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType51);
        int int53 = mutablePeriod52.getMonths();
        org.joda.time.Interval interval54 = new org.joda.time.Interval(readableInstant48, (org.joda.time.ReadablePeriod) mutablePeriod52);
        int[] intArray57 = chronology46.get((org.joda.time.ReadablePeriod) mutablePeriod52, 1L, (long) 4);
        org.joda.time.PeriodType periodType58 = mutablePeriod52.getPeriodType();
        org.joda.time.Period period59 = period34.normalizedStandard(periodType58);
        org.joda.time.Period period60 = duration31.toPeriodTo(readableInstant32, periodType58);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime62 = dateMidnight61.toMutableDateTime();
        mutableDateTime62.add((long) 1);
        org.joda.time.DateTime dateTime65 = mutableDateTime62.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.years();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime62, readableDuration66, periodType67);
        org.joda.time.Chronology chronology69 = mutableDateTime62.getChronology();
        org.joda.time.YearMonthDay yearMonthDay70 = new org.joda.time.YearMonthDay(chronology69);
        org.joda.time.DurationField durationField71 = chronology69.seconds();
        int int74 = durationField71.getDifference(31536000100L, 1645514169568L);
        int int77 = durationField71.getValue(22000L, (long) 26194884);
        org.joda.time.DurationFieldType durationFieldType78 = durationField71.getType();
        boolean boolean79 = period60.isSupported(durationFieldType78);
        org.joda.time.DateTime dateTime81 = dateTime5.withFieldAdded(durationFieldType78, 108);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1613978169) + "'", int74 == (-1613978169));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 22 + "'", int77 == 22);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTime81);
    }

    @Test
    public void test3352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3352");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.hourOfDay();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyearOfCentury();
        long long18 = dateTimeField16.roundHalfFloor((long) 1);
        mutableDateTime1.setRounding(dateTimeField16, (int) (byte) 0);
        mutableDateTime1.setTime((long) 10);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        boolean boolean24 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime23);
        java.lang.Object obj25 = mutableDateTime1.clone();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.roundHalfFloor();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime31 = dateMidnight28.toMutableDateTime();
        boolean boolean33 = dateMidnight28.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight28.minusWeeks((int) ' ');
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfYear((int) (byte) 1);
        int int40 = dateTime39.getDayOfMonth();
        boolean boolean41 = dateMidnight28.isAfter((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime.Property property43 = dateTime39.property(dateTimeFieldType42);
        mutableDateTime27.set(dateTimeFieldType42, 0);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime27.minuteOfHour();
        int int47 = mutableDateTime27.getWeekyear();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime27.yearOfCentury();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "2022-02-22T00:00:00.010Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "2022-02-22T00:00:00.010Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "2022-02-22T00:00:00.010Z");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 22 + "'", int47 == 22);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test3353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3353");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone5);
        long long8 = dateTimeZone5.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime9 = localDateTime2.toDateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime11 = dateTime9.withMonthOfYear((int) (byte) 1);
        int int12 = dateTime9.getDayOfMonth();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514487606,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=27,MILLISECOND=606,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
    }

    @Test
    public void test3354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3354");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        org.joda.time.Chronology chronology9 = mutableDateTime1.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime13 = dateTime11.plusDays(439);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str8, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test3355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3355");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withDayOfYear(3);
        boolean boolean9 = localDateTime7.equals((java.lang.Object) "fran\347ais (France)");
        int int10 = localDateTime7.getDayOfMonth();
        int int11 = localDateTime7.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.minusMinutes(736);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = property14.setCopy(26263259);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26263259 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514487632,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=27,MILLISECOND=632,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test3356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3356");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getName((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate.Property property5 = localDate4.weekOfWeekyear();
        org.joda.time.LocalDate localDate6 = property5.roundCeilingCopy();
        java.lang.Object obj7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        int int10 = mutableDateTime9.getYearOfEra();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now();
        int int12 = localTime11.size();
        org.joda.time.LocalTime.Property property13 = localTime11.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = localTime11.toDateTimeToday(dateTimeZone14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime9, dateTimeZone14);
        java.lang.String str17 = dateTimeZone14.getID();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(obj7, dateTimeZone14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) property5, dateTimeZone14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Etc/UTC" + "'", str17, "Etc/UTC");
    }

    @Test
    public void test3357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3357");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.hourOfDay();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyearOfCentury();
        long long18 = dateTimeField16.roundHalfFloor((long) 1);
        mutableDateTime1.setRounding(dateTimeField16, (int) (byte) 0);
        mutableDateTime1.setTime((long) 10);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        boolean boolean24 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime1.monthOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test3358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3358");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.TimeOfDay timeOfDay36 = property34.getTimeOfDay();
        int int37 = property34.getMaximumValueOverall();
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale40);
        java.lang.String str42 = locale39.getDisplayVariant(locale40);
        org.joda.time.TimeOfDay timeOfDay43 = property34.setCopy("1", locale39);
        org.joda.time.DateTime dateTime44 = timeOfDay43.toDateTimeToday();
        int int45 = timeOfDay43.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay47 = timeOfDay43.withSecondOfMinute(26160118);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26160118 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 999 + "'", int37 == 999);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645514487813,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=27,MILLISECOND=813,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test3359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3359");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        long long6 = dateTimeField4.remainder((long) 10);
        java.lang.String str7 = dateTimeField4.toString();
        java.util.Locale locale9 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str10 = locale9.getCountry();
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        java.util.Locale locale14 = java.util.Locale.CHINA;
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        java.lang.String str17 = locale14.getDisplayVariant(locale15);
        java.util.Calendar calendar18 = dateMidnight12.toCalendar(locale15);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale15.getDisplayCountry(locale19);
        java.lang.String str21 = locale11.getDisplayLanguage(locale19);
        java.lang.String str22 = locale9.getDisplayLanguage(locale11);
        java.util.Locale.setDefault(locale11);
        java.util.Locale locale24 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        java.util.Locale locale27 = java.util.Locale.CHINA;
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale28);
        java.lang.String str30 = locale27.getDisplayVariant(locale28);
        java.util.Calendar calendar31 = dateMidnight25.toCalendar(locale28);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale28.getDisplayCountry(locale32);
        java.lang.String str34 = locale24.getDisplayLanguage(locale32);
        java.lang.String str35 = locale11.getDisplayCountry(locale32);
        java.lang.String str36 = dateTimeField4.getAsShortText(26160000L, locale11);
        java.lang.String str37 = locale11.getCountry();
        java.lang.String str38 = locale11.getDisplayCountry();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DateTimeField[yearOfEra]" + "'", str7, "DateTimeField[yearOfEra]");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CA" + "'", str10, "CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645514487826,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=27,MILLISECOND=826,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(calendar18);
        org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str21, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fran\347ais" + "'", str22, "fran\347ais");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645514487826,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=27,MILLISECOND=826,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(calendar31);
        org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str34, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\uce90\ub098\ub2e4" + "'", str35, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970" + "'", str36, "1970");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "CA" + "'", str37, "CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Canada" + "'", str38, "Canada");
    }

    @Test
    public void test3360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3360");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(26236476, 26434380, 26459182);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26434380 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3361");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.plus((-78439680L));
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.year();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutablePeriod6.add(readableDuration7);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.months();
        mutablePeriod13.set(durationFieldType14, (int) 'a');
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType21);
        int int23 = mutablePeriod22.getMonths();
        org.joda.time.Interval interval24 = new org.joda.time.Interval(readableInstant18, (org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) 100, chronology25);
        boolean boolean27 = durationFieldType14.isSupported(chronology25);
        mutablePeriod6.setPeriod((long) '4', chronology25);
        java.lang.String str29 = chronology25.toString();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology25.getZone();
        org.joda.time.DateTime dateTime31 = dateMidnight3.toDateTime(chronology25);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str29, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test3362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3362");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(26235826, 1970, 26191187);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3363");
        org.joda.time.Period period1 = org.joda.time.Period.days((int) (short) -1);
        org.joda.time.Period period3 = period1.minusMinutes((int) (byte) 0);
        org.joda.time.Duration duration4 = period1.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.plusYears(2);
        java.util.Date date23 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay24 = org.joda.time.YearMonthDay.fromDateFields(date23);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay24.minusYears(2022);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.plusYears(32770);
        java.lang.String str30 = yearMonthDay24.toString("0");
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay13, (org.joda.time.ReadablePartial) yearMonthDay24, periodType31);
        org.joda.time.Period period34 = period32.withHours(26167775);
        org.joda.time.Period period35 = period1.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        int int41 = mutablePeriod40.getMonths();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableInstant36, (org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType47);
        int int49 = mutablePeriod48.getMonths();
        org.joda.time.Interval interval50 = new org.joda.time.Interval(readableInstant44, (org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.Chronology chronology51 = interval50.getChronology();
        boolean boolean52 = interval42.contains((org.joda.time.ReadableInterval) interval50);
        org.joda.time.LocalDate localDate53 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property54 = localDate53.dayOfYear();
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.Interval interval57 = localDate53.toInterval(dateTimeZone56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType61);
        int int63 = mutablePeriod62.getMonths();
        org.joda.time.Interval interval64 = new org.joda.time.Interval(readableInstant58, (org.joda.time.ReadablePeriod) mutablePeriod62);
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType69);
        int int71 = mutablePeriod70.getMonths();
        org.joda.time.Interval interval72 = new org.joda.time.Interval(readableInstant66, (org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.Chronology chronology73 = interval72.getChronology();
        boolean boolean74 = interval64.contains((org.joda.time.ReadableInterval) interval72);
        boolean boolean75 = interval57.isBefore((org.joda.time.ReadableInterval) interval72);
        long long76 = interval72.getStartMillis();
        boolean boolean77 = interval42.overlaps((org.joda.time.ReadableInterval) interval72);
        org.joda.time.DateTime dateTime78 = interval42.getEnd();
        org.joda.time.DateTime dateTime80 = dateTime78.minus((long) 2922789);
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime82 = dateMidnight81.toMutableDateTime();
        int int83 = mutableDateTime82.getYearOfEra();
        boolean boolean84 = dateTime78.isEqual((org.joda.time.ReadableInstant) mutableDateTime82);
        mutableDateTime82.setSecondOfDay(6);
        org.joda.time.DateMidnight dateMidnight87 = new org.joda.time.DateMidnight((java.lang.Object) mutableDateTime82);
        org.joda.time.Duration duration88 = period1.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime82);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1645514487897L + "'", long76 == 1645514487897L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2022 + "'", int83 == 2022);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(duration88);
    }

    @Test
    public void test3364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3364");
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.yearOfCentury();
        int int5 = dateMidnight3.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime11 = timeOfDay6.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        boolean boolean12 = dateMidnight3.isEqual((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight3.withCenturyOfEra(0);
        int int15 = dateMidnight14.getYear();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight16.toMutableDateTime();
        mutableDateTime17.add((long) 1);
        org.joda.time.DateTime dateTime20 = mutableDateTime17.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime17, readableDuration21, periodType22);
        java.lang.String str24 = mutableDateTime17.toString();
        org.joda.time.Chronology chronology25 = mutableDateTime17.getChronology();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight14.withChronology(chronology25);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((int) (short) 100, 5, (int) (byte) 10, chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.monthOfYear();
        org.joda.time.DurationField durationField29 = dateTimeField28.getRangeDurationField();
        int int32 = durationField29.getValue((long) 43, (-292275054L));
        long long34 = durationField29.getMillis((long) 2119);
        long long37 = durationField29.getValueAsLong(1645514306969L, 1645514235721L);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str24, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 66869181288000L + "'", long34 == 66869181288000L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 52L + "'", long37 == 52L);
    }

    @Test
    public void test3365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3365");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.DateMidnight dateMidnight2 = localDate0.toDateMidnight();
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.LocalDate.Property property4 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfMonth();
        org.joda.time.LocalDate localDate7 = property5.addToCopy(702);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = localDate7.getFields();
        org.joda.time.LocalDate.Property property9 = localDate7.dayOfMonth();
        org.joda.time.LocalDate localDate10 = property9.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test3366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3366");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate localDate4 = localDate0.withWeekyear((int) (short) 100);
        int int5 = localDate4.getEra();
        org.joda.time.LocalDate localDate7 = localDate4.withEra(0);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property12 = dateTime11.minuteOfHour();
        int int13 = property12.get();
        boolean boolean14 = localDate4.equals((java.lang.Object) property12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = localDate4.withDayOfYear(26296396);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26296396 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3367");
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        int int9 = mutablePeriod8.getMonths();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableInstant4, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Chronology chronology11 = interval10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay((int) (byte) 10, 20, 22, chronology11);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((long) 86399999, chronology11);
        org.joda.time.DateTimeField dateTimeField17 = chronology11.clockhourOfDay();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime20 = localTime18.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutablePeriod22.add(readableDuration23);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.months();
        mutablePeriod29.set(durationFieldType30, (int) 'a');
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType37);
        int int39 = mutablePeriod38.getMonths();
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableInstant34, (org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 100, chronology41);
        boolean boolean43 = durationFieldType30.isSupported(chronology41);
        mutablePeriod22.setPeriod((long) '4', chronology41);
        org.joda.time.LocalTime localTime45 = localTime20.minus((org.joda.time.ReadablePeriod) mutablePeriod22);
        int int46 = localTime45.getMillisOfSecond();
        org.joda.time.Period period48 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period50 = period48.minusYears(8);
        org.joda.time.Period period52 = period48.withSeconds(11);
        int int53 = period52.getMinutes();
        org.joda.time.Period period54 = period52.toPeriod();
        org.joda.time.Period period56 = period52.plusWeeks(11);
        org.joda.time.Period period58 = period52.withDays(270);
        org.joda.time.LocalTime localTime59 = localTime45.minus((org.joda.time.ReadablePeriod) period58);
        int[] intArray64 = new int[] { 26229404, 137, (-2) };
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray66 = dateTimeField17.add((org.joda.time.ReadablePartial) localTime45, 26223309, intArray64, 59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(localTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 42 + "'", int46 == 42);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[26229404, 137, -2]");
    }

    @Test
    public void test3368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3368");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutablePeriod4.add(readableDuration5);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100, chronology23);
        boolean boolean25 = durationFieldType12.isSupported(chronology23);
        mutablePeriod4.setPeriod((long) '4', chronology23);
        org.joda.time.LocalTime localTime27 = localTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.LocalTime.Property property28 = localTime27.millisOfSecond();
        org.joda.time.LocalTime localTime29 = property28.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime29);
    }

    @Test
    public void test3369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3369");
        org.joda.time.Period period1 = org.joda.time.Period.hours(2024);
        org.joda.time.Period period3 = period1.withMillis((int) (short) 0);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        mutablePeriod12.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        java.lang.String str18 = mutablePeriod12.toString();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) mutablePeriod12);
        mutablePeriod12.setValue(0, 2022);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = period3.plus((org.joda.time.ReadablePeriod) mutablePeriod12);
        int int27 = mutablePeriod12.getMonths();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.034S" + "'", str18, "PT0.034S");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test3370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3370");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        int int1 = yearMonthDay0.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField3 = yearMonthDay0.getField(7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 7");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
    }

    @Test
    public void test3371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3371");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Interval interval8 = interval6.withStartMillis(0L);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = localDate9.isSupported(dateTimeFieldType10);
        org.joda.time.LocalDate localDate13 = localDate9.withWeekyear((int) (short) 100);
        int int14 = localDate9.getWeekOfWeekyear();
        org.joda.time.Interval interval15 = localDate9.toInterval();
        boolean boolean16 = interval6.isAfter((org.joda.time.ReadableInterval) interval15);
        org.joda.time.Period period18 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period20 = period18.minusYears(8);
        org.joda.time.Period period22 = period18.withSeconds(11);
        int int23 = period22.getMinutes();
        org.joda.time.Period period24 = period22.toPeriod();
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        boolean boolean27 = localDate25.isSupported(dateTimeFieldType26);
        org.joda.time.LocalDate.Property property28 = localDate25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = property28.getField();
        org.joda.time.DurationField durationField30 = property28.getDurationField();
        boolean boolean31 = durationField30.isPrecise();
        boolean boolean32 = period22.equals((java.lang.Object) boolean31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight33.toMutableDateTime();
        mutableDateTime34.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.months();
        mutableDateTime34.add(durationFieldType37, (int) (byte) 1);
        org.joda.time.Period period41 = period22.withFieldAdded(durationFieldType37, 70);
        org.joda.time.MutablePeriod mutablePeriod42 = period22.toMutablePeriod();
        org.joda.time.Period period44 = period22.plusMinutes(999);
        int int45 = period22.size();
        org.joda.time.Period period50 = new org.joda.time.Period(270, 86399, 26161854, 26160118);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.years();
        java.lang.String str52 = periodType51.toString();
        org.joda.time.Period period53 = period50.normalizedStandard(periodType51);
        org.joda.time.Period period54 = period22.normalizedStandard(periodType51);
        java.lang.String str55 = periodType51.toString();
        org.joda.time.Period period56 = interval15.toPeriod(periodType51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period58 = period56.withMillis(736);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PeriodType[Years]" + "'", str52, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PeriodType[Years]" + "'", str55, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(period56);
    }

    @Test
    public void test3372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3372");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDayOfMonth(8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime12.plusSeconds(10);
        org.joda.time.DateTime dateTime17 = dateTime12.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property19 = dateTime17.property(dateTimeFieldType18);
        int int20 = dateMidnight5.get(dateTimeFieldType18);
        int int21 = localDateTime2.indexOf(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime2.minusWeeks(8);
        int int24 = localDateTime23.size();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) ' ', chronology26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.months();
        mutablePeriod31.set(durationFieldType32, (int) 'a');
        mutablePeriod27.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        mutablePeriod31.setDays(0);
        mutablePeriod31.clear();
        org.joda.time.PeriodType periodType39 = mutablePeriod31.getPeriodType();
        int int40 = mutablePeriod31.getMonths();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property45 = dateTime44.weekOfWeekyear();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property50 = dateTime49.minuteOfHour();
        org.joda.time.DateTime dateTime51 = property50.roundCeilingCopy();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration53 = mutablePeriod31.toDurationFrom((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime23.plus((org.joda.time.ReadableDuration) duration53);
        int int55 = localDateTime54.getWeekyear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514489358,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=29,MILLISECOND=358,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2021 + "'", int55 == 2021);
    }

    @Test
    public void test3373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3373");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        int int7 = mutableDateTime6.getYearOfEra();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        mutablePeriod11.addHours((int) (byte) -1);
        mutablePeriod11.addYears(2022);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.LocalTime localTime20 = localTime3.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        int int21 = localTime3.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 21 + "'", int21 == 21);
    }

    @Test
    public void test3374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3374");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(53);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths(41);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight4);
    }

    @Test
    public void test3375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3375");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusWeeks(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfYear((int) (byte) 1);
        int int10 = dateTime9.getDayOfMonth();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight5.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = localDate15.toDateMidnight();
        org.joda.time.Chronology chronology18 = localDate15.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight5.withFields((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.year();
        org.joda.time.DateMidnight dateMidnight25 = property23.addToCopy(26242316);
        org.joda.time.DateMidnight dateMidnight26 = property23.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight27 = property23.getDateMidnight();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight27);
    }

    @Test
    public void test3376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3376");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfYear();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusWeeks(0);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateMidnight13, periodType14);
        org.joda.time.DateMidnight.Property property16 = dateMidnight13.year();
        java.util.Locale locale17 = java.util.Locale.PRC;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.fromCalendarFields(calendar18);
        org.joda.time.DateTime dateTime20 = localDateTime19.toDateTime();
        org.joda.time.LocalDateTime.Property property21 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfCeilingCopy();
        java.util.Locale locale23 = java.util.Locale.PRC;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(locale23);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.fromCalendarFields(calendar24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.withDayOfMonth(8);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfMonth();
        org.joda.time.DateTime dateTime38 = dateTime35.plusSeconds(10);
        org.joda.time.DateTime dateTime40 = dateTime35.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property42 = dateTime40.property(dateTimeFieldType41);
        int int43 = dateMidnight28.get(dateTimeFieldType41);
        int int44 = localDateTime25.indexOf(dateTimeFieldType41);
        int int45 = localDateTime25.getMillisOfDay();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime22, (org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.Period period48 = period46.withMillis(22);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight13.plus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.DurationFieldType[] durationFieldTypeArray50 = period46.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((java.lang.Object) durationFieldTypeArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: [Lorg.joda.time.DurationFieldType;");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645514489492,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=29,MILLISECOND=492,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645514489492,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=29,MILLISECOND=492,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 26489492 + "'", int45 == 26489492);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(durationFieldTypeArray50);
    }

    @Test
    public void test3377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3377");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.Duration duration6 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime7 = dateTime3.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfMonth();
        org.joda.time.DateTime dateTime14 = dateTime11.plusSeconds(10);
        org.joda.time.DateTime.Property property15 = dateTime14.year();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime18 = dateTime14.minusHours((int) (byte) 100);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = null;
        boolean boolean21 = localDate19.isSupported(dateTimeFieldType20);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 32772, dateTimeZone24);
        org.joda.time.DateTime dateTime28 = localDate19.toDateTimeAtMidnight(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.yearOfCentury();
        int int31 = dateMidnight29.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime35 = dateMidnight34.toMutableDateTime();
        mutableDateTime35.add((long) 1);
        mutableDateTime35.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime35.weekOfWeekyear();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight29, (org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime43 = dateMidnight42.toMutableDateTime();
        mutableDateTime43.add((long) 1);
        org.joda.time.DateTime dateTime46 = mutableDateTime43.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.years();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime43, readableDuration47, periodType48);
        org.joda.time.Chronology chronology50 = mutableDateTime43.getChronology();
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now(chronology50);
        mutableDateTime35.setMillis((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime51.secondOfDay();
        org.joda.time.Duration duration55 = new org.joda.time.Duration((long) (byte) 0);
        long long56 = duration55.getMillis();
        long long57 = duration55.getMillis();
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime51, (org.joda.time.ReadableDuration) duration55);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime60 = dateMidnight59.toMutableDateTime();
        mutableDateTime60.add((long) 1);
        org.joda.time.DateTime dateTime63 = mutableDateTime60.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.years();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime60, readableDuration64, periodType65);
        org.joda.time.Weeks weeks67 = period66.toStandardWeeks();
        org.joda.time.Period period69 = period66.minusYears((int) (byte) 0);
        org.joda.time.Period period70 = period58.plus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.LocalDate localDate72 = localDate19.withPeriodAdded((org.joda.time.ReadablePeriod) period70, 26184964);
        org.joda.time.DateTime dateTime73 = dateTime18.minus((org.joda.time.ReadablePeriod) period70);
        org.joda.time.DateTime dateTime75 = dateTime18.withDayOfYear(147);
        int int76 = dateTime75.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(weeks67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 68 + "'", int76 == 68);
    }

    @Test
    public void test3378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3378");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime6 = property4.addToCopy((long) 86399);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYear(31);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date9 = localDateTime8.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -408 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514489592,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=29,MILLISECOND=592,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test3379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3379");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period3 = period1.minusYears(8);
        org.joda.time.Period period5 = period1.withYears(2);
        org.joda.time.Period period7 = period5.plusMillis((int) (byte) 10);
        org.joda.time.Period period9 = period7.plusDays((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) (short) 10);
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime20 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType22 = periodType21.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight14, (org.joda.time.ReadableInstant) dateTime17, periodType22);
        org.joda.time.PeriodType periodType24 = periodType22.withDaysRemoved();
        org.joda.time.Period period25 = period9.normalizedStandard(periodType24);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight26.toMutableDateTime();
        mutableDateTime27.add((long) 1);
        org.joda.time.DateTime dateTime30 = mutableDateTime27.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.years();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime27, readableDuration31, periodType32);
        java.lang.String str34 = mutableDateTime27.toString();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime27.millisOfSecond();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period25, (org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime27.dayOfMonth();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str34, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test3380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3380");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        int int9 = mutablePeriod3.getMonths();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.yearOfCentury();
        int int12 = dateMidnight10.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime18 = timeOfDay13.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        boolean boolean19 = dateMidnight10.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime21 = dateMidnight20.toMutableDateTime();
        mutableDateTime21.add((long) 1);
        mutableDateTime21.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime21.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime21.dayOfYear();
        int int28 = property27.getMaximumValue();
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime30 = dateMidnight29.toMutableDateTime();
        mutableDateTime30.add((long) 1);
        org.joda.time.DateTime dateTime33 = mutableDateTime30.toDateTimeISO();
        mutableDateTime30.addDays((int) (short) 10);
        long long36 = property27.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.property(dateTimeFieldType37);
        org.joda.time.DateMidnight.Property property39 = dateMidnight10.property(dateTimeFieldType37);
        org.joda.time.DateMidnight dateMidnight40 = org.joda.time.DateMidnight.now();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.DateMidnight.Property property42 = dateMidnight10.year();
        org.joda.time.DateMidnight.Property property43 = dateMidnight10.yearOfCentury();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 365 + "'", int28 == 365);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 35417L + "'", long36 == 35417L);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test3381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3381");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        int int6 = mutablePeriod5.getMonths();
        org.joda.time.Interval interval7 = new org.joda.time.Interval(readableInstant1, (org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100, chronology8);
        org.joda.time.DurationField durationField10 = chronology8.centuries();
        int int12 = durationField10.getValue((long) 26299822);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight13.plusYears((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withYear((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plusDays((int) (byte) 100);
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = null;
        org.joda.time.format.DateTimeParser dateTimeParser23 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter22, dateTimeParser23);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType28 = periodType27.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        int int34 = mutablePeriod33.getMonths();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(readableInstant29, (org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(chronology36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        int int43 = mutablePeriod42.getMonths();
        org.joda.time.Interval interval44 = new org.joda.time.Interval(readableInstant38, (org.joda.time.ReadablePeriod) mutablePeriod42);
        int[] intArray47 = chronology36.get((org.joda.time.ReadablePeriod) mutablePeriod42, 1L, (long) 4);
        org.joda.time.Period period48 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType27, chronology36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter24.withChronology(chronology36);
        org.joda.time.format.DateTimeParser dateTimeParser50 = dateTimeFormatter49.getParser();
        org.joda.time.Chronology chronology51 = dateTimeFormatter49.getChronology();
        java.util.Locale locale52 = dateTimeFormatter49.getLocale();
        java.lang.Integer int53 = dateTimeFormatter49.getPivotYear();
        org.joda.time.Chronology chronology54 = dateTimeFormatter49.getChronology();
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime56 = dateMidnight55.toMutableDateTime();
        mutableDateTime56.add((long) 1);
        org.joda.time.DateTime dateTime59 = mutableDateTime56.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.years();
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime56, readableDuration60, periodType61);
        org.joda.time.Chronology chronology63 = mutableDateTime56.getChronology();
        org.joda.time.MutableDateTime mutableDateTime64 = org.joda.time.MutableDateTime.now(chronology63);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime68 = dateTime66.withDayOfYear((int) (byte) 1);
        int int69 = dateTime68.getDayOfMonth();
        org.joda.time.Duration duration71 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime72 = dateTime68.minus((org.joda.time.ReadableDuration) duration71);
        mutableDateTime64.add((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime75 = dateMidnight74.toMutableDateTime();
        java.lang.String str76 = mutableDateTime75.toString();
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime75.monthOfYear();
        int int78 = property77.get();
        org.joda.time.MutableDateTime mutableDateTime79 = property77.getMutableDateTime();
        java.util.TimeZone timeZone80 = null;
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forTimeZone(timeZone80);
        java.lang.String str83 = dateTimeZone81.getName((long) 100);
        org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate(dateTimeZone81);
        mutableDateTime79.setZone(dateTimeZone81);
        mutableDateTime64.setZoneRetainFields(dateTimeZone81);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter87 = dateTimeFormatter49.withZone(dateTimeZone81);
        org.joda.time.MutableDateTime mutableDateTime88 = dateMidnight21.toMutableDateTime(dateTimeZone81);
        java.util.TimeZone timeZone89 = dateTimeZone81.toTimeZone();
        int int91 = timeZone89.getOffset((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone92 = org.joda.time.DateTimeZone.forTimeZone(timeZone89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime93 = new org.joda.time.LocalTime((java.lang.Object) int12, dateTimeZone92);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNull(dateTimeParser50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNull(locale52);
        org.junit.Assert.assertNull(int53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str76, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2 + "'", int78 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "+00:00" + "'", str83, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter87);
        org.junit.Assert.assertNotNull(mutableDateTime88);
        org.junit.Assert.assertNotNull(timeZone89);
        org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone92);
    }

    @Test
    public void test3382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3382");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod18, 1L, (long) 4);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType3, chronology12);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(obj0, chronology12);
        org.joda.time.DateTimeField dateTimeField26 = chronology12.yearOfEra();
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property28 = localDate27.dayOfYear();
        org.joda.time.DateMidnight dateMidnight29 = localDate27.toDateMidnight();
        org.joda.time.Chronology chronology30 = localDate27.getChronology();
        org.joda.time.LocalDate.Property property31 = localDate27.yearOfCentury();
        org.joda.time.LocalDate.Property property32 = localDate27.dayOfMonth();
        org.joda.time.LocalDate localDate34 = property32.addToCopy(702);
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = localDate34.getFields();
        org.joda.time.LocalDate.Property property36 = localDate34.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        int int43 = mutablePeriod42.getMonths();
        org.joda.time.Interval interval44 = new org.joda.time.Interval(readableInstant38, (org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.Chronology chronology45 = interval44.getChronology();
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay(chronology45);
        java.lang.Object obj47 = null;
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType51 = periodType50.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType55);
        int int57 = mutablePeriod56.getMonths();
        org.joda.time.Interval interval58 = new org.joda.time.Interval(readableInstant52, (org.joda.time.ReadablePeriod) mutablePeriod56);
        org.joda.time.Chronology chronology59 = interval58.getChronology();
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType64);
        int int66 = mutablePeriod65.getMonths();
        org.joda.time.Interval interval67 = new org.joda.time.Interval(readableInstant61, (org.joda.time.ReadablePeriod) mutablePeriod65);
        int[] intArray70 = chronology59.get((org.joda.time.ReadablePeriod) mutablePeriod65, 1L, (long) 4);
        org.joda.time.Period period71 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType50, chronology59);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate(obj47, chronology59);
        java.util.TimeZone timeZone74 = null;
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forTimeZone(timeZone74);
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone75);
        org.joda.time.DateTime dateTime77 = localDate72.toDateTimeAtMidnight(dateTimeZone75);
        int[] intArray79 = chronology45.get((org.joda.time.ReadablePartial) localDate72, 1645514171723L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray81 = dateTimeField26.set((org.joda.time.ReadablePartial) localDate34, 26352737, intArray79, 86340);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[2022, 2, 22]");
    }

    @Test
    public void test3383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3383");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime10 = dateTime8.minusYears(702);
        org.joda.time.DateTime dateTime11 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        java.lang.String str14 = mutableDateTime13.toString();
        mutableDateTime13.setMonthOfYear(1);
        mutableDateTime13.addWeekyears(4);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        long long21 = duration20.getMillis();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        long long24 = duration23.getMillis();
        int int25 = duration20.compareTo((org.joda.time.ReadableDuration) duration23);
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration20, 26162430);
        long long28 = duration20.getMillis();
        org.joda.time.DateTime dateTime29 = dateTime8.minus((org.joda.time.ReadableDuration) duration20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = dateTime8.toString("italien (Italie)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str14, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test3384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3384");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setValue(0, 2022);
        mutablePeriod8.addDays((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight22.toMutableDateTime();
        mutableDateTime23.add((long) 1);
        org.joda.time.DateTime dateTime26 = mutableDateTime23.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.years();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime23, readableDuration27, periodType28);
        org.joda.time.Chronology chronology30 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        mutablePeriod8.add(35417L, chronology30);
        mutablePeriod8.addDays((int) (byte) -1);
        java.lang.String str35 = mutablePeriod8.toString();
        org.joda.time.Duration duration37 = new org.joda.time.Duration((long) (byte) 0);
        long long38 = duration37.getMillis();
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property40 = localDate39.dayOfYear();
        org.joda.time.DateMidnight dateMidnight41 = localDate39.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType47);
        int int49 = mutablePeriod48.getMonths();
        org.joda.time.Interval interval50 = new org.joda.time.Interval(readableInstant44, (org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.Chronology chronology51 = interval50.getChronology();
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay(chronology51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType56);
        int int58 = mutablePeriod57.getMonths();
        org.joda.time.Interval interval59 = new org.joda.time.Interval(readableInstant53, (org.joda.time.ReadablePeriod) mutablePeriod57);
        int[] intArray62 = chronology51.get((org.joda.time.ReadablePeriod) mutablePeriod57, 1L, (long) 4);
        boolean boolean63 = dateTimeFieldType43.isSupported(chronology51);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(chronology51);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration37, chronology51);
        long long66 = duration37.getStandardSeconds();
        long long67 = duration37.getStandardDays();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "P2022Y-2DT35.451S" + "'", str35, "P2022Y-2DT35.451S");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
    }

    @Test
    public void test3385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3385");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        calendar1.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        calendar1.roll(4, 8);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.setWeekDate(26365673, 598, 26191187);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 26191187");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=16,DAY_OF_YEAR=2,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=32,MILLISECOND=834,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
    }

    @Test
    public void test3386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3386");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate localDate4 = localDate0.withWeekyear((int) (short) 100);
        int int5 = localDate4.getEra();
        org.joda.time.LocalDate localDate7 = localDate4.minusDays(25);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(21);
        org.joda.time.Interval interval10 = localDate7.toInterval(dateTimeZone9);
        boolean boolean12 = interval10.isBefore(1645514171807L);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test3387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3387");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("679");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"679\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3388");
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        boolean boolean24 = interval14.contains((org.joda.time.ReadableInterval) interval22);
        long long25 = interval22.getEndMillis();
        boolean boolean26 = interval22.containsNow();
        org.joda.time.Chronology chronology27 = interval22.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(1640995200022L, chronology27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(51, 26318904, 244, 26162337, 27, 26299822, 26483276, chronology27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26162337 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645514490004L + "'", long25 == 1645514490004L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test3389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3389");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) (short) 10);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes((int) (byte) 100);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay1.withMillisOfSecond(365);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.plusMinutes(26167775);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay9 = timeOfDay1.withMinuteOfHour(26191187);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26191187 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
    }

    @Test
    public void test3390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3390");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant(1645514159651L);
        java.util.Calendar.Builder builder4 = builder2.setInstant((long) 2024);
        java.util.Calendar.Builder builder6 = builder4.setLenient(false);
        java.util.Locale locale9 = new java.util.Locale("\ud504\ub791\uc2a4\uc5b4", "it_IT");
        java.util.Calendar.Builder builder10 = builder6.setLocale(locale9);
        java.util.Calendar.Builder builder12 = builder10.setInstant((long) 23);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("53");
        boolean boolean15 = timeZone14.observesDaylightTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfMonth();
        org.joda.time.DateTime dateTime22 = dateTime19.plusSeconds(10);
        org.joda.time.DateTime.Property property23 = dateTime22.year();
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime29 = timeOfDay24.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay24.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay31.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean35 = timeOfDay31.isSupported(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property40 = dateTime39.dayOfMonth();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType43);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType47);
        mutablePeriod44.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        java.lang.String str50 = mutablePeriod44.toString();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadablePeriod) mutablePeriod44);
        mutablePeriod44.setValue(0, 2022);
        mutablePeriod44.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay31.plus((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.TimeOfDay.Property property58 = timeOfDay57.millisOfSecond();
        org.joda.time.DurationField durationField59 = property58.getDurationField();
        org.joda.time.TimeOfDay timeOfDay60 = property58.getTimeOfDay();
        int int61 = property58.getMaximumValueOverall();
        java.util.Locale locale63 = java.util.Locale.CHINA;
        java.util.Locale locale64 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale64);
        java.lang.String str66 = locale63.getDisplayVariant(locale64);
        org.joda.time.TimeOfDay timeOfDay67 = property58.setCopy("1", locale63);
        java.lang.String str68 = property23.getAsShortText(locale63);
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone14, locale63);
        java.util.Calendar.Builder builder70 = builder10.setLocale(locale63);
        java.util.Calendar.Builder builder72 = builder10.setLenient(false);
        java.util.TimeZone timeZone74 = java.util.TimeZone.getTimeZone("53");
        boolean boolean75 = timeZone74.observesDaylightTime();
        int int77 = timeZone74.getOffset(826186880073600000L);
        java.time.ZoneId zoneId78 = timeZone74.toZoneId();
        java.util.TimeZone timeZone79 = java.util.TimeZone.getTimeZone(zoneId78);
        java.util.Calendar.Builder builder80 = builder72.setTimeZone(timeZone79);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forTimeZone(timeZone79);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals(locale9.toString(), "\ud504\ub791\uc2a4\uc5b4_IT_IT");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT0.034S" + "'", str50, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 999 + "'", int61 == 999);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1645514490023,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=30,MILLISECOND=23,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1969" + "'", str68, "1969");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1645514490023,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=30,MILLISECOND=23,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(timeZone74);
        org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(zoneId78);
        org.junit.Assert.assertNotNull(timeZone79);
        org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
    }

    @Test
    public void test3391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3391");
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100, chronology12);
        org.joda.time.DurationField durationField14 = chronology12.centuries();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 53, (long) 26173324, chronology12);
        org.joda.time.Period period17 = new org.joda.time.Period(1645514286547L, chronology12);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((-4670314547681L), chronology12);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test3392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3392");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514490175,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=30,MILLISECOND=175,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test3393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3393");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusYears((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withYear((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plusDays((int) (byte) 100);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = null;
        org.joda.time.format.DateTimeParser dateTimeParser10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter9, dateTimeParser10);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType15 = periodType14.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        int[] intArray34 = chronology23.get((org.joda.time.ReadablePeriod) mutablePeriod29, 1L, (long) 4);
        org.joda.time.Period period35 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType14, chronology23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter11.withChronology(chronology23);
        org.joda.time.format.DateTimeParser dateTimeParser37 = dateTimeFormatter36.getParser();
        org.joda.time.Chronology chronology38 = dateTimeFormatter36.getChronology();
        java.util.Locale locale39 = dateTimeFormatter36.getLocale();
        java.lang.Integer int40 = dateTimeFormatter36.getPivotYear();
        org.joda.time.Chronology chronology41 = dateTimeFormatter36.getChronology();
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime43 = dateMidnight42.toMutableDateTime();
        mutableDateTime43.add((long) 1);
        org.joda.time.DateTime dateTime46 = mutableDateTime43.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.years();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime43, readableDuration47, periodType48);
        org.joda.time.Chronology chronology50 = mutableDateTime43.getChronology();
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now(chronology50);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime55 = dateTime53.withDayOfYear((int) (byte) 1);
        int int56 = dateTime55.getDayOfMonth();
        org.joda.time.Duration duration58 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime59 = dateTime55.minus((org.joda.time.ReadableDuration) duration58);
        mutableDateTime51.add((org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime62 = dateMidnight61.toMutableDateTime();
        java.lang.String str63 = mutableDateTime62.toString();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime62.monthOfYear();
        int int65 = property64.get();
        org.joda.time.MutableDateTime mutableDateTime66 = property64.getMutableDateTime();
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        java.lang.String str70 = dateTimeZone68.getName((long) 100);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate(dateTimeZone68);
        mutableDateTime66.setZone(dateTimeZone68);
        mutableDateTime51.setZoneRetainFields(dateTimeZone68);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter36.withZone(dateTimeZone68);
        org.joda.time.MutableDateTime mutableDateTime75 = dateMidnight8.toMutableDateTime(dateTimeZone68);
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNull(dateTimeParser37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNull(locale39);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str63, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00" + "'", str70, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test3394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3394");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.monthOfYear();
        mutableDateTime1.addHours((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setSecondOfMinute(590);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 590 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str2, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test3395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3395");
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight2.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfSecond();
        mutableDateTime3.set(dateTimeFieldType4, 0);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime8 = dateMidnight7.toMutableDateTime();
        mutableDateTime8.add((long) 1);
        org.joda.time.DateTime dateTime11 = mutableDateTime8.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.years();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime8, readableDuration12, periodType13);
        org.joda.time.Chronology chronology15 = mutableDateTime8.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(chronology15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfYear((int) (byte) 1);
        int int21 = dateTime20.getDayOfMonth();
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime24 = dateTime20.minus((org.joda.time.ReadableDuration) duration23);
        mutableDateTime16.add((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean28 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) (byte) 0);
        long long31 = duration30.getStandardDays();
        org.joda.time.Duration duration32 = duration23.plus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime38 = dateTime36.withDayOfYear((int) (byte) 1);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(readableDuration34, (org.joda.time.ReadableInstant) dateTime36, periodType39);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime42 = dateMidnight41.toMutableDateTime();
        mutableDateTime42.add((long) 1);
        org.joda.time.DateTime dateTime45 = mutableDateTime42.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.years();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime42, readableDuration46, periodType47);
        org.joda.time.Chronology chronology49 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.clockhourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 2, periodType39, chronology49);
        org.joda.time.format.DateTimePrinter dateTimePrinter52 = null;
        org.joda.time.format.DateTimeParser dateTimeParser53 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter52, dateTimeParser53);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType58 = periodType57.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType62);
        int int64 = mutablePeriod63.getMonths();
        org.joda.time.Interval interval65 = new org.joda.time.Interval(readableInstant59, (org.joda.time.ReadablePeriod) mutablePeriod63);
        org.joda.time.Chronology chronology66 = interval65.getChronology();
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay(chronology66);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType71);
        int int73 = mutablePeriod72.getMonths();
        org.joda.time.Interval interval74 = new org.joda.time.Interval(readableInstant68, (org.joda.time.ReadablePeriod) mutablePeriod72);
        int[] intArray77 = chronology66.get((org.joda.time.ReadablePeriod) mutablePeriod72, 1L, (long) 4);
        org.joda.time.Period period78 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType57, chronology66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter54.withChronology(chronology66);
        org.joda.time.Period period80 = duration32.toPeriod(periodType39, chronology66);
        boolean boolean81 = dateTimeFieldType4.isSupported(chronology66);
        org.joda.time.Period period82 = new org.joda.time.Period((long) 26275273, (long) 147, chronology66);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test3396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3396");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        mutableDateTime1.addMinutes((int) ' ');
        int int11 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = dateTime14.withWeekOfWeekyear((int) '4');
        boolean boolean20 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property21 = dateTime14.minuteOfDay();
        int int22 = property21.getMinimumValue();
        org.joda.time.DateTime dateTime23 = property21.roundCeilingCopy();
        org.joda.time.DateTime dateTime25 = property21.addToCopy(30);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str8, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test3397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3397");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusDays(86399999);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        java.lang.String str29 = mutablePeriod23.toString();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) mutablePeriod23);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusWeeks(0);
        boolean boolean37 = mutablePeriod23.equals((java.lang.Object) 0);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime41 = dateMidnight40.toMutableDateTime();
        int int42 = mutableDateTime41.getYearOfEra();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType45);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.months();
        mutablePeriod46.set(durationFieldType47, (int) 'a');
        mutablePeriod46.addHours((int) (byte) -1);
        mutablePeriod46.addYears(2022);
        mutableDateTime41.add((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime58 = dateMidnight57.toMutableDateTime();
        mutableDateTime58.add((long) 1);
        org.joda.time.DateTime dateTime61 = mutableDateTime58.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.years();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime58, readableDuration62, periodType63);
        java.lang.String str65 = mutableDateTime58.toString();
        org.joda.time.Chronology chronology66 = mutableDateTime58.getChronology();
        mutablePeriod46.setPeriod(1645514159651L, (long) (short) -1, chronology66);
        boolean boolean68 = yearMonthDay8.equals((java.lang.Object) (short) -1);
        org.joda.time.LocalDate localDate69 = yearMonthDay8.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate71 = localDate69.withYearOfCentury(171);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 171 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0.034S" + "'", str29, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str65, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDate69);
    }

    @Test
    public void test3398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3398");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period3 = period1.minusYears(8);
        org.joda.time.Period period5 = period1.withSeconds(11);
        int int6 = period5.getMinutes();
        org.joda.time.Period period7 = period5.toPeriod();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime10 = localTime8.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutablePeriod12.add(readableDuration13);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.months();
        mutablePeriod19.set(durationFieldType20, (int) 'a');
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        int int29 = mutablePeriod28.getMonths();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableInstant24, (org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) 100, chronology31);
        boolean boolean33 = durationFieldType20.isSupported(chronology31);
        mutablePeriod12.setPeriod((long) '4', chronology31);
        org.joda.time.LocalTime localTime35 = localTime10.minus((org.joda.time.ReadablePeriod) mutablePeriod12);
        mutablePeriod12.addSeconds(365);
        org.joda.time.Period period38 = period7.plus((org.joda.time.ReadablePeriod) mutablePeriod12);
        int int39 = period38.getSeconds();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 376 + "'", int39 == 376);
    }

    @Test
    public void test3399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3399");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutablePeriod4.add(readableDuration5);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100, chronology23);
        boolean boolean25 = durationFieldType12.isSupported(chronology23);
        mutablePeriod4.setPeriod((long) '4', chronology23);
        org.joda.time.LocalTime localTime27 = localTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.LocalTime.Property property28 = localTime27.minuteOfHour();
        org.joda.time.LocalTime localTime29 = property28.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime30 = property28.getLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime32 = localTime30.withMinuteOfHour(26215723);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26215723 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime30);
    }

    @Test
    public void test3400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3400");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime7 = dateTime2.withWeekOfWeekyear((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime.Property property9 = dateTime7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.DateTime dateTime11 = property9.withMinimumValue();
        org.joda.time.DateTime dateTime12 = property9.roundFloorCopy();
        org.joda.time.DurationField durationField13 = property9.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNull(durationField13);
    }

    @Test
    public void test3401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3401");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(1L, dateTimeZone3);
        boolean boolean5 = calendar1.before((java.lang.Object) localDate4);
        int int6 = localDate4.getDayOfWeek();
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.months();
        mutablePeriod14.set(durationFieldType15, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.months();
        boolean boolean19 = mutablePeriod14.isSupported(durationFieldType18);
        int int20 = mutablePeriod10.indexOf(durationFieldType18);
        java.lang.String str21 = durationFieldType18.getName();
        boolean boolean22 = periodType8.isSupported(durationFieldType18);
        boolean boolean23 = localDate4.isSupported(durationFieldType18);
        org.joda.time.LocalDate localDate25 = localDate4.withYear((-292275054));
        int int26 = localDate4.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514491412,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=31,MILLISECOND=412,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "months" + "'", str21, "months");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
    }

    @Test
    public void test3402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3402");
        long long6 = java.util.Date.UTC(27425238, 26473444, 32770, 26229404, 2182616, 399);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 935170531592559000L + "'", long6 == 935170531592559000L);
    }

    @Test
    public void test3403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3403");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        boolean boolean9 = dateTimeField8.isSupported();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        mutableDateTime11.add((long) 1);
        org.joda.time.DateTime dateTime14 = mutableDateTime11.toDateTimeISO();
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        org.joda.time.DateTime dateTime16 = property15.roundHalfFloorCopy();
        java.util.Locale locale17 = java.util.Locale.PRC;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        java.lang.String str19 = property15.getAsText(locale17);
        int int20 = dateTimeField8.getMaximumShortTextLength(locale17);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.LocalTime.Property property24 = localTime23.millisOfSecond();
        org.joda.time.LocalTime localTime25 = property24.roundFloorCopy();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) ' ', chronology27);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.months();
        mutablePeriod32.set(durationFieldType33, (int) 'a');
        mutablePeriod28.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        mutablePeriod32.setDays(0);
        mutablePeriod32.clear();
        org.joda.time.PeriodType periodType40 = mutablePeriod32.getPeriodType();
        int int41 = mutablePeriod32.getMonths();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime45 = dateTime43.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property46 = dateTime45.weekOfWeekyear();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime50 = dateTime48.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property51 = dateTime50.minuteOfHour();
        org.joda.time.DateTime dateTime52 = property51.roundCeilingCopy();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.Duration duration54 = mutablePeriod32.toDurationFrom((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalTime localTime55 = localTime25.minus((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime58 = dateMidnight57.toMutableDateTime();
        mutableDateTime58.add((long) 1);
        org.joda.time.DateTime dateTime61 = mutableDateTime58.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.years();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime58, readableDuration62, periodType63);
        org.joda.time.Chronology chronology65 = mutableDateTime58.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.clockhourOfHalfday();
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime68 = dateMidnight67.toMutableDateTime();
        mutableDateTime68.add((long) 1);
        org.joda.time.DateTime dateTime71 = mutableDateTime68.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.years();
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime68, readableDuration72, periodType73);
        org.joda.time.Weeks weeks75 = period74.toStandardWeeks();
        int[] intArray78 = chronology65.get((org.joda.time.ReadablePeriod) period74, (long) 399, (long) 2024);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray80 = dateTimeField8.add((org.joda.time.ReadablePartial) localTime25, 26417372, intArray78, 103);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645514491436,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=31,MILLISECOND=436,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(weeks75);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[0]");
    }

    @Test
    public void test3404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3404");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        org.joda.time.Chronology chronology9 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekOfWeekyear();
        org.joda.time.DurationField durationField11 = dateTimeField10.getRangeDurationField();
        long long14 = dateTimeField10.add(1645514181181L, (long) 37);
        int int17 = dateTimeField10.getDifference(1645514197888L, 29335021232715L);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str8, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1667891781181L + "'", long14 == 1667891781181L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-45782) + "'", int17 == (-45782));
    }

    @Test
    public void test3405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3405");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        int int35 = property34.getMinimumValueOverall();
        org.joda.time.DurationField durationField36 = property34.getRangeDurationField();
        long long38 = durationField36.getMillis((long) 459);
        long long40 = durationField36.getValueAsLong((long) 26365373);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 459000L + "'", long38 == 459000L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 26365L + "'", long40 == 26365L);
    }

    @Test
    public void test3406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3406");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        java.lang.String str1 = timeOfDay0.toString();
        org.joda.time.DateTime dateTime2 = timeOfDay0.toDateTimeToday();
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "T07:21:31.808" + "'", str1, "T07:21:31.808");
        org.junit.Assert.assertNotNull(dateTime2);
    }

    @Test
    public void test3407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3407");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("PT0S");
        int int2 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test3408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3408");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime6 = dateTime3.withMillisOfDay(13);
        org.joda.time.DateTime dateTime8 = dateTime3.plusHours(722);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        mutableDateTime10.add((long) 1);
        org.joda.time.DateTime dateTime13 = mutableDateTime10.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.years();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime10, readableDuration14, periodType15);
        org.joda.time.Chronology chronology17 = mutableDateTime10.getChronology();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology17);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear((int) (byte) 1);
        int int23 = dateTime22.getDayOfMonth();
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime26 = dateTime22.minus((org.joda.time.ReadableDuration) duration25);
        mutableDateTime18.add((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean30 = duration25.isShorterThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) (byte) 0);
        long long33 = duration32.getStandardDays();
        org.joda.time.Duration duration34 = duration25.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.Duration duration37 = duration32.minus((org.joda.time.ReadableDuration) duration36);
        java.util.Locale locale38 = java.util.Locale.PRC;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale38);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.fromCalendarFields(calendar39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.plusMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.withMinuteOfHour(0);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime48 = dateMidnight47.toMutableDateTime();
        java.lang.String str49 = mutableDateTime48.toString();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime48.monthOfYear();
        mutableDateTime48.addHours((int) '#');
        org.joda.time.DateTime dateTime53 = localDateTime40.toDateTime((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.Interval interval54 = duration32.toIntervalTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime57 = dateTime53.withDurationAdded(1645514396205L, 14);
        boolean boolean58 = dateTime3.equals((java.lang.Object) dateTime53);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645514491826,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=31,MILLISECOND=826,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str49, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test3409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3409");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology13.getZone();
        org.joda.time.DateTime dateTime18 = dateTime2.toDateTime(chronology13);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableDuration19, (org.joda.time.ReadableInstant) dateTime21);
        long long23 = interval22.getEndMillis();
        long long24 = interval22.toDurationMillis();
        org.joda.time.Chronology chronology25 = interval22.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval26 = new org.joda.time.Interval((java.lang.Object) dateTime2, chronology25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-1L) + "'", long23 == (-1L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test3410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3410");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutablePeriod4.add(readableDuration5);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100, chronology23);
        boolean boolean25 = durationFieldType12.isSupported(chronology23);
        mutablePeriod4.setPeriod((long) '4', chronology23);
        org.joda.time.LocalTime localTime27 = localTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.format.DateTimePrinter dateTimePrinter28 = null;
        org.joda.time.format.DateTimeParser dateTimeParser29 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter28, dateTimeParser29);
        java.lang.Object obj31 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType35 = periodType34.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        int int41 = mutablePeriod40.getMonths();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableInstant36, (org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay(chronology43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType48);
        int int50 = mutablePeriod49.getMonths();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableInstant45, (org.joda.time.ReadablePeriod) mutablePeriod49);
        int[] intArray54 = chronology43.get((org.joda.time.ReadablePeriod) mutablePeriod49, 1L, (long) 4);
        org.joda.time.Period period55 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType34, chronology43);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate(obj31, chronology43);
        org.joda.time.DurationField durationField57 = chronology43.millis();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology43);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter30.withChronology(chronology43);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(chronology43);
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay(chronology43);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime62.centuryOfEra();
        org.joda.time.DateTime dateTime64 = mutableDateTime62.toDateTimeISO();
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight65.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property70 = dateMidnight65.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight65.withMillis((long) 5);
        org.joda.time.DateMidnight.Property property73 = dateMidnight65.yearOfEra();
        org.joda.time.DateMidnight.Property property74 = dateMidnight65.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone75 = dateMidnight65.getZone();
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(dateTimeZone75);
        int int78 = dateTimeZone75.getStandardOffset((long) 26283270);
        mutableDateTime62.setZone(dateTimeZone75);
        org.joda.time.DateTime dateTime80 = yearMonthDay61.toDateTimeAtCurrentTime(dateTimeZone75);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime2, (org.joda.time.ReadablePartial) yearMonthDay61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(dateTime80);
    }

    @Test
    public void test3411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3411");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutablePeriod1.add(readableDuration2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.months();
        mutablePeriod7.set(durationFieldType8, (int) 'a');
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        int int17 = mutablePeriod16.getMonths();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableInstant12, (org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100, chronology19);
        boolean boolean21 = durationFieldType8.isSupported(chronology19);
        mutablePeriod1.add(durationFieldType8, (int) (byte) 0);
        mutablePeriod1.setSeconds(26263259);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test3412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3412");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateTime dateTime9 = dateTime3.plusYears((-1));
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        java.lang.String str12 = mutableDateTime11.toString();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology14 = dateMidnight13.getChronology();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.withDayOfMonth(8);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfMonth();
        org.joda.time.DateTime dateTime23 = dateTime20.plusSeconds(10);
        org.joda.time.DateTime dateTime25 = dateTime20.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property27 = dateTime25.property(dateTimeFieldType26);
        int int28 = dateMidnight13.get(dateTimeFieldType26);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime11.property(dateTimeFieldType26);
        org.joda.time.DateTime.Property property30 = dateTime9.property(dateTimeFieldType26);
        java.lang.String str31 = dateTimeFieldType26.getName();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str12, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "era" + "'", str31, "era");
    }

    @Test
    public void test3413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3413");
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        mutablePeriod15.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        java.lang.String str21 = mutablePeriod15.toString();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadablePeriod) mutablePeriod15);
        mutablePeriod15.setValue(0, 2022);
        mutablePeriod15.addDays((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime30 = dateMidnight29.toMutableDateTime();
        mutableDateTime30.add((long) 1);
        org.joda.time.DateTime dateTime33 = mutableDateTime30.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.years();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime30, readableDuration34, periodType35);
        org.joda.time.Chronology chronology37 = mutableDateTime30.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfEra();
        mutablePeriod15.add(35417L, chronology37);
        mutablePeriod15.addDays((int) (byte) -1);
        java.lang.String str42 = mutablePeriod15.toString();
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) (byte) 0);
        long long45 = duration44.getMillis();
        org.joda.time.LocalDate localDate46 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property47 = localDate46.dayOfYear();
        org.joda.time.DateMidnight dateMidnight48 = localDate46.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType54);
        int int56 = mutablePeriod55.getMonths();
        org.joda.time.Interval interval57 = new org.joda.time.Interval(readableInstant51, (org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.Chronology chronology58 = interval57.getChronology();
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType63);
        int int65 = mutablePeriod64.getMonths();
        org.joda.time.Interval interval66 = new org.joda.time.Interval(readableInstant60, (org.joda.time.ReadablePeriod) mutablePeriod64);
        int[] intArray69 = chronology58.get((org.joda.time.ReadablePeriod) mutablePeriod64, 1L, (long) 4);
        boolean boolean70 = dateTimeFieldType50.isSupported(chronology58);
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime(chronology58);
        mutablePeriod15.setPeriod((org.joda.time.ReadableDuration) duration44, chronology58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((int) ' ', 99, 0, 0, 26270486, 26176, 26365673, chronology58);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26270486 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.034S" + "'", str21, "PT0.034S");
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "P2022Y-2DT35.451S" + "'", str42, "P2022Y-2DT35.451S");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test3414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3414");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant(1645514159651L);
        java.util.Calendar.Builder builder4 = builder2.setInstant((long) 2024);
        java.util.Calendar.Builder builder6 = builder4.setLenient(false);
        java.util.Locale locale7 = java.util.Locale.PRC;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        calendar8.add(4, 0);
        java.time.Instant instant12 = calendar8.toInstant();
        java.util.TimeZone timeZone13 = calendar8.getTimeZone();
        int int15 = timeZone13.getOffset(63113904000000L);
        java.util.Calendar.Builder builder16 = builder6.setTimeZone(timeZone13);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property19 = dateTime18.secondOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.withEra(1);
        org.joda.time.DateTime dateTime23 = dateTime18.plusMillis(0);
        org.joda.time.DateTime.Property property24 = dateTime18.hourOfDay();
        java.lang.String str25 = property24.getAsShortText();
        org.joda.time.DateTime dateTime26 = property24.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField27 = property24.getField();
        java.lang.String str29 = dateTimeField27.getAsText((long) 26184696);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        org.joda.time.LocalDate localDate34 = localDate31.withDayOfYear(59);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType38 = periodType37.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType42);
        int int44 = mutablePeriod43.getMonths();
        org.joda.time.Interval interval45 = new org.joda.time.Interval(readableInstant39, (org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType51);
        int int53 = mutablePeriod52.getMonths();
        org.joda.time.Interval interval54 = new org.joda.time.Interval(readableInstant48, (org.joda.time.ReadablePeriod) mutablePeriod52);
        int[] intArray57 = chronology46.get((org.joda.time.ReadablePeriod) mutablePeriod52, 1L, (long) 4);
        org.joda.time.Period period58 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType37, chronology46);
        int[] intArray59 = period58.getValues();
        int int60 = dateTimeField27.getMinimumValue((org.joda.time.ReadablePartial) localDate31, intArray59);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder61 = builder16.setFields(intArray59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514491958,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=31,MILLISECOND=958,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "23" + "'", str25, "23");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "7" + "'", str29, "7");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test3415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3415");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.stream.Stream<java.lang.String> strStream2 = strSet1.parallelStream();
        boolean boolean3 = strSet1.isEmpty();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        int int9 = mutablePeriod8.getMonths();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableInstant4, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Chronology chronology11 = interval10.getChronology();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(chronology11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay12.minusDays(86399999);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfMonth();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType30);
        mutablePeriod27.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        java.lang.String str33 = mutablePeriod27.toString();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadablePeriod) mutablePeriod27);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusWeeks(0);
        boolean boolean41 = mutablePeriod27.equals((java.lang.Object) 0);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay12.minus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay12.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay44 = property43.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.withYear((-292275054));
        boolean boolean47 = strSet1.contains((java.lang.Object) yearMonthDay44);
        java.util.Spliterator<java.lang.String> strSpliterator48 = strSet1.spliterator();
        boolean boolean49 = strSet1.isEmpty();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT0.034S" + "'", str33, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSpliterator48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test3416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3416");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateTime dateTime9 = dateTime3.plusYears((-1));
        org.joda.time.Chronology chronology10 = dateTime3.getChronology();
        int int11 = dateTime3.getMillisOfDay();
        org.joda.time.LocalTime localTime12 = dateTime3.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime14 = localTime12.withMinuteOfHour(196);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 196 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 86399999 + "'", int11 == 86399999);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test3417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3417");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        org.joda.time.Duration duration3 = new org.joda.time.Duration(0L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.year();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100, chronology15);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        org.joda.time.DateMidnight dateMidnight19 = localDate17.toDateMidnight();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateMidnight19);
        java.lang.Object obj21 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType25 = periodType24.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        int int31 = mutablePeriod30.getMonths();
        org.joda.time.Interval interval32 = new org.joda.time.Interval(readableInstant26, (org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType38);
        int int40 = mutablePeriod39.getMonths();
        org.joda.time.Interval interval41 = new org.joda.time.Interval(readableInstant35, (org.joda.time.ReadablePeriod) mutablePeriod39);
        int[] intArray44 = chronology33.get((org.joda.time.ReadablePeriod) mutablePeriod39, 1L, (long) 4);
        org.joda.time.Period period45 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType24, chronology33);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(obj21, chronology33);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone49);
        org.joda.time.DateTime dateTime51 = localDate46.toDateTimeAtMidnight(dateTimeZone49);
        int int52 = localDate46.getWeekyear();
        org.joda.time.LocalDate localDate54 = localDate46.withDayOfYear((int) (short) 1);
        java.util.Date date55 = localDate54.toDate();
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight19.withFields((org.joda.time.ReadablePartial) localDate54);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) dateMidnight56);
        org.joda.time.Interval interval58 = dateMidnight56.toInterval();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(date55);
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Sat Jan 01 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(interval58);
    }

    @Test
    public void test3418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3418");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay4 = dateTime3.toYearMonthDay();
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withYear(59);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        int int9 = property8.getMinimumValue();
        java.lang.String str10 = property8.getAsText();
        org.joda.time.YearMonthDay yearMonthDay11 = property8.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay12 = property8.getYearMonthDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "avril" + "'", str10, "avril");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
    }

    @Test
    public void test3419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3419");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime7 = dateTime2.withWeekOfWeekyear((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime.Property property9 = dateTime7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.DateTime dateTime11 = property9.withMinimumValue();
        org.joda.time.DateTime dateTime12 = property9.roundFloorCopy();
        org.joda.time.DateTime dateTime14 = property9.addToCopy((long) 26229404);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test3420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3420");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        boolean boolean9 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        mutableDateTime11.add((long) 1);
        mutableDateTime11.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime11.dayOfYear();
        int int18 = property17.getMaximumValue();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight19.toMutableDateTime();
        mutableDateTime20.add((long) 1);
        org.joda.time.DateTime dateTime23 = mutableDateTime20.toDateTimeISO();
        mutableDateTime20.addDays((int) (short) 10);
        long long26 = property17.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime20.property(dateTimeFieldType27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight0.property(dateTimeFieldType27);
        org.joda.time.DurationField durationField30 = property29.getDurationField();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 365 + "'", int18 == 365);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 35417L + "'", long26 == 35417L);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test3421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3421");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        java.lang.String str11 = mutablePeriod5.toString();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight0.plus((org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight13.withDayOfYear((int) (short) 10);
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = timeOfDay18.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType25 = periodType24.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight17, (org.joda.time.ReadableInstant) dateTime20, periodType25);
        int int27 = dateMidnight17.getDayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) ' ', chronology29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.months();
        mutablePeriod34.set(durationFieldType35, (int) 'a');
        mutablePeriod30.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        mutablePeriod34.setDays(0);
        mutablePeriod34.clear();
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime43 = dateMidnight42.toMutableDateTime();
        mutableDateTime43.add((long) 1);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime47 = dateMidnight46.toMutableDateTime();
        mutableDateTime47.add((long) 1);
        org.joda.time.DateTime dateTime50 = mutableDateTime47.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.years();
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime47, readableDuration51, periodType52);
        java.lang.String str54 = mutableDateTime47.toString();
        mutableDateTime47.addMinutes((int) ' ');
        int int57 = mutableDateTime47.getCenturyOfEra();
        mutablePeriod34.setPeriod((org.joda.time.ReadableInstant) mutableDateTime43, (org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight17.plus((org.joda.time.ReadablePeriod) mutablePeriod34);
        mutablePeriod34.addDays(2000);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property65 = dateTime64.secondOfDay();
        org.joda.time.DateTime dateTime67 = dateTime64.withEra(1);
        org.joda.time.DateTime dateTime69 = dateTime64.plusMillis(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int71 = dateTime64.get(dateTimeFieldType70);
        org.joda.time.DateTime.Property property72 = dateTime64.monthOfYear();
        org.joda.time.DateTime dateTime74 = dateTime64.minusDays(26192136);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime((long) (short) 10, dateTimeZone76);
        org.joda.time.MutableDateTime mutableDateTime78 = org.joda.time.MutableDateTime.now(dateTimeZone76);
        org.joda.time.DateTime dateTime79 = dateTime64.withZone(dateTimeZone76);
        boolean boolean80 = interval62.isAfter((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean82 = interval62.isBefore(1645514361623L);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0.034S" + "'", str11, "PT0.034S");
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str54, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 20 + "'", int57 == 20);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 31 + "'", int71 == 31);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test3422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3422");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod18, 1L, (long) 4);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType3, chronology12);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(obj0, chronology12);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone28);
        org.joda.time.DateTime dateTime30 = localDate25.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = dateTime30.minusHours((int) (short) -1);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutablePeriod35.add(readableDuration36);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.months();
        mutablePeriod42.set(durationFieldType43, (int) 'a');
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType50);
        int int52 = mutablePeriod51.getMonths();
        org.joda.time.Interval interval53 = new org.joda.time.Interval(readableInstant47, (org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.Chronology chronology54 = interval53.getChronology();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) (short) 100, chronology54);
        boolean boolean56 = durationFieldType43.isSupported(chronology54);
        mutablePeriod35.setPeriod((long) '4', chronology54);
        java.lang.String str58 = chronology54.toString();
        org.joda.time.Period period59 = new org.joda.time.Period((-78439680L), chronology54);
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime30.toMutableDateTime(chronology54);
        mutableDateTime60.setMillis((long) 26222448);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str58, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(mutableDateTime60);
    }

    @Test
    public void test3423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3423");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setValue(0, 2022);
        mutablePeriod8.addDays((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight22.toMutableDateTime();
        mutableDateTime23.add((long) 1);
        org.joda.time.DateTime dateTime26 = mutableDateTime23.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.years();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime23, readableDuration27, periodType28);
        org.joda.time.Chronology chronology30 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        mutablePeriod8.add(35417L, chronology30);
        mutablePeriod8.addDays((int) (byte) -1);
        java.lang.String str35 = mutablePeriod8.toString();
        mutablePeriod8.setPeriod(1645514183800L, (long) 26192581);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime42 = dateMidnight39.toMutableDateTime();
        boolean boolean44 = dateMidnight39.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight39.minusWeeks((int) ' ');
        java.util.Locale locale47 = java.util.Locale.PRC;
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale47);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.fromCalendarFields(calendar48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology53 = dateMidnight52.getChronology();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight52.withDayOfMonth(8);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime59 = dateTime57.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property60 = dateTime59.dayOfMonth();
        org.joda.time.DateTime dateTime62 = dateTime59.plusSeconds(10);
        org.joda.time.DateTime dateTime64 = dateTime59.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property66 = dateTime64.property(dateTimeFieldType65);
        int int67 = dateMidnight52.get(dateTimeFieldType65);
        int int68 = localDateTime49.indexOf(dateTimeFieldType65);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime49.minusSeconds(26172160);
        int int71 = localDateTime49.getMinuteOfHour();
        org.joda.time.Period period73 = org.joda.time.Period.days(26173324);
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Period period77 = new org.joda.time.Period((long) 100, (long) 2, periodType76);
        org.joda.time.PeriodType periodType80 = null;
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType80);
        org.joda.time.DurationFieldType durationFieldType82 = org.joda.time.DurationFieldType.months();
        mutablePeriod81.set(durationFieldType82, (int) 'a');
        org.joda.time.Period period86 = period77.withField(durationFieldType82, 0);
        org.joda.time.Period period88 = period73.withField(durationFieldType82, 0);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime49.withFieldAdded(durationFieldType82, 26197883);
        org.joda.time.DateMidnight dateMidnight92 = dateMidnight46.withFieldAdded(durationFieldType82, 26168880);
        mutablePeriod8.add(durationFieldType82, 830);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "P2022Y-2DT35.451S" + "'", str35, "P2022Y-2DT35.451S");
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1645514493134,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=33,MILLISECOND=134,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(localDateTime70);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 21 + "'", int71 == 21);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(dateMidnight92);
    }

    @Test
    public void test3424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3424");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        org.joda.time.Interval interval4 = localDate0.toInterval(dateTimeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(dateTimeZone3);
        org.joda.time.Interval interval6 = localDate5.toInterval();
        org.joda.time.Period period7 = interval6.toPeriod();
        org.joda.time.Interval interval8 = interval6.toInterval();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(interval8);
    }

    @Test
    public void test3425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3425");
        java.lang.String[] strArray7 = new java.lang.String[] { "it_IT", "months", "53", "hi!", "months", "it_IT", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.plusYears((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.withYear((int) (byte) 0);
        boolean boolean17 = strSet8.remove((java.lang.Object) dateMidnight16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateMidnight.Property property19 = dateMidnight16.property(dateTimeFieldType18);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfMonth();
        org.joda.time.DateTime dateTime26 = dateTime23.plusSeconds(10);
        org.joda.time.DateTime dateTime28 = dateTime23.minus((long) (short) -1);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMonths(26167775);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime32 = dateMidnight31.toMutableDateTime();
        mutableDateTime32.add((long) 1);
        org.joda.time.DateTime dateTime35 = mutableDateTime32.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.years();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime32, readableDuration36, periodType37);
        org.joda.time.Chronology chronology39 = mutableDateTime32.getChronology();
        org.joda.time.DateTime dateTime40 = dateTime30.toDateTime(chronology39);
        org.joda.time.DateTimeField dateTimeField41 = chronology39.dayOfYear();
        org.joda.time.DurationField durationField42 = chronology39.months();
        boolean boolean43 = dateTimeFieldType18.isSupported(chronology39);
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType18.getRangeDurationType();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(durationFieldType44);
    }

    @Test
    public void test3426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3426");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusDays((int) (short) 1);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.weekOfWeekyear();
        org.joda.time.LocalDate localDate6 = dateMidnight4.toLocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfMonth();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test3427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3427");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime1 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtStartOfDay(dateTimeZone2);
        org.joda.time.DateTime.Property property4 = dateTime3.hourOfDay();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfYear();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.Interval interval9 = localDate5.toInterval(dateTimeZone8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        int int15 = mutablePeriod14.getMonths();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(readableInstant10, (org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType21);
        int int23 = mutablePeriod22.getMonths();
        org.joda.time.Interval interval24 = new org.joda.time.Interval(readableInstant18, (org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        boolean boolean26 = interval16.contains((org.joda.time.ReadableInterval) interval24);
        boolean boolean27 = interval9.isBefore((org.joda.time.ReadableInterval) interval24);
        org.joda.time.DateTime dateTime28 = interval24.getStart();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.toDateTime(dateTimeZone29);
        boolean boolean31 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime30);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test3428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3428");
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException("monthOfYear", throwable2);
        java.io.IOException iOException4 = new java.io.IOException("1907-09-04", (java.lang.Throwable) iOException3);
    }

    @Test
    public void test3429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3429");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) (short) 10);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes((int) (byte) 100);
        org.joda.time.DateTime dateTime4 = timeOfDay1.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay1.minusHours(26200709);
        int int7 = timeOfDay6.size();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay6.minusHours(26239483);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test3430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3430");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        int int6 = mutablePeriod5.getMonths();
        org.joda.time.Interval interval7 = new org.joda.time.Interval(readableInstant1, (org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        int int14 = mutablePeriod13.getMonths();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        boolean boolean17 = interval7.contains((org.joda.time.ReadableInterval) interval15);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfYear();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.Interval interval22 = localDate18.toInterval(dateTimeZone21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        int int28 = mutablePeriod27.getMonths();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableInstant23, (org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType34);
        int int36 = mutablePeriod35.getMonths();
        org.joda.time.Interval interval37 = new org.joda.time.Interval(readableInstant31, (org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        boolean boolean39 = interval29.contains((org.joda.time.ReadableInterval) interval37);
        boolean boolean40 = interval22.isBefore((org.joda.time.ReadableInterval) interval37);
        long long41 = interval37.getStartMillis();
        boolean boolean42 = interval7.overlaps((org.joda.time.ReadableInterval) interval37);
        org.joda.time.MutableInterval mutableInterval43 = interval37.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval44 = interval37.toMutableInterval();
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.parse("2022-02-22T00:00:00.001Z");
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardMinutes((long) 9);
        org.joda.time.DateTime dateTime49 = dateTime46.plus((org.joda.time.ReadableDuration) duration48);
        long long50 = duration48.getStandardDays();
        org.joda.time.format.DateTimePrinter dateTimePrinter51 = null;
        org.joda.time.format.DateTimeParser dateTimeParser52 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter51, dateTimeParser52);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType57 = periodType56.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType61);
        int int63 = mutablePeriod62.getMonths();
        org.joda.time.Interval interval64 = new org.joda.time.Interval(readableInstant58, (org.joda.time.ReadablePeriod) mutablePeriod62);
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        org.joda.time.YearMonthDay yearMonthDay66 = new org.joda.time.YearMonthDay(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType70);
        int int72 = mutablePeriod71.getMonths();
        org.joda.time.Interval interval73 = new org.joda.time.Interval(readableInstant67, (org.joda.time.ReadablePeriod) mutablePeriod71);
        int[] intArray76 = chronology65.get((org.joda.time.ReadablePeriod) mutablePeriod71, 1L, (long) 4);
        org.joda.time.Period period77 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType56, chronology65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter53.withChronology(chronology65);
        boolean boolean79 = dateTimeFormatter78.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter80 = dateTimeFormatter78.getPrinter();
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.PeriodType periodType84 = null;
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType84);
        int int86 = mutablePeriod85.getMonths();
        org.joda.time.Interval interval87 = new org.joda.time.Interval(readableInstant81, (org.joda.time.ReadablePeriod) mutablePeriod85);
        org.joda.time.Chronology chronology88 = interval87.getChronology();
        org.joda.time.DateTimeField dateTimeField89 = chronology88.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField90 = chronology88.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField91 = chronology88.dayOfYear();
        org.joda.time.LocalDate localDate92 = org.joda.time.LocalDate.now(chronology88);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter93 = dateTimeFormatter78.withChronology(chronology88);
        org.joda.time.Period period94 = duration48.toPeriod(chronology88);
        org.joda.time.Interval interval95 = interval37.withChronology(chronology88);
        org.joda.time.LocalDate localDate96 = org.joda.time.LocalDate.now(chronology88);
        org.joda.time.MutablePeriod mutablePeriod97 = new org.joda.time.MutablePeriod(1645514306651L, chronology88);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645514493270L + "'", long41 == 1645514493270L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(mutableInterval44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(dateTimePrinter80);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(localDate92);
        org.junit.Assert.assertNotNull(dateTimeFormatter93);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(interval95);
        org.junit.Assert.assertNotNull(localDate96);
    }

    @Test
    public void test3431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3431");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay36 = property34.addWrapFieldToCopy(26162974);
        java.lang.String str37 = property34.getName();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "millisOfSecond" + "'", str37, "millisOfSecond");
    }

    @Test
    public void test3432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3432");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        int int6 = date5.getMonth();
        long long7 = date5.getTime();
        int int8 = date5.getDay();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date5);
        date5.setTime((long) 'u');
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        java.lang.String str14 = mutableDateTime13.toString();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology16 = dateMidnight15.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withDayOfMonth(8);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfMonth();
        org.joda.time.DateTime dateTime25 = dateTime22.plusSeconds(10);
        org.joda.time.DateTime dateTime27 = dateTime22.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property29 = dateTime27.property(dateTimeFieldType28);
        int int30 = dateMidnight15.get(dateTimeFieldType28);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime13.property(dateTimeFieldType28);
        java.util.Date date32 = mutableDateTime13.toDate();
        long long33 = date32.getTime();
        date32.setTime(1645514311762L);
        int int36 = date5.compareTo(date32);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1966881660000L) + "'", long7 == (-1966881660000L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str14, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Tue Feb 22 07:18:31 GMT 2022");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645488000000L + "'", long33 == 1645488000000L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test3433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3433");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((-171), 809, 26413696, 7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -171 for hourOfDay must not be smaller than 0");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3434");
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100, chronology12);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 10, (int) (byte) 1, 3, (int) (short) 1, chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology12);
        mutableDateTime16.addSeconds(1969);
        mutableDateTime16.addDays(362);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test3435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3435");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod18, 1L, (long) 4);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType3, chronology12);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(obj0, chronology12);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone28);
        org.joda.time.DateTime dateTime30 = localDate25.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.LocalDate.Property property31 = localDate25.yearOfEra();
        org.joda.time.DateTime dateTime32 = localDate25.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test3436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3436");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 26200509, 84202366501000L);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        int int9 = mutablePeriod8.getMonths();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableInstant4, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Chronology chronology11 = interval10.getChronology();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(chronology11);
        org.joda.time.DurationField durationField13 = chronology11.weeks();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology11);
        mutablePeriod2.add(1182L, chronology11);
        org.joda.time.DateTimeZone dateTimeZone16 = chronology11.getZone();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone16);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        boolean boolean20 = localDate18.isSupported(dateTimeFieldType19);
        org.joda.time.LocalDate localDate22 = localDate18.withWeekyear((int) (short) 100);
        int int23 = localDate18.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property24 = localDate18.monthOfYear();
        org.joda.time.Period period26 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period28 = period26.minusYears(8);
        org.joda.time.Period period30 = period26.withYears(2);
        org.joda.time.Period period32 = period30.plusMillis((int) (byte) 10);
        org.joda.time.Period period34 = period32.minusMillis(270);
        org.joda.time.LocalDate localDate35 = localDate18.minus((org.joda.time.ReadablePeriod) period32);
        int int36 = localDate18.getCenturyOfEra();
        org.joda.time.ReadablePartial readablePartial37 = null;
        org.joda.time.LocalDate localDate38 = localDate18.withFields(readablePartial37);
        org.joda.time.LocalDate localDate40 = localDate38.minusYears(2);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight41.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property46 = dateMidnight41.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight41.withMillis((long) 5);
        org.joda.time.DateMidnight.Property property49 = dateMidnight41.yearOfEra();
        org.joda.time.DateMidnight.Property property50 = dateMidnight41.monthOfYear();
        org.joda.time.DateMidnight.Property property51 = dateMidnight41.era();
        org.joda.time.YearMonthDay yearMonthDay52 = dateMidnight41.toYearMonthDay();
        int int53 = localDate38.compareTo((org.joda.time.ReadablePartial) yearMonthDay52);
        org.joda.time.DateTime dateTime54 = dateTime17.withFields((org.joda.time.ReadablePartial) localDate38);
        int int55 = dateTime17.getSecondOfDay();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20 + "'", int36 == 20);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 26494 + "'", int55 == 26494);
    }

    @Test
    public void test3437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3437");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property29 = localDate28.dayOfYear();
        org.joda.time.LocalDate localDate30 = property29.roundCeilingCopy();
        org.joda.time.LocalDate localDate32 = property29.addWrapFieldToCopy(292269054);
        org.joda.time.LocalDate localDate33 = property29.withMaximumValue();
        org.joda.time.DateTime dateTime34 = localDate33.toDateTimeAtMidnight();
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime36 = dateMidnight35.toMutableDateTime();
        mutableDateTime36.add((long) 1);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime36.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property39.getFieldType();
        int int41 = property39.getMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime43 = property39.addWrapField(12);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime46 = dateMidnight45.toMutableDateTime();
        mutableDateTime46.add((long) 1);
        mutableDateTime46.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime46.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone52 = mutableDateTime46.getZone();
        java.lang.String str54 = dateTimeZone52.getShortName(1645514178807L);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(160704000000000L, dateTimeZone52);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((java.lang.Object) mutableDateTime43, dateTimeZone52);
        boolean boolean57 = localDate33.equals((java.lang.Object) dateTimeZone52);
        long long59 = dateTimeZone52.previousTransition((long) 820);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter2.withZone(dateTimeZone52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime62 = dateTimeFormatter60.parseMutableDateTime("Etc/UTC");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 86399 + "'", int41 == 86399);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 820L + "'", long59 == 820L);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
    }

    @Test
    public void test3438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3438");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod18, 1L, (long) 4);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType3, chronology12);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(obj0, chronology12);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone28);
        org.joda.time.DateTime dateTime30 = localDate25.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = dateTime30.minusHours((int) (short) -1);
        boolean boolean33 = dateTime30.isAfterNow();
        org.joda.time.DateTime dateTime35 = dateTime30.minusMonths(26371835);
        org.joda.time.DateTime.Property property36 = dateTime30.year();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test3439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3439");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.plusWeeks(25);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime5 = property3.addToCopy(0L);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test3440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3440");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        boolean boolean33 = interval23.contains((org.joda.time.ReadableInterval) interval31);
        boolean boolean34 = interval6.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Interval interval35 = interval23.toInterval();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        int int41 = mutablePeriod40.getMonths();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableInstant36, (org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.MutableInterval mutableInterval44 = interval42.toMutableInterval();
        org.joda.time.Interval interval45 = interval35.overlap((org.joda.time.ReadableInterval) interval42);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime47.minusWeeks((int) '#');
        org.joda.time.DateTime dateTime51 = dateTime49.plusWeeks(26239483);
        org.joda.time.DateTime dateTime53 = dateTime49.withHourOfDay(13);
        boolean boolean54 = interval35.isBefore((org.joda.time.ReadableInstant) dateTime53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(mutableInterval44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test3441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3441");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        java.util.Locale locale6 = java.util.Locale.PRC;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.fromCalendarFields(calendar7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withDayOfMonth(8);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime18.plusSeconds(10);
        org.joda.time.DateTime dateTime23 = dateTime18.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property25 = dateTime23.property(dateTimeFieldType24);
        int int26 = dateMidnight11.get(dateTimeFieldType24);
        int int27 = localDateTime8.indexOf(dateTimeFieldType24);
        int int28 = localDateTime8.getMillisOfDay();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime5, (org.joda.time.ReadablePartial) localDateTime8);
        int int30 = localDateTime5.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((java.lang.Object) int30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514494582,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=34,MILLISECOND=582,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645514494582,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=34,MILLISECOND=582,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 26494582 + "'", int28 == 26494582);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
    }

    @Test
    public void test3442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3442");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutableInterval mutableInterval8 = interval6.toMutableInterval();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = localDate9.isSupported(dateTimeFieldType10);
        org.joda.time.LocalDate.Property property12 = localDate9.yearOfEra();
        org.joda.time.Interval interval13 = localDate9.toInterval();
        boolean boolean14 = interval13.isBeforeNow();
        org.joda.time.Interval interval15 = interval13.toInterval();
        boolean boolean16 = interval15.containsNow();
        boolean boolean17 = mutableInterval8.contains((org.joda.time.ReadableInterval) interval15);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType21);
        int int23 = mutablePeriod22.getMonths();
        org.joda.time.Interval interval24 = new org.joda.time.Interval(readableInstant18, (org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        int int31 = mutablePeriod30.getMonths();
        org.joda.time.Interval interval32 = new org.joda.time.Interval(readableInstant26, (org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        boolean boolean34 = interval24.contains((org.joda.time.ReadableInterval) interval32);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType38);
        int int40 = mutablePeriod39.getMonths();
        org.joda.time.Interval interval41 = new org.joda.time.Interval(readableInstant35, (org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType46);
        int int48 = mutablePeriod47.getMonths();
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readableInstant43, (org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        boolean boolean51 = interval41.contains((org.joda.time.ReadableInterval) interval49);
        boolean boolean52 = interval24.overlaps((org.joda.time.ReadableInterval) interval41);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight57.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime60 = dateMidnight57.toMutableDateTime();
        boolean boolean62 = dateMidnight57.isEqual((long) 2);
        int int63 = dateMidnight56.compareTo((org.joda.time.ReadableInstant) dateMidnight57);
        org.joda.time.Interval interval64 = dateMidnight56.toInterval();
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime66 = dateMidnight65.toMutableDateTime();
        mutableDateTime66.add((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime66.property(dateTimeFieldType69);
        org.joda.time.Interval interval71 = interval64.withEnd((org.joda.time.ReadableInstant) mutableDateTime66);
        boolean boolean72 = interval24.contains((org.joda.time.ReadableInterval) interval64);
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType76);
        int int78 = mutablePeriod77.getMonths();
        org.joda.time.Interval interval79 = new org.joda.time.Interval(readableInstant73, (org.joda.time.ReadablePeriod) mutablePeriod77);
        org.joda.time.Interval interval81 = interval79.withStartMillis(0L);
        org.joda.time.Interval interval82 = interval79.toInterval();
        boolean boolean83 = interval64.contains((org.joda.time.ReadableInterval) interval79);
        boolean boolean84 = interval15.contains((org.joda.time.ReadableInterval) interval64);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test3443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3443");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((-1L));
        int int2 = mutableDateTime1.getHourOfDay();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
    }

    @Test
    public void test3444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3444");
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(100, 4, (int) (byte) 10, (int) (short) 1, (int) (short) 1, (int) '4');
        org.joda.time.DateTime dateTime10 = dateTime7.withDurationAdded((long) (byte) 100, 6);
        org.joda.time.DateTime dateTime12 = dateTime7.withSecondOfMinute((int) (short) 0);
        org.joda.time.DateTime dateTime14 = dateTime7.minusDays(766);
        java.util.Locale locale15 = java.util.Locale.PRC;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.fromCalendarFields(calendar16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plusMillis((int) ' ');
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfYear((int) (byte) 1);
        int int26 = dateTime25.getDayOfMonth();
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime29 = dateTime25.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime21.withDurationAdded((org.joda.time.ReadableDuration) duration28, 3);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime21.minusDays(2922789);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.yearOfCentury();
        int int36 = dateMidnight34.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight34.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight38.withDurationAdded((long) (byte) 0, (int) (short) 10);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime43 = dateMidnight42.toMutableDateTime();
        mutableDateTime43.add((long) 1);
        mutableDateTime43.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime43.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone49 = mutableDateTime43.getZone();
        boolean boolean50 = dateTimeZone49.isFixed();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight38.withZoneRetainFields(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = localDateTime33.toDateTime(dateTimeZone49);
        java.lang.String str54 = dateTimeZone49.getNameKey(29335068995000L);
        org.joda.time.DateTime dateTime55 = dateTime14.withZoneRetainFields(dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(1641116552848L, dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645514494676,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=34,MILLISECOND=676,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "UTC" + "'", str54, "UTC");
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test3445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3445");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime3 = dateTime1.withDayOfWeek(70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test3446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3446");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        mutableDateTime6.add((long) 1);
        mutableDateTime6.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        mutableDateTime14.add((long) 1);
        org.joda.time.DateTime dateTime17 = mutableDateTime14.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, readableDuration18, periodType19);
        org.joda.time.Chronology chronology21 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(chronology21);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime22.secondOfDay();
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) (byte) 0);
        long long27 = duration26.getMillis();
        long long28 = duration26.getMillis();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime22, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.Period period30 = period29.normalizedStandard();
        org.joda.time.Period period32 = period29.plusYears(436);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
    }

    @Test
    public void test3447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3447");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        java.util.Locale locale3 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale3);
        java.lang.String str5 = localDate0.toString("0", locale3);
        java.util.Locale locale6 = locale3.stripExtensions();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514494834,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=34,MILLISECOND=834,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0" + "'", str5, "0");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja");
    }

    @Test
    public void test3448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3448");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        mutableDateTime1.setMonthOfYear(1);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime1.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMonthOfYear(26270486);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26270486 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str2, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableDateTime5);
    }

    @Test
    public void test3449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3449");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(20);
        org.joda.time.DateTime dateTime7 = dateTime3.plusMillis(0);
        org.joda.time.DateTime.Property property8 = dateTime7.hourOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime12.plusSeconds(10);
        int int16 = property8.getDifference((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime18 = dateTime15.plusSeconds((int) (short) -1);
        org.joda.time.Period period20 = org.joda.time.Period.days((int) (short) -1);
        org.joda.time.Period period22 = period20.minusMinutes((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime24 = dateMidnight23.toMutableDateTime();
        int int25 = mutableDateTime24.getYearOfEra();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.months();
        mutablePeriod29.set(durationFieldType30, (int) 'a');
        mutablePeriod29.addHours((int) (byte) -1);
        mutablePeriod29.addYears(2022);
        mutableDateTime24.add((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime41 = dateMidnight40.toMutableDateTime();
        mutableDateTime41.add((long) 1);
        org.joda.time.DateTime dateTime44 = mutableDateTime41.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.years();
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime41, readableDuration45, periodType46);
        java.lang.String str48 = mutableDateTime41.toString();
        org.joda.time.Chronology chronology49 = mutableDateTime41.getChronology();
        mutablePeriod29.setPeriod(1645514159651L, (long) (short) -1, chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.dayOfMonth();
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType54);
        int[] intArray58 = chronology49.get((org.joda.time.ReadablePeriod) mutablePeriod55, (long) 10, 1645514176224L);
        org.joda.time.Period period60 = org.joda.time.Period.months(117);
        org.joda.time.Period period62 = period60.plusMinutes(26166853);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.minutes();
        int int64 = period62.get(durationFieldType63);
        mutablePeriod55.add(durationFieldType63, (-292275054));
        int int67 = period22.indexOf(durationFieldType63);
        org.joda.time.DateTime dateTime69 = dateTime18.withFieldAdded(durationFieldType63, 4);
        org.joda.time.DateTime dateTime70 = dateTime69.toDateTime();
        org.joda.time.DateTime dateTime72 = dateTime70.plus((long) 441);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str48, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[52, 1, 3, 0, 7, 16, 16, 214]");
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 26166853 + "'", int64 == 26166853);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
    }

    @Test
    public void test3450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3450");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.TimeOfDay timeOfDay36 = property34.getTimeOfDay();
        java.lang.String str37 = property34.getAsShortText();
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale39);
        java.lang.String str41 = locale38.getDisplayVariant(locale39);
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("GMT");
        java.lang.String str44 = locale39.getDisplayScript(locale43);
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.lang.String str46 = locale45.getDisplayScript();
        java.lang.String str47 = locale45.getLanguage();
        java.lang.String str48 = locale43.getDisplayVariant(locale45);
        int int49 = property34.getMaximumTextLength(locale43);
        org.joda.time.DurationField durationField50 = property34.getDurationField();
        long long53 = durationField50.getDifferenceAsLong(29335047395000L, (long) 26162285);
        // The following exception was thrown during execution in test generation
        try {
            int int56 = durationField50.getDifference(1645514156600L, (long) 26414296);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645487742304");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(timeOfDay36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "970" + "'", str37, "970");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1645514494936,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=34,MILLISECOND=936,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "gmt");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ja" + "'", str47, "ja");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 29335021232715L + "'", long53 == 29335021232715L);
    }

    @Test
    public void test3451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3451");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date4 = new java.util.Date(365, 702, 8);
        java.util.Calendar.Builder builder5 = builder0.setInstant(date4);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("1 Jan 2022 00:00:00 GMT");
        java.util.Calendar.Builder builder8 = builder0.setTimeZone(timeZone7);
        java.util.Calendar.Builder builder10 = builder0.setInstant(1645514183885L);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Sun Jul 08 00:00:00 GMT 2323");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3452");
        java.util.Date date0 = new java.util.Date();
        java.lang.String str1 = date0.toGMTString();
        date0.setMonth((int) (short) -1);
        date0.setHours(482);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromDateFields(date0);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.plusYears(2);
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay6, (org.joda.time.ReadablePartial) yearMonthDay15);
        java.util.Locale locale21 = java.util.Locale.PRC;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(locale21);
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.fromCalendarFields(calendar22);
        org.joda.time.DateTime dateTime24 = localDateTime23.toDateTime();
        org.joda.time.DateTime dateTime26 = dateTime24.plusHours(12);
        org.joda.time.DateTime dateTime27 = dateTime24.withTimeAtStartOfDay();
        org.joda.time.Period period29 = org.joda.time.Period.seconds(0);
        org.joda.time.DateTime dateTime30 = dateTime24.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period32 = period29.withMonths(26239483);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay15.withPeriodAdded((org.joda.time.ReadablePeriod) period32, 329);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 26239483 * 329");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Tue Jan 11 02:21:34 GMT 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "22 Feb 2022 07:21:34 GMT" + "'", str1, "22 Feb 2022 07:21:34 GMT");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645514494975,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=34,MILLISECOND=975,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period32);
    }

    @Test
    public void test3453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3453");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-22T00:00:00.001Z");
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear(100);
        org.joda.time.DateTimeZone dateTimeZone4 = dateTime3.getZone();
        java.lang.String str6 = dateTimeZone4.getName((long) 26172489);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test3454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3454");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        int int6 = mutablePeriod5.getMonths();
        org.joda.time.Interval interval7 = new org.joda.time.Interval(readableInstant1, (org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100, chronology8);
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(chronology8);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.minusMinutes(26184696);
        java.util.Locale locale13 = java.util.Locale.PRC;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.fromCalendarFields(calendar14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        boolean boolean19 = localDateTime17.isSupported(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property22 = localDateTime17.yearOfCentury();
        org.joda.time.DateTime dateTime23 = localDateTime17.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int25 = dateTime23.get(dateTimeFieldType24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay27 = timeOfDay12.withField(dateTimeFieldType24, 329);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 329 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645514495044,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=35,MILLISECOND=44,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
    }

    @Test
    public void test3455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3455");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(chronology8);
        org.joda.time.DurationField durationField10 = chronology8.seconds();
        int int13 = durationField10.getDifference(31536000100L, 1645514169568L);
        int int16 = durationField10.getValue(22000L, (long) 26194884);
        org.joda.time.DurationFieldType durationFieldType17 = durationField10.getType();
        java.lang.String str18 = durationFieldType17.toString();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1613978169) + "'", int13 == (-1613978169));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "seconds" + "'", str18, "seconds");
    }

    @Test
    public void test3456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3456");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.add(4, 0);
        int int6 = calendar1.getMaximum(9);
        int int7 = calendar1.getMinimalDaysInFirstWeek();
        calendar1.set(436, 26166853, 2922789, 451, 26162285, 26168880);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = calendar1.getLeastMaximum(26166853);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26166853");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=436,MONTH=26166853,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=2922789,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=451,MINUTE=26162285,SECOND=26168880,MILLISECOND=83,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test3457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3457");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        mutableDateTime6.add((long) 1);
        mutableDateTime6.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        mutableDateTime14.add((long) 1);
        org.joda.time.DateTime dateTime17 = mutableDateTime14.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, readableDuration18, periodType19);
        org.joda.time.Chronology chronology21 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(chronology21);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime25 = dateMidnight24.toMutableDateTime();
        mutableDateTime25.add((long) 1);
        mutableDateTime25.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime25.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime25.dayOfYear();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.minusWeeks(0);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime25, (org.joda.time.ReadableInstant) dateMidnight37, periodType38);
        org.joda.time.DateMidnight.Property property40 = dateMidnight37.year();
        java.util.Locale locale41 = java.util.Locale.PRC;
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(locale41);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.fromCalendarFields(calendar42);
        org.joda.time.DateTime dateTime44 = localDateTime43.toDateTime();
        org.joda.time.LocalDateTime.Property property45 = localDateTime43.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime46 = property45.roundHalfCeilingCopy();
        java.util.Locale locale47 = java.util.Locale.PRC;
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale47);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.fromCalendarFields(calendar48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology53 = dateMidnight52.getChronology();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight52.withDayOfMonth(8);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime59 = dateTime57.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property60 = dateTime59.dayOfMonth();
        org.joda.time.DateTime dateTime62 = dateTime59.plusSeconds(10);
        org.joda.time.DateTime dateTime64 = dateTime59.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property66 = dateTime64.property(dateTimeFieldType65);
        int int67 = dateMidnight52.get(dateTimeFieldType65);
        int int68 = localDateTime49.indexOf(dateTimeFieldType65);
        int int69 = localDateTime49.getMillisOfDay();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime46, (org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.Period period72 = period70.withMillis(22);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight37.plus((org.joda.time.ReadablePeriod) period70);
        mutableDateTime22.add((org.joda.time.ReadablePeriod) period70, 28);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime22.setHourOfDay(26347434);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26347434 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1645514495091,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=35,MILLISECOND=91,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1645514495091,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=35,MILLISECOND=91,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 26495091 + "'", int69 == 26495091);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(dateMidnight73);
    }

    @Test
    public void test3458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3458");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology13.getZone();
        org.joda.time.DateTime dateTime18 = dateTime2.toDateTime(chronology13);
        int int19 = dateTime18.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
    }

    @Test
    public void test3459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3459");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        mutableDateTime1.setMonthOfYear(1);
        mutableDateTime1.addWeekyears(4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime1.toMutableDateTime(dateTimeZone8);
        mutableDateTime1.addDays(22);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundHalfCeiling();
        mutableDateTime14.setMillis(3109198201000L);
        mutableDateTime14.setMillisOfDay(133);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str2, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
    }

    @Test
    public void test3460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3460");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getName((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate.Property property5 = localDate4.weekOfWeekyear();
        org.joda.time.LocalDate localDate7 = property5.setCopy((int) (short) 1);
        org.joda.time.LocalDate.Property property8 = localDate7.monthOfYear();
        java.lang.String str9 = property8.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "janv." + "'", str9, "janv.");
    }

    @Test
    public void test3461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3461");
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType8 = periodType7.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        int int14 = mutablePeriod13.getMonths();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType21);
        int int23 = mutablePeriod22.getMonths();
        org.joda.time.Interval interval24 = new org.joda.time.Interval(readableInstant18, (org.joda.time.ReadablePeriod) mutablePeriod22);
        int[] intArray27 = chronology16.get((org.joda.time.ReadablePeriod) mutablePeriod22, 1L, (long) 4);
        org.joda.time.Period period28 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType7, chronology16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter4.withChronology(chronology16);
        boolean boolean30 = dateTimeFormatter29.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter31 = dateTimeFormatter29.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatter29.getParser();
        boolean boolean33 = dateTimeFormatter29.isOffsetParsed();
        org.joda.time.Chronology chronology34 = dateTimeFormatter29.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(321, 147, chronology34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 321 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(dateTimePrinter31);
        org.junit.Assert.assertNull(dateTimeParser32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(chronology34);
    }

    @Test
    public void test3462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3462");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 2022);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight2.toMutableDateTime();
        mutableDateTime3.add((long) 1);
        org.joda.time.DateTime dateTime6 = mutableDateTime3.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime3, readableDuration7, periodType8);
        org.joda.time.Weeks weeks10 = period9.toStandardWeeks();
        org.joda.time.Period period12 = period9.minusYears((int) (byte) 0);
        org.joda.time.LocalTime localTime14 = localTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period9, 0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test3463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3463");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight11.toMutableDateTime();
        mutableDateTime12.add((long) 1);
        org.joda.time.DateTime dateTime15 = mutableDateTime12.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime12, readableDuration16, periodType17);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay10.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Chronology chronology20 = yearMonthDay10.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime24 = dateMidnight23.toMutableDateTime();
        int int25 = mutableDateTime24.getYearOfEra();
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.now();
        int int27 = localTime26.size();
        org.joda.time.LocalTime.Property property28 = localTime26.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = localTime26.toDateTimeToday(dateTimeZone29);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime24, dateTimeZone29);
        org.joda.time.LocalTime localTime33 = localTime31.plusMillis((int) ' ');
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime36 = dateTime35.toLocalTime();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now();
        int int38 = localTime36.compareTo((org.joda.time.ReadablePartial) localTime37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime40 = dateMidnight39.toMutableDateTime();
        int int41 = mutableDateTime40.getYearOfEra();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType44);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.months();
        mutablePeriod45.set(durationFieldType46, (int) 'a');
        mutablePeriod45.addHours((int) (byte) -1);
        mutablePeriod45.addYears(2022);
        mutableDateTime40.add((org.joda.time.ReadablePeriod) mutablePeriod45);
        org.joda.time.LocalTime localTime54 = localTime37.plus((org.joda.time.ReadablePeriod) mutablePeriod45);
        org.joda.time.LocalTime localTime56 = localTime54.minusMinutes(1);
        int int57 = localTime33.compareTo((org.joda.time.ReadablePartial) localTime54);
        int int58 = localTime54.getHourOfDay();
        int[] intArray63 = new int[] { (-234534), 31, 287 };
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray65 = dateTimeField22.add((org.joda.time.ReadablePartial) localTime54, 321, intArray63, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 6 + "'", int58 == 6);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[-234534, 31, 287]");
    }

    @Test
    public void test3464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3464");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Interval interval4 = localDate0.toInterval();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime8 = dateTime6.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfMonth();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        mutablePeriod13.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        java.lang.String str19 = mutablePeriod13.toString();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod13.setValue(0, 2022);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) (byte) 0);
        long long29 = duration28.getMillis();
        org.joda.time.Duration duration31 = new org.joda.time.Duration((long) (byte) 0);
        long long32 = duration31.getMillis();
        int int33 = duration28.compareTo((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration35 = duration25.withDurationAdded((org.joda.time.ReadableDuration) duration31, 10);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime37 = dateMidnight36.toMutableDateTime();
        mutableDateTime37.add((long) 1);
        org.joda.time.DateTime dateTime40 = mutableDateTime37.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.years();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime37, readableDuration41, periodType42);
        org.joda.time.Chronology chronology44 = mutableDateTime37.getChronology();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(chronology44);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfYear((int) (byte) 1);
        int int50 = dateTime49.getDayOfMonth();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime53 = dateTime49.minus((org.joda.time.ReadableDuration) duration52);
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean57 = duration52.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration59 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean60 = duration52.isLongerThan((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Duration duration62 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration59, 999);
        org.joda.time.LocalDate localDate63 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property64 = localDate63.dayOfYear();
        org.joda.time.DateMidnight dateMidnight65 = localDate63.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight66 = localDate63.toDateMidnight();
        org.joda.time.Period period67 = duration31.toPeriodTo((org.joda.time.ReadableInstant) dateMidnight66);
        long long68 = duration31.getStandardDays();
        org.joda.time.Interval interval69 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime((long) (short) 10, dateTimeZone71);
        boolean boolean73 = interval69.isAfter((org.joda.time.ReadableInstant) mutableDateTime72);
        int int74 = mutableDateTime72.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime72.setMinuteOfHour(1907);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1907 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0.034S" + "'", str19, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1970 + "'", int74 == 1970);
    }

    @Test
    public void test3465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3465");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        boolean boolean9 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight0.withCenturyOfEra(0);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setWeeks(11);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight11.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setPeriod(1645514227629L, (long) 26391959);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(dateMidnight30);
    }

    @Test
    public void test3466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3466");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        int int7 = mutableDateTime6.getYearOfEra();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        mutablePeriod11.addHours((int) (byte) -1);
        mutablePeriod11.addYears(2022);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.LocalTime localTime20 = localTime3.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.LocalTime localTime22 = localTime20.minusMinutes(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean24 = localTime22.isSupported(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test3467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3467");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.DateMidnight dateMidnight2 = localDate0.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = localDate0.toDateMidnight();
        org.joda.time.LocalDate.Property property4 = localDate0.year();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.LocalDate localDate15 = localDate0.minus((org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Interval interval16 = localDate15.toInterval();
        org.joda.time.Interval interval17 = localDate15.toInterval();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        java.lang.String str21 = dateTimeZone19.getName((long) 100);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone19);
        org.joda.time.LocalDate.Property property23 = localDate22.weekOfWeekyear();
        org.joda.time.LocalDate localDate25 = property23.setCopy((int) (short) 1);
        org.joda.time.LocalDate.Property property26 = localDate25.monthOfYear();
        org.joda.time.LocalDate localDate27 = property26.withMaximumValue();
        org.joda.time.Interval interval28 = property26.toInterval();
        boolean boolean29 = interval17.isBefore((org.joda.time.ReadableInterval) interval28);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test3468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3468");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMonths(436);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime10 = property9.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = property9.addToCopy(26164327);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMillis(0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514495370,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=35,MILLISECOND=370,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test3469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3469");
        java.util.Date date3 = new java.util.Date(365, 702, 8);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.fromDateFields(date3);
        org.joda.time.LocalDate localDate6 = localDate4.plusWeeks(16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType8 = localDate6.getFieldType(26197982);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26197982");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sun Jul 08 00:00:00 GMT 2323");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test3470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3470");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        long long6 = dateTimeZone1.getMillisKeepLocal(dateTimeZone4, (long) 2);
        long long8 = dateTimeZone1.previousTransition(1645514165226L);
        long long10 = dateTimeZone1.convertUTCToLocal(1645514422398L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645514165226L + "'", long8 == 1645514165226L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514422398L + "'", long10 == 1645514422398L);
    }

    @Test
    public void test3471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3471");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withDurationAdded((long) (byte) 0, (int) (short) 10);
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.dayOfMonth();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = null;
        org.joda.time.format.DateTimeParser dateTimeParser10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter9, dateTimeParser10);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType15 = periodType14.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        int[] intArray34 = chronology23.get((org.joda.time.ReadablePeriod) mutablePeriod29, 1L, (long) 4);
        org.joda.time.Period period35 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType14, chronology23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter11.withChronology(chronology23);
        java.lang.Integer int37 = dateTimeFormatter36.getPivotYear();
        org.joda.time.Chronology chronology38 = dateTimeFormatter36.getChronolgy();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.weekyearOfCentury();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight4.withChronology(chronology38);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateMidnight40);
    }

    @Test
    public void test3472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3472");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.Duration duration6 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime7 = dateTime3.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        org.joda.time.DateMidnight dateMidnight10 = property9.roundHalfEvenCopy();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) (byte) 0);
        long long14 = duration13.getMillis();
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = localDate15.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Hours hours19 = duration13.toStandardHours();
        org.joda.time.Interval interval20 = interval11.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfMonth();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        mutablePeriod29.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        java.lang.String str35 = mutablePeriod29.toString();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Interval interval37 = interval20.gap((org.joda.time.ReadableInterval) interval36);
        org.joda.time.DateTime dateTime38 = interval36.getStart();
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT0.034S" + "'", str35, "PT0.034S");
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test3473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3473");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        mutableDateTime1.addMinutes((int) ' ');
        int int11 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = dateTime14.withWeekOfWeekyear((int) '4');
        boolean boolean20 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property21 = dateTime14.minuteOfDay();
        int int22 = property21.getMinimumValue();
        org.joda.time.DateTime dateTime23 = property21.withMinimumValue();
        org.joda.time.DateTime dateTime24 = property21.roundCeilingCopy();
        int int25 = dateTime24.getMinuteOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str8, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test3474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3474");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusDays(86399999);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours(1);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 399, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight19 = yearMonthDay14.toDateMidnight(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = yearMonthDay14.toDateMidnight(dateTimeZone20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay14.withMonthOfYear(429);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 429 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
    }

    @Test
    public void test3475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3475");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfWeek();
        java.util.Locale locale7 = java.util.Locale.KOREA;
        int int8 = property6.getMaximumShortTextLength(locale7);
        org.joda.time.LocalDateTime localDateTime9 = property6.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = property6.setCopy("11 Jan 2022 02:21:25 GMT");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"11 Jan 2022 02:21:25 GMT\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514497358,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=37,MILLISECOND=358,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test3476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3476");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutablePeriod1.add(readableDuration2);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.months();
        mutablePeriod8.set(durationFieldType9, (int) 'a');
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100, chronology20);
        boolean boolean22 = durationFieldType9.isSupported(chronology20);
        mutablePeriod1.setPeriod((long) '4', chronology20);
        int[] intArray24 = mutablePeriod1.getValues();
        org.joda.time.MutablePeriod mutablePeriod25 = mutablePeriod1.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod26 = mutablePeriod25.copy();
        org.joda.time.DurationFieldType[] durationFieldTypeArray27 = mutablePeriod26.getFieldTypes();
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.forFields(durationFieldTypeArray27);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 52]");
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(durationFieldTypeArray27);
        org.junit.Assert.assertNotNull(periodType28);
    }

    @Test
    public void test3477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3477");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime6 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property4.addToCopy((long) 2);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths(3);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMillis((int) 'a');
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.millisOfSecond();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfWeek();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate(1645514333453L);
        org.joda.time.LocalDate.Property property17 = localDate16.era();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDate16);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514497409,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=37,MILLISECOND=409,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test3478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3478");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.TimeOfDay timeOfDay36 = property34.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay38 = property34.addToCopy(5);
        org.joda.time.DateTimeField dateTimeField39 = property34.getField();
        org.joda.time.TimeOfDay timeOfDay41 = property34.addNoWrapToCopy((int) ' ');
        org.joda.time.DurationField durationField42 = property34.getRangeDurationField();
        int int43 = property34.get();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property34.getFieldType();
        int int45 = property34.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(durationField42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 456 + "'", int43 == 456);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 999 + "'", int45 == 999);
    }

    @Test
    public void test3479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3479");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusWeeks(0);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        int int17 = dateTime16.getDayOfMonth();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime20 = dateTime16.minus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight12.minus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property23 = localDate22.dayOfYear();
        org.joda.time.DateMidnight dateMidnight24 = localDate22.toDateMidnight();
        org.joda.time.Chronology chronology25 = localDate22.getChronology();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight12.withFields((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight12.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime31 = dateMidnight30.toMutableDateTime();
        mutableDateTime31.add((long) 1);
        org.joda.time.DateTime dateTime34 = mutableDateTime31.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.years();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime31, readableDuration35, periodType36);
        org.joda.time.Chronology chronology38 = mutableDateTime31.getChronology();
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now(chronology38);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime43 = dateTime41.withDayOfYear((int) (byte) 1);
        int int44 = dateTime43.getDayOfMonth();
        org.joda.time.Duration duration46 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime47 = dateTime43.minus((org.joda.time.ReadableDuration) duration46);
        mutableDateTime39.add((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean51 = duration46.isShorterThan((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((long) (byte) 0);
        long long54 = duration53.getStandardDays();
        org.joda.time.Duration duration55 = duration46.plus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration57 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.Duration duration58 = duration53.minus((org.joda.time.ReadableDuration) duration57);
        long long59 = duration58.getStandardSeconds();
        boolean boolean60 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Minutes minutes61 = duration28.toStandardMinutes();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration28, periodType62);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate(1L, dateTimeZone65);
        org.joda.time.DateTime dateTime67 = org.joda.time.DateTime.now(dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(dateTimeZone65);
        int int69 = dateMidnight68.getWeekOfWeekyear();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) dateMidnight68);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardHours((long) 0);
        org.joda.time.Period period73 = duration72.toPeriod();
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight68.withPeriodAdded((org.joda.time.ReadablePeriod) period73, 429);
        int int76 = dateMidnight75.getCenturyOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 8 + "'", int69 == 8);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 20 + "'", int76 == 20);
    }

    @Test
    public void test3480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3480");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        long long24 = duration23.getStandardDays();
        org.joda.time.Duration duration25 = duration16.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property30 = dateTime29.dayOfMonth();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType37);
        mutablePeriod34.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        java.lang.String str40 = mutablePeriod34.toString();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadablePeriod) mutablePeriod34);
        mutablePeriod34.setValue(0, 2022);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod34.setPeriod((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Duration duration49 = new org.joda.time.Duration((long) (byte) 0);
        long long50 = duration49.getMillis();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        long long53 = duration52.getMillis();
        int int54 = duration49.compareTo((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration56 = duration46.withDurationAdded((org.joda.time.ReadableDuration) duration52, 10);
        long long57 = duration56.getMillis();
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime59 = dateMidnight58.toMutableDateTime();
        mutableDateTime59.add((long) 1);
        org.joda.time.DateTime dateTime62 = mutableDateTime59.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.years();
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime59, readableDuration63, periodType64);
        org.joda.time.Chronology chronology66 = mutableDateTime59.getChronology();
        org.joda.time.MutableDateTime mutableDateTime67 = org.joda.time.MutableDateTime.now(chronology66);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime71 = dateTime69.withDayOfYear((int) (byte) 1);
        int int72 = dateTime71.getDayOfMonth();
        org.joda.time.Duration duration74 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime75 = dateTime71.minus((org.joda.time.ReadableDuration) duration74);
        mutableDateTime67.add((org.joda.time.ReadableDuration) duration74);
        org.joda.time.Duration duration78 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean79 = duration74.isShorterThan((org.joda.time.ReadableDuration) duration78);
        boolean boolean80 = duration56.isLongerThan((org.joda.time.ReadableDuration) duration74);
        boolean boolean81 = duration25.isLongerThan((org.joda.time.ReadableDuration) duration74);
        org.joda.time.Duration duration83 = org.joda.time.Duration.standardDays((long) 8);
        boolean boolean84 = duration74.isShorterThan((org.joda.time.ReadableDuration) duration83);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT0.034S" + "'", str40, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test3481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3481");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate7 = property3.setCopy(2022);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = localDate7.getFields();
        org.joda.time.Chronology chronology9 = localDate7.getChronology();
        org.joda.time.LocalDate localDate11 = localDate7.withCenturyOfEra(863999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear(974);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 974 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test3482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3482");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMinutes(26181768);
        org.joda.time.DateTime dateTime9 = dateTime5.minusWeeks(625);
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test3483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3483");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-22T07:20:43.263Z/2022-02-22T07:20:43.297Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:20:43.263Z/2022-02-22T07:20:43.297Z\" is malformed at \"/2022-02-22T07:20:43.297Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3484");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        boolean boolean9 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight0.withCenturyOfEra(0);
        int int12 = dateMidnight11.getYear();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        mutableDateTime14.add((long) 1);
        org.joda.time.DateTime dateTime17 = mutableDateTime14.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, readableDuration18, periodType19);
        java.lang.String str21 = mutableDateTime14.toString();
        org.joda.time.Chronology chronology22 = mutableDateTime14.getChronology();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight11.withChronology(chronology22);
        org.joda.time.Interval interval24 = dateMidnight11.toInterval();
        org.joda.time.DateTime dateTime25 = interval24.getStart();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        int int33 = mutablePeriod32.getMonths();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableInstant28, (org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 100, chronology35);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 2022, chronology35);
        org.joda.time.DateTime dateTime39 = dateTime37.minusSeconds((int) (byte) 1);
        org.joda.time.DateTime dateTime41 = dateTime39.withCenturyOfEra(0);
        boolean boolean42 = interval24.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval46 = new org.joda.time.Interval(readableDuration43, (org.joda.time.ReadableInstant) dateTime45);
        boolean boolean48 = interval46.equals((java.lang.Object) 1L);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.withMillis((long) (short) 0);
        boolean boolean52 = interval46.isBefore((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((long) (byte) 0);
        long long55 = duration54.getStandardDays();
        org.joda.time.Interval interval56 = interval46.withDurationAfterStart((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Interval interval57 = interval24.overlap((org.joda.time.ReadableInterval) interval46);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str21, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNull(interval57);
    }

    @Test
    public void test3485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3485");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusHours((int) (short) 0);
        int int5 = localDateTime4.getCenturyOfEra();
        java.util.Locale locale6 = java.util.Locale.PRC;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.fromCalendarFields(calendar7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis((int) (short) 1);
        int int11 = localDateTime10.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusDays(12);
        int int14 = localDateTime13.getSecondOfMinute();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        java.lang.String str18 = periodType17.toString();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        int int24 = mutablePeriod23.getMonths();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableInstant19, (org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.Period period27 = new org.joda.time.Period(1645514159731L, (long) 2022, periodType17, chronology26);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime13.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime13.minus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration32 = duration30.toDuration();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime4.plus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime4.plusWeeks(26367143);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514497619,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=37,MILLISECOND=619,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645514497619,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=37,MILLISECOND=619,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 26497618 + "'", int11 == 26497618);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 37 + "'", int14 == 37);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PeriodType[Years]" + "'", str18, "PeriodType[Years]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
    }

    @Test
    public void test3486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3486");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Interval interval21 = localDate17.toInterval(dateTimeZone20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        boolean boolean38 = interval28.contains((org.joda.time.ReadableInterval) interval36);
        boolean boolean39 = interval21.isBefore((org.joda.time.ReadableInterval) interval36);
        long long40 = interval36.getStartMillis();
        boolean boolean41 = interval6.overlaps((org.joda.time.ReadableInterval) interval36);
        org.joda.time.MutableInterval mutableInterval42 = interval36.toMutableInterval();
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = null;
        boolean boolean45 = localDate43.isSupported(dateTimeFieldType44);
        org.joda.time.LocalDate.Property property46 = localDate43.yearOfEra();
        org.joda.time.Interval interval47 = localDate43.toInterval();
        boolean boolean48 = interval47.isBeforeNow();
        boolean boolean49 = mutableInterval42.overlaps((org.joda.time.ReadableInterval) interval47);
        long long50 = mutableInterval42.toDurationMillis();
        org.joda.time.Interval interval51 = mutableInterval42.toInterval();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime55 = dateTime53.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property56 = dateTime55.dayOfMonth();
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType59);
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType63);
        mutablePeriod60.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod64);
        java.lang.String str66 = mutablePeriod60.toString();
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadablePeriod) mutablePeriod60);
        boolean boolean68 = mutableInterval42.contains((org.joda.time.ReadableInterval) interval67);
        org.joda.time.Interval interval69 = interval67.toInterval();
        org.joda.time.LocalDate localDate70 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property71 = localDate70.dayOfYear();
        java.util.TimeZone timeZone72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone72);
        org.joda.time.Interval interval74 = localDate70.toInterval(dateTimeZone73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType78);
        int int80 = mutablePeriod79.getMonths();
        org.joda.time.Interval interval81 = new org.joda.time.Interval(readableInstant75, (org.joda.time.ReadablePeriod) mutablePeriod79);
        org.joda.time.Chronology chronology82 = interval81.getChronology();
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.PeriodType periodType86 = null;
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType86);
        int int88 = mutablePeriod87.getMonths();
        org.joda.time.Interval interval89 = new org.joda.time.Interval(readableInstant83, (org.joda.time.ReadablePeriod) mutablePeriod87);
        org.joda.time.Chronology chronology90 = interval89.getChronology();
        boolean boolean91 = interval81.contains((org.joda.time.ReadableInterval) interval89);
        boolean boolean92 = interval74.isBefore((org.joda.time.ReadableInterval) interval89);
        org.joda.time.Interval interval94 = interval89.withStartMillis((long) (short) 1);
        org.joda.time.DateTime dateTime95 = interval89.getStart();
        boolean boolean96 = interval69.isAfter((org.joda.time.ReadableInterval) interval89);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645514497647L + "'", long40 == 1645514497647L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 34L + "'", long50 == 34L);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PT0.034S" + "'", str66, "PT0.034S");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(interval94);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test3487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3487");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        boolean boolean28 = dateTimeFormatter27.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter29 = dateTimeFormatter27.getPrinter();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfYear();
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.now(chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter27.withChronology(chronology37);
        boolean boolean43 = dateTimeFormatter42.isPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter44 = null;
        org.joda.time.format.DateTimeParser dateTimeParser45 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter44, dateTimeParser45);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType50 = periodType49.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType54);
        int int56 = mutablePeriod55.getMonths();
        org.joda.time.Interval interval57 = new org.joda.time.Interval(readableInstant51, (org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.Chronology chronology58 = interval57.getChronology();
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType63);
        int int65 = mutablePeriod64.getMonths();
        org.joda.time.Interval interval66 = new org.joda.time.Interval(readableInstant60, (org.joda.time.ReadablePeriod) mutablePeriod64);
        int[] intArray69 = chronology58.get((org.joda.time.ReadablePeriod) mutablePeriod64, 1L, (long) 4);
        org.joda.time.Period period70 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType49, chronology58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter46.withChronology(chronology58);
        java.lang.Integer int72 = dateTimeFormatter71.getPivotYear();
        org.joda.time.Chronology chronology73 = dateTimeFormatter71.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter42.withChronology(chronology73);
        java.lang.Integer int75 = dateTimeFormatter42.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter42.withZoneUTC();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(dateTimePrinter29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNull(int75);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
    }

    @Test
    public void test3488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3488");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusDays(86399999);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        java.lang.String str29 = mutablePeriod23.toString();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) mutablePeriod23);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusWeeks(0);
        boolean boolean37 = mutablePeriod23.equals((java.lang.Object) 0);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        org.joda.time.YearMonthDay yearMonthDay42 = property39.addWrapFieldToCopy(26200578);
        java.lang.String str43 = property39.getAsText();
        java.util.Locale locale44 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.format.DateTimePrinter dateTimePrinter45 = null;
        org.joda.time.format.DateTimeParser dateTimeParser46 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter45, dateTimeParser46);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType51 = periodType50.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType55);
        int int57 = mutablePeriod56.getMonths();
        org.joda.time.Interval interval58 = new org.joda.time.Interval(readableInstant52, (org.joda.time.ReadablePeriod) mutablePeriod56);
        org.joda.time.Chronology chronology59 = interval58.getChronology();
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType64);
        int int66 = mutablePeriod65.getMonths();
        org.joda.time.Interval interval67 = new org.joda.time.Interval(readableInstant61, (org.joda.time.ReadablePeriod) mutablePeriod65);
        int[] intArray70 = chronology59.get((org.joda.time.ReadablePeriod) mutablePeriod65, 1L, (long) 4);
        org.joda.time.Period period71 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType50, chronology59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter47.withChronology(chronology59);
        java.lang.Integer int73 = dateTimeFormatter72.getPivotYear();
        java.util.Locale locale74 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter72.withLocale(locale74);
        java.lang.String str76 = locale44.getDisplayLanguage(locale74);
        java.lang.String str77 = property39.getAsText(locale74);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0.034S" + "'", str29, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "f\351vrier" + "'", str43, "f\351vrier");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNull(int73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "chinois" + "'", str76, "chinois");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "f\351vrier" + "'", str77, "f\351vrier");
    }

    @Test
    public void test3489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3489");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("53");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromCalendarFields(calendar2);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645514499614,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=39,MILLISECOND=614,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay3);
    }

    @Test
    public void test3490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3490");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone2);
        int int4 = dateMidnight3.getDayOfMonth();
        java.util.Date date5 = dateMidnight3.toDate();
        org.joda.time.Duration duration7 = new org.joda.time.Duration((long) (byte) 0);
        long long8 = duration7.getStandardDays();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.weekOfWeekyear();
        mutableDateTime12.setSecondOfMinute((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime12.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = timeOfDay18.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        java.util.TimeZone timeZone24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        java.lang.String str27 = dateTimeZone25.getName((long) 100);
        org.joda.time.DateTime dateTime28 = dateTime23.withZoneRetainFields(dateTimeZone25);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod17, (org.joda.time.ReadableInstant) dateTime23);
        boolean boolean30 = dateMidnight3.isEqual((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology31 = dateTime23.getChronology();
        org.joda.time.DateTime dateTime33 = dateTime23.plusYears(26414296);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 31 + "'", int4 == 31);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Dec 31 00:00:00 GMT 1969");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test3491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3491");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', chronology1);
        int int3 = mutablePeriod2.getMinutes();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        int int9 = mutablePeriod8.getMonths();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableInstant4, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Chronology chronology11 = interval10.getChronology();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        int int17 = mutablePeriod16.getMonths();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableInstant12, (org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        boolean boolean20 = interval10.contains((org.joda.time.ReadableInterval) interval18);
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property22 = localDate21.dayOfYear();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.Interval interval25 = localDate21.toInterval(dateTimeZone24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        int int31 = mutablePeriod30.getMonths();
        org.joda.time.Interval interval32 = new org.joda.time.Interval(readableInstant26, (org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType37);
        int int39 = mutablePeriod38.getMonths();
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableInstant34, (org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        boolean boolean42 = interval32.contains((org.joda.time.ReadableInterval) interval40);
        boolean boolean43 = interval25.isBefore((org.joda.time.ReadableInterval) interval40);
        long long44 = interval40.getStartMillis();
        boolean boolean45 = interval10.overlaps((org.joda.time.ReadableInterval) interval40);
        org.joda.time.DateTime dateTime46 = interval10.getEnd();
        java.lang.String str47 = interval10.toString();
        java.lang.Object obj48 = null;
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType52 = periodType51.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType56);
        int int58 = mutablePeriod57.getMonths();
        org.joda.time.Interval interval59 = new org.joda.time.Interval(readableInstant53, (org.joda.time.ReadablePeriod) mutablePeriod57);
        org.joda.time.Chronology chronology60 = interval59.getChronology();
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay(chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType65);
        int int67 = mutablePeriod66.getMonths();
        org.joda.time.Interval interval68 = new org.joda.time.Interval(readableInstant62, (org.joda.time.ReadablePeriod) mutablePeriod66);
        int[] intArray71 = chronology60.get((org.joda.time.ReadablePeriod) mutablePeriod66, 1L, (long) 4);
        org.joda.time.Period period72 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType51, chronology60);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate(obj48, chronology60);
        org.joda.time.DateTimeField dateTimeField74 = chronology60.yearOfEra();
        org.joda.time.Interval interval75 = interval10.withChronology(chronology60);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645514499703L + "'", long44 == 1645514499703L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T07:21:39.703Z/2022-02-22T07:21:39.737Z" + "'", str47, "2022-02-22T07:21:39.703Z/2022-02-22T07:21:39.737Z");
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(interval75);
    }

    @Test
    public void test3492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3492");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight0.toMutableDateTime();
        boolean boolean5 = dateMidnight0.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.withCenturyOfEra(0);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.months();
        mutablePeriod12.set(durationFieldType13, (int) 'a');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100, chronology24);
        boolean boolean26 = durationFieldType13.isSupported(chronology24);
        boolean boolean27 = durationFieldType8.isSupported(chronology24);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay((java.lang.Object) dateMidnight7, chronology24);
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(chronology24);
        org.joda.time.DateTimeField dateTimeField30 = chronology24.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight31 = org.joda.time.DateMidnight.now(chronology24);
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(chronology24);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime34 = localDate33.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate33.toDateTimeAtStartOfDay(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = dateTime36.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property38 = dateTime36.dayOfMonth();
        int int39 = dateTime36.getEra();
        org.joda.time.DateTime dateTime41 = dateTime36.minusSeconds(766);
        int int42 = dateTime36.getSecondOfMinute();
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property44 = localDate43.dayOfYear();
        org.joda.time.DateMidnight dateMidnight45 = localDate43.toDateMidnight();
        org.joda.time.Chronology chronology46 = localDate43.getChronology();
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime();
        boolean boolean48 = localDate43.equals((java.lang.Object) mutableDateTime47);
        int int49 = localDate43.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDate.Property property51 = localDate43.property(dateTimeFieldType50);
        org.joda.time.DateTime.Property property52 = dateTime36.property(dateTimeFieldType50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay54 = timeOfDay32.withField(dateTimeFieldType50, 14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test3493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3493");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period3 = period1.minusYears(8);
        org.joda.time.Period period5 = period1.withYears(2);
        org.joda.time.Period period7 = period5.plusMillis((int) (byte) 10);
        org.joda.time.Period period9 = period7.plusDays((int) (short) 100);
        org.joda.time.Period period11 = period7.withHours(54);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime15 = dateMidnight12.toMutableDateTime();
        boolean boolean17 = dateMidnight12.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight12.minusWeeks((int) ' ');
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale20);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.fromCalendarFields(calendar21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology26 = dateMidnight25.getChronology();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withDayOfMonth(8);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfMonth();
        org.joda.time.DateTime dateTime35 = dateTime32.plusSeconds(10);
        org.joda.time.DateTime dateTime37 = dateTime32.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property39 = dateTime37.property(dateTimeFieldType38);
        int int40 = dateMidnight25.get(dateTimeFieldType38);
        int int41 = localDateTime22.indexOf(dateTimeFieldType38);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime22.minusSeconds(26172160);
        int int44 = localDateTime22.getMinuteOfHour();
        org.joda.time.Period period46 = org.joda.time.Period.days(26173324);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Period period50 = new org.joda.time.Period((long) 100, (long) 2, periodType49);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType53);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.months();
        mutablePeriod54.set(durationFieldType55, (int) 'a');
        org.joda.time.Period period59 = period50.withField(durationFieldType55, 0);
        org.joda.time.Period period61 = period46.withField(durationFieldType55, 0);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime22.withFieldAdded(durationFieldType55, 26197883);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight19.withFieldAdded(durationFieldType55, 26168880);
        boolean boolean66 = period7.isSupported(durationFieldType55);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645514499810,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=39,MILLISECOND=810,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(localDateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 21 + "'", int44 == 21);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test3494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3494");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        int int7 = mutableDateTime6.getYearOfEra();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        mutablePeriod11.addHours((int) (byte) -1);
        mutablePeriod11.addYears(2022);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.LocalTime localTime20 = localTime3.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.LocalTime localTime25 = localTime23.withMillisOfDay((int) '#');
        org.joda.time.LocalTime.Property property26 = localTime25.minuteOfHour();
        int int27 = localTime3.compareTo((org.joda.time.ReadablePartial) localTime25);
        org.joda.time.LocalTime.Property property28 = localTime3.hourOfDay();
        org.joda.time.LocalTime.Property property29 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime30 = property29.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime30);
    }

    @Test
    public void test3495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3495");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        int int5 = localDateTime4.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusDays(12);
        org.joda.time.Period period9 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period11 = period9.minusYears(8);
        org.joda.time.Period period13 = period9.withYears(2);
        org.joda.time.Period period15 = period13.plusMillis((int) (byte) 10);
        org.joda.time.Period period17 = period15.minusMillis(270);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime4.withPeriodAdded((org.joda.time.ReadablePeriod) period15, 399);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.weekyears();
        int int21 = period15.indexOf(durationFieldType20);
        java.lang.String str22 = durationFieldType20.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514500811,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=40,MILLISECOND=811,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26500810 + "'", int5 == 26500810);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyears" + "'", str22, "weekyears");
    }

    @Test
    public void test3496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3496");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate localDate4 = localDate0.withWeekyear((int) (short) 100);
        int int5 = localDate0.getWeekOfWeekyear();
        java.lang.String str6 = localDate0.toString();
        org.joda.time.DateTime dateTime7 = localDate0.toDateTimeAtCurrentTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = dateTime7.withDayOfYear(26467800);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26467800 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22" + "'", str6, "2022-02-22");
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test3497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3497");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "PT0.034S", "53" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.lang.String[] strArray14 = new java.lang.String[] { "PT0.034S", "53" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList15);
        java.lang.String str18 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList15);
        org.joda.time.tz.Provider provider19 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet20 = provider19.getAvailableIDs();
        java.lang.Object[] objArray21 = strSet20.toArray();
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet20);
        java.lang.Object[] objArray23 = strSet20.toArray();
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime25 = dateMidnight24.toMutableDateTime();
        mutableDateTime25.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.months();
        mutableDateTime25.add(durationFieldType28, (int) (byte) 1);
        int int31 = mutableDateTime25.getSecondOfMinute();
        int int32 = mutableDateTime25.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = strSet20.remove((java.lang.Object) int32);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String cannot be cast to java.lang.Integer");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(provider19);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test3498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3498");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Interval interval21 = localDate17.toInterval(dateTimeZone20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        boolean boolean38 = interval28.contains((org.joda.time.ReadableInterval) interval36);
        boolean boolean39 = interval21.isBefore((org.joda.time.ReadableInterval) interval36);
        long long40 = interval36.getStartMillis();
        boolean boolean41 = interval6.overlaps((org.joda.time.ReadableInterval) interval36);
        org.joda.time.DateTime dateTime42 = interval6.getEnd();
        java.lang.String str43 = interval6.toString();
        java.lang.Object obj44 = null;
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType48 = periodType47.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType52);
        int int54 = mutablePeriod53.getMonths();
        org.joda.time.Interval interval55 = new org.joda.time.Interval(readableInstant49, (org.joda.time.ReadablePeriod) mutablePeriod53);
        org.joda.time.Chronology chronology56 = interval55.getChronology();
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay(chronology56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType61);
        int int63 = mutablePeriod62.getMonths();
        org.joda.time.Interval interval64 = new org.joda.time.Interval(readableInstant58, (org.joda.time.ReadablePeriod) mutablePeriod62);
        int[] intArray67 = chronology56.get((org.joda.time.ReadablePeriod) mutablePeriod62, 1L, (long) 4);
        org.joda.time.Period period68 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType47, chronology56);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate(obj44, chronology56);
        org.joda.time.DateTimeField dateTimeField70 = chronology56.yearOfEra();
        org.joda.time.Interval interval71 = interval6.withChronology(chronology56);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property74 = dateTime73.secondOfDay();
        org.joda.time.DateTime dateTime76 = dateTime73.withEra(1);
        org.joda.time.DateTime dateTime78 = dateTime73.plusMillis(0);
        org.joda.time.DateTime dateTime80 = dateTime78.minusHours((-1));
        org.joda.time.DateTime dateTime82 = dateTime78.minusSeconds(20);
        boolean boolean83 = dateTime78.isBeforeNow();
        boolean boolean84 = interval6.isAfter((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval88 = new org.joda.time.Interval(readableDuration85, (org.joda.time.ReadableInstant) dateTime87);
        boolean boolean89 = interval6.overlaps((org.joda.time.ReadableInterval) interval88);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645514500863L + "'", long40 == 1645514500863L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T07:21:40.863Z/2022-02-22T07:21:40.897Z" + "'", str43, "2022-02-22T07:21:40.863Z/2022-02-22T07:21:40.897Z");
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test3499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3499");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Interval interval7 = interval6.toInterval();
        org.joda.time.Interval interval8 = interval6.toInterval();
        org.joda.time.Duration duration10 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.Interval interval11 = interval6.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfDay();
        org.joda.time.DateTime dateTime16 = dateTime13.withEra(1);
        org.joda.time.DateTime dateTime18 = dateTime13.plusMillis(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int20 = dateTime13.get(dateTimeFieldType19);
        org.joda.time.DateTime dateTime22 = dateTime13.withYear((int) (byte) 10);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.hours();
        org.joda.time.Period period24 = duration10.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13, periodType23);
        org.joda.time.Period period26 = period24.plusDays(0);
        int int27 = period24.getWeeks();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test3500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3500");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime5 = dateTime3.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfMonth();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        mutablePeriod10.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        java.lang.String str16 = mutablePeriod10.toString();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) mutablePeriod10);
        mutablePeriod10.setValue(0, 2022);
        mutablePeriod10.addDays((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime25 = dateMidnight24.toMutableDateTime();
        mutableDateTime25.add((long) 1);
        org.joda.time.DateTime dateTime28 = mutableDateTime25.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.years();
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime25, readableDuration29, periodType30);
        org.joda.time.Chronology chronology32 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfEra();
        mutablePeriod10.add(35417L, chronology32);
        org.joda.time.TimeOfDay timeOfDay35 = org.joda.time.TimeOfDay.fromMillisOfDay(1645514190819L, chronology32);
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(1645514176973L, chronology32);
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.plusMinutes(26168880);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay40 = timeOfDay38.withHourOfDay(456);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 456 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0.034S" + "'", str16, "PT0.034S");
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay38);
    }
}

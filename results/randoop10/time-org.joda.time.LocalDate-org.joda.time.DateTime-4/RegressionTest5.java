import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test2501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2501");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = timeOfDay0.getFieldTypes();
        org.joda.time.Chronology chronology2 = timeOfDay0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.weekOfWeekyear();
        long long5 = dateTimeField3.roundHalfFloor(10L);
        org.joda.time.DurationField durationField6 = dateTimeField3.getRangeDurationField();
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder10 = builder8.setLocale(locale9);
        java.lang.String str11 = dateTimeField3.getAsText(2122, locale9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-259200000L) + "'", long5 == (-259200000L));
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2122" + "'", str11, "2122");
    }

    @Test
    public void test2502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2502");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property5 = dateMidnight0.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.minusMonths(22);
        java.lang.Object obj8 = null;
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType12 = periodType11.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        int[] intArray31 = chronology20.get((org.joda.time.ReadablePeriod) mutablePeriod26, 1L, (long) 4);
        org.joda.time.Period period32 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType11, chronology20);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(obj8, chronology20);
        org.joda.time.DateTimeField dateTimeField34 = chronology20.yearOfEra();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight0.withChronology(chronology20);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Period period40 = new org.joda.time.Period((long) 100, (long) 2, periodType39);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.months();
        mutablePeriod44.set(durationFieldType45, (int) 'a');
        org.joda.time.Period period49 = period40.withField(durationFieldType45, 0);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight0.withFieldAdded(durationFieldType45, (int) '4');
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight0.minusMonths(28);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
    }

    @Test
    public void test2503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2503");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.DateTime dateTime9 = localDateTime2.toDateTime();
        int int10 = localDateTime2.size();
        org.joda.time.LocalDateTime.Property property11 = localDateTime2.year();
        org.joda.time.LocalDateTime localDateTime13 = property11.setCopy(26340276);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514426235,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=26,MILLISECOND=235,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test2504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2504");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        org.joda.time.DateTime dateTime5 = mutableDateTime2.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.years();
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime2, readableDuration6, periodType7);
        java.lang.String str9 = mutableDateTime2.toString();
        org.joda.time.Chronology chronology10 = mutableDateTime2.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.days();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.yearOfCentury();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.fromMillisOfDay((long) 26275508, chronology10);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = localTime14.getValue(51);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 51");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str9, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test2505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2505");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate localDate4 = localDate0.withWeekyear((int) (short) 100);
        int int5 = localDate0.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property6 = localDate0.monthOfYear();
        org.joda.time.Period period8 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period10 = period8.minusYears(8);
        org.joda.time.Period period12 = period8.withYears(2);
        org.joda.time.Period period14 = period12.plusMillis((int) (byte) 10);
        org.joda.time.Period period16 = period14.minusMillis(270);
        org.joda.time.LocalDate localDate17 = localDate0.minus((org.joda.time.ReadablePeriod) period14);
        int int18 = localDate17.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
    }

    @Test
    public void test2506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2506");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        org.joda.time.DurationField durationField9 = dateTimeField8.getDurationField();
        long long12 = durationField9.getMillis(26296396, (long) 147);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 829834106342400000L + "'", long12 == 829834106342400000L);
    }

    @Test
    public void test2507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2507");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.monthOfYear();
        mutableDateTime1.addHours((int) '#');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.hourOfDay();
        mutableDateTime1.setDayOfYear((int) ' ');
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfDay();
        org.joda.time.DateTime dateTime16 = dateTime13.withEra(1);
        org.joda.time.DateTime dateTime18 = dateTime13.plusMillis(0);
        org.joda.time.DateTime dateTime20 = dateTime13.plusHours(5);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime22 = dateMidnight21.toMutableDateTime();
        mutableDateTime22.add((long) 1);
        org.joda.time.DateTime dateTime25 = mutableDateTime22.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.years();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime22, readableDuration26, periodType27);
        org.joda.time.Chronology chronology29 = mutableDateTime22.getChronology();
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(chronology29);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfYear((int) (byte) 1);
        int int35 = dateTime34.getDayOfMonth();
        org.joda.time.Duration duration37 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime38 = dateTime34.minus((org.joda.time.ReadableDuration) duration37);
        mutableDateTime30.add((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean42 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) (byte) 0);
        long long45 = duration44.getMillis();
        org.joda.time.LocalDate localDate46 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property47 = localDate46.dayOfYear();
        org.joda.time.DateMidnight dateMidnight48 = localDate46.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.Hours hours50 = duration44.toStandardHours();
        org.joda.time.Hours hours51 = duration44.toStandardHours();
        boolean boolean52 = duration37.isEqual((org.joda.time.ReadableDuration) duration44);
        org.joda.time.DateTime dateTime53 = dateTime20.minus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime55 = dateMidnight54.toMutableDateTime();
        mutableDateTime55.add((long) 1);
        org.joda.time.DateTime dateTime58 = mutableDateTime55.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.era();
        boolean boolean60 = mutableDateTime55.isSupported(dateTimeFieldType59);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime55.hourOfDay();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType65);
        int int67 = mutablePeriod66.getMonths();
        org.joda.time.Interval interval68 = new org.joda.time.Interval(readableInstant62, (org.joda.time.ReadablePeriod) mutablePeriod66);
        org.joda.time.Chronology chronology69 = interval68.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.weekyearOfCentury();
        long long72 = dateTimeField70.roundHalfFloor((long) 1);
        mutableDateTime55.setRounding(dateTimeField70, (int) (byte) 0);
        mutableDateTime55.setTime((long) 10);
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime();
        boolean boolean78 = mutableDateTime55.isBefore((org.joda.time.ReadableInstant) mutableDateTime77);
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime80 = dateMidnight79.toMutableDateTime();
        mutableDateTime80.add((long) 1);
        org.joda.time.DateTime dateTime83 = mutableDateTime80.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.PeriodType periodType85 = org.joda.time.PeriodType.years();
        org.joda.time.Period period86 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime80, readableDuration84, periodType85);
        org.joda.time.Chronology chronology87 = mutableDateTime80.getChronology();
        org.joda.time.YearMonthDay yearMonthDay88 = new org.joda.time.YearMonthDay(chronology87);
        mutableDateTime77.setChronology(chronology87);
        org.joda.time.DateTime dateTime90 = dateTime53.withChronology(chronology87);
        java.lang.String str91 = chronology87.toString();
        org.joda.time.DateMidnight dateMidnight92 = new org.joda.time.DateMidnight(26196152, (int) (short) 1, 4, chronology87);
        org.joda.time.DateMidnight dateMidnight93 = org.joda.time.DateMidnight.now(chronology87);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) dateMidnight93);
        int int95 = mutableDateTime1.getMillisOfSecond();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str2, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(hours50);
        org.junit.Assert.assertNotNull(hours51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str91, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateMidnight93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test2508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2508");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.centuryOfEra();
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) mutableDateTime5);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime5.setSecondOfMinute((-219));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -219 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test2509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2509");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.minusHours(0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test2510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2510");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        int int6 = mutablePeriod5.getMonths();
        org.joda.time.Interval interval7 = new org.joda.time.Interval(readableInstant1, (org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.dayOfYear();
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now(chronology8);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 9, chronology8);
        org.joda.time.DateTimeField dateTimeField15 = chronology8.weekyear();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(chronology23);
        org.joda.time.Interval interval25 = yearMonthDay24.toInterval();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutablePeriod27.add(readableDuration28);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.months();
        mutablePeriod34.set(durationFieldType35, (int) 'a');
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType42);
        int int44 = mutablePeriod43.getMonths();
        org.joda.time.Interval interval45 = new org.joda.time.Interval(readableInstant39, (org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) 100, chronology46);
        boolean boolean48 = durationFieldType35.isSupported(chronology46);
        mutablePeriod27.setPeriod((long) '4', chronology46);
        int[] intArray50 = mutablePeriod27.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology8.validate((org.joda.time.ReadablePartial) yearMonthDay24, intArray50);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, 0, 0, 0, 0, 0, 52]");
    }

    @Test
    public void test2511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2511");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate localDate4 = localDate0.withWeekyear((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        java.lang.String str7 = mutableDateTime6.toString();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology9 = dateMidnight8.getChronology();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withDayOfMonth(8);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.DateTime dateTime18 = dateTime15.plusSeconds(10);
        org.joda.time.DateTime dateTime20 = dateTime15.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property22 = dateTime20.property(dateTimeFieldType21);
        int int23 = dateMidnight8.get(dateTimeFieldType21);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime6.property(dateTimeFieldType21);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime26 = dateMidnight25.toMutableDateTime();
        mutableDateTime26.add((long) 1);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime26.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property29.getFieldType();
        mutableDateTime6.set(dateTimeFieldType30, 0);
        boolean boolean33 = localDate4.isSupported(dateTimeFieldType30);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (short) 10, dateTimeZone35);
        org.joda.time.DateTime dateTime37 = localDate4.toDateTimeAtStartOfDay(dateTimeZone35);
        java.util.TimeZone timeZone38 = dateTimeZone35.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        java.lang.String str41 = dateTimeZone35.getShortName(1645514212853L);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str7, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
    }

    @Test
    public void test2512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2512");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        org.joda.time.DateTime.Property property7 = dateTime1.hourOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        int int10 = dateTime9.getMinuteOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test2513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2513");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = org.joda.time.DateMidnight.now();
        int int5 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateMidnight4);
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.util.Calendar calendar7 = dateMidnight4.toCalendar(locale6);
        calendar7.setFirstDayOfWeek(26229404);
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getDisplayScript();
        java.util.Map<java.lang.String, java.lang.Integer> strMap14 = calendar7.getDisplayNames(11, 0, locale12);
        java.util.Date date15 = calendar7.getTime();
        java.lang.String str16 = date15.toLocaleString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=26229404,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(strMap14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Feb 22 00:00:00 GMT 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22 00:00:00" + "'", str16, "2022-02-22 00:00:00");
    }

    @Test
    public void test2514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2514");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfDay(436);
        org.joda.time.DateTime dateTime8 = localDateTime5.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusWeeks(3);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        int int16 = mutablePeriod15.getMonths();
        org.joda.time.Interval interval17 = new org.joda.time.Interval(readableInstant11, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.Interval interval18 = interval17.toInterval();
        org.joda.time.Interval interval19 = interval17.toInterval();
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.Interval interval22 = interval17.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property25 = dateTime24.secondOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.withEra(1);
        org.joda.time.DateTime dateTime29 = dateTime24.plusMillis(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int31 = dateTime24.get(dateTimeFieldType30);
        org.joda.time.DateTime dateTime33 = dateTime24.withYear((int) (byte) 10);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.Period period35 = duration21.toPeriodFrom((org.joda.time.ReadableInstant) dateTime24, periodType34);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime5.plus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusYears((-2720));
        java.util.Locale locale39 = java.util.Locale.PRC;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale39);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.fromCalendarFields(calendar40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withMillisOfSecond(436);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.minusMonths(2022);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusHours(23);
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.weekyear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime38.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514426555,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=26,MILLISECOND=555,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 31 + "'", int31 == 31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1645514426555,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=26,MILLISECOND=555,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime51);
    }

    @Test
    public void test2515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2515");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.DateMidnight dateMidnight2 = localDate0.toDateMidnight();
        boolean boolean3 = dateMidnight2.isAfterNow();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2516");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfYear();
        int int8 = property7.getMaximumValue();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        mutableDateTime10.add((long) 1);
        org.joda.time.DateTime dateTime13 = mutableDateTime10.toDateTimeISO();
        mutableDateTime10.addDays((int) (short) 10);
        long long16 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime10.property(dateTimeFieldType17);
        int int19 = mutableDateTime10.getYearOfEra();
        int int20 = mutableDateTime10.getCenturyOfEra();
        mutableDateTime10.setWeekyear(26293596);
        int int23 = mutableDateTime10.getRoundingMode();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 365 + "'", int8 == 365);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 35417L + "'", long16 == 35417L);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20 + "'", int20 == 20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test2517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2517");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfYear();
        org.joda.time.DateMidnight dateMidnight3 = localDate1.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight4 = localDate1.toDateMidnight();
        org.joda.time.LocalDate.Property property5 = localDate1.year();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        mutablePeriod9.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        java.lang.String str15 = mutablePeriod9.toString();
        org.joda.time.LocalDate localDate16 = localDate1.minus((org.joda.time.ReadablePeriod) mutablePeriod9);
        int int17 = localDate1.getYearOfEra();
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        long long23 = dateTimeZone19.convertLocalToUTC((long) 59, true, (long) 37);
        boolean boolean24 = dateTimeZone19.isFixed();
        org.joda.time.DateTime dateTime25 = localDate1.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(26215723L, dateTimeZone19);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0.034S" + "'", str15, "PT0.034S");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 59L + "'", long23 == 59L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test2518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2518");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMonths(436);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.LocalDateTime localDateTime11 = property9.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime12 = property9.withMinimumValue();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime15 = dateTime14.toLocalTime();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.now();
        int int17 = localTime15.compareTo((org.joda.time.ReadablePartial) localTime16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        int int20 = mutableDateTime19.getYearOfEra();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.months();
        mutablePeriod24.set(durationFieldType25, (int) 'a');
        mutablePeriod24.addHours((int) (byte) -1);
        mutablePeriod24.addYears(2022);
        mutableDateTime19.add((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.LocalTime localTime33 = localTime16.plus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) ' ', chronology35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.months();
        mutablePeriod40.set(durationFieldType41, (int) 'a');
        mutablePeriod36.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        mutablePeriod40.setDays(0);
        mutablePeriod40.clear();
        org.joda.time.PeriodType periodType48 = mutablePeriod40.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime12, (org.joda.time.ReadablePartial) localTime33, periodType48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514426680,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=26,MILLISECOND=680,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(periodType48);
    }

    @Test
    public void test2519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2519");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusWeeks(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfYear((int) (byte) 1);
        int int10 = dateTime9.getDayOfMonth();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight5.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = localDate15.toDateMidnight();
        org.joda.time.Chronology chronology18 = localDate15.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight5.withFields((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.year();
        org.joda.time.DateMidnight dateMidnight25 = property23.addWrapFieldToCopy(0);
        org.joda.time.DateMidnight dateMidnight26 = property23.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight28 = property23.addToCopy(0);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.withYear(26294414);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight31);
    }

    @Test
    public void test2520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2520");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        int int5 = localDateTime4.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusWeeks(26218208);
        int int8 = localDateTime7.getMonthOfYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514426747,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=26,MILLISECOND=747,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26426746 + "'", int5 == 26426746);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test2521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2521");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period3 = period1.minusYears(8);
        org.joda.time.Period period5 = period1.withYears(2);
        org.joda.time.Period period7 = period5.plusMillis((int) (byte) 10);
        org.joda.time.Period period9 = period7.minusMillis(270);
        org.joda.time.Period period11 = period7.minusWeeks(26194884);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.months();
        mutablePeriod15.set(durationFieldType16, (int) 'a');
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        int int25 = mutablePeriod24.getMonths();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(readableInstant20, (org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) 100, chronology27);
        boolean boolean29 = durationFieldType16.isSupported(chronology27);
        boolean boolean30 = period11.isSupported(durationFieldType16);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfYear((int) (byte) 1);
        int int35 = dateTime34.getDayOfMonth();
        org.joda.time.Duration duration36 = period11.toDurationTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        int int43 = mutablePeriod42.getMonths();
        org.joda.time.Interval interval44 = new org.joda.time.Interval(readableInstant38, (org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.Chronology chronology45 = interval44.getChronology();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) 100, chronology45);
        java.lang.String str48 = dateTime46.toString("53");
        org.joda.time.DateTime dateTime50 = dateTime46.plusHours(70);
        org.joda.time.DateTime dateTime52 = dateTime50.withWeekyear(0);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime54 = dateMidnight53.toMutableDateTime();
        mutableDateTime54.add((long) 1);
        org.joda.time.DateTime dateTime57 = mutableDateTime54.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.years();
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime54, readableDuration58, periodType59);
        java.lang.String str61 = mutableDateTime54.toString();
        org.joda.time.Chronology chronology62 = mutableDateTime54.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.days();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.weekyearOfCentury();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime68 = dateTime66.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property69 = dateTime68.dayOfMonth();
        org.joda.time.DateTime dateTime71 = dateTime68.plusSeconds(10);
        org.joda.time.DateTime dateTime73 = dateTime68.minus((long) (short) -1);
        org.joda.time.DateTime dateTime75 = dateTime73.plusMonths(26167775);
        org.joda.time.LocalDate localDate76 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property77 = localDate76.dayOfYear();
        java.util.TimeZone timeZone78 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone78);
        org.joda.time.Interval interval80 = localDate76.toInterval(dateTimeZone79);
        long long83 = dateTimeZone79.adjustOffset((long) 11, true);
        long long87 = dateTimeZone79.convertLocalToUTC(1645514159731L, true, (long) (short) 100);
        org.joda.time.DateTime dateTime88 = dateTime73.withZone(dateTimeZone79);
        org.joda.time.Chronology chronology89 = chronology62.withZone(dateTimeZone79);
        int int91 = dateTimeZone79.getStandardOffset(1645514180351L);
        org.joda.time.DateTime dateTime92 = dateTime50.toDateTime(dateTimeZone79);
        org.joda.time.DateTime.Property property93 = dateTime92.year();
        org.joda.time.Period period94 = duration36.toPeriodFrom((org.joda.time.ReadableInstant) dateTime92);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "53" + "'", str48, "53");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str61, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 11L + "'", long83 == 11L);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1645514159731L + "'", long87 == 1645514159731L);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(period94);
    }

    @Test
    public void test2522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2522");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.era();
        int int2 = dateMidnight0.getCenturyOfEra();
        int int3 = dateMidnight0.getMinuteOfHour();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 20 + "'", int2 == 20);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test2523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2523");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 3, (long) 270);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) 100, chronology15);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((int) (byte) 10, (int) (byte) 1, 3, (int) (short) 1, chronology15);
        org.joda.time.DateTimeField dateTimeField18 = chronology15.weekyear();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField20 = chronology15.clockhourOfHalfday();
        org.joda.time.Interval interval21 = interval2.withChronology(chronology15);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(interval21);
    }

    @Test
    public void test2524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2524");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        int int6 = mutablePeriod5.getMonths();
        org.joda.time.Interval interval7 = new org.joda.time.Interval(readableInstant1, (org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100, chronology8);
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(chronology8);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.minusMinutes(26184696);
        int int13 = timeOfDay10.getHourOfDay();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
    }

    @Test
    public void test2525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2525");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(620, 30, 108);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 30 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2526");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        java.util.Locale locale6 = java.util.Locale.PRC;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.fromCalendarFields(calendar7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withDayOfMonth(8);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime18.plusSeconds(10);
        org.joda.time.DateTime dateTime23 = dateTime18.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property25 = dateTime23.property(dateTimeFieldType24);
        int int26 = dateMidnight11.get(dateTimeFieldType24);
        int int27 = localDateTime8.indexOf(dateTimeFieldType24);
        int int28 = localDateTime8.getMillisOfDay();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime5, (org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.Period period31 = period29.withMillis(22);
        org.joda.time.Period period32 = period29.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType34 = period32.getFieldType(2021);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514426965,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=26,MILLISECOND=965,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645514426965,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=26,MILLISECOND=965,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 26426965 + "'", int28 == 26426965);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
    }

    @Test
    public void test2527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2527");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-22T00:00:00.001Z");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((long) 9);
        org.joda.time.DateTime dateTime4 = dateTime1.plus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType8 = periodType7.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        int int14 = mutablePeriod13.getMonths();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(chronology16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType21);
        int int23 = mutablePeriod22.getMonths();
        org.joda.time.Interval interval24 = new org.joda.time.Interval(readableInstant18, (org.joda.time.ReadablePeriod) mutablePeriod22);
        int[] intArray27 = chronology16.get((org.joda.time.ReadablePeriod) mutablePeriod22, 1L, (long) 4);
        org.joda.time.Period period28 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType7, chronology16);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutablePeriod30.add(readableDuration31);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.months();
        mutablePeriod37.set(durationFieldType38, (int) 'a');
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType45);
        int int47 = mutablePeriod46.getMonths();
        org.joda.time.Interval interval48 = new org.joda.time.Interval(readableInstant42, (org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) 100, chronology49);
        boolean boolean51 = durationFieldType38.isSupported(chronology49);
        mutablePeriod30.setPeriod((long) '4', chronology49);
        int[] intArray53 = mutablePeriod30.getValues();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType56);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.months();
        mutablePeriod57.set(durationFieldType58, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.months();
        boolean boolean62 = mutablePeriod57.isSupported(durationFieldType61);
        int int63 = mutablePeriod30.indexOf(durationFieldType61);
        int int64 = periodType7.indexOf(durationFieldType61);
        java.lang.String str65 = periodType7.getName();
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.years();
        java.lang.String str69 = periodType68.toString();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType73);
        int int75 = mutablePeriod74.getMonths();
        org.joda.time.Interval interval76 = new org.joda.time.Interval(readableInstant70, (org.joda.time.ReadablePeriod) mutablePeriod74);
        org.joda.time.Chronology chronology77 = interval76.getChronology();
        org.joda.time.Period period78 = new org.joda.time.Period(1645514159731L, (long) 2022, periodType68, chronology77);
        org.joda.time.Period period79 = duration3.toPeriod(periodType7, chronology77);
        org.joda.time.PeriodType periodType80 = periodType7.withHoursRemoved();
        org.joda.time.PeriodType periodType81 = periodType7.withSecondsRemoved();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 0, 0, 0, 0, 0, 0, 52]");
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Years" + "'", str65, "Years");
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PeriodType[Years]" + "'", str69, "PeriodType[Years]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(periodType81);
    }

    @Test
    public void test2528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2528");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        int int5 = localDateTime4.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusDays(12);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusDays(26172160);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.millisOfSecond();
        long long12 = property11.remainder();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514427026,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=27,MILLISECOND=26,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26427025 + "'", int5 == 26427025);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test2529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2529");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(12);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime7 = dateMidnight6.toMutableDateTime();
        mutableDateTime7.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.months();
        mutableDateTime7.add(durationFieldType10, (int) (byte) 1);
        org.joda.time.DateTime dateTime14 = dateTime5.withFieldAdded(durationFieldType10, 0);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone17);
        org.joda.time.DateTime dateTime19 = dateTime14.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(32770);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfMonth();
        int int23 = property22.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514427056,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=27,MILLISECOND=56,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 31 + "'", int23 == 31);
    }

    @Test
    public void test2530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2530");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (byte) 0);
        long long2 = duration1.getMillis();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfYear();
        org.joda.time.DateMidnight dateMidnight5 = localDate3.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.Hours hours7 = duration1.toStandardHours();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.era();
        org.joda.time.Period period13 = duration1.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight14.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property19 = dateMidnight14.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight14.minusMonths(22);
        java.lang.Object obj22 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType26 = periodType25.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType30);
        int int32 = mutablePeriod31.getMonths();
        org.joda.time.Interval interval33 = new org.joda.time.Interval(readableInstant27, (org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        int int41 = mutablePeriod40.getMonths();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableInstant36, (org.joda.time.ReadablePeriod) mutablePeriod40);
        int[] intArray45 = chronology34.get((org.joda.time.ReadablePeriod) mutablePeriod40, 1L, (long) 4);
        org.joda.time.Period period46 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType25, chronology34);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(obj22, chronology34);
        org.joda.time.DateTimeField dateTimeField48 = chronology34.yearOfEra();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology34);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight14.withChronology(chronology34);
        org.joda.time.Period period51 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.Period period53 = period51.withSeconds((-1613978169));
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType57 = periodType56.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType61);
        int int63 = mutablePeriod62.getMonths();
        org.joda.time.Interval interval64 = new org.joda.time.Interval(readableInstant58, (org.joda.time.ReadablePeriod) mutablePeriod62);
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        org.joda.time.YearMonthDay yearMonthDay66 = new org.joda.time.YearMonthDay(chronology65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType70);
        int int72 = mutablePeriod71.getMonths();
        org.joda.time.Interval interval73 = new org.joda.time.Interval(readableInstant67, (org.joda.time.ReadablePeriod) mutablePeriod71);
        int[] intArray76 = chronology65.get((org.joda.time.ReadablePeriod) mutablePeriod71, 1L, (long) 4);
        org.joda.time.Period period77 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType56, chronology65);
        org.joda.time.DurationFieldType[] durationFieldTypeArray78 = period77.getFieldTypes();
        org.joda.time.Period period79 = period53.withFields((org.joda.time.ReadablePeriod) period77);
        org.joda.time.Period period81 = period79.withYears(26371835);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationFieldTypeArray78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period81);
    }

    @Test
    public void test2531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2531");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        int int6 = mutablePeriod5.getMonths();
        org.joda.time.Interval interval7 = new org.joda.time.Interval(readableInstant1, (org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100, chronology8);
        java.lang.String str11 = dateTime9.toString("53");
        org.joda.time.DateTime dateTime13 = dateTime9.plusHours(70);
        org.joda.time.DateTime dateTime15 = dateTime13.withWeekyear(0);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight16.toMutableDateTime();
        mutableDateTime17.add((long) 1);
        org.joda.time.DateTime dateTime20 = mutableDateTime17.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime17, readableDuration21, periodType22);
        java.lang.String str24 = mutableDateTime17.toString();
        org.joda.time.Chronology chronology25 = mutableDateTime17.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.days();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekyearOfCentury();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime31 = dateTime29.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property32 = dateTime31.dayOfMonth();
        org.joda.time.DateTime dateTime34 = dateTime31.plusSeconds(10);
        org.joda.time.DateTime dateTime36 = dateTime31.minus((long) (short) -1);
        org.joda.time.DateTime dateTime38 = dateTime36.plusMonths(26167775);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property40 = localDate39.dayOfYear();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.Interval interval43 = localDate39.toInterval(dateTimeZone42);
        long long46 = dateTimeZone42.adjustOffset((long) 11, true);
        long long50 = dateTimeZone42.convertLocalToUTC(1645514159731L, true, (long) (short) 100);
        org.joda.time.DateTime dateTime51 = dateTime36.withZone(dateTimeZone42);
        org.joda.time.Chronology chronology52 = chronology25.withZone(dateTimeZone42);
        int int54 = dateTimeZone42.getStandardOffset(1645514180351L);
        org.joda.time.DateTime dateTime55 = dateTime13.toDateTime(dateTimeZone42);
        org.joda.time.DateTime.Property property56 = dateTime13.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime58 = dateTime13.withYearOfCentury((-234534));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -234534 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "53" + "'", str11, "53");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str24, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 11L + "'", long46 == 11L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645514159731L + "'", long50 == 1645514159731L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
    }

    @Test
    public void test2532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2532");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.Duration duration18 = new org.joda.time.Duration((long) (byte) 0);
        long long19 = duration18.getMillis();
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfYear();
        org.joda.time.DateMidnight dateMidnight22 = localDate20.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.Interval interval24 = interval14.withDurationAfterStart((org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight25.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property30 = dateMidnight25.weekOfWeekyear();
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = null;
        boolean boolean33 = localDate31.isSupported(dateTimeFieldType32);
        org.joda.time.LocalDate.Property property34 = localDate31.yearOfEra();
        org.joda.time.Interval interval35 = localDate31.toInterval();
        org.joda.time.DateTime dateTime36 = localDate31.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime38 = dateTime36.plusMillis(20);
        boolean boolean39 = dateMidnight25.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = dateTime38.minusDays(10);
        boolean boolean42 = interval14.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2533");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType3 = periodType2.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        int int9 = mutablePeriod8.getMonths();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableInstant4, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Chronology chronology11 = interval10.getChronology();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(chronology11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        int[] intArray22 = chronology11.get((org.joda.time.ReadablePeriod) mutablePeriod17, 1L, (long) 4);
        org.joda.time.Period period23 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType2, chronology11);
        org.joda.time.Period period25 = period23.plusMillis(0);
        org.joda.time.MutablePeriod mutablePeriod26 = period23.toMutablePeriod();
        mutablePeriod26.setPeriod((long) 27, 1428328861000L);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(mutablePeriod26);
    }

    @Test
    public void test2534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2534");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (byte) 0);
        long long2 = duration1.getMillis();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfYear();
        org.joda.time.DateMidnight dateMidnight5 = localDate3.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.Hours hours7 = duration1.toStandardHours();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        mutableDateTime9.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutableDateTime9.add(durationFieldType12, (int) (byte) 1);
        int int15 = mutableDateTime9.getSecondOfMinute();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType17 = periodType16.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) mutableDateTime9, periodType17);
        java.lang.String str19 = mutablePeriod18.toString();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod18.addWeeks(26296396);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "P0Y" + "'", str19, "P0Y");
    }

    @Test
    public void test2535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2535");
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100, chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(26299822, (int) (byte) -1, 399, 26187085, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26299822 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test2536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2536");
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100, chronology12);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((int) (byte) 10, (int) (byte) 1, 3, (int) (short) 1, chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekyear();
        org.joda.time.DurationField durationField16 = dateTimeField15.getRangeDurationField();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNull(durationField16);
    }

    @Test
    public void test2537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2537");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Interval interval7 = interval6.toInterval();
        boolean boolean9 = interval6.contains((long) 11);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        int int15 = mutablePeriod14.getMonths();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(readableInstant10, (org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfMonth();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        mutablePeriod25.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        java.lang.String str31 = mutablePeriod25.toString();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Interval interval34 = interval32.withDurationAfterStart(readableDuration33);
        boolean boolean35 = interval16.isBefore((org.joda.time.ReadableInterval) interval32);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        int int41 = mutablePeriod40.getMonths();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableInstant36, (org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType47);
        int int49 = mutablePeriod48.getMonths();
        org.joda.time.Interval interval50 = new org.joda.time.Interval(readableInstant44, (org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.Chronology chronology51 = interval50.getChronology();
        boolean boolean52 = interval42.contains((org.joda.time.ReadableInterval) interval50);
        long long53 = interval50.getEndMillis();
        org.joda.time.Interval interval54 = interval32.gap((org.joda.time.ReadableInterval) interval50);
        boolean boolean55 = interval6.overlaps((org.joda.time.ReadableInterval) interval32);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType59);
        int int61 = mutablePeriod60.getMonths();
        org.joda.time.Interval interval62 = new org.joda.time.Interval(readableInstant56, (org.joda.time.ReadablePeriod) mutablePeriod60);
        org.joda.time.Interval interval64 = interval62.withStartMillis(0L);
        boolean boolean65 = interval6.overlaps((org.joda.time.ReadableInterval) interval64);
        org.joda.time.Interval interval66 = interval6.toInterval();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType70);
        int int72 = mutablePeriod71.getMonths();
        org.joda.time.Interval interval73 = new org.joda.time.Interval(readableInstant67, (org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.Interval interval74 = interval73.toInterval();
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType78);
        int int80 = mutablePeriod79.getMonths();
        org.joda.time.Interval interval81 = new org.joda.time.Interval(readableInstant75, (org.joda.time.ReadablePeriod) mutablePeriod79);
        org.joda.time.Interval interval82 = interval81.toInterval();
        boolean boolean83 = interval74.contains((org.joda.time.ReadableInterval) interval81);
        org.joda.time.Chronology chronology84 = interval74.getChronology();
        boolean boolean85 = interval6.contains((org.joda.time.ReadableInterval) interval74);
        org.joda.time.Chronology chronology86 = interval74.getChronology();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT0.034S" + "'", str31, "PT0.034S");
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645514427450L + "'", long53 == 1645514427450L);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(chronology84);
// flaky:         org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(chronology86);
    }

    @Test
    public void test2538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2538");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        long long17 = interval14.getEndMillis();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableDuration18, (org.joda.time.ReadableInstant) dateTime20);
        boolean boolean23 = interval21.equals((java.lang.Object) 1L);
        org.joda.time.Interval interval24 = interval14.gap((org.joda.time.ReadableInterval) interval21);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Interval interval32 = interval31.toInterval();
        boolean boolean34 = interval31.contains((long) 11);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType38);
        int int40 = mutablePeriod39.getMonths();
        org.joda.time.Interval interval41 = new org.joda.time.Interval(readableInstant35, (org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime45 = dateTime43.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property46 = dateTime45.dayOfMonth();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType49);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType53);
        mutablePeriod50.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod54);
        java.lang.String str56 = mutablePeriod50.toString();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Interval interval59 = interval57.withDurationAfterStart(readableDuration58);
        boolean boolean60 = interval41.isBefore((org.joda.time.ReadableInterval) interval57);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType64);
        int int66 = mutablePeriod65.getMonths();
        org.joda.time.Interval interval67 = new org.joda.time.Interval(readableInstant61, (org.joda.time.ReadablePeriod) mutablePeriod65);
        org.joda.time.Chronology chronology68 = interval67.getChronology();
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType72);
        int int74 = mutablePeriod73.getMonths();
        org.joda.time.Interval interval75 = new org.joda.time.Interval(readableInstant69, (org.joda.time.ReadablePeriod) mutablePeriod73);
        org.joda.time.Chronology chronology76 = interval75.getChronology();
        boolean boolean77 = interval67.contains((org.joda.time.ReadableInterval) interval75);
        long long78 = interval75.getEndMillis();
        org.joda.time.Interval interval79 = interval57.gap((org.joda.time.ReadableInterval) interval75);
        boolean boolean80 = interval31.overlaps((org.joda.time.ReadableInterval) interval57);
        org.joda.time.ReadableInstant readableInstant81 = null;
        boolean boolean82 = interval31.isAfter(readableInstant81);
        org.joda.time.Interval interval83 = new org.joda.time.Interval((java.lang.Object) interval31);
        org.joda.time.Interval interval84 = interval14.gap((org.joda.time.ReadableInterval) interval83);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514427618L + "'", long17 == 1645514427618L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT0.034S" + "'", str56, "PT0.034S");
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1645514427618L + "'", long78 == 1645514427618L);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(interval84);
    }

    @Test
    public void test2539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2539");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        int int6 = mutablePeriod5.getMonths();
        org.joda.time.Interval interval7 = new org.joda.time.Interval(readableInstant1, (org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(chronology8);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekyearOfCentury();
        org.joda.time.Period period12 = new org.joda.time.Period((long) 34, chronology8);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.years();
        java.lang.String str14 = periodType13.toString();
        org.joda.time.PeriodType periodType15 = periodType13.withMinutesRemoved();
        org.joda.time.PeriodType periodType16 = periodType13.withMonthsRemoved();
        org.joda.time.Period period17 = period12.normalizedStandard(periodType16);
        org.joda.time.PeriodType periodType18 = periodType16.withYearsRemoved();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PeriodType[Years]" + "'", str14, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
    }

    @Test
    public void test2540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2540");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setValue(0, 2022);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        long long24 = duration23.getMillis();
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) (byte) 0);
        long long27 = duration26.getMillis();
        int int28 = duration23.compareTo((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration30 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration26, 10);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime32 = dateMidnight31.toMutableDateTime();
        mutableDateTime32.add((long) 1);
        org.joda.time.DateTime dateTime35 = mutableDateTime32.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.years();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime32, readableDuration36, periodType37);
        org.joda.time.Chronology chronology39 = mutableDateTime32.getChronology();
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(chronology39);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfYear((int) (byte) 1);
        int int45 = dateTime44.getDayOfMonth();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime48 = dateTime44.minus((org.joda.time.ReadableDuration) duration47);
        mutableDateTime40.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean52 = duration47.isShorterThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean55 = duration47.isLongerThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration57 = duration26.withDurationAdded((org.joda.time.ReadableDuration) duration54, 999);
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight58.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.withDayOfYear(9);
        org.joda.time.Interval interval65 = dateMidnight64.toInterval();
        org.joda.time.LocalDate localDate66 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = null;
        boolean boolean68 = localDate66.isSupported(dateTimeFieldType67);
        org.joda.time.LocalDate.Property property69 = localDate66.yearOfEra();
        org.joda.time.DateTimeField dateTimeField70 = property69.getField();
        org.joda.time.LocalDate localDate71 = property69.roundCeilingCopy();
        int int72 = localDate71.getDayOfMonth();
        int int73 = localDate71.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.Interval interval75 = localDate71.toInterval(dateTimeZone74);
        org.joda.time.Interval interval76 = interval65.gap((org.joda.time.ReadableInterval) interval75);
        boolean boolean78 = interval76.contains((long) 86399);
        org.joda.time.Chronology chronology79 = interval76.getChronology();
        boolean boolean80 = duration54.equals((java.lang.Object) interval76);
        org.joda.time.Duration duration83 = new org.joda.time.Duration(1645514172000L, (long) 11);
        java.lang.String str84 = duration83.toString();
        org.joda.time.Duration duration85 = duration83.toDuration();
        org.joda.time.Duration duration86 = duration83.toDuration();
        long long87 = duration83.getStandardDays();
        int int88 = duration54.compareTo((org.joda.time.ReadableDuration) duration83);
        org.joda.time.Duration duration90 = duration83.minus((long) 437);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "PT-1645514171.989S" + "'", str84, "PT-1645514171.989S");
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-19045L) + "'", long87 == (-19045L));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(duration90);
    }

    @Test
    public void test2541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2541");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime7 = dateMidnight4.toMutableDateTime();
        boolean boolean9 = dateMidnight4.isEqual((long) 2);
        int int10 = dateMidnight3.compareTo((org.joda.time.ReadableInstant) dateMidnight4);
        boolean boolean12 = dateMidnight4.isBefore(295620100L);
        org.joda.time.YearMonthDay yearMonthDay13 = dateMidnight4.toYearMonthDay();
        org.joda.time.LocalDate localDate14 = dateMidnight4.toLocalDate();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight4.withMillis(1645514212789L);
        java.lang.String str17 = dateMidnight4.toString();
        int int18 = dateMidnight4.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str17, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
    }

    @Test
    public void test2542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2542");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) (short) 10);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes((int) (byte) 100);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay1.withMillisOfSecond(365);
        org.joda.time.Chronology chronology6 = timeOfDay1.getChronology();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay1.plusMinutes(5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType10 = timeOfDay1.getFieldType(26242316);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26242316");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(timeOfDay8);
    }

    @Test
    public void test2543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2543");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.year();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        int int11 = dateTime10.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime13.dayOfMonth();
        mutableDateTime13.addYears(365);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfMonth();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        mutablePeriod26.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        java.lang.String str32 = mutablePeriod26.toString();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadablePeriod) mutablePeriod26);
        mutablePeriod26.setValue(0, 2022);
        org.joda.time.Duration duration38 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod26.setPeriod((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((long) (byte) 0);
        long long42 = duration41.getMillis();
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) (byte) 0);
        long long45 = duration44.getMillis();
        int int46 = duration41.compareTo((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Duration duration48 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration44, 10);
        long long49 = duration48.getMillis();
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight50.toMutableDateTime();
        mutableDateTime51.add((long) 1);
        org.joda.time.DateTime dateTime54 = mutableDateTime51.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.years();
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime51, readableDuration55, periodType56);
        org.joda.time.Chronology chronology58 = mutableDateTime51.getChronology();
        org.joda.time.MutableDateTime mutableDateTime59 = org.joda.time.MutableDateTime.now(chronology58);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime63 = dateTime61.withDayOfYear((int) (byte) 1);
        int int64 = dateTime63.getDayOfMonth();
        org.joda.time.Duration duration66 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime67 = dateTime63.minus((org.joda.time.ReadableDuration) duration66);
        mutableDateTime59.add((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Duration duration70 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean71 = duration66.isShorterThan((org.joda.time.ReadableDuration) duration70);
        boolean boolean72 = duration48.isLongerThan((org.joda.time.ReadableDuration) duration66);
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration66, 2122);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime2.minus((org.joda.time.ReadableDuration) duration66);
        int int76 = localDateTime75.getYearOfEra();
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType79);
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType83);
        mutablePeriod80.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod84);
        org.joda.time.PeriodType periodType88 = null;
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType88);
        org.joda.time.DurationFieldType durationFieldType90 = org.joda.time.DurationFieldType.months();
        mutablePeriod89.set(durationFieldType90, (int) 'a');
        mutablePeriod80.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod89);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime75.plus((org.joda.time.ReadablePeriod) mutablePeriod80);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime99 = localDateTime75.withTime(721, 26276332, 270, 26294787);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 721 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514427705,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=27,MILLISECOND=705,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0.034S" + "'", str32, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2022 + "'", int76 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType90);
        org.junit.Assert.assertNotNull(localDateTime94);
    }

    @Test
    public void test2544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2544");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime dateTime8 = dateTime3.minus((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMonths(26167775);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight11.toMutableDateTime();
        mutableDateTime12.add((long) 1);
        org.joda.time.DateTime dateTime15 = mutableDateTime12.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime12, readableDuration16, periodType17);
        org.joda.time.Chronology chronology19 = mutableDateTime12.getChronology();
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.dayOfYear();
        org.joda.time.DurationField durationField22 = chronology19.months();
        int int25 = durationField22.getValue(1645514310851L, (long) 21791);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 625 + "'", int25 == 625);
    }

    @Test
    public void test2545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2545");
        java.util.Date date6 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromDateFields(date6);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.minusYears(2022);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        mutableDateTime11.add((long) 1);
        org.joda.time.DateTime dateTime14 = mutableDateTime11.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        boolean boolean16 = mutableDateTime11.isSupported(dateTimeFieldType15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime11.hourOfDay();
        boolean boolean18 = yearMonthDay7.equals((java.lang.Object) property17);
        java.lang.String str19 = yearMonthDay7.toString();
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = localDate20.isSupported(dateTimeFieldType21);
        org.joda.time.LocalDate localDate24 = localDate20.withWeekyear((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime26 = dateMidnight25.toMutableDateTime();
        java.lang.String str27 = mutableDateTime26.toString();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology29 = dateMidnight28.getChronology();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.withDayOfMonth(8);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfMonth();
        org.joda.time.DateTime dateTime38 = dateTime35.plusSeconds(10);
        org.joda.time.DateTime dateTime40 = dateTime35.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property42 = dateTime40.property(dateTimeFieldType41);
        int int43 = dateMidnight28.get(dateTimeFieldType41);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime26.property(dateTimeFieldType41);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime46 = dateMidnight45.toMutableDateTime();
        mutableDateTime46.add((long) 1);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime46.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = property49.getFieldType();
        mutableDateTime26.set(dateTimeFieldType50, 0);
        boolean boolean53 = localDate24.isSupported(dateTimeFieldType50);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((long) (short) 10, dateTimeZone55);
        org.joda.time.DateTime dateTime57 = localDate24.toDateTimeAtStartOfDay(dateTimeZone55);
        int int59 = dateTimeZone55.getStandardOffset(1645514169568L);
        org.joda.time.DateTime dateTime60 = yearMonthDay7.toDateTimeAtCurrentTime(dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(0L, dateTimeZone55);
        boolean boolean63 = dateTimeZone55.equals((java.lang.Object) 3600000);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1907-09-04" + "'", str19, "1907-09-04");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str27, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test2546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2546");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        calendar1.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        calendar1.clear();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        calendar1.setLenient(false);
        boolean boolean15 = calendar1.isWeekDateSupported();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test2547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2547");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.TimeOfDay timeOfDay36 = property34.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay38 = property34.addToCopy(5);
        org.joda.time.TimeOfDay.Property property39 = timeOfDay38.millisOfSecond();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType43);
        int int45 = mutablePeriod44.getMonths();
        org.joda.time.Interval interval46 = new org.joda.time.Interval(readableInstant40, (org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.Chronology chronology47 = interval46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.clockhourOfHalfday();
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime51 = localTime49.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration54 = null;
        mutablePeriod53.add(readableDuration54);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType59);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.months();
        mutablePeriod60.set(durationFieldType61, (int) 'a');
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType68);
        int int70 = mutablePeriod69.getMonths();
        org.joda.time.Interval interval71 = new org.joda.time.Interval(readableInstant65, (org.joda.time.ReadablePeriod) mutablePeriod69);
        org.joda.time.Chronology chronology72 = interval71.getChronology();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (short) 100, chronology72);
        boolean boolean74 = durationFieldType61.isSupported(chronology72);
        mutablePeriod53.setPeriod((long) '4', chronology72);
        org.joda.time.LocalTime localTime76 = localTime51.minus((org.joda.time.ReadablePeriod) mutablePeriod53);
        org.joda.time.LocalTime localTime78 = localTime51.minusMinutes((int) (byte) -1);
        java.util.Locale locale79 = java.util.Locale.PRC;
        java.lang.String str80 = locale79.getISO3Country();
        java.lang.String str81 = locale79.getScript();
        java.lang.String str82 = dateTimeField48.getAsText((org.joda.time.ReadablePartial) localTime78, locale79);
        int int83 = property39.getMaximumTextLength(locale79);
        org.joda.time.TimeOfDay timeOfDay84 = property39.getTimeOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "CHN" + "'", str80, "CHN");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "7" + "'", str82, "7");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertNotNull(timeOfDay84);
    }

    @Test
    public void test2548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2548");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfYear();
        int int8 = property7.getMaximumValue();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        mutableDateTime10.add((long) 1);
        org.joda.time.DateTime dateTime13 = mutableDateTime10.toDateTimeISO();
        mutableDateTime10.addDays((int) (short) 10);
        long long16 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime10);
        mutableDateTime10.setMillisOfSecond(0);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear((int) (byte) 1);
        int int23 = dateTime22.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime25 = dateMidnight24.toMutableDateTime();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime25.dayOfMonth();
        mutableDateTime25.addYears(365);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfMonth();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType37);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        mutablePeriod38.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod42);
        java.lang.String str44 = mutablePeriod38.toString();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadablePeriod) mutablePeriod38);
        mutablePeriod38.setValue(0, 2022);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod38.setPeriod((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((long) (byte) 0);
        long long54 = duration53.getMillis();
        org.joda.time.Duration duration56 = new org.joda.time.Duration((long) (byte) 0);
        long long57 = duration56.getMillis();
        int int58 = duration53.compareTo((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration60 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration56, 10);
        long long61 = duration60.getMillis();
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime63 = dateMidnight62.toMutableDateTime();
        mutableDateTime63.add((long) 1);
        org.joda.time.DateTime dateTime66 = mutableDateTime63.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.years();
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime63, readableDuration67, periodType68);
        org.joda.time.Chronology chronology70 = mutableDateTime63.getChronology();
        org.joda.time.MutableDateTime mutableDateTime71 = org.joda.time.MutableDateTime.now(chronology70);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime75 = dateTime73.withDayOfYear((int) (byte) 1);
        int int76 = dateTime75.getDayOfMonth();
        org.joda.time.Duration duration78 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime79 = dateTime75.minus((org.joda.time.ReadableDuration) duration78);
        mutableDateTime71.add((org.joda.time.ReadableDuration) duration78);
        org.joda.time.Duration duration82 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean83 = duration78.isShorterThan((org.joda.time.ReadableDuration) duration82);
        boolean boolean84 = duration60.isLongerThan((org.joda.time.ReadableDuration) duration78);
        mutableDateTime25.add((org.joda.time.ReadableDuration) duration78, 2122);
        long long87 = duration78.getMillis();
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration78);
        org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime92 = dateTime90.minusWeeks((int) '#');
        org.joda.time.DateTime dateTime94 = dateTime92.plusHours((int) (byte) 100);
        org.joda.time.DateTime dateTime96 = dateTime94.withYearOfEra(2);
        boolean boolean97 = mutableDateTime10.isEqual((org.joda.time.ReadableInstant) dateTime94);
        org.joda.time.DateTime.Property property98 = dateTime94.hourOfDay();
        org.joda.time.DateTime dateTime99 = property98.roundCeilingCopy();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 365 + "'", int8 == 365);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 35417L + "'", long16 == 35417L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT0.034S" + "'", str44, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(property98);
        org.junit.Assert.assertNotNull(dateTime99);
    }

    @Test
    public void test2549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2549");
        java.util.Date date3 = new java.util.Date(26222448, 26311836, 13);
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromDateFields(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Jan 13 00:00:00 GMT 28417001");
        org.junit.Assert.assertNotNull(timeOfDay4);
    }

    @Test
    public void test2550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2550");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime5 = property4.roundCeilingCopy();
        org.joda.time.DateTime dateTime6 = property4.roundFloorCopy();
        org.joda.time.DateTime dateTime7 = property4.roundFloorCopy();
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks(196);
        org.joda.time.DateTime.Property property10 = dateTime9.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test2551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2551");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("53");
        boolean boolean2 = timeZone1.observesDaylightTime();
        int int4 = timeZone1.getOffset(826186880073600000L);
        java.time.ZoneId zoneId5 = timeZone1.toZoneId();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone(zoneId5);
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = timeZone6.getDisplayName(true, 21, locale9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 21");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(zoneId5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test2552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2552");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        int int35 = property34.getMinimumValueOverall();
        org.joda.time.DurationField durationField36 = property34.getRangeDurationField();
        java.lang.String str37 = property34.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[millisOfSecond]" + "'", str37, "Property[millisOfSecond]");
    }

    @Test
    public void test2553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2553");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDayOfMonth(8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime12.plusSeconds(10);
        org.joda.time.DateTime dateTime17 = dateTime12.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property19 = dateTime17.property(dateTimeFieldType18);
        int int20 = dateMidnight5.get(dateTimeFieldType18);
        int int21 = localDateTime2.indexOf(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime2.minusWeeks(8);
        int int24 = localDateTime23.size();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) ' ', chronology26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.months();
        mutablePeriod31.set(durationFieldType32, (int) 'a');
        mutablePeriod27.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        mutablePeriod31.setDays(0);
        mutablePeriod31.clear();
        org.joda.time.PeriodType periodType39 = mutablePeriod31.getPeriodType();
        int int40 = mutablePeriod31.getMonths();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property45 = dateTime44.weekOfWeekyear();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property50 = dateTime49.minuteOfHour();
        org.joda.time.DateTime dateTime51 = property50.roundCeilingCopy();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration53 = mutablePeriod31.toDurationFrom((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime23.plus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusWeeks(26283382);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime58 = dateMidnight57.toMutableDateTime();
        mutableDateTime58.add((long) 1);
        org.joda.time.DateTime dateTime61 = mutableDateTime58.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.years();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime58, readableDuration62, periodType63);
        org.joda.time.Chronology chronology65 = mutableDateTime58.getChronology();
        org.joda.time.MutableDateTime mutableDateTime66 = org.joda.time.MutableDateTime.now(chronology65);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime70 = dateTime68.withDayOfYear((int) (byte) 1);
        int int71 = dateTime70.getDayOfMonth();
        org.joda.time.Duration duration73 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime74 = dateTime70.minus((org.joda.time.ReadableDuration) duration73);
        mutableDateTime66.add((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Duration duration77 = new org.joda.time.Duration(0L);
        boolean boolean78 = duration73.isLongerThan((org.joda.time.ReadableDuration) duration77);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime56.plus((org.joda.time.ReadableDuration) duration77);
        org.joda.time.LocalDateTime.Property property80 = localDateTime56.millisOfSecond();
        org.joda.time.Chronology chronology81 = localDateTime56.getChronology();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514428023,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=28,MILLISECOND=23,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(chronology81);
    }

    @Test
    public void test2554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2554");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        long long24 = duration23.getStandardDays();
        org.joda.time.Duration duration25 = duration16.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime31 = dateTime29.withDayOfYear((int) (byte) 1);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableDuration27, (org.joda.time.ReadableInstant) dateTime29, periodType32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime35 = dateMidnight34.toMutableDateTime();
        mutableDateTime35.add((long) 1);
        org.joda.time.DateTime dateTime38 = mutableDateTime35.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.years();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime35, readableDuration39, periodType40);
        org.joda.time.Chronology chronology42 = mutableDateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.clockhourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 2, periodType32, chronology42);
        org.joda.time.format.DateTimePrinter dateTimePrinter45 = null;
        org.joda.time.format.DateTimeParser dateTimeParser46 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter45, dateTimeParser46);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType51 = periodType50.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType55);
        int int57 = mutablePeriod56.getMonths();
        org.joda.time.Interval interval58 = new org.joda.time.Interval(readableInstant52, (org.joda.time.ReadablePeriod) mutablePeriod56);
        org.joda.time.Chronology chronology59 = interval58.getChronology();
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay(chronology59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType64);
        int int66 = mutablePeriod65.getMonths();
        org.joda.time.Interval interval67 = new org.joda.time.Interval(readableInstant61, (org.joda.time.ReadablePeriod) mutablePeriod65);
        int[] intArray70 = chronology59.get((org.joda.time.ReadablePeriod) mutablePeriod65, 1L, (long) 4);
        org.joda.time.Period period71 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType50, chronology59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter47.withChronology(chronology59);
        org.joda.time.Period period73 = duration25.toPeriod(periodType32, chronology59);
        org.joda.time.Minutes minutes74 = duration25.toStandardMinutes();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(minutes74);
    }

    @Test
    public void test2555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2555");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("53");
        boolean boolean2 = timeZone1.observesDaylightTime();
        java.lang.String str3 = timeZone1.getID();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        java.util.Locale locale5 = java.util.Locale.PRC;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale5);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromCalendarFields(calendar6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime15 = dateMidnight14.toMutableDateTime();
        java.lang.String str16 = mutableDateTime15.toString();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime15.monthOfYear();
        mutableDateTime15.addHours((int) '#');
        org.joda.time.DateTime dateTime20 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime7.minusYears(26258407);
        boolean boolean23 = calendar4.equals((java.lang.Object) localDateTime22);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "GMT" + "'", str3, "GMT");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514428184,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=28,MILLISECOND=184,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645514428184,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=28,MILLISECOND=184,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str16, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2556");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property5 = dateMidnight0.weekOfWeekyear();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate.Property property9 = localDate6.yearOfEra();
        org.joda.time.Interval interval10 = localDate6.toInterval();
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.plusMillis(20);
        boolean boolean14 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime16 = dateTime13.minusDays(10);
        org.joda.time.DateTime.Property property17 = dateTime16.minuteOfHour();
        org.joda.time.DateTime dateTime19 = dateTime16.plusSeconds(26162430);
        org.joda.time.DateTime dateTime21 = dateTime19.withMinuteOfHour(9);
        org.joda.time.DateTime dateTime23 = dateTime21.plusHours(26294011);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test2557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2557");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        mutableDateTime2.add((long) 1);
        mutableDateTime2.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = mutableDateTime2.getZone();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(0L, dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusDays(26173917);
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = localDateTime9.toString("586", locale13);
        org.joda.time.DateTime dateTime15 = localDateTime9.toDateTime();
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight16.toMutableDateTime();
        mutableDateTime17.add((long) 1);
        org.joda.time.DateTime dateTime20 = mutableDateTime17.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime17, readableDuration21, periodType22);
        org.joda.time.Chronology chronology24 = mutableDateTime17.getChronology();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(chronology24);
        org.joda.time.DateTime dateTime26 = yearMonthDay25.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            int int27 = localDateTime9.compareTo((org.joda.time.ReadablePartial) yearMonthDay25);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "586" + "'", str14, "586");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test2558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2558");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.era();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight2.toMutableDateTime();
        mutableDateTime3.add((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.property(dateTimeFieldType6);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight0.withField(dateTimeFieldType6, 721);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.era();
        int int12 = dateMidnight10.getCenturyOfEra();
        boolean boolean13 = dateMidnight9.isEqual((org.joda.time.ReadableInstant) dateMidnight10);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2559");
        java.util.Locale locale6 = java.util.Locale.PRC;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.fromCalendarFields(calendar7);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone11);
        long long14 = dateTimeZone11.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime15 = localDateTime8.toDateTime(dateTimeZone11);
        long long19 = dateTimeZone11.convertLocalToUTC((long) 26215723, false, (-4670314547681L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(0, (int) (byte) 100, 26337319, 439, 26327723, 26340276, dateTimeZone11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 439 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645514428324,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=28,MILLISECOND=324,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 26215723L + "'", long19 == 26215723L);
    }

    @Test
    public void test2560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2560");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = mutableDateTime1.isSupported(dateTimeFieldType5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.roundHalfFloor();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        mutableDateTime11.add((long) 1);
        org.joda.time.DateTime dateTime14 = mutableDateTime11.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        boolean boolean16 = mutableDateTime11.isSupported(dateTimeFieldType15);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.set(dateTimeFieldType15, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test2561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2561");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((int) (byte) 100, 12, (int) '#', 10, (int) (byte) 10, 4, 2, (int) (short) -1);
        mutablePeriod8.setSeconds((int) '4');
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        int int16 = mutablePeriod15.getMonths();
        org.joda.time.Interval interval17 = new org.joda.time.Interval(readableInstant11, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(chronology18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.minusMonths((int) (short) -1);
        org.joda.time.LocalDate localDate22 = yearMonthDay21.toLocalDate();
        int int23 = localDate22.getWeekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutablePeriod25.add(readableDuration26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.months();
        mutablePeriod31.set(durationFieldType32, (int) 'a');
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        int int41 = mutablePeriod40.getMonths();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableInstant36, (org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 100, chronology43);
        boolean boolean45 = durationFieldType32.isSupported(chronology43);
        mutablePeriod25.add(durationFieldType32, (int) (byte) 0);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.millis();
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        boolean boolean51 = localDate49.isSupported(dateTimeFieldType50);
        org.joda.time.LocalDate.Property property52 = localDate49.yearOfEra();
        org.joda.time.DateTimeField dateTimeField53 = property52.getField();
        org.joda.time.DurationField durationField54 = property52.getDurationField();
        boolean boolean55 = durationField54.isPrecise();
        long long58 = durationField54.add((long) (byte) 1, 0L);
        org.joda.time.DurationFieldType durationFieldType59 = durationField54.getType();
        boolean boolean60 = periodType48.isSupported(durationFieldType59);
        mutablePeriod25.add(durationFieldType59, 20);
        org.joda.time.LocalDate localDate64 = localDate22.withFieldAdded(durationFieldType59, 7828987);
        int int65 = mutablePeriod8.indexOf(durationFieldType59);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test2562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2562");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime3.size();
        org.joda.time.LocalTime.Property property5 = localTime3.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = localTime3.toDateTimeToday(dateTimeZone6);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime1, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology11 = dateMidnight10.getChronology();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        mutablePeriod15.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        java.lang.String str21 = mutablePeriod15.toString();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight10.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight23.withDayOfYear((int) (short) 10);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime33 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType35 = periodType34.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight27, (org.joda.time.ReadableInstant) dateTime30, periodType35);
        int int37 = dateMidnight27.getDayOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) ' ', chronology39);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.months();
        mutablePeriod44.set(durationFieldType45, (int) 'a');
        mutablePeriod40.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        mutablePeriod44.setDays(0);
        mutablePeriod44.clear();
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime53 = dateMidnight52.toMutableDateTime();
        mutableDateTime53.add((long) 1);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime57 = dateMidnight56.toMutableDateTime();
        mutableDateTime57.add((long) 1);
        org.joda.time.DateTime dateTime60 = mutableDateTime57.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.years();
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime57, readableDuration61, periodType62);
        java.lang.String str64 = mutableDateTime57.toString();
        mutableDateTime57.addMinutes((int) ' ');
        int int67 = mutableDateTime57.getCenturyOfEra();
        mutablePeriod44.setPeriod((org.joda.time.ReadableInstant) mutableDateTime53, (org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight27.plus((org.joda.time.ReadablePeriod) mutablePeriod44);
        mutablePeriod44.addDays(2000);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadablePeriod) mutablePeriod44);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((java.lang.Object) mutableDateTime1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.MutableDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.034S" + "'", str21, "PT0.034S");
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str64, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 20 + "'", int67 == 20);
        org.junit.Assert.assertNotNull(dateMidnight69);
    }

    @Test
    public void test2563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2563");
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        mutablePeriod4.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.months();
        mutablePeriod13.set(durationFieldType14, (int) 'a');
        mutablePeriod4.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        int int25 = mutablePeriod24.getMonths();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(readableInstant20, (org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        int int34 = mutablePeriod33.getMonths();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(readableInstant29, (org.joda.time.ReadablePeriod) mutablePeriod33);
        int[] intArray38 = chronology27.get((org.joda.time.ReadablePeriod) mutablePeriod33, 1L, (long) 4);
        mutablePeriod4.setPeriod((long) 'a', (long) (short) -1, chronology27);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (byte) 0, chronology27);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now(chronology27);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(mutableDateTime41);
    }

    @Test
    public void test2564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2564");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod18, 1L, (long) 4);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType3, chronology12);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(obj0, chronology12);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone28);
        org.joda.time.DateTime dateTime30 = localDate25.toDateTimeAtMidnight(dateTimeZone28);
        int int31 = localDate25.getWeekyear();
        org.joda.time.LocalDate localDate33 = localDate25.withDayOfYear((int) (short) 1);
        org.joda.time.LocalDate.Property property34 = localDate25.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        long long38 = dateTimeField35.add((long) 928, 0);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 928L + "'", long38 == 928L);
    }

    @Test
    public void test2565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2565");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundCeiling();
        mutableDateTime5.add(26158095L);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
    }

    @Test
    public void test2566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2566");
        org.joda.time.Period period1 = new org.joda.time.Period((-86400000L));
    }

    @Test
    public void test2567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2567");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate.Property property9 = localDate6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.DurationField durationField11 = property9.getDurationField();
        boolean boolean12 = durationField11.isPrecise();
        long long15 = durationField11.subtract((long) ' ', 0L);
        int int16 = durationField5.compareTo(durationField11);
        int int19 = durationField5.getDifference(1645514228848L, (long) 26164327);
        long long22 = durationField5.add(26160000L, 141);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 4449539760000L + "'", long22 == 4449539760000L);
    }

    @Test
    public void test2568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2568");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        org.joda.time.format.DateTimeParser dateTimeParser28 = dateTimeFormatter27.getParser();
        org.joda.time.Chronology chronology29 = dateTimeFormatter27.getChronology();
        java.util.Locale locale30 = dateTimeFormatter27.getLocale();
        java.lang.Integer int31 = dateTimeFormatter27.getPivotYear();
        org.joda.time.Chronology chronology32 = dateTimeFormatter27.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter27.withDefaultYear((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone35 = dateTimeFormatter34.getZone();
        org.joda.time.format.DateTimeParser dateTimeParser36 = dateTimeFormatter34.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter34.withPivotYear(19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter34.withPivotYear(625);
        java.lang.StringBuffer stringBuffer41 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime45 = dateTime43.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property46 = dateTime45.dayOfMonth();
        org.joda.time.DateTime dateTime48 = dateTime45.plusSeconds(10);
        org.joda.time.DateTime.Property property49 = dateTime48.year();
        org.joda.time.DateTime dateTime50 = property49.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime52 = dateTime50.minusYears(702);
        org.joda.time.DateTime dateTime53 = dateTime50.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime55 = dateMidnight54.toMutableDateTime();
        java.lang.String str56 = mutableDateTime55.toString();
        mutableDateTime55.setMonthOfYear(1);
        mutableDateTime55.addWeekyears(4);
        org.joda.time.Duration duration62 = new org.joda.time.Duration((long) (byte) 0);
        long long63 = duration62.getMillis();
        org.joda.time.Duration duration65 = new org.joda.time.Duration((long) (byte) 0);
        long long66 = duration65.getMillis();
        int int67 = duration62.compareTo((org.joda.time.ReadableDuration) duration65);
        mutableDateTime55.add((org.joda.time.ReadableDuration) duration62, 26162430);
        long long70 = duration62.getMillis();
        org.joda.time.DateTime dateTime71 = dateTime50.minus((org.joda.time.ReadableDuration) duration62);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter34.printTo(stringBuffer41, (org.joda.time.ReadableInstant) dateTime50);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(dateTimeParser28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNull(locale30);
        org.junit.Assert.assertNull(int31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNull(dateTimeZone35);
        org.junit.Assert.assertNull(dateTimeParser36);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str56, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test2569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2569");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusYears((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight0, readableDuration5);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime8 = dateMidnight7.toMutableDateTime();
        mutableDateTime8.add((long) 1);
        org.joda.time.DateTime dateTime11 = mutableDateTime8.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.era();
        boolean boolean13 = mutableDateTime8.isSupported(dateTimeFieldType12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime8.hourOfDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        int int20 = mutablePeriod19.getMonths();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekyearOfCentury();
        long long25 = dateTimeField23.roundHalfFloor((long) 1);
        mutableDateTime8.setRounding(dateTimeField23, (int) (byte) 0);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.months();
        mutablePeriod31.set(durationFieldType32, (int) 'a');
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        int int41 = mutablePeriod40.getMonths();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableInstant36, (org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) 100, chronology43);
        boolean boolean45 = durationFieldType32.isSupported(chronology43);
        mutableDateTime8.add(durationFieldType32, (int) ' ');
        int int48 = mutableDateTime8.getSecondOfMinute();
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        org.joda.time.LocalDate localDate51 = org.joda.time.LocalDate.now(dateTimeZone50);
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now(dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight53 = org.joda.time.DateMidnight.now();
        int int54 = dateTimeZone50.getOffset((org.joda.time.ReadableInstant) dateMidnight53);
        mutableDateTime8.setZoneRetainFields(dateTimeZone50);
        org.joda.time.Duration duration56 = mutablePeriod6.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime8);
        int int57 = mutableDateTime8.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime59 = dateMidnight58.toMutableDateTime();
        java.lang.String str60 = mutableDateTime59.toString();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime59.monthOfYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter62 = null;
        org.joda.time.format.DateTimeParser dateTimeParser63 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter62, dateTimeParser63);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType68 = periodType67.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType72);
        int int74 = mutablePeriod73.getMonths();
        org.joda.time.Interval interval75 = new org.joda.time.Interval(readableInstant69, (org.joda.time.ReadablePeriod) mutablePeriod73);
        org.joda.time.Chronology chronology76 = interval75.getChronology();
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay(chronology76);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType81);
        int int83 = mutablePeriod82.getMonths();
        org.joda.time.Interval interval84 = new org.joda.time.Interval(readableInstant78, (org.joda.time.ReadablePeriod) mutablePeriod82);
        int[] intArray87 = chronology76.get((org.joda.time.ReadablePeriod) mutablePeriod82, 1L, (long) 4);
        org.joda.time.Period period88 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType67, chronology76);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = dateTimeFormatter64.withChronology(chronology76);
        java.lang.Integer int90 = dateTimeFormatter89.getPivotYear();
        org.joda.time.Chronology chronology91 = dateTimeFormatter89.getChronolgy();
        mutableDateTime59.setChronology(chronology91);
        org.joda.time.MutableDateTime mutableDateTime93 = mutableDateTime8.toMutableDateTime(chronology91);
        org.joda.time.MutableDateTime.Property property94 = mutableDateTime8.dayOfWeek();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 43 + "'", int57 == 43);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str60, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter89);
        org.junit.Assert.assertNull(int90);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(mutableDateTime93);
        org.junit.Assert.assertNotNull(property94);
    }

    @Test
    public void test2570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2570");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withDayOfMonth(8);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.DateTime dateTime10 = dateTime7.plusSeconds(10);
        org.joda.time.DateTime dateTime12 = dateTime7.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        int int15 = dateMidnight0.get(dateTimeFieldType13);
        org.joda.time.LocalDate localDate16 = dateMidnight0.toLocalDate();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight19 = property18.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime21 = dateMidnight20.toMutableDateTime();
        java.lang.String str22 = mutableDateTime21.toString();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime21.monthOfYear();
        java.lang.String str24 = mutableDateTime21.toString();
        int int25 = mutableDateTime21.getDayOfYear();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime21.weekyear();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.set((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property26.getFieldType();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight19.withField(dateTimeFieldType29, 26275273);
        org.joda.time.LocalDate localDate33 = localDate16.withField(dateTimeFieldType29, 0);
        int int34 = localDate33.getDayOfWeek();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str22, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str24, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 53 + "'", int25 == 53);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
    }

    @Test
    public void test2571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2571");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        mutableDateTime1.setMonthOfYear(1);
        mutableDateTime1.addWeekyears(4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime1.toMutableDateTime(dateTimeZone8);
        mutableDateTime10.addDays((int) (short) -1);
        int int13 = mutableDateTime10.getMillisOfSecond();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime10.add(durationFieldType14, 39);
        java.lang.Object obj17 = mutableDateTime10.clone();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str2, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "2026-01-16T00:39:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "2026-01-16T00:39:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "2026-01-16T00:39:00.000Z");
    }

    @Test
    public void test2572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2572");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property5 = dateMidnight0.year();
        org.joda.time.DurationField durationField6 = property5.getRangeDurationField();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfYear();
        int int9 = localDate7.size();
        int int10 = property5.compareTo((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateMidnight dateMidnight12 = property5.addToCopy((long) 26270486);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test2573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2573");
        java.util.Date date3 = new java.util.Date(26164327, (int) (short) 1, 26191187);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Feb 13 00:00:00 GMT 26237936");
    }

    @Test
    public void test2574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2574");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        long long6 = dateTimeZone1.getMillisKeepLocal(dateTimeZone4, (long) 2);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime9 = dateTime7.minusHours(32769);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test2575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2575");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("53");
        boolean boolean2 = timeZone1.observesDaylightTime();
        org.joda.time.tz.NameProvider nameProvider5 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider5);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology8 = dateMidnight7.getChronology();
        java.util.Locale locale9 = java.util.Locale.CHINA;
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        java.lang.String str12 = locale9.getDisplayVariant(locale10);
        java.util.Calendar calendar13 = dateMidnight7.toCalendar(locale10);
        java.lang.String str16 = nameProvider5.getShortName(locale10, "UnsupportedDurationField[eras]", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        java.util.Locale locale17 = java.util.Locale.UK;
        java.lang.String str20 = nameProvider5.getName(locale17, "Tue Feb 22 00:00:00 UTC 2022", "195");
        java.util.Locale locale21 = null;
        java.lang.String str24 = nameProvider5.getShortName(locale21, "DateTimeField[weekOfWeekyear]", "22 Feb 2022 07:16:53 GMT");
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.lang.String str28 = nameProvider5.getName(locale25, "", "857");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = timeZone1.getDisplayName(false, 150, locale25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 150");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(nameProvider5);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645514428720,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=28,MILLISECOND=720,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_GB");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test2576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2576");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        org.joda.time.Chronology chronology9 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekOfWeekyear();
        long long13 = dateTimeField10.add(0L, 5);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str8, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3024000000L + "'", long13 == 3024000000L);
    }

    @Test
    public void test2577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2577");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property5 = dateMidnight0.year();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.withYearOfCentury(2);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        mutableDateTime9.add((long) 1);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property12.getFieldType();
        int int14 = property12.getMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.roundHalfEven();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        int int29 = mutablePeriod28.getMonths();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableInstant24, (org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        boolean boolean32 = interval22.contains((org.joda.time.ReadableInterval) interval30);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        int int38 = mutablePeriod37.getMonths();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableInstant33, (org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType44);
        int int46 = mutablePeriod45.getMonths();
        org.joda.time.Interval interval47 = new org.joda.time.Interval(readableInstant41, (org.joda.time.ReadablePeriod) mutablePeriod45);
        org.joda.time.Chronology chronology48 = interval47.getChronology();
        boolean boolean49 = interval39.contains((org.joda.time.ReadableInterval) interval47);
        boolean boolean50 = interval22.overlaps((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) 86399);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType56);
        int int58 = mutablePeriod57.getMonths();
        org.joda.time.Interval interval59 = new org.joda.time.Interval(readableInstant53, (org.joda.time.ReadablePeriod) mutablePeriod57);
        org.joda.time.Chronology chronology60 = interval59.getChronology();
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay(chronology60);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType65);
        int int67 = mutablePeriod66.getMonths();
        org.joda.time.Interval interval68 = new org.joda.time.Interval(readableInstant62, (org.joda.time.ReadablePeriod) mutablePeriod66);
        int[] intArray71 = chronology60.get((org.joda.time.ReadablePeriod) mutablePeriod66, 1L, (long) 4);
        org.joda.time.PeriodType periodType72 = mutablePeriod66.getPeriodType();
        org.joda.time.Period period73 = duration52.toPeriod(periodType72);
        boolean boolean74 = interval39.equals((java.lang.Object) duration52);
        long long75 = interval39.getStartMillis();
        org.joda.time.DateTime dateTime76 = interval39.getEnd();
        org.joda.time.DateTime dateTime77 = interval39.getStart();
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime82 = dateTime80.minusWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay83 = dateTime82.toYearMonthDay();
        org.joda.time.Interval interval84 = yearMonthDay83.toInterval();
        org.joda.time.DateTime dateTime85 = yearMonthDay83.toDateTimeAtMidnight();
        org.joda.time.Interval interval86 = new org.joda.time.Interval(readableDuration78, (org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.PeriodType periodType87 = org.joda.time.PeriodType.years();
        java.lang.String str88 = periodType87.toString();
        org.joda.time.PeriodType periodType89 = periodType87.withMinutesRemoved();
        org.joda.time.PeriodType periodType90 = periodType87.withMonthsRemoved();
        org.joda.time.Period period91 = interval86.toPeriod(periodType90);
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime15, (org.joda.time.ReadableInstant) dateTime77, periodType90);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period93 = new org.joda.time.Period((java.lang.Object) 2, periodType90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 86399 + "'", int14 == 86399);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1645514428754L + "'", long75 == 1645514428754L);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(yearMonthDay83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "PeriodType[Years]" + "'", str88, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(period91);
    }

    @Test
    public void test2578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2578");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withDayOfMonth(8);
        org.joda.time.DateMidnight.Property property4 = dateMidnight0.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.months();
        mutablePeriod9.set(durationFieldType10, (int) 'a');
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100, chronology21);
        boolean boolean23 = durationFieldType10.isSupported(chronology21);
        boolean boolean24 = durationFieldType5.isSupported(chronology21);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight0.withFieldAdded(durationFieldType5, 1969);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime31 = dateTime29.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime32 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        int int38 = mutablePeriod37.getMonths();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableInstant33, (org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology40.getZone();
        org.joda.time.DateTime dateTime45 = dateTime29.toDateTime(chronology40);
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight0, chronology40);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight48.toMutableDateTime();
        boolean boolean53 = dateMidnight48.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight48.minusWeeks((int) ' ');
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime59 = dateTime57.withDayOfYear((int) (byte) 1);
        int int60 = dateTime59.getDayOfMonth();
        boolean boolean61 = dateMidnight48.isAfter((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime.Property property63 = dateTime59.property(dateTimeFieldType62);
        boolean boolean64 = mutableDateTime46.isSupported(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test2579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2579");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(2200052L);
    }

    @Test
    public void test2580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2580");
        org.joda.time.Period period1 = org.joda.time.Period.days((int) (short) -1);
        org.joda.time.Period period3 = period1.minusMinutes((int) (byte) 0);
        org.joda.time.Duration duration4 = period1.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.plusYears(2);
        java.util.Date date23 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay24 = org.joda.time.YearMonthDay.fromDateFields(date23);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay24.minusYears(2022);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay24.plusYears(32770);
        java.lang.String str30 = yearMonthDay24.toString("0");
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay13, (org.joda.time.ReadablePartial) yearMonthDay24, periodType31);
        org.joda.time.Period period34 = period32.withHours(26167775);
        org.joda.time.Period period35 = period1.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period37 = period34.minusSeconds(26266791);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
    }

    @Test
    public void test2581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2581");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(1L, dateTimeZone3);
        boolean boolean5 = calendar1.before((java.lang.Object) localDate4);
        int int6 = localDate4.getDayOfWeek();
        org.joda.time.LocalDate.Property property7 = localDate4.yearOfEra();
        org.joda.time.LocalDate.Property property8 = localDate4.era();
        org.joda.time.LocalDate localDate10 = localDate4.withWeekOfWeekyear((int) ' ');
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.DateTime dateTime18 = dateTime15.plusSeconds(10);
        org.joda.time.DateTime.Property property19 = dateTime18.year();
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime24 = dateTime22.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime25 = timeOfDay20.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay20.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean31 = timeOfDay27.isSupported(dateTimeFieldType30);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime35 = dateTime33.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfMonth();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType43);
        mutablePeriod40.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        java.lang.String str46 = mutablePeriod40.toString();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadablePeriod) mutablePeriod40);
        mutablePeriod40.setValue(0, 2022);
        mutablePeriod40.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay27.plus((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.TimeOfDay.Property property54 = timeOfDay53.millisOfSecond();
        org.joda.time.DurationField durationField55 = property54.getDurationField();
        org.joda.time.TimeOfDay timeOfDay56 = property54.getTimeOfDay();
        int int57 = property54.getMaximumValueOverall();
        java.util.Locale locale59 = java.util.Locale.CHINA;
        java.util.Locale locale60 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(locale60);
        java.lang.String str62 = locale59.getDisplayVariant(locale60);
        org.joda.time.TimeOfDay timeOfDay63 = property54.setCopy("1", locale59);
        java.lang.String str64 = property19.getAsShortText(locale59);
        java.lang.String str65 = locale59.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = localDate10.toString("200026-06-22T07:18:49.018", locale59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514428887,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=28,MILLISECOND=887,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT0.034S" + "'", str46, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 999 + "'", int57 == 999);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar61);
// flaky:         org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=1645514428887,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=28,MILLISECOND=887,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1969" + "'", str64, "1969");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test2582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2582");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) (byte) 0);
        long long3 = duration2.getMillis();
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfYear();
        org.joda.time.DateMidnight dateMidnight6 = localDate4.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateMidnight6);
        org.joda.time.Hours hours8 = duration2.toStandardHours();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = null;
        org.joda.time.format.DateTimeParser dateTimeParser10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter9, dateTimeParser10);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType15 = periodType14.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(chronology23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        int[] intArray34 = chronology23.get((org.joda.time.ReadablePeriod) mutablePeriod29, 1L, (long) 4);
        org.joda.time.Period period35 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType14, chronology23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter11.withChronology(chronology23);
        org.joda.time.format.DateTimeParser dateTimeParser37 = dateTimeFormatter36.getParser();
        org.joda.time.Chronology chronology38 = dateTimeFormatter36.getChronology();
        java.util.Locale locale39 = dateTimeFormatter36.getLocale();
        java.lang.Integer int40 = dateTimeFormatter36.getPivotYear();
        org.joda.time.Chronology chronology41 = dateTimeFormatter36.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter36.withDefaultYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter36.withDefaultYear(12);
        java.util.Locale locale46 = dateTimeFormatter45.getLocale();
        boolean boolean47 = hours8.equals((java.lang.Object) dateTimeFormatter45);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.parse("GMT", dateTimeFormatter45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNull(dateTimeParser37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNull(locale39);
        org.junit.Assert.assertNull(int40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNull(locale46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test2583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2583");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now();
        int int7 = localTime6.size();
        org.joda.time.LocalTime localTime9 = localTime6.plusMillis(11);
        int int10 = localTime6.size();
        org.joda.time.LocalTime.Property property11 = localTime6.millisOfDay();
        org.joda.time.LocalTime localTime13 = property11.addWrapFieldToCopy(4);
        org.joda.time.DurationField durationField14 = property11.getLeapDurationField();
        org.joda.time.LocalTime localTime15 = property11.roundFloorCopy();
        boolean boolean16 = dateTime3.equals((java.lang.Object) property11);
        org.joda.time.DateTime.Property property17 = dateTime3.millisOfDay();
        org.joda.time.DateTime dateTime18 = property17.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test2584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2584");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology7);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(chronology7);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test2585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2585");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        int int11 = dateTime10.getDayOfMonth();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime10.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime6.withDurationAdded((org.joda.time.ReadableDuration) duration13, 3);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        java.lang.String str18 = periodType17.toString();
        org.joda.time.PeriodType periodType19 = periodType17.withMinutesRemoved();
        org.joda.time.PeriodType periodType20 = periodType17.withWeeksRemoved();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = duration13.toPeriod(periodType20, chronology21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType24 = periodType20.getFieldType(2189219);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2189219");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514429010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=29,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PeriodType[Years]" + "'", str18, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period22);
    }

    @Test
    public void test2586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2586");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withWeekOfWeekyear(26294011);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26294011 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514429025,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=29,MILLISECOND=25,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test2587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2587");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.DateTime dateTime2 = mutableDateTime0.toDateTimeISO();
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra(10);
        org.joda.time.DateTime.Property property5 = dateTime2.centuryOfEra();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate.Property property9 = localDate6.yearOfEra();
        org.joda.time.Interval interval10 = localDate6.toInterval();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDate localDate13 = localDate6.withFieldAdded(durationFieldType11, 20);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfYear();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.Interval interval18 = localDate14.toInterval(dateTimeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = localDate13.toDateMidnight(dateTimeZone17);
        java.lang.String str22 = dateTimeZone17.getNameKey((long) (byte) 100);
        long long24 = dateTimeZone17.previousTransition((long) 26194884);
        org.joda.time.DateTime dateTime25 = dateTime2.withZone(dateTimeZone17);
        org.joda.time.DateTime.Property property26 = dateTime2.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.centuryOfEra();
        org.joda.time.DateTime dateTime29 = mutableDateTime27.toDateTimeISO();
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight30.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property35 = dateMidnight30.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight30.withMillis((long) 5);
        org.joda.time.DateMidnight.Property property38 = dateMidnight30.yearOfEra();
        org.joda.time.DateMidnight.Property property39 = dateMidnight30.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = dateMidnight30.getZone();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        int int43 = dateTimeZone40.getStandardOffset((long) 26283270);
        mutableDateTime27.setZone(dateTimeZone40);
        org.joda.time.DateTime dateTime45 = dateTime2.withZoneRetainFields(dateTimeZone40);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 26194884L + "'", long24 == 26194884L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test2588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2588");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (-2));
        org.junit.Assert.assertNotNull(timeOfDay1);
    }

    @Test
    public void test2589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2589");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (byte) 0);
        long long2 = duration1.getMillis();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfYear();
        org.joda.time.DateMidnight dateMidnight5 = localDate3.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.Hours hours7 = duration1.toStandardHours();
        org.joda.time.Hours hours8 = duration1.toStandardHours();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime12.plusSeconds(10);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property19 = dateTime18.secondOfDay();
        org.joda.time.DateTime dateTime21 = dateTime18.withEra(1);
        org.joda.time.DateTime dateTime23 = dateTime18.plusMillis(0);
        org.joda.time.DateTime dateTime25 = dateTime18.plusHours(5);
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 2000, dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime18.toDateTime(dateTimeZone29);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((long) (byte) 0);
        long long35 = duration34.getMillis();
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property37 = localDate36.dayOfYear();
        org.joda.time.DateMidnight dateMidnight38 = localDate36.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.Hours hours40 = duration34.toStandardHours();
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime42 = dateMidnight41.toMutableDateTime();
        mutableDateTime42.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.months();
        mutableDateTime42.add(durationFieldType45, (int) (byte) 1);
        int int48 = mutableDateTime42.getSecondOfMinute();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType50 = periodType49.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) mutableDateTime42, periodType50);
        org.joda.time.Period period52 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime32, periodType50);
        org.joda.time.MutablePeriod mutablePeriod53 = period52.toMutablePeriod();
        java.lang.Object obj54 = mutablePeriod53.clone();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(hours40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(mutablePeriod53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "P0Y");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "P0Y");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "P0Y");
    }

    @Test
    public void test2590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2590");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        calendar1.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        calendar1.setTimeInMillis((long) 26167775);
        calendar1.clear();
        boolean boolean13 = calendar1.isWeekDateSupported();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.era();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test2591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2591");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        int int5 = localDateTime4.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusDays(12);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withDayOfYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.plusMinutes(53);
        java.util.Locale locale12 = java.util.Locale.PRC;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.fromCalendarFields(calendar13);
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.minuteOfHour();
        java.util.Locale locale17 = java.util.Locale.PRC;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        int int19 = property16.getMaximumShortTextLength(locale17);
        int int20 = property16.get();
        org.joda.time.LocalDateTime localDateTime21 = property16.roundCeilingCopy();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.months();
        mutablePeriod27.set(durationFieldType28, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.months();
        boolean boolean32 = mutablePeriod27.isSupported(durationFieldType31);
        int int33 = mutablePeriod23.indexOf(durationFieldType31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime21.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod23, 8);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(2514077640000L);
        boolean boolean38 = localDateTime35.equals((java.lang.Object) localDateTime37);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.minusSeconds(999);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = localDateTime35.getFieldTypes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514429222,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=29,MILLISECOND=222,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26429221 + "'", int5 == 26429221);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645514429222,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=29,MILLISECOND=222,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645514429222,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=29,MILLISECOND=222,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 20 + "'", int20 == 20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
    }

    @Test
    public void test2592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2592");
        long long6 = java.util.Date.UTC(41, 0, 26365301, 26340276, 26270486, (-1613978169));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2371834015791000L + "'", long6 == 2371834015791000L);
    }

    @Test
    public void test2593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2593");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = dateTimeField4.getRangeDurationField();
        java.util.Locale locale7 = java.util.Locale.PRC;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        java.lang.String str9 = dateTimeField4.getAsShortText((long) (short) -1, locale7);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale7);
        boolean boolean11 = calendar10.isWeekDateSupported();
        calendar10.setTimeInMillis((long) 2020);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514429410,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=29,MILLISECOND=410,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1969" + "'", str9, "1969");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=2020,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=2,MILLISECOND=20,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2594");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withDayOfMonth(8);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.DateTime dateTime10 = dateTime7.plusSeconds(10);
        org.joda.time.DateTime dateTime12 = dateTime7.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property14 = dateTime12.property(dateTimeFieldType13);
        int int15 = dateMidnight0.get(dateTimeFieldType13);
        org.joda.time.LocalDate localDate16 = dateMidnight0.toLocalDate();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight19 = property18.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime21 = dateMidnight20.toMutableDateTime();
        java.lang.String str22 = mutableDateTime21.toString();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime21.monthOfYear();
        java.lang.String str24 = mutableDateTime21.toString();
        int int25 = mutableDateTime21.getDayOfYear();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime21.weekyear();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.set((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property26.getFieldType();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight19.withField(dateTimeFieldType29, 26275273);
        org.joda.time.LocalDate localDate33 = localDate16.withField(dateTimeFieldType29, 0);
        org.joda.time.LocalDate.Property property34 = localDate16.weekyear();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str22, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str24, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 53 + "'", int25 == 53);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test2595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2595");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("959", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2596");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 26200509, 84202366501000L);
        mutablePeriod2.add(131, 48, 473, 58, 26206928, 0, (-1), 2119);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        mutableDateTime13.add((long) 1);
        org.joda.time.DateTime dateTime16 = mutableDateTime13.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, readableDuration17, periodType18);
        org.joda.time.Chronology chronology20 = mutableDateTime13.getChronology();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(chronology20);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfYear((int) (byte) 1);
        int int26 = dateTime25.getDayOfMonth();
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime29 = dateTime25.minus((org.joda.time.ReadableDuration) duration28);
        mutableDateTime21.add((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean33 = duration28.isShorterThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Period period34 = duration32.toPeriod();
        org.joda.time.Duration duration35 = duration32.toDuration();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        int int41 = mutablePeriod40.getMonths();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableInstant36, (org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay(chronology43);
        org.joda.time.LocalDate localDate45 = org.joda.time.LocalDate.now(chronology43);
        org.joda.time.DateTimeField dateTimeField46 = chronology43.weekyearOfCentury();
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration32, chronology43);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeField46);
    }

    @Test
    public void test2597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2597");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.TimeOfDay timeOfDay36 = property34.getTimeOfDay();
        int int37 = property34.getMaximumValueOverall();
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale40);
        java.lang.String str42 = locale39.getDisplayVariant(locale40);
        org.joda.time.TimeOfDay timeOfDay43 = property34.setCopy("1", locale39);
        java.lang.String str44 = locale39.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 999 + "'", int37 == 999);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645514429521,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=29,MILLISECOND=521,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "zh_CN" + "'", str44, "zh_CN");
    }

    @Test
    public void test2598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2598");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfDay(436);
        org.joda.time.DateTime dateTime8 = localDateTime5.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusWeeks(3);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        int int16 = mutablePeriod15.getMonths();
        org.joda.time.Interval interval17 = new org.joda.time.Interval(readableInstant11, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.Interval interval18 = interval17.toInterval();
        org.joda.time.Interval interval19 = interval17.toInterval();
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.Interval interval22 = interval17.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property25 = dateTime24.secondOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.withEra(1);
        org.joda.time.DateTime dateTime29 = dateTime24.plusMillis(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int31 = dateTime24.get(dateTimeFieldType30);
        org.joda.time.DateTime dateTime33 = dateTime24.withYear((int) (byte) 10);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.Period period35 = duration21.toPeriodFrom((org.joda.time.ReadableInstant) dateTime24, periodType34);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime5.plus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusSeconds((int) '4');
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.minusMonths(117);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((java.lang.Object) localDateTime36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514429544,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=29,MILLISECOND=544,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 31 + "'", int31 == 31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
    }

    @Test
    public void test2599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2599");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight0.toMutableDateTime();
        boolean boolean5 = dateMidnight0.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.withCenturyOfEra(0);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        java.lang.String str10 = mutableDateTime9.toString();
        mutableDateTime9.setMonthOfYear(1);
        mutableDateTime9.addWeekyears(4);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        long long17 = duration16.getMillis();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) (byte) 0);
        long long20 = duration19.getMillis();
        int int21 = duration16.compareTo((org.joda.time.ReadableDuration) duration19);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16, 26162430);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration25 = interval24.toDuration();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        int int31 = mutablePeriod30.getMonths();
        org.joda.time.Interval interval32 = new org.joda.time.Interval(readableInstant26, (org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType37);
        int int39 = mutablePeriod38.getMonths();
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableInstant34, (org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        boolean boolean42 = interval32.contains((org.joda.time.ReadableInterval) interval40);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType46);
        int int48 = mutablePeriod47.getMonths();
        org.joda.time.Interval interval49 = new org.joda.time.Interval(readableInstant43, (org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.Chronology chronology50 = interval49.getChronology();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType54);
        int int56 = mutablePeriod55.getMonths();
        org.joda.time.Interval interval57 = new org.joda.time.Interval(readableInstant51, (org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.Chronology chronology58 = interval57.getChronology();
        boolean boolean59 = interval49.contains((org.joda.time.ReadableInterval) interval57);
        boolean boolean60 = interval32.overlaps((org.joda.time.ReadableInterval) interval49);
        org.joda.time.Duration duration62 = new org.joda.time.Duration((long) 86399);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType66);
        int int68 = mutablePeriod67.getMonths();
        org.joda.time.Interval interval69 = new org.joda.time.Interval(readableInstant63, (org.joda.time.ReadablePeriod) mutablePeriod67);
        org.joda.time.Chronology chronology70 = interval69.getChronology();
        org.joda.time.YearMonthDay yearMonthDay71 = new org.joda.time.YearMonthDay(chronology70);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.PeriodType periodType75 = null;
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType75);
        int int77 = mutablePeriod76.getMonths();
        org.joda.time.Interval interval78 = new org.joda.time.Interval(readableInstant72, (org.joda.time.ReadablePeriod) mutablePeriod76);
        int[] intArray81 = chronology70.get((org.joda.time.ReadablePeriod) mutablePeriod76, 1L, (long) 4);
        org.joda.time.PeriodType periodType82 = mutablePeriod76.getPeriodType();
        org.joda.time.Period period83 = duration62.toPeriod(periodType82);
        boolean boolean84 = interval49.equals((java.lang.Object) duration62);
        long long85 = interval49.getStartMillis();
        org.joda.time.DateTime dateTime86 = interval49.getEnd();
        boolean boolean87 = interval24.isBefore((org.joda.time.ReadableInterval) interval49);
        org.joda.time.MutableInterval mutableInterval88 = interval24.toMutableInterval();
        org.joda.time.DateTime dateTime89 = interval24.getStart();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str10, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1645514429584L + "'", long85 == 1645514429584L);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(mutableInterval88);
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test2600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2600");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("53");
        boolean boolean2 = timeZone1.observesDaylightTime();
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = locale3.getCountry();
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale9);
        java.lang.String str11 = locale8.getDisplayVariant(locale9);
        java.util.Calendar calendar12 = dateMidnight6.toCalendar(locale9);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale9.getDisplayCountry(locale13);
        java.lang.String str15 = locale5.getDisplayLanguage(locale13);
        java.lang.String str16 = locale3.getDisplayLanguage(locale5);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone1, locale5);
        calendar17.setFirstDayOfWeek(10);
        int int20 = calendar17.getMinimalDaysInFirstWeek();
        int int21 = calendar17.getFirstDayOfWeek();
        calendar17.roll(702, 0);
        // The following exception was thrown during execution in test generation
        try {
            calendar17.roll(26283382, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CA" + "'", str4, "CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645514429670,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=29,MILLISECOND=670,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str15, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "fran\347ais" + "'", str16, "fran\347ais");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645514429670,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=10,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=29,MILLISECOND=670,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
    }

    @Test
    public void test2601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2601");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        calendar1.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        calendar1.setTimeInMillis((long) 26167775);
        calendar1.clear();
        java.time.Instant instant13 = calendar1.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = calendar1.getGreatestMinimum(26200709);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26200709");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(instant13);
    }

    @Test
    public void test2602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2602");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = dateTimeField4.getRangeDurationField();
        java.util.Locale locale7 = java.util.Locale.PRC;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        java.lang.String str9 = dateTimeField4.getAsShortText((long) (short) -1, locale7);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale7);
        boolean boolean11 = calendar10.isWeekDateSupported();
        calendar10.set(620, 7, 26200709);
        // The following exception was thrown during execution in test generation
        try {
            calendar10.add(32770, 32769);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514429718,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=29,MILLISECOND=718,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1969" + "'", str9, "1969");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=620,MONTH=7,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=26200709,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=29,MILLISECOND=718,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2603");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property5 = dateMidnight0.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.minusMonths(22);
        java.lang.Object obj8 = null;
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType12 = periodType11.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        int[] intArray31 = chronology20.get((org.joda.time.ReadablePeriod) mutablePeriod26, 1L, (long) 4);
        org.joda.time.Period period32 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType11, chronology20);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(obj8, chronology20);
        org.joda.time.DateTimeField dateTimeField34 = chronology20.yearOfEra();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight0.withChronology(chronology20);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Period period40 = new org.joda.time.Period((long) 100, (long) 2, periodType39);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.months();
        mutablePeriod44.set(durationFieldType45, (int) 'a');
        org.joda.time.Period period49 = period40.withField(durationFieldType45, 0);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight0.withFieldAdded(durationFieldType45, (int) '4');
        org.joda.time.Chronology chronology52 = dateMidnight0.getChronology();
        org.joda.time.Instant instant53 = dateMidnight0.toInstant();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(instant53);
    }

    @Test
    public void test2604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2604");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Interval interval21 = localDate17.toInterval(dateTimeZone20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        boolean boolean38 = interval28.contains((org.joda.time.ReadableInterval) interval36);
        boolean boolean39 = interval21.isBefore((org.joda.time.ReadableInterval) interval36);
        long long40 = interval36.getStartMillis();
        boolean boolean41 = interval6.overlaps((org.joda.time.ReadableInterval) interval36);
        org.joda.time.MutableInterval mutableInterval42 = interval36.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval43 = interval36.toMutableInterval();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.parse("2022-02-22T00:00:00.001Z");
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardMinutes((long) 9);
        org.joda.time.DateTime dateTime48 = dateTime45.plus((org.joda.time.ReadableDuration) duration47);
        long long49 = duration47.getStandardDays();
        org.joda.time.format.DateTimePrinter dateTimePrinter50 = null;
        org.joda.time.format.DateTimeParser dateTimeParser51 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter50, dateTimeParser51);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType56 = periodType55.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType60);
        int int62 = mutablePeriod61.getMonths();
        org.joda.time.Interval interval63 = new org.joda.time.Interval(readableInstant57, (org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.Chronology chronology64 = interval63.getChronology();
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType69);
        int int71 = mutablePeriod70.getMonths();
        org.joda.time.Interval interval72 = new org.joda.time.Interval(readableInstant66, (org.joda.time.ReadablePeriod) mutablePeriod70);
        int[] intArray75 = chronology64.get((org.joda.time.ReadablePeriod) mutablePeriod70, 1L, (long) 4);
        org.joda.time.Period period76 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType55, chronology64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = dateTimeFormatter52.withChronology(chronology64);
        boolean boolean78 = dateTimeFormatter77.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter79 = dateTimeFormatter77.getPrinter();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType83);
        int int85 = mutablePeriod84.getMonths();
        org.joda.time.Interval interval86 = new org.joda.time.Interval(readableInstant80, (org.joda.time.ReadablePeriod) mutablePeriod84);
        org.joda.time.Chronology chronology87 = interval86.getChronology();
        org.joda.time.DateTimeField dateTimeField88 = chronology87.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField89 = chronology87.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField90 = chronology87.dayOfYear();
        org.joda.time.LocalDate localDate91 = org.joda.time.LocalDate.now(chronology87);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter92 = dateTimeFormatter77.withChronology(chronology87);
        org.joda.time.Period period93 = duration47.toPeriod(chronology87);
        org.joda.time.Interval interval94 = interval36.withChronology(chronology87);
        long long95 = interval94.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval96 = interval94.toMutableInterval();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology37);
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645514429780L + "'", long40 == 1645514429780L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(dateTimePrinter79);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertNotNull(dateTimeFormatter92);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(interval94);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 34L + "'", long95 == 34L);
        org.junit.Assert.assertNotNull(mutableInterval96);
    }

    @Test
    public void test2605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2605");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusDays(86399999);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        java.lang.String str29 = mutablePeriod23.toString();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) mutablePeriod23);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusWeeks(0);
        boolean boolean37 = mutablePeriod23.equals((java.lang.Object) 0);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        org.joda.time.YearMonthDay yearMonthDay42 = property39.addWrapFieldToCopy(26200578);
        int int43 = yearMonthDay42.getMonthOfYear();
        java.lang.String str44 = yearMonthDay42.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0.034S" + "'", str29, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 8 + "'", int43 == 8);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-08-22" + "'", str44, "2022-08-22");
    }

    @Test
    public void test2606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2606");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.LocalDate localDate2 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate3 = property1.roundFloorCopy();
        org.joda.time.LocalDate localDate5 = property1.addWrapFieldToCopy((int) 'a');
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test2607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2607");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusWeeks(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfYear((int) (byte) 1);
        int int10 = dateTime9.getDayOfMonth();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight5.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = localDate15.toDateMidnight();
        org.joda.time.Chronology chronology18 = localDate15.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight5.withFields((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime24 = dateMidnight23.toMutableDateTime();
        mutableDateTime24.add((long) 1);
        org.joda.time.DateTime dateTime27 = mutableDateTime24.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.years();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime24, readableDuration28, periodType29);
        org.joda.time.Chronology chronology31 = mutableDateTime24.getChronology();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(chronology31);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfYear((int) (byte) 1);
        int int37 = dateTime36.getDayOfMonth();
        org.joda.time.Duration duration39 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime40 = dateTime36.minus((org.joda.time.ReadableDuration) duration39);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean44 = duration39.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration46 = new org.joda.time.Duration((long) (byte) 0);
        long long47 = duration46.getStandardDays();
        org.joda.time.Duration duration48 = duration39.plus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.Duration duration51 = duration46.minus((org.joda.time.ReadableDuration) duration50);
        long long52 = duration51.getStandardSeconds();
        boolean boolean53 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Minutes minutes54 = duration21.toStandardMinutes();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType57 = periodType56.withHoursRemoved();
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration21, readableInstant55, periodType56);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
    }

    @Test
    public void test2608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2608");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate localDate4 = localDate0.withWeekyear((int) (short) 100);
        int int5 = localDate0.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property6 = localDate0.monthOfYear();
        org.joda.time.Period period8 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period10 = period8.minusYears(8);
        org.joda.time.Period period12 = period8.withYears(2);
        org.joda.time.Period period14 = period12.plusMillis((int) (byte) 10);
        org.joda.time.Period period16 = period14.minusMillis(270);
        org.joda.time.LocalDate localDate17 = localDate0.minus((org.joda.time.ReadablePeriod) period14);
        int int18 = localDate0.getCenturyOfEra();
        org.joda.time.ReadablePartial readablePartial19 = null;
        org.joda.time.LocalDate localDate20 = localDate0.withFields(readablePartial19);
        org.joda.time.LocalDate localDate22 = localDate20.minusYears(2);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight23.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property28 = dateMidnight23.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight23.withMillis((long) 5);
        org.joda.time.DateMidnight.Property property31 = dateMidnight23.yearOfEra();
        org.joda.time.DateMidnight.Property property32 = dateMidnight23.monthOfYear();
        org.joda.time.DateMidnight.Property property33 = dateMidnight23.era();
        org.joda.time.YearMonthDay yearMonthDay34 = dateMidnight23.toYearMonthDay();
        int int35 = localDate20.compareTo((org.joda.time.ReadablePartial) yearMonthDay34);
        org.joda.time.LocalDate.Property property36 = localDate20.dayOfWeek();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test2609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2609");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645514430838,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=30,MILLISECOND=838,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test2610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2610");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime.Property property2 = localTime0.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime4 = localTime0.toDateTimeToday(dateTimeZone3);
        int int5 = localTime0.getHourOfDay();
        org.joda.time.LocalTime localTime7 = localTime0.minusSeconds((int) (short) -1);
        int int8 = localTime0.size();
        org.joda.time.Chronology chronology9 = localTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.halfdayOfDay();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 7 + "'", int5 == 7);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test2611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2611");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        int int9 = mutableDateTime1.getDayOfWeek();
        mutableDateTime1.setMillis((long) 53);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.DateTime dateTime18 = dateTime15.plusSeconds(10);
        org.joda.time.DateTime dateTime20 = dateTime15.minus((long) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTimeISO();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((int) (short) 1, 21, 26296396, 2922789);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod27);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone31);
        long long34 = dateTimeZone31.previousTransition((long) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone31);
        mutableDateTime1.setZone(dateTimeZone31);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime1.year();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test2612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2612");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("Temps universel coordonn\351");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Temps universel coordonne?\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2613");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMonths(436);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusMillis((-1));
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withWeekyear(26365673);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        int int20 = mutablePeriod19.getMonths();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100, chronology22);
        java.lang.String str25 = dateTime23.toString("53");
        org.joda.time.DateTime dateTime27 = dateTime23.plusHours(70);
        org.joda.time.DateTime dateTime29 = dateTime27.withWeekyear(0);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime31 = dateMidnight30.toMutableDateTime();
        mutableDateTime31.add((long) 1);
        org.joda.time.DateTime dateTime34 = mutableDateTime31.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.years();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime31, readableDuration35, periodType36);
        java.lang.String str38 = mutableDateTime31.toString();
        org.joda.time.Chronology chronology39 = mutableDateTime31.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.days();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.weekyearOfCentury();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime45 = dateTime43.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property46 = dateTime45.dayOfMonth();
        org.joda.time.DateTime dateTime48 = dateTime45.plusSeconds(10);
        org.joda.time.DateTime dateTime50 = dateTime45.minus((long) (short) -1);
        org.joda.time.DateTime dateTime52 = dateTime50.plusMonths(26167775);
        org.joda.time.LocalDate localDate53 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property54 = localDate53.dayOfYear();
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.Interval interval57 = localDate53.toInterval(dateTimeZone56);
        long long60 = dateTimeZone56.adjustOffset((long) 11, true);
        long long64 = dateTimeZone56.convertLocalToUTC(1645514159731L, true, (long) (short) 100);
        org.joda.time.DateTime dateTime65 = dateTime50.withZone(dateTimeZone56);
        org.joda.time.Chronology chronology66 = chronology39.withZone(dateTimeZone56);
        int int68 = dateTimeZone56.getStandardOffset(1645514180351L);
        org.joda.time.DateTime dateTime69 = dateTime27.toDateTime(dateTimeZone56);
        int int71 = dateTimeZone56.getOffsetFromLocal((long) 76);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((java.lang.Object) localDateTime13, dateTimeZone56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514430891,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=30,MILLISECOND=891,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "53" + "'", str25, "53");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str38, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 11L + "'", long60 == 11L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1645514159731L + "'", long64 == 1645514159731L);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
    }

    @Test
    public void test2614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2614");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay(2L);
        int int2 = timeOfDay1.getMinuteOfHour();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime3.size();
        java.util.Locale locale5 = java.util.Locale.ITALY;
        boolean boolean6 = localTime3.equals((java.lang.Object) locale5);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((long) (short) 10);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.plusMinutes((int) (byte) 100);
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTimeToday();
        org.joda.time.LocalTime localTime12 = localTime3.withFields((org.joda.time.ReadablePartial) timeOfDay8);
        boolean boolean13 = timeOfDay1.isEqual((org.joda.time.ReadablePartial) timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2615");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.DateMidnight dateMidnight2 = localDate0.toDateMidnight();
        org.joda.time.LocalDate localDate4 = localDate0.minusYears(9);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone7);
        long long10 = dateTimeZone7.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight12 = localDate4.toDateMidnight(dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate4.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTime();
        org.joda.time.DateTime dateTime17 = dateTime14.plusMonths(26270486);
        int int18 = dateTime14.getYearOfEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2013 + "'", int18 == 2013);
    }

    @Test
    public void test2616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2616");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (byte) 0);
        long long2 = duration1.getMillis();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfYear();
        org.joda.time.DateMidnight dateMidnight5 = localDate3.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.plusMonths(0);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((int) (byte) 100, 12, (int) '#', 10, (int) (byte) 10, 4, 2, (int) (short) -1);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight8.plus((org.joda.time.ReadablePeriod) mutablePeriod17);
        int int19 = dateMidnight8.getHourOfDay();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime21 = dateMidnight20.toMutableDateTime();
        java.lang.String str22 = mutableDateTime21.toString();
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology24 = dateMidnight23.getChronology();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withDayOfMonth(8);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime30 = dateTime28.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property31 = dateTime30.dayOfMonth();
        org.joda.time.DateTime dateTime33 = dateTime30.plusSeconds(10);
        org.joda.time.DateTime dateTime35 = dateTime30.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property37 = dateTime35.property(dateTimeFieldType36);
        int int38 = dateMidnight23.get(dateTimeFieldType36);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime21.property(dateTimeFieldType36);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime41 = dateMidnight40.toMutableDateTime();
        mutableDateTime41.add((long) 1);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime41.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property44.getFieldType();
        mutableDateTime21.set(dateTimeFieldType45, 0);
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType45.getDurationType();
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType45.getDurationType();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight8.withFieldAdded(durationFieldType49, 25);
        org.joda.time.DateMidnight.Property property52 = dateMidnight51.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str22, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test2617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2617");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePeriod) mutablePeriod21, 1L, (long) 4);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType6, chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withChronology(chronology15);
        org.joda.time.format.DateTimeParser dateTimeParser29 = dateTimeFormatter28.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter28.withDefaultYear((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.parse("07:18:15.512", dateTimeFormatter31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(dateTimeParser29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
    }

    @Test
    public void test2618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2618");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.stream.Stream<java.lang.String> strStream2 = strSet1.parallelStream();
        boolean boolean3 = strSet1.isEmpty();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        int int9 = mutablePeriod8.getMonths();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableInstant4, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Chronology chronology11 = interval10.getChronology();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(chronology11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay12.minusDays(86399999);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfMonth();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType30);
        mutablePeriod27.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        java.lang.String str33 = mutablePeriod27.toString();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadablePeriod) mutablePeriod27);
        java.util.TimeZone timeZone36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone36);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.minusWeeks(0);
        boolean boolean41 = mutablePeriod27.equals((java.lang.Object) 0);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay12.minus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.YearMonthDay.Property property43 = yearMonthDay12.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay44 = property43.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.withYear((-292275054));
        boolean boolean47 = strSet1.contains((java.lang.Object) yearMonthDay44);
        boolean boolean48 = strSet1.isEmpty();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT0.034S" + "'", str33, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test2619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2619");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant(1645514159651L);
        java.util.Calendar.Builder builder4 = builder2.setInstant((long) 2024);
        java.util.Calendar.Builder builder6 = builder4.setLenient(false);
        java.util.Locale locale9 = new java.util.Locale("\ud504\ub791\uc2a4\uc5b4", "it_IT");
        java.util.Calendar.Builder builder10 = builder6.setLocale(locale9);
        java.util.Calendar.Builder builder12 = builder10.setInstant((long) 23);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("53");
        boolean boolean15 = timeZone14.observesDaylightTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfMonth();
        org.joda.time.DateTime dateTime22 = dateTime19.plusSeconds(10);
        org.joda.time.DateTime.Property property23 = dateTime22.year();
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime29 = timeOfDay24.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay24.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay31.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean35 = timeOfDay31.isSupported(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property40 = dateTime39.dayOfMonth();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType43);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType47);
        mutablePeriod44.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        java.lang.String str50 = mutablePeriod44.toString();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadablePeriod) mutablePeriod44);
        mutablePeriod44.setValue(0, 2022);
        mutablePeriod44.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay31.plus((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.TimeOfDay.Property property58 = timeOfDay57.millisOfSecond();
        org.joda.time.DurationField durationField59 = property58.getDurationField();
        org.joda.time.TimeOfDay timeOfDay60 = property58.getTimeOfDay();
        int int61 = property58.getMaximumValueOverall();
        java.util.Locale locale63 = java.util.Locale.CHINA;
        java.util.Locale locale64 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale64);
        java.lang.String str66 = locale63.getDisplayVariant(locale64);
        org.joda.time.TimeOfDay timeOfDay67 = property58.setCopy("1", locale63);
        java.lang.String str68 = property23.getAsShortText(locale63);
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone14, locale63);
        java.util.Calendar.Builder builder70 = builder10.setLocale(locale63);
        java.util.Calendar.Builder builder72 = builder70.setInstant(1645514213165L);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals(locale9.toString(), "\ud504\ub791\uc2a4\uc5b4_IT_IT");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT0.034S" + "'", str50, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 999 + "'", int61 == 999);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1645514431999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=31,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1969" + "'", str68, "1969");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1645514431999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=31,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test2620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2620");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.months();
        mutablePeriod12.set(durationFieldType13, (int) 'a');
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        int int24 = mutablePeriod23.getMonths();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableInstant19, (org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        int int33 = mutablePeriod32.getMonths();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableInstant28, (org.joda.time.ReadablePeriod) mutablePeriod32);
        int[] intArray37 = chronology26.get((org.joda.time.ReadablePeriod) mutablePeriod32, 1L, (long) 4);
        mutablePeriod3.setPeriod((long) 'a', (long) (short) -1, chronology26);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.Duration duration41 = org.joda.time.Duration.millis(1645514159651L);
        org.joda.time.Duration duration43 = duration41.minus((-1966881660000L));
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight39.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration45 = duration43.toDuration();
        org.joda.time.LocalDate localDate46 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property47 = localDate46.dayOfYear();
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.Interval interval50 = localDate46.toInterval(dateTimeZone49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType54);
        int int56 = mutablePeriod55.getMonths();
        org.joda.time.Interval interval57 = new org.joda.time.Interval(readableInstant51, (org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.Chronology chronology58 = interval57.getChronology();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType62);
        int int64 = mutablePeriod63.getMonths();
        org.joda.time.Interval interval65 = new org.joda.time.Interval(readableInstant59, (org.joda.time.ReadablePeriod) mutablePeriod63);
        org.joda.time.Chronology chronology66 = interval65.getChronology();
        boolean boolean67 = interval57.contains((org.joda.time.ReadableInterval) interval65);
        boolean boolean68 = interval50.isBefore((org.joda.time.ReadableInterval) interval65);
        org.joda.time.DateTime dateTime69 = interval65.getStart();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = dateTime69.toDateTime(dateTimeZone70);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime69, periodType72);
        org.joda.time.DateTime dateTime75 = dateTime69.withMinuteOfHour(58);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    public void test2621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2621");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval15.withDurationAfterStart(readableDuration16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        mutableDateTime19.add((long) 1);
        org.joda.time.DateTime dateTime22 = mutableDateTime19.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime19, readableDuration23, periodType24);
        java.lang.String str26 = mutableDateTime19.toString();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime19.millisOfSecond();
        boolean boolean28 = interval15.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        mutableDateTime19.addWeeks(9);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime19.millisOfDay();
        org.joda.time.DurationField durationField32 = property31.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str26, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test2622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2622");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime dateTime8 = dateTime3.minus((long) (short) -1);
        org.joda.time.DateTime dateTime9 = dateTime3.toDateTimeISO();
        int int10 = dateTime9.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime9.withYearOfCentury(459);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 459 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1969 + "'", int10 == 1969);
    }

    @Test
    public void test2623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2623");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("53");
        boolean boolean2 = timeZone1.observesDaylightTime();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean14 = timeOfDay10.isSupported(dateTimeFieldType13);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        java.lang.String str29 = mutablePeriod23.toString();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) mutablePeriod23);
        mutablePeriod23.setValue(0, 2022);
        mutablePeriod23.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay10.plus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.TimeOfDay.Property property37 = timeOfDay36.millisOfSecond();
        org.joda.time.DurationField durationField38 = property37.getDurationField();
        org.joda.time.TimeOfDay timeOfDay39 = property37.getTimeOfDay();
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.lang.String str41 = locale40.getDisplayScript();
        java.lang.String str42 = property37.getAsText(locale40);
        java.lang.String str43 = timeZone1.getDisplayName(locale40);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0.034S" + "'", str29, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "340" + "'", str42, "340");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642" + "'", str43, "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
    }

    @Test
    public void test2624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2624");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfDay(436);
        org.joda.time.DateTime dateTime8 = localDateTime5.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusWeeks(3);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        int int16 = mutablePeriod15.getMonths();
        org.joda.time.Interval interval17 = new org.joda.time.Interval(readableInstant11, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.Interval interval18 = interval17.toInterval();
        org.joda.time.Interval interval19 = interval17.toInterval();
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.Interval interval22 = interval17.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property25 = dateTime24.secondOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.withEra(1);
        org.joda.time.DateTime dateTime29 = dateTime24.plusMillis(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int31 = dateTime24.get(dateTimeFieldType30);
        org.joda.time.DateTime dateTime33 = dateTime24.withYear((int) (byte) 10);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.Period period35 = duration21.toPeriodFrom((org.joda.time.ReadableInstant) dateTime24, periodType34);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime5.plus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusYears((-2720));
        java.lang.String str39 = localDateTime36.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514432339,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=32,MILLISECOND=339,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 31 + "'", int31 == 31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T07:21:00.000" + "'", str39, "2022-02-22T07:21:00.000");
    }

    @Test
    public void test2625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2625");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        java.util.Locale locale6 = java.util.Locale.PRC;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale6);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.fromCalendarFields(calendar7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology12 = dateMidnight11.getChronology();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withDayOfMonth(8);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime18.plusSeconds(10);
        org.joda.time.DateTime dateTime23 = dateTime18.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property25 = dateTime23.property(dateTimeFieldType24);
        int int26 = dateMidnight11.get(dateTimeFieldType24);
        int int27 = localDateTime8.indexOf(dateTimeFieldType24);
        int int28 = localDateTime8.getMillisOfDay();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime5, (org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.Period period31 = period29.withMillis(22);
        org.joda.time.Period period33 = period29.withMonths((int) 'x');
        org.joda.time.Period period35 = period29.minusMonths(99);
        org.joda.time.Period period37 = period35.plusDays((int) (byte) -1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514432389,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=32,MILLISECOND=389,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645514432389,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=32,MILLISECOND=389,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 26432389 + "'", int28 == 26432389);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
    }

    @Test
    public void test2626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2626");
        java.lang.Object obj0 = null;
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(1L, dateTimeZone4);
        boolean boolean6 = calendar2.before((java.lang.Object) localDate5);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime10.toYearMonthDay();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        int int17 = mutablePeriod16.getMonths();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableInstant12, (org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        int int26 = mutablePeriod25.getMonths();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableInstant21, (org.joda.time.ReadablePeriod) mutablePeriod25);
        int[] intArray30 = chronology19.get((org.joda.time.ReadablePeriod) mutablePeriod25, 1L, (long) 4);
        org.joda.time.PeriodType periodType31 = mutablePeriod25.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay11.minus((org.joda.time.ReadablePeriod) mutablePeriod25);
        boolean boolean33 = localDate5.isBefore((org.joda.time.ReadablePartial) yearMonthDay11);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now(dateTimeZone35);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        long long40 = dateTimeZone35.getMillisKeepLocal(dateTimeZone38, (long) 2);
        org.joda.time.DateTime dateTime41 = localDate5.toDateTimeAtCurrentTime(dateTimeZone38);
        java.util.TimeZone timeZone42 = dateTimeZone38.toTimeZone();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(obj0, dateTimeZone38);
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        boolean boolean46 = localDate44.isSupported(dateTimeFieldType45);
        org.joda.time.LocalDate.Property property47 = localDate44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField48 = property47.getField();
        org.joda.time.DurationField durationField49 = property47.getDurationField();
        org.joda.time.LocalDate localDate51 = property47.setCopy(2022);
        org.joda.time.LocalDate localDate52 = property47.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology54 = dateMidnight53.getChronology();
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight53.plus((-78439680L));
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime60 = dateTime58.withDayOfYear((int) (byte) 1);
        int int61 = dateTime60.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime63 = dateMidnight62.toMutableDateTime();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime60, (org.joda.time.ReadableInstant) mutableDateTime63);
        org.joda.time.DateTime dateTime66 = dateTime60.plusYears((-1));
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime68 = dateMidnight67.toMutableDateTime();
        java.lang.String str69 = mutableDateTime68.toString();
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology71 = dateMidnight70.getChronology();
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight70.withDayOfMonth(8);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime77 = dateTime75.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property78 = dateTime77.dayOfMonth();
        org.joda.time.DateTime dateTime80 = dateTime77.plusSeconds(10);
        org.joda.time.DateTime dateTime82 = dateTime77.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property84 = dateTime82.property(dateTimeFieldType83);
        int int85 = dateMidnight70.get(dateTimeFieldType83);
        org.joda.time.MutableDateTime.Property property86 = mutableDateTime68.property(dateTimeFieldType83);
        org.joda.time.DateTime.Property property87 = dateTime66.property(dateTimeFieldType83);
        org.joda.time.DateMidnight.Property property88 = dateMidnight56.property(dateTimeFieldType83);
        java.lang.String str89 = dateTimeFieldType83.getName();
        org.joda.time.LocalDate.Property property90 = localDate52.property(dateTimeFieldType83);
        boolean boolean91 = localDate43.isSupported(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645514432415,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=32,MILLISECOND=415,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 2L + "'", long40 == 2L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str69, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "era" + "'", str89, "era");
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test2627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2627");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder2 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder4 = builder2.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder4.setUnicodeLocaleKeyword("Chine", "French (France)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: Chine [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test2628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2628");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.monthOfYear();
        mutableDateTime1.addHours((int) '#');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.hourOfDay();
        mutableDateTime1.add((long) 22);
        org.joda.time.DateTime dateTime9 = mutableDateTime1.toDateTime();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str2, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test2629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2629");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(1L, dateTimeZone3);
        boolean boolean5 = calendar1.before((java.lang.Object) localDate4);
        int int6 = localDate4.getDayOfWeek();
        org.joda.time.LocalDate.Property property7 = localDate4.yearOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate10 = localDate8.plusWeeks(532);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate10.withEra(1969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514432606,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=32,MILLISECOND=606,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test2630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2630");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        int int3 = mutableDateTime2.getYearOfEra();
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.months();
        mutablePeriod7.set(durationFieldType8, (int) 'a');
        mutablePeriod7.addHours((int) (byte) -1);
        mutablePeriod7.addYears(2022);
        mutableDateTime2.add((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        mutableDateTime19.add((long) 1);
        org.joda.time.DateTime dateTime22 = mutableDateTime19.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime19, readableDuration23, periodType24);
        java.lang.String str26 = mutableDateTime19.toString();
        org.joda.time.Chronology chronology27 = mutableDateTime19.getChronology();
        mutablePeriod7.setPeriod(1645514159651L, (long) (short) -1, chronology27);
        mutablePeriod7.setSeconds(26160118);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay0.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.YearMonthDay.Property property32 = yearMonthDay0.dayOfMonth();
        java.lang.String str33 = property32.getAsShortText();
        org.joda.time.YearMonthDay yearMonthDay35 = property32.addToCopy(26223340);
        int int36 = property32.getMaximumValue();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str26, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "22" + "'", str33, "22");
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 28 + "'", int36 == 28);
    }

    @Test
    public void test2631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2631");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.years();
        java.lang.String str1 = periodType0.toString();
        org.joda.time.PeriodType periodType2 = periodType0.withMinutesRemoved();
        org.joda.time.PeriodType periodType3 = periodType0.withWeeksRemoved();
        java.util.Locale locale4 = java.util.Locale.PRC;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale4);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.fromCalendarFields(calendar5);
        org.joda.time.DateTime dateTime7 = localDateTime6.toDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withCenturyOfEra(365);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = property10.getFieldType();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getRangeDurationType();
        int int13 = periodType3.indexOf(durationFieldType12);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "PeriodType[Years]" + "'", str1, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645514432889,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=32,MILLISECOND=889,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test2632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2632");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(292278993, 2013, 26191187, 558, 26354932);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 558 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2633");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime6 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime8 = property4.addToCopy((long) 2);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths(3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField12 = localDateTime10.getField(26235826);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26235826");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514432925,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=32,MILLISECOND=925,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test2634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2634");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        org.joda.time.DateTime dateTime8 = dateTime1.plusHours(5);
        org.joda.time.DateTime.Property property9 = dateTime1.millisOfDay();
        org.joda.time.Period period11 = org.joda.time.Period.months(5);
        int int12 = period11.getMinutes();
        org.joda.time.Period period13 = period11.negated();
        org.joda.time.DateTime dateTime14 = dateTime1.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime16 = dateTime14.plusHours(26337997);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test2635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2635");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (short) 10);
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        java.lang.String str3 = localDate1.toString();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now(dateTimeZone5);
        boolean boolean7 = dateTimeZone5.isFixed();
        org.joda.time.Interval interval8 = localDate1.toInterval(dateTimeZone5);
        org.joda.time.Interval interval10 = interval8.withStartMillis(2L);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight11.toMutableDateTime();
        mutableDateTime12.add((long) 1);
        org.joda.time.DateTime dateTime15 = mutableDateTime12.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime12, readableDuration16, periodType17);
        java.lang.String str19 = mutableDateTime12.toString();
        mutableDateTime12.addMinutes((int) ' ');
        int int22 = mutableDateTime12.getCenturyOfEra();
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime28 = timeOfDay23.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime30 = dateTime25.withWeekOfWeekyear((int) '4');
        boolean boolean31 = mutableDateTime12.isBefore((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property32 = dateTime25.minuteOfDay();
        int int33 = property32.getMinimumValue();
        org.joda.time.DateTime dateTime34 = property32.withMinimumValue();
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTimeISO();
        java.lang.String str36 = dateTime34.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval37 = interval10.withEnd((org.joda.time.ReadableInstant) dateTime34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str19, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1969-12-31T00:00:59.999Z" + "'", str36, "1969-12-31T00:00:59.999Z");
    }

    @Test
    public void test2636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2636");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusWeeks(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfYear((int) (byte) 1);
        int int10 = dateTime9.getDayOfMonth();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight5.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = localDate15.toDateMidnight();
        org.joda.time.Chronology chronology18 = localDate15.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight5.withFields((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight5.withDayOfYear(70);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight23 = property22.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight24 = property22.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight24);
    }

    @Test
    public void test2637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2637");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) (short) 10);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes((int) (byte) 100);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay1.plusMinutes(2189219);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay1.minusMillis(26197982);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
    }

    @Test
    public void test2638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2638");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = null;
        boolean boolean5 = localDate3.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate.Property property6 = localDate3.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.DurationField durationField8 = dateTimeField7.getRangeDurationField();
        mutableDateTime1.setRounding(dateTimeField7);
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.lang.String str11 = locale10.getDisplayName();
        int int12 = dateTimeField7.getMaximumTextLength(locale10);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fran\347ais (France)" + "'", str11, "fran\347ais (France)");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
    }

    @Test
    public void test2639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2639");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfSecond();
        org.joda.time.LocalTime localTime4 = property3.roundFloorCopy();
        org.joda.time.LocalTime localTime6 = property3.addWrapFieldToCopy(117);
        org.joda.time.LocalTime localTime8 = property3.addWrapFieldToCopy(26310599);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test2640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2640");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        int int14 = mutablePeriod13.getMonths();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadablePeriod) mutablePeriod13);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePeriod) mutablePeriod13, 1L, (long) 4);
        org.joda.time.DurationField durationField19 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField20 = chronology7.dayOfMonth();
        boolean boolean21 = dateTimeField20.isLenient();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = dateTimeField20.set((-4492773705586L), 249);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 249 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2641");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval15.withDurationAfterStart(readableDuration16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        mutableDateTime19.add((long) 1);
        org.joda.time.DateTime dateTime22 = mutableDateTime19.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime19, readableDuration23, periodType24);
        java.lang.String str26 = mutableDateTime19.toString();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime19.millisOfSecond();
        boolean boolean28 = interval15.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        mutableDateTime19.addWeeks(9);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime19.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime19.copy();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.years();
        mutableDateTime32.add(durationFieldType33, 26162430);
        java.lang.String str36 = durationFieldType33.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str26, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "years" + "'", str36, "years");
    }

    @Test
    public void test2642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2642");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (short) 10);
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        java.lang.String str3 = localDate1.toString();
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(1L, dateTimeZone7);
        boolean boolean9 = calendar5.before((java.lang.Object) localDate8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        int int20 = mutablePeriod19.getMonths();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        int int29 = mutablePeriod28.getMonths();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableInstant24, (org.joda.time.ReadablePeriod) mutablePeriod28);
        int[] intArray33 = chronology22.get((org.joda.time.ReadablePeriod) mutablePeriod28, 1L, (long) 4);
        org.joda.time.PeriodType periodType34 = mutablePeriod28.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay14.minus((org.joda.time.ReadablePeriod) mutablePeriod28);
        boolean boolean36 = localDate8.isBefore((org.joda.time.ReadablePartial) yearMonthDay14);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now(dateTimeZone38);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        long long43 = dateTimeZone38.getMillisKeepLocal(dateTimeZone41, (long) 2);
        org.joda.time.DateTime dateTime44 = localDate8.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.Interval interval45 = localDate1.toInterval(dateTimeZone41);
        org.joda.time.LocalDate.Property property46 = localDate1.weekyear();
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.yearOfCentury();
        int int49 = dateMidnight47.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight47.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime53 = dateMidnight52.toMutableDateTime();
        mutableDateTime53.add((long) 1);
        mutableDateTime53.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime53.weekOfWeekyear();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight47, (org.joda.time.ReadableInstant) mutableDateTime53);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime61 = dateMidnight60.toMutableDateTime();
        mutableDateTime61.add((long) 1);
        org.joda.time.DateTime dateTime64 = mutableDateTime61.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.years();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime61, readableDuration65, periodType66);
        org.joda.time.Chronology chronology68 = mutableDateTime61.getChronology();
        org.joda.time.MutableDateTime mutableDateTime69 = org.joda.time.MutableDateTime.now(chronology68);
        mutableDateTime53.setMillis((org.joda.time.ReadableInstant) mutableDateTime69);
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime69.secondOfDay();
        org.joda.time.Duration duration73 = new org.joda.time.Duration((long) (byte) 0);
        long long74 = duration73.getMillis();
        long long75 = duration73.getMillis();
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime69, (org.joda.time.ReadableDuration) duration73);
        org.joda.time.Period period77 = period76.normalizedStandard();
        org.joda.time.LocalDate localDate78 = localDate1.minus((org.joda.time.ReadablePeriod) period76);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645514433155,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=33,MILLISECOND=155,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 2L + "'", long43 == 2L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(localDate78);
    }

    @Test
    public void test2643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2643");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime1 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtStartOfDay(dateTimeZone2);
        org.joda.time.DateTime.Property property4 = dateTime3.hourOfDay();
        org.joda.time.DateTime dateTime6 = property4.addWrapFieldToCopy(11);
        org.joda.time.DateTime dateTime7 = property4.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime8 = property4.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test2644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2644");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "P0Y");
        java.util.Locale.Builder builder5 = builder0.removeUnicodeLocaleAttribute("GMT");
        java.util.Locale.Builder builder7 = builder5.setLanguage("AD");
        java.util.Locale.Builder builder8 = builder7.clear();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2645");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        int int10 = mutableDateTime9.getMinuteOfDay();
        int int11 = mutableDateTime9.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setMinuteOfHour(26294787);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26294787 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 440 + "'", int10 == 440);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 286 + "'", int11 == 286);
    }

    @Test
    public void test2646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2646");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0, 26298354, 2922789, 26296609);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod4.setValue(70, 43);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 70");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2647");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusDays(86399999);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        java.lang.String str29 = mutablePeriod23.toString();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) mutablePeriod23);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusWeeks(0);
        boolean boolean37 = mutablePeriod23.equals((java.lang.Object) 0);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.months();
        mutablePeriod42.set(durationFieldType43, (int) 'a');
        org.joda.time.ReadableDuration readableDuration46 = null;
        mutablePeriod42.add(readableDuration46);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay38.minus((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay48.plusMonths(26194884);
        java.util.Locale locale51 = java.util.Locale.PRC;
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(locale51);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.fromCalendarFields(calendar52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withMillisOfSecond(436);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.minusMonths(2022);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusHours(23);
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = yearMonthDay50.isAfter((org.joda.time.ReadablePartial) localDateTime59);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0.034S" + "'", str29, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1645514434326,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=34,MILLISECOND=326,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test2648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2648");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromDateFields(date5);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay6.minusYears(2022);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay6.plusYears(32770);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = yearMonthDay10.getFieldType((int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay.Property property14 = yearMonthDay10.property(dateTimeFieldType13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
    }

    @Test
    public void test2649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2649");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        int int5 = localDateTime4.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusDays(12);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withYear(26162285);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property11 = localDateTime4.property(dateTimeFieldType10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100, chronology20);
        java.lang.String str23 = dateTime21.toString("53");
        org.joda.time.DateTime dateTime25 = dateTime21.plusHours(70);
        org.joda.time.DateTime dateTime27 = dateTime25.withWeekyear(0);
        long long28 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime29 = dateTime27.toDateTimeISO();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514434381,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=34,MILLISECOND=381,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26434380 + "'", int5 == 26434380);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "53" + "'", str23, "53");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2022L + "'", long28 == 2022L);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test2650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2650");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime2 = localTime0.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutablePeriod4.add(readableDuration5);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 100, chronology23);
        boolean boolean25 = durationFieldType12.isSupported(chronology23);
        mutablePeriod4.setPeriod((long) '4', chronology23);
        org.joda.time.LocalTime localTime27 = localTime2.minus((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.LocalTime.Property property28 = localTime27.minuteOfHour();
        org.joda.time.LocalTime localTime29 = property28.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = localTime29.getValue(459);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 459");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime29);
    }

    @Test
    public void test2651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2651");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDayOfMonth(8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime12.plusSeconds(10);
        org.joda.time.DateTime dateTime17 = dateTime12.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property19 = dateTime17.property(dateTimeFieldType18);
        int int20 = dateMidnight5.get(dateTimeFieldType18);
        int int21 = localDateTime2.indexOf(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime2.minusWeeks(8);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusYears(0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusYears(10);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.hourOfDay();
        int int29 = localDateTime27.getWeekOfWeekyear();
        java.lang.String str31 = localDateTime27.toString("376");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514434413,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=34,MILLISECOND=413,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "376" + "'", str31, "376");
    }

    @Test
    public void test2652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2652");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        int int7 = mutableDateTime6.getYearOfEra();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        mutablePeriod11.addHours((int) (byte) -1);
        mutablePeriod11.addYears(2022);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.LocalTime localTime20 = localTime3.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.LocalTime localTime22 = localTime20.plusSeconds(100);
        org.joda.time.LocalTime.Property property23 = localTime22.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime25 = property23.setCopy(26162430);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26162430 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test2653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2653");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        java.lang.String str36 = property34.toString();
        org.joda.time.DurationField durationField37 = property34.getDurationField();
        long long40 = durationField37.subtract(1645514218339L, 26275508);
        long long43 = durationField37.getMillis((long) 19, 1645514320326L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Property[millisOfSecond]" + "'", str36, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645487942831L + "'", long40 == 1645487942831L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 19L + "'", long43 == 19L);
    }

    @Test
    public void test2654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2654");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        mutableDateTime1.addMinutes((int) ' ');
        int int11 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = dateTime14.withWeekOfWeekyear((int) '4');
        boolean boolean20 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property21 = dateTime14.minuteOfDay();
        int int22 = property21.getMinimumValue();
        org.joda.time.DateTime dateTime23 = property21.withMinimumValue();
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        org.joda.time.DateTime.Property property25 = dateTime24.secondOfDay();
        org.joda.time.DateTime dateTime26 = property25.roundCeilingCopy();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str8, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test2655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2655");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay4 = dateTime3.toYearMonthDay();
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withYear(59);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        int int9 = property8.getMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay10 = property8.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay12 = property8.addToCopy(26184696);
        int int13 = property8.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay15 = property8.setCopy("DurationField[weeks]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DurationField[weeks]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
    }

    @Test
    public void test2656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2656");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusWeeks(0);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfYear((int) (byte) 1);
        int int10 = dateTime9.getDayOfMonth();
        org.joda.time.Duration duration12 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight5.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = localDate15.toDateMidnight();
        org.joda.time.Chronology chronology18 = localDate15.getChronology();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight5.withFields((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.year();
        org.joda.time.DateMidnight dateMidnight25 = property23.addWrapFieldToCopy(0);
        org.joda.time.DateMidnight dateMidnight26 = property23.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight26);
    }

    @Test
    public void test2657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2657");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("German");
        java.lang.String str2 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "german" + "'", str2, "german");
    }

    @Test
    public void test2658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2658");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        int int3 = mutableDateTime2.getYearOfEra();
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.months();
        mutablePeriod7.set(durationFieldType8, (int) 'a');
        mutablePeriod7.addHours((int) (byte) -1);
        mutablePeriod7.addYears(2022);
        mutableDateTime2.add((org.joda.time.ReadablePeriod) mutablePeriod7);
        boolean boolean16 = dateTimeZone0.equals((java.lang.Object) mutablePeriod7);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2659");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 26181768);
        long long2 = duration1.getStandardDays();
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusWeeks(0);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        int int13 = dateTime12.getDayOfMonth();
        org.joda.time.Duration duration15 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime12.minus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight8.minus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfYear();
        org.joda.time.DateMidnight dateMidnight20 = localDate18.toDateMidnight();
        org.joda.time.Chronology chronology21 = localDate18.getChronology();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight8.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight8.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight26.plusYears((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight26, readableDuration31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight33.toMutableDateTime();
        mutableDateTime34.add((long) 1);
        org.joda.time.DateTime dateTime37 = mutableDateTime34.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.era();
        boolean boolean39 = mutableDateTime34.isSupported(dateTimeFieldType38);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime34.hourOfDay();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType44);
        int int46 = mutablePeriod45.getMonths();
        org.joda.time.Interval interval47 = new org.joda.time.Interval(readableInstant41, (org.joda.time.ReadablePeriod) mutablePeriod45);
        org.joda.time.Chronology chronology48 = interval47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.weekyearOfCentury();
        long long51 = dateTimeField49.roundHalfFloor((long) 1);
        mutableDateTime34.setRounding(dateTimeField49, (int) (byte) 0);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType56);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.months();
        mutablePeriod57.set(durationFieldType58, (int) 'a');
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType65);
        int int67 = mutablePeriod66.getMonths();
        org.joda.time.Interval interval68 = new org.joda.time.Interval(readableInstant62, (org.joda.time.ReadablePeriod) mutablePeriod66);
        org.joda.time.Chronology chronology69 = interval68.getChronology();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (short) 100, chronology69);
        boolean boolean71 = durationFieldType58.isSupported(chronology69);
        mutableDateTime34.add(durationFieldType58, (int) ' ');
        int int74 = mutableDateTime34.getSecondOfMinute();
        java.util.TimeZone timeZone75 = null;
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.forTimeZone(timeZone75);
        org.joda.time.LocalDate localDate77 = org.joda.time.LocalDate.now(dateTimeZone76);
        org.joda.time.MutableDateTime mutableDateTime78 = org.joda.time.MutableDateTime.now(dateTimeZone76);
        org.joda.time.DateMidnight dateMidnight79 = org.joda.time.DateMidnight.now();
        int int80 = dateTimeZone76.getOffset((org.joda.time.ReadableInstant) dateMidnight79);
        mutableDateTime34.setZoneRetainFields(dateTimeZone76);
        org.joda.time.Duration duration82 = mutablePeriod32.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime34);
        boolean boolean83 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration82);
        boolean boolean84 = duration1.isEqual((org.joda.time.ReadableDuration) duration24);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 18181L + "'", long2 == 18181L);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test2660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2660");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        mutableDateTime6.add((long) 1);
        mutableDateTime6.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = localDate15.toDateMidnight();
        org.joda.time.Chronology chronology18 = localDate15.getChronology();
        org.joda.time.LocalDate.Property property19 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = null;
        boolean boolean22 = localDate20.isSupported(dateTimeFieldType21);
        int int23 = localDate15.compareTo((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = localDate20.getFields();
        boolean boolean25 = property13.equals((java.lang.Object) dateTimeFieldArray24);
        org.joda.time.DurationField durationField26 = property13.getRangeDurationField();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test2661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2661");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime3.size();
        org.joda.time.LocalTime.Property property5 = localTime3.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = localTime3.toDateTimeToday(dateTimeZone6);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime1, dateTimeZone6);
        int int9 = localTime8.getMillisOfDay();
        org.joda.time.LocalTime localTime11 = localTime8.plusMinutes(117);
        org.joda.time.LocalTime.Property property12 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property12.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime14 = property12.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test2662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2662");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        int int8 = mutablePeriod7.getMonths();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableInstant3, (org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfMonth();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType21);
        mutablePeriod18.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        java.lang.String str24 = mutablePeriod18.toString();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Interval interval27 = interval25.withDurationAfterStart(readableDuration26);
        boolean boolean28 = interval9.isBefore((org.joda.time.ReadableInterval) interval25);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        int int34 = mutablePeriod33.getMonths();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(readableInstant29, (org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType40);
        int int42 = mutablePeriod41.getMonths();
        org.joda.time.Interval interval43 = new org.joda.time.Interval(readableInstant37, (org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        boolean boolean45 = interval35.contains((org.joda.time.ReadableInterval) interval43);
        long long46 = interval43.getEndMillis();
        org.joda.time.Interval interval47 = interval25.gap((org.joda.time.ReadableInterval) interval43);
        boolean boolean48 = dateTimeZone1.equals((java.lang.Object) interval43);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone51);
        int int53 = mutableDateTime52.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime55 = dateMidnight54.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight54.plus(readableDuration56);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight54.withYearOfEra(12);
        mutableDateTime52.setTime((org.joda.time.ReadableInstant) dateMidnight59);
        int int61 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateMidnight59);
        org.joda.time.MutableDateTime mutableDateTime62 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        mutableDateTime62.add(readablePeriod63, 26360866);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.034S" + "'", str24, "PT0.034S");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645514435001L + "'", long46 == 1645514435001L);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime62);
    }

    @Test
    public void test2663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2663");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.DateMidnight dateMidnight2 = localDate0.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = localDate0.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withMillis(1645514310576L);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, (long) 2, periodType8);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.months();
        mutablePeriod13.set(durationFieldType14, (int) 'a');
        org.joda.time.Period period18 = period9.withField(durationFieldType14, 0);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = period18.toDurationFrom(readableInstant19);
        org.joda.time.Duration duration21 = duration20.toDuration();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.minus((org.joda.time.ReadableDuration) duration20);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
    }

    @Test
    public void test2664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2664");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        int int3 = localDateTime2.getMillisOfDay();
        int int4 = localDateTime2.getMillisOfDay();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514435004,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=35,MILLISECOND=4,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 26435004 + "'", int3 == 26435004);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 26435004 + "'", int4 == 26435004);
    }

    @Test
    public void test2665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2665");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePeriod) mutablePeriod21, 1L, (long) 4);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType6, chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withChronology(chronology15);
        java.lang.Integer int29 = dateTimeFormatter28.getPivotYear();
        org.joda.time.Chronology chronology30 = dateTimeFormatter28.getChronolgy();
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(1645514375959L, chronology30);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(int29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test2666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2666");
        org.joda.time.Period period4 = new org.joda.time.Period(270, 86399, 26161854, 26160118);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        java.lang.String str6 = periodType5.toString();
        org.joda.time.Period period7 = period4.normalizedStandard(periodType5);
        org.joda.time.Period period9 = period4.withMillis((int) (short) 100);
        int int10 = period9.getYears();
        org.joda.time.Duration duration11 = period9.toStandardDuration();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.MutablePeriod mutablePeriod28 = mutablePeriod20.copy();
        boolean boolean29 = duration11.equals((java.lang.Object) mutablePeriod20);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PeriodType[Years]" + "'", str6, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2667");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setValue(0, 2022);
        mutablePeriod8.addDays((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight22.toMutableDateTime();
        mutableDateTime23.add((long) 1);
        org.joda.time.DateTime dateTime26 = mutableDateTime23.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.years();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime23, readableDuration27, periodType28);
        org.joda.time.Chronology chronology30 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        mutablePeriod8.add(35417L, chronology30);
        mutablePeriod8.setMonths(58);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test2668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2668");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7, (int) (byte) 1);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.secondOfDay();
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.fromCalendarFields(calendar12);
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfCeilingCopy();
        java.util.Locale locale17 = java.util.Locale.PRC;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.fromCalendarFields(calendar18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.withDayOfMonth(8);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property30 = dateTime29.dayOfMonth();
        org.joda.time.DateTime dateTime32 = dateTime29.plusSeconds(10);
        org.joda.time.DateTime dateTime34 = dateTime29.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property36 = dateTime34.property(dateTimeFieldType35);
        int int37 = dateMidnight22.get(dateTimeFieldType35);
        int int38 = localDateTime19.indexOf(dateTimeFieldType35);
        int int39 = localDateTime19.getMillisOfDay();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime16, (org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.Period period42 = period40.withMillis(22);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period40, 12);
        int int45 = period40.getYears();
        int int46 = period40.getHours();
        java.lang.String str47 = period40.toString();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645514435097,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=35,MILLISECOND=97,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645514435097,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=35,MILLISECOND=97,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 26435097 + "'", int39 == 26435097);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT-24.903S" + "'", str47, "PT-24.903S");
    }

    @Test
    public void test2669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2669");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay4 = dateTime3.toYearMonthDay();
        java.lang.Object obj5 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType9 = periodType8.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        int int15 = mutablePeriod14.getMonths();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(readableInstant10, (org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(chronology17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        int int24 = mutablePeriod23.getMonths();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableInstant19, (org.joda.time.ReadablePeriod) mutablePeriod23);
        int[] intArray28 = chronology17.get((org.joda.time.ReadablePeriod) mutablePeriod23, 1L, (long) 4);
        org.joda.time.Period period29 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType8, chronology17);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(obj5, chronology17);
        org.joda.time.DurationField durationField31 = chronology17.millis();
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay4.withChronologyRetainFields(chronology17);
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale33);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(1L, dateTimeZone36);
        boolean boolean38 = calendar34.before((java.lang.Object) localDate37);
        int int39 = localDate37.getDayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration44 = null;
        mutablePeriod43.add(readableDuration44);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType48);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.months();
        mutablePeriod49.set(durationFieldType50, (int) 'a');
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType57);
        int int59 = mutablePeriod58.getMonths();
        org.joda.time.Interval interval60 = new org.joda.time.Interval(readableInstant54, (org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.Chronology chronology61 = interval60.getChronology();
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (short) 100, chronology61);
        boolean boolean63 = durationFieldType50.isSupported(chronology61);
        mutablePeriod43.add(durationFieldType50, (int) (byte) 0);
        boolean boolean66 = mutablePeriod41.isSupported(durationFieldType50);
        boolean boolean67 = localDate37.isSupported(durationFieldType50);
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay4.withFieldAdded(durationFieldType50, 349);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay4.withMonthOfYear((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645514435132,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=35,MILLISECOND=132,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 4 + "'", int39 == 4);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(yearMonthDay69);
    }

    @Test
    public void test2670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2670");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 459);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = localTime1.withField(dateTimeFieldType2, 26194884);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26194884 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
    }

    @Test
    public void test2671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2671");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.DateTime dateTime2 = mutableDateTime0.toDateTimeISO();
        org.joda.time.DateTime dateTime4 = dateTime2.withYearOfEra(10);
        org.joda.time.DateTime.Property property5 = dateTime2.centuryOfEra();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate.Property property9 = localDate6.yearOfEra();
        org.joda.time.Interval interval10 = localDate6.toInterval();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDate localDate13 = localDate6.withFieldAdded(durationFieldType11, 20);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfYear();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.Interval interval18 = localDate14.toInterval(dateTimeZone17);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = localDate13.toDateMidnight(dateTimeZone17);
        java.lang.String str22 = dateTimeZone17.getNameKey((long) (byte) 100);
        long long24 = dateTimeZone17.previousTransition((long) 26194884);
        org.joda.time.DateTime dateTime25 = dateTime2.withZone(dateTimeZone17);
        org.joda.time.DateTime.Property property26 = dateTime2.dayOfMonth();
        int int27 = dateTime2.getMinuteOfHour();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 26194884L + "'", long24 == 26194884L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 20 + "'", int27 == 20);
    }

    @Test
    public void test2672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2672");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod18, 1L, (long) 4);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType3, chronology12);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(obj0, chronology12);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone28);
        org.joda.time.DateTime dateTime30 = localDate25.toDateTimeAtMidnight(dateTimeZone28);
        int int31 = localDate25.getWeekyear();
        org.joda.time.LocalDate localDate33 = localDate25.withDayOfYear((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate35 = localDate33.withEra(270);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 270 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(localDate33);
    }

    @Test
    public void test2673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2673");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setValue(0, 2022);
        mutablePeriod8.addDays((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight22.toMutableDateTime();
        mutableDateTime23.add((long) 1);
        org.joda.time.DateTime dateTime26 = mutableDateTime23.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.years();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime23, readableDuration27, periodType28);
        org.joda.time.Chronology chronology30 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        mutablePeriod8.add(35417L, chronology30);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekOfWeekyear();
        java.lang.String str34 = chronology30.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str34, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test2674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2674");
        org.joda.time.Period period4 = new org.joda.time.Period(26222448, (int) (short) 0, (-2720), (int) (short) -1);
        int int5 = period4.getWeeks();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test2675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2675");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("eras");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"eras\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2676");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay36 = property34.addWrapFieldToCopy(26162974);
        org.joda.time.DateTimeField dateTimeField37 = property34.getField();
        int int38 = property34.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test2677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2677");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period3 = period1.minusYears(8);
        org.joda.time.Period period5 = period1.withYears(2);
        org.joda.time.Period period7 = period5.plusMillis((int) (byte) 10);
        org.joda.time.Period period9 = period7.minusMillis(270);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.months();
        mutablePeriod17.set(durationFieldType18, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.months();
        boolean boolean22 = mutablePeriod17.isSupported(durationFieldType21);
        int int23 = mutablePeriod13.indexOf(durationFieldType21);
        java.lang.String str24 = durationFieldType21.getName();
        int int25 = mutablePeriod11.get(durationFieldType21);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        int int31 = mutablePeriod30.getMonths();
        org.joda.time.Interval interval32 = new org.joda.time.Interval(readableInstant26, (org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType38);
        int int40 = mutablePeriod39.getMonths();
        org.joda.time.Interval interval41 = new org.joda.time.Interval(readableInstant35, (org.joda.time.ReadablePeriod) mutablePeriod39);
        int[] intArray44 = chronology33.get((org.joda.time.ReadablePeriod) mutablePeriod39, 1L, (long) 4);
        org.joda.time.DateTimeField dateTimeField45 = chronology33.monthOfYear();
        boolean boolean46 = durationFieldType21.isSupported(chronology33);
        org.joda.time.Chronology chronology47 = null;
        boolean boolean48 = durationFieldType21.isSupported(chronology47);
        int int49 = period9.indexOf(durationFieldType21);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "months" + "'", str24, "months");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test2678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2678");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.DateTime dateTime9 = localDateTime2.toDateTime();
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.fromCalendarFields(calendar11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusHours((int) (short) 0);
        java.util.Locale locale15 = java.util.Locale.PRC;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.fromCalendarFields(calendar16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plusMillis((int) ' ');
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfYear((int) (byte) 1);
        int int26 = dateTime25.getDayOfMonth();
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime29 = dateTime25.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime21.withDurationAdded((org.joda.time.ReadableDuration) duration28, 3);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime21.minusDays(2922789);
        org.joda.time.Period period34 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime12, (org.joda.time.ReadablePartial) localDateTime33);
        java.util.Locale locale35 = java.util.Locale.PRC;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale35);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.fromCalendarFields(calendar36);
        org.joda.time.DateTime dateTime38 = localDateTime37.toDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withCenturyOfEra(365);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime42 = dateMidnight41.toMutableDateTime();
        mutableDateTime42.add((long) 1);
        mutableDateTime42.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime42.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime42.dayOfYear();
        int int49 = property48.getMaximumValue();
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime51 = dateMidnight50.toMutableDateTime();
        mutableDateTime51.add((long) 1);
        org.joda.time.DateTime dateTime54 = mutableDateTime51.toDateTimeISO();
        mutableDateTime51.addDays((int) (short) 10);
        long long57 = property48.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime51.property(dateTimeFieldType58);
        int int60 = localDateTime40.get(dateTimeFieldType58);
        boolean boolean61 = localDateTime12.isSupported(dateTimeFieldType58);
        int int62 = localDateTime2.get(dateTimeFieldType58);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime64 = dateMidnight63.toMutableDateTime();
        mutableDateTime64.add((long) 1);
        org.joda.time.DateTime dateTime67 = mutableDateTime64.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.years();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime64, readableDuration68, periodType69);
        org.joda.time.Chronology chronology71 = mutableDateTime64.getChronology();
        org.joda.time.MutableDateTime mutableDateTime72 = org.joda.time.MutableDateTime.now(chronology71);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime76 = dateTime74.withDayOfYear((int) (byte) 1);
        int int77 = dateTime76.getDayOfMonth();
        org.joda.time.Duration duration79 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime80 = dateTime76.minus((org.joda.time.ReadableDuration) duration79);
        mutableDateTime72.add((org.joda.time.ReadableDuration) duration79);
        org.joda.time.Duration duration83 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean84 = duration79.isShorterThan((org.joda.time.ReadableDuration) duration83);
        org.joda.time.Duration duration86 = new org.joda.time.Duration((long) (byte) 0);
        long long87 = duration86.getStandardDays();
        org.joda.time.Duration duration88 = duration79.plus((org.joda.time.ReadableDuration) duration86);
        org.joda.time.Duration duration90 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.Duration duration91 = duration86.minus((org.joda.time.ReadableDuration) duration90);
        long long92 = duration90.getStandardHours();
        org.joda.time.LocalDateTime localDateTime94 = localDateTime2.withDurationAdded((org.joda.time.ReadableDuration) duration90, 26290534);
        int int95 = localDateTime94.getMillisOfDay();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514437172,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=37,MILLISECOND=172,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645514437173,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=37,MILLISECOND=173,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1645514437173,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=37,MILLISECOND=173,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1645514437173,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=37,MILLISECOND=173,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 365 + "'", int49 == 365);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 35417L + "'", long57 == 35417L);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 7 + "'", int60 == 7);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 7 + "'", int62 == 7);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertNotNull(localDateTime94);
// flaky:         org.junit.Assert.assertTrue("'" + int95 + "' != '" + 26437172 + "'", int95 == 26437172);
    }

    @Test
    public void test2679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2679");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay36 = property34.addWrapFieldToCopy(26162974);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property34.getFieldType();
        java.lang.String str38 = property34.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay39 = property34.getTimeOfDay();
        int int40 = property34.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "286" + "'", str38, "286");
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 999 + "'", int40 == 999);
    }

    @Test
    public void test2680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2680");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.months();
        mutablePeriod3.set(durationFieldType4, (int) 'a');
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutablePeriod3.add(readableDuration7);
        mutablePeriod3.addHours((int) (short) 1);
        java.lang.Object obj11 = mutablePeriod3.clone();
        mutablePeriod3.addDays(451);
        org.joda.time.DurationFieldType[] durationFieldTypeArray14 = mutablePeriod3.getFieldTypes();
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "P97M451DT1H0.034S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "P97M451DT1H0.034S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "P97M451DT1H0.034S");
        org.junit.Assert.assertNotNull(durationFieldTypeArray14);
    }

    @Test
    public void test2681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2681");
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100, chronology12);
        org.joda.time.DurationField durationField14 = chronology12.centuries();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(101, 26180820, 26437172, 100, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 101 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test2682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2682");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "PT0.034S", "53" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.lang.String[] strArray14 = new java.lang.String[] { "PT0.034S", "53" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList15);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.lang.String[] strArray23 = new java.lang.String[] { "PT0.034S", "53" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.lang.String>) strList24);
        java.lang.String str27 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList24);
        java.lang.String str28 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap29 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList30 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap29);
        java.util.Locale locale31 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleAttributes();
        java.util.stream.Stream<java.lang.String> strStream33 = strSet32.stream();
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.lang.String[] strArray39 = new java.lang.String[] { "PT0.034S", "53" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strList40);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.lang.String[] strArray48 = new java.lang.String[] { "PT0.034S", "53" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.lang.String>) strList49);
        java.lang.String str52 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strList49);
        java.lang.String[] strArray60 = new java.lang.String[] { "it_IT", "months", "53", "hi!", "months", "it_IT", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight63.plusYears((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.withYear((int) (byte) 0);
        boolean boolean70 = strSet61.remove((java.lang.Object) dateMidnight69);
        java.util.Locale.FilteringMode filteringMode71 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strSet61, filteringMode71);
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags(languageRangeList30, (java.util.Collection<java.lang.String>) strSet32, filteringMode71);
        java.util.Locale.Category category74 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology76 = dateMidnight75.getChronology();
        java.util.Locale locale77 = java.util.Locale.CHINA;
        java.util.Locale locale78 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar79 = java.util.Calendar.getInstance(locale78);
        java.lang.String str80 = locale77.getDisplayVariant(locale78);
        java.util.Calendar calendar81 = dateMidnight75.toCalendar(locale78);
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.lang.String str83 = locale78.getDisplayCountry(locale82);
        java.util.Locale.setDefault(category74, locale78);
        java.util.Locale locale85 = java.util.Locale.getDefault(category74);
        java.util.Set<java.lang.String> strSet86 = locale85.getUnicodeLocaleKeys();
        java.lang.String str87 = java.util.Locale.lookupTag(languageRangeList30, (java.util.Collection<java.lang.String>) strSet86);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(languageRangeList30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + filteringMode71 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode71.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertTrue("'" + category74 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category74.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar79);
// flaky:         org.junit.Assert.assertEquals(calendar79.toString(), "java.util.GregorianCalendar[time=1645514437375,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=37,MILLISECOND=375,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(calendar81);
        org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ja");
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test2683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2683");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        int int14 = mutablePeriod13.getMonths();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadablePeriod) mutablePeriod13);
        int[] intArray18 = chronology7.get((org.joda.time.ReadablePeriod) mutablePeriod13, 1L, (long) 4);
        org.joda.time.DateTimeField dateTimeField19 = chronology7.monthOfYear();
        org.joda.time.DurationField durationField20 = chronology7.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) chronology7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
    }

    @Test
    public void test2684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2684");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDayOfMonth(8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime12.plusSeconds(10);
        org.joda.time.DateTime dateTime17 = dateTime12.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property19 = dateTime17.property(dateTimeFieldType18);
        int int20 = dateMidnight5.get(dateTimeFieldType18);
        int int21 = localDateTime2.indexOf(dateTimeFieldType18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime2.minusWeeks(8);
        int int24 = localDateTime23.size();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) ' ', chronology26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.months();
        mutablePeriod31.set(durationFieldType32, (int) 'a');
        mutablePeriod27.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        mutablePeriod31.setDays(0);
        mutablePeriod31.clear();
        org.joda.time.PeriodType periodType39 = mutablePeriod31.getPeriodType();
        int int40 = mutablePeriod31.getMonths();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property45 = dateTime44.weekOfWeekyear();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime49 = dateTime47.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property50 = dateTime49.minuteOfHour();
        org.joda.time.DateTime dateTime51 = property50.roundCeilingCopy();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration53 = mutablePeriod31.toDurationFrom((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime23.plus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusWeeks(26283382);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.minusMillis((-7));
        int int59 = localDateTime54.getYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514437491,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=37,MILLISECOND=491,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2021 + "'", int59 == 2021);
    }

    @Test
    public void test2685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2685");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 26299664);
    }

    @Test
    public void test2686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2686");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property2.withMinimumValue();
        org.joda.time.LocalTime localTime5 = property2.addNoWrapToCopy(44);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate.Property property9 = localDate6.yearOfEra();
        org.joda.time.Interval interval10 = localDate6.toInterval();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDate localDate13 = localDate6.withFieldAdded(durationFieldType11, 20);
        int int14 = localDate13.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean16 = localDate13.isSupported(dateTimeFieldType15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property17 = localTime5.property(dateTimeFieldType15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyearOfCentury' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test2687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2687");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval3 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        boolean boolean5 = interval3.equals((java.lang.Object) 1L);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withMillis((long) (short) 0);
        boolean boolean9 = interval3.isBefore((org.joda.time.ReadableInstant) dateMidnight6);
        org.joda.time.Duration duration11 = new org.joda.time.Duration((long) (byte) 0);
        long long12 = duration11.getStandardDays();
        org.joda.time.Interval interval13 = interval3.withDurationAfterStart((org.joda.time.ReadableDuration) duration11);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        java.lang.String str17 = dateTimeZone15.getName((long) 100);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(dateTimeZone15);
        org.joda.time.DateTime dateTime20 = localDate19.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval21 = interval3.withEnd((org.joda.time.ReadableInstant) dateTime20);
        long long22 = interval21.getEndMillis();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval21);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514437540L + "'", long22 == 1645514437540L);
    }

    @Test
    public void test2688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2688");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant(1645514159651L);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder5 = builder2.setWeekDefinition(31, 26246487);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test2689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2689");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(1645514333453L);
        org.joda.time.LocalDate.Property property2 = localDate1.era();
        int int3 = property2.getMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test2690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2690");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(26435004, 436, 26266791, (-219));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26435004 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2691");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight0.toMutableDateTime();
        boolean boolean5 = dateMidnight0.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.minusWeeks((int) ' ');
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear((int) (byte) 1);
        int int12 = dateTime11.getDayOfMonth();
        boolean boolean13 = dateMidnight0.isAfter((org.joda.time.ReadableInstant) dateTime11);
        java.util.GregorianCalendar gregorianCalendar14 = dateTime11.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = gregorianCalendar14.getMinimum(26322);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26322");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
    }

    @Test
    public void test2692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2692");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod18, 1L, (long) 4);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType3, chronology12);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(obj0, chronology12);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone28);
        org.joda.time.DateTime dateTime30 = localDate25.toDateTimeAtMidnight(dateTimeZone28);
        org.joda.time.LocalDate.Property property31 = localDate25.yearOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = null;
        org.joda.time.format.DateTimeParser dateTimeParser33 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter32, dateTimeParser33);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType38 = periodType37.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType42);
        int int44 = mutablePeriod43.getMonths();
        org.joda.time.Interval interval45 = new org.joda.time.Interval(readableInstant39, (org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay(chronology46);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType51);
        int int53 = mutablePeriod52.getMonths();
        org.joda.time.Interval interval54 = new org.joda.time.Interval(readableInstant48, (org.joda.time.ReadablePeriod) mutablePeriod52);
        int[] intArray57 = chronology46.get((org.joda.time.ReadablePeriod) mutablePeriod52, 1L, (long) 4);
        org.joda.time.Period period58 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType37, chronology46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter34.withChronology(chronology46);
        boolean boolean60 = dateTimeFormatter59.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter61 = dateTimeFormatter59.getPrinter();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType65);
        int int67 = mutablePeriod66.getMonths();
        org.joda.time.Interval interval68 = new org.joda.time.Interval(readableInstant62, (org.joda.time.ReadablePeriod) mutablePeriod66);
        org.joda.time.Chronology chronology69 = interval68.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField71 = chronology69.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField72 = chronology69.dayOfYear();
        org.joda.time.LocalDate localDate73 = org.joda.time.LocalDate.now(chronology69);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter59.withChronology(chronology69);
        org.joda.time.DateTimeField dateTimeField75 = chronology69.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime76 = org.joda.time.MutableDateTime.now(chronology69);
        int int77 = mutableDateTime76.getHourOfDay();
        int int78 = property31.compareTo((org.joda.time.ReadableInstant) mutableDateTime76);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(dateTimePrinter61);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 7 + "'", int77 == 7);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test2693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2693");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        int int6 = date5.getMonth();
        long long7 = date5.getTime();
        int int8 = date5.getDay();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate localDate11 = localDate9.plusWeeks(0);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = org.joda.time.DateMidnight.now();
        int int17 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.minusMonths(26200278);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((long) 2);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone24);
        long long27 = dateTimeZone24.previousTransition((long) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone24);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight21.withZoneRetainFields(dateTimeZone24);
        org.joda.time.Interval interval31 = localDate9.toInterval(dateTimeZone24);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1966881660000L) + "'", long7 == (-1966881660000L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(interval31);
    }

    @Test
    public void test2694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2694");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Interval interval4 = localDate0.toInterval();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDate localDate7 = localDate0.withFieldAdded(durationFieldType5, 20);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property9 = localDate8.dayOfYear();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.Interval interval12 = localDate8.toInterval(dateTimeZone11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight14 = localDate7.toDateMidnight(dateTimeZone11);
        java.lang.Object obj15 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType19 = periodType18.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        int int25 = mutablePeriod24.getMonths();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(readableInstant20, (org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.Chronology chronology27 = interval26.getChronology();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(chronology27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        int int34 = mutablePeriod33.getMonths();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(readableInstant29, (org.joda.time.ReadablePeriod) mutablePeriod33);
        int[] intArray38 = chronology27.get((org.joda.time.ReadablePeriod) mutablePeriod33, 1L, (long) 4);
        org.joda.time.Period period39 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType18, chronology27);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(obj15, chronology27);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone43);
        org.joda.time.DateTime dateTime45 = localDate40.toDateTimeAtMidnight(dateTimeZone43);
        org.joda.time.DateTime dateTime46 = localDate7.toDateTimeAtMidnight(dateTimeZone43);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.now(dateTimeZone48);
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now(dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight51 = org.joda.time.DateMidnight.now();
        int int52 = dateTimeZone48.getOffset((org.joda.time.ReadableInstant) dateMidnight51);
        java.util.Locale locale53 = java.util.Locale.ITALY;
        java.util.Calendar calendar54 = dateMidnight51.toCalendar(locale53);
        int int55 = calendar54.getWeekYear();
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.fromCalendarFields(calendar54);
        boolean boolean57 = localDate7.isEqual((org.joda.time.ReadablePartial) localDate56);
        org.joda.time.DateMidnight dateMidnight58 = localDate7.toDateMidnight();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it_IT");
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateMidnight58);
    }

    @Test
    public void test2695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2695");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.centuryOfEra();
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) mutableDateTime5);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime5.setWeekOfWeekyear(532);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 532 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test2696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2696");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.yearOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.year();
        org.joda.time.DateMidnight dateMidnight3 = localDate0.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withYear(2024);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
    }

    @Test
    public void test2697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2697");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime4 = localTime2.withMillisOfSecond(399);
        org.joda.time.LocalTime localTime6 = localTime4.plusMinutes(16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime8 = localTime4.withMillisOfSecond(26236476);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26236476 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test2698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2698");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long4 = dateTimeZone0.convertLocalToUTC(1645514156600L, false, 1645514178807L);
        long long6 = dateTimeZone0.nextTransition((long) 26392079);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645514156600L + "'", long4 == 1645514156600L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 26392079L + "'", long6 == 26392079L);
    }

    @Test
    public void test2699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2699");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod18, 1L, (long) 4);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType3, chronology12);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(obj0, chronology12);
        org.joda.time.DateTimeField dateTimeField26 = chronology12.yearOfEra();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField28 = chronology12.hourOfHalfday();
        int int29 = dateTimeField28.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime35 = timeOfDay30.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay30.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay37.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean41 = timeOfDay37.isSupported(dateTimeFieldType40);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime45 = dateTime43.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property46 = dateTime45.dayOfMonth();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType49);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType53);
        mutablePeriod50.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod54);
        java.lang.String str56 = mutablePeriod50.toString();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadablePeriod) mutablePeriod50);
        mutablePeriod50.setValue(0, 2022);
        mutablePeriod50.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay63 = timeOfDay37.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.TimeOfDay.Property property64 = timeOfDay63.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay66 = property64.addWrapFieldToCopy(26162974);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property64.getFieldType();
        java.lang.String str68 = property64.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay69 = property64.getTimeOfDay();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property72 = dateTime71.secondOfDay();
        org.joda.time.DateTime dateTime74 = dateTime71.withEra(1);
        org.joda.time.DateTime dateTime76 = dateTime71.plusMillis(0);
        org.joda.time.DateTime.Property property77 = dateTime71.hourOfDay();
        java.util.Locale locale78 = java.util.Locale.ITALY;
        java.lang.String str79 = locale78.getDisplayName();
        int int80 = property77.getMaximumShortTextLength(locale78);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = dateTimeField28.getAsShortText((org.joda.time.ReadablePartial) timeOfDay69, locale78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT0.034S" + "'", str56, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "180" + "'", str68, "180");
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str79, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
    }

    @Test
    public void test2700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2700");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusDays(86399999);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        java.lang.String str29 = mutablePeriod23.toString();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) mutablePeriod23);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusWeeks(0);
        boolean boolean37 = mutablePeriod23.equals((java.lang.Object) 0);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay8.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay40 = property39.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay40.withYear((-292275054));
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.minusDays(4);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay42.withYear(1969);
        org.joda.time.YearMonthDay.Property property47 = yearMonthDay42.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay48 = property47.getYearMonthDay();
        int int49 = yearMonthDay48.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0.034S" + "'", str29, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
    }

    @Test
    public void test2701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2701");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval15.withDurationAfterStart(readableDuration16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        mutableDateTime19.add((long) 1);
        org.joda.time.DateTime dateTime22 = mutableDateTime19.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime19, readableDuration23, periodType24);
        java.lang.String str26 = mutableDateTime19.toString();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime19.millisOfSecond();
        boolean boolean28 = interval15.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        mutableDateTime19.addWeeks(9);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime19.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime19.copy();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfMonth();
        org.joda.time.DateTime dateTime39 = dateTime36.plusSeconds(10);
        org.joda.time.DateTime dateTime41 = dateTime36.minus((long) (short) -1);
        org.joda.time.DateTime dateTime43 = dateTime41.plusMonths(26167775);
        boolean boolean44 = mutableDateTime19.equals((java.lang.Object) dateTime41);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str26, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test2702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2702");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfYear();
        int int8 = property7.getMaximumValue();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        mutableDateTime10.add((long) 1);
        org.joda.time.DateTime dateTime13 = mutableDateTime10.toDateTimeISO();
        mutableDateTime10.addDays((int) (short) 10);
        long long16 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime18 = property7.add(1645514397829L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645514397829 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 365 + "'", int8 == 365);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 35417L + "'", long16 == 35417L);
    }

    @Test
    public void test2703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2703");
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight2.toMutableDateTime();
        mutableDateTime3.add((long) 1);
        org.joda.time.DateTime dateTime6 = mutableDateTime3.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime3, readableDuration7, periodType8);
        java.lang.String str10 = mutableDateTime3.toString();
        org.joda.time.Chronology chronology11 = mutableDateTime3.getChronology();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((long) 1969, chronology11);
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(1645514283598L, chronology11);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = chronology11.getDateTimeMillis(28, 131, 329, 931);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 131 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str10, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test2704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2704");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset((long) 26272873);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test2705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2705");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setValue(0, 2022);
        mutablePeriod8.addDays((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight22.toMutableDateTime();
        mutableDateTime23.add((long) 1);
        org.joda.time.DateTime dateTime26 = mutableDateTime23.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.years();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime23, readableDuration27, periodType28);
        org.joda.time.Chronology chronology30 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        mutablePeriod8.add(35417L, chronology30);
        mutablePeriod8.addDays((int) (byte) -1);
        java.lang.String str35 = mutablePeriod8.toString();
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.yearOfCentury();
        int int38 = dateMidnight36.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight36.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight40.withDurationAdded((long) (byte) 0, (int) (short) 10);
        org.joda.time.DateMidnight.Property property44 = dateMidnight43.dayOfYear();
        org.joda.time.Duration duration45 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.DateMidnight.Property property46 = dateMidnight43.dayOfMonth();
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.now(dateTimeZone48);
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now(dateTimeZone48);
        mutableDateTime50.setDayOfYear(59);
        org.joda.time.Duration duration53 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateMidnight43, (org.joda.time.ReadableInstant) mutableDateTime50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight55 = dateMidnight43.withDayOfYear(26298354);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26298354 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "P2022Y-2DT35.451S" + "'", str35, "P2022Y-2DT35.451S");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
    }

    @Test
    public void test2706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2706");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime localTime3 = localTime0.plusMillis(11);
        int int4 = localTime0.size();
        org.joda.time.LocalTime.Property property5 = localTime0.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addNoWrapToCopy((int) (byte) 1);
        org.joda.time.LocalTime localTime9 = property5.setCopy(20);
        org.joda.time.LocalTime localTime10 = property5.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test2707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2707");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property5 = dateMidnight0.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.minusMonths(22);
        int int8 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight0.minusDays(2122);
        int int11 = dateMidnight0.getYear();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
    }

    @Test
    public void test2708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2708");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay7.hourOfDay();
        java.lang.String str13 = property12.getAsString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "10" + "'", str13, "10");
    }

    @Test
    public void test2709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2709");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.months();
        mutablePeriod12.set(durationFieldType13, (int) 'a');
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfMonth();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType35);
        mutablePeriod32.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        java.lang.String str38 = mutablePeriod32.toString();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Interval interval41 = interval39.withDurationAfterStart(readableDuration40);
        boolean boolean42 = interval23.isBefore((org.joda.time.ReadableInterval) interval39);
        mutablePeriod12.setPeriod((org.joda.time.ReadableInterval) interval23);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType47);
        int int49 = mutablePeriod48.getMonths();
        org.joda.time.Interval interval50 = new org.joda.time.Interval(readableInstant44, (org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.Interval interval51 = interval50.toInterval();
        boolean boolean52 = interval23.isAfter((org.joda.time.ReadableInterval) interval50);
        boolean boolean54 = interval50.isBefore(35417L);
        boolean boolean55 = interval50.isBeforeNow();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime59 = dateTime57.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property60 = dateTime59.dayOfMonth();
        org.joda.time.DateTime dateTime62 = dateTime59.plusSeconds(10);
        org.joda.time.DateTime dateTime64 = dateTime59.plusMonths(2000);
        boolean boolean65 = interval50.isBefore((org.joda.time.ReadableInstant) dateTime64);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0.034S" + "'", str38, "PT0.034S");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test2710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2710");
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        int int9 = mutablePeriod8.getMonths();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(readableInstant4, (org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Chronology chronology11 = interval10.getChronology();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(chronology11);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.weekyearOfCentury();
        org.joda.time.DurationField durationField15 = chronology11.months();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(26164327, 26196307, 16, 249, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26164327 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test2711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2711");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        int int6 = date5.getMonth();
        long long7 = date5.getTime();
        int int8 = date5.getDay();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date5);
        date5.setTime((long) 'u');
        java.util.Date date12 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = date5.after(date12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1966881660000L) + "'", long7 == (-1966881660000L));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test2712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2712");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (short) 10, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundCeiling();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        mutableDateTime6.add((long) 1);
        org.joda.time.DateTime dateTime9 = mutableDateTime6.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime6, readableDuration10, periodType11);
        java.lang.String str13 = mutableDateTime6.toString();
        mutableDateTime6.addMinutes((int) ' ');
        int int16 = mutableDateTime6.getCenturyOfEra();
        mutableDateTime6.setDayOfYear(4);
        mutableDateTime6.setTime(1645514165730L);
        int int21 = property3.compareTo((org.joda.time.ReadableInstant) mutableDateTime6);
        java.util.Calendar.Builder builder22 = new java.util.Calendar.Builder();
        java.util.Date date26 = new java.util.Date(365, 702, 8);
        java.util.Calendar.Builder builder27 = builder22.setInstant(date26);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getTimeZone("1 Jan 2022 00:00:00 GMT");
        java.util.Calendar.Builder builder30 = builder22.setTimeZone(timeZone29);
        boolean boolean31 = property3.equals((java.lang.Object) builder22);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str13, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20 + "'", int16 == 20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Sun Jul 08 00:00:00 GMT 2323");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2713");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getMillisOfSecond();
        java.util.Locale locale3 = java.util.Locale.PRC;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale3);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.fromCalendarFields(calendar4);
        org.joda.time.DateTime dateTime6 = localDateTime5.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withCenturyOfEra(365);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        mutableDateTime10.add((long) 1);
        mutableDateTime10.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime10.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime10.dayOfYear();
        int int17 = property16.getMaximumValue();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        mutableDateTime19.add((long) 1);
        org.joda.time.DateTime dateTime22 = mutableDateTime19.toDateTimeISO();
        mutableDateTime19.addDays((int) (short) 10);
        long long25 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime19.property(dateTimeFieldType26);
        int int28 = localDateTime8.get(dateTimeFieldType26);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfMonth();
        org.joda.time.DateTime dateTime35 = dateTime32.plusSeconds(10);
        org.joda.time.DateTime dateTime37 = dateTime32.minus((long) (short) -1);
        org.joda.time.DateTime dateTime38 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime.Property property40 = dateTime37.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = dateTime37.withDate(931, 482, 147);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 482 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645514439696,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=39,MILLISECOND=696,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 365 + "'", int17 == 365);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 35417L + "'", long25 == 35417L);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test2714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2714");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        mutableDateTime1.addMinutes((int) ' ');
        int int11 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = dateTime14.withWeekOfWeekyear((int) '4');
        boolean boolean20 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property21 = dateTime14.minuteOfDay();
        int int22 = property21.getMinimumValue();
        org.joda.time.DateTime dateTime23 = property21.withMinimumValue();
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTimeISO();
        java.lang.String str25 = dateTime23.toString();
        org.joda.time.DateTime.Property property26 = dateTime23.weekOfWeekyear();
        boolean boolean27 = dateTime23.isAfterNow();
        org.joda.time.DateTime.Property property28 = dateTime23.centuryOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str8, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1969-12-31T00:00:59.999Z" + "'", str25, "1969-12-31T00:00:59.999Z");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test2715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2715");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.weekOfWeekyear();
        boolean boolean6 = dateTime3.equals((java.lang.Object) "months");
        org.joda.time.DateMidnight dateMidnight7 = dateTime3.toDateMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.withEra(357);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 357 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateMidnight7);
    }

    @Test
    public void test2716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2716");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        long long8 = durationField5.getMillis((long) 26180820, 0L);
        long long11 = durationField5.getDifferenceAsLong((long) 22, (long) 26162337);
        long long14 = durationField5.getMillis((long) 26222448, 1645514267L);
        long long16 = durationField5.getValueAsLong(1645488000000L);
        // The following exception was thrown during execution in test generation
        try {
            long long18 = durationField5.getMillis(1569756959999L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1569756959999 * 31556952000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 826186880073600000L + "'", long8 == 826186880073600000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 827500532889600000L + "'", long14 == 827500532889600000L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
    }

    @Test
    public void test2717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2717");
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(100, 4, (int) (byte) 10, (int) (short) 1, (int) (short) 1, (int) '4');
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = org.joda.time.DateMidnight.now();
        int int12 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) dateMidnight11);
        int int13 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime15 = dateMidnight14.toMutableDateTime();
        mutableDateTime15.add((long) 1);
        mutableDateTime15.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone21 = mutableDateTime15.getZone();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight11.withZoneRetainFields(dateTimeZone21);
        int int24 = dateTimeZone21.getStandardOffset(65453555919189L);
        long long28 = dateTimeZone21.convertLocalToUTC(1645514321052L, true, (long) 26334385);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514321052L + "'", long28 == 1645514321052L);
    }

    @Test
    public void test2718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2718");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setValue(0, 2022);
        mutablePeriod8.addDays((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight22.toMutableDateTime();
        mutableDateTime23.add((long) 1);
        org.joda.time.DateTime dateTime26 = mutableDateTime23.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.years();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime23, readableDuration27, periodType28);
        org.joda.time.Chronology chronology30 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        mutablePeriod8.add(35417L, chronology30);
        mutablePeriod8.addDays((int) (byte) -1);
        java.lang.String str35 = mutablePeriod8.toString();
        mutablePeriod8.setPeriod(1645514183800L, (long) 26192581);
        mutablePeriod8.setPeriod(13, 26200578, 3600000, 26162616, 26254453, 26294011, 26347434, 86399999);
        mutablePeriod8.setMinutes(26365373);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "P2022Y-2DT35.451S" + "'", str35, "P2022Y-2DT35.451S");
    }

    @Test
    public void test2719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2719");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours(1);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 399, dateTimeZone2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((java.lang.Object) dateTimeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test2720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2720");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) durationFieldType1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.DurationFieldType$StandardDurationFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
    }

    @Test
    public void test2721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2721");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.months();
        mutablePeriod6.set(durationFieldType7, (int) 'a');
        mutablePeriod6.addHours((int) (byte) -1);
        mutablePeriod6.addYears(2022);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        mutableDateTime18.add((long) 1);
        org.joda.time.DateTime dateTime21 = mutableDateTime18.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.years();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime18, readableDuration22, periodType23);
        java.lang.String str25 = mutableDateTime18.toString();
        org.joda.time.Chronology chronology26 = mutableDateTime18.getChronology();
        mutablePeriod6.setPeriod(1645514159651L, (long) (short) -1, chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.dayOfMonth();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        int[] intArray35 = chronology26.get((org.joda.time.ReadablePeriod) mutablePeriod32, (long) 10, 1645514176224L);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(10L);
        int[] intArray39 = chronology26.get((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 86399);
        org.joda.time.Duration duration41 = org.joda.time.Duration.millis(1645514159651L);
        org.joda.time.Duration duration43 = duration41.minus((-1966881660000L));
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType48);
        int int50 = mutablePeriod49.getMonths();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableInstant45, (org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = chronology52.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.dayOfYear();
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.now(chronology52);
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(chronology52);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 9, chronology52);
        mutablePeriod37.setPeriod((org.joda.time.ReadableDuration) duration43, chronology52);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime61 = dateMidnight60.toMutableDateTime();
        mutableDateTime61.add((long) 1);
        org.joda.time.DateTime dateTime64 = mutableDateTime61.toDateTimeISO();
        mutableDateTime61.addDays((int) (short) 10);
        org.joda.time.Interval interval67 = duration43.toIntervalFrom((org.joda.time.ReadableInstant) mutableDateTime61);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime71 = dateTime69.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property72 = dateTime71.dayOfMonth();
        org.joda.time.DateTime dateTime74 = dateTime71.plusSeconds(10);
        org.joda.time.DateTime dateTime76 = dateTime71.plusMonths(2000);
        boolean boolean77 = interval67.isBefore((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Chronology chronology78 = interval67.getChronology();
        boolean boolean79 = interval67.isAfterNow();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str25, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[52, 1, 3, 0, 7, 16, 16, 214]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 0, 1, 26, 399]");
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test2722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2722");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate(1L, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime4 = dateMidnight3.toMutableDateTime();
        mutableDateTime4.add((long) 1);
        org.joda.time.DateTime dateTime7 = mutableDateTime4.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.years();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime4, readableDuration8, periodType9);
        org.joda.time.Chronology chronology11 = mutableDateTime4.getChronology();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(chronology11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        int int17 = dateTime16.getDayOfMonth();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime20 = dateTime16.minus((org.joda.time.ReadableDuration) duration19);
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean24 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) (byte) 0);
        long long27 = duration26.getStandardDays();
        org.joda.time.Duration duration28 = duration19.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.Duration duration31 = duration26.minus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.years();
        java.lang.String str35 = periodType34.toString();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        int int41 = mutablePeriod40.getMonths();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableInstant36, (org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.Period period44 = new org.joda.time.Period(1645514159731L, (long) 2022, periodType34, chronology43);
        org.joda.time.Period period45 = duration30.toPeriod(periodType34);
        org.joda.time.LocalDate localDate47 = localDate2.withPeriodAdded((org.joda.time.ReadablePeriod) period45, 2022);
        int int48 = period45.getHours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period50 = period45.withMonths(40);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PeriodType[Years]" + "'", str35, "PeriodType[Years]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test2723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2723");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setValue(0, 2022);
        mutablePeriod8.addDays((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight22.toMutableDateTime();
        mutableDateTime23.add((long) 1);
        org.joda.time.DateTime dateTime26 = mutableDateTime23.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.years();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime23, readableDuration27, periodType28);
        org.joda.time.Chronology chronology30 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        mutablePeriod8.add(35417L, chronology30);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekOfWeekyear();
        int int36 = dateTimeField33.getDifference((long) 26196307, 1645514181181L);
        java.lang.String str38 = dateTimeField33.getAsShortText((long) 26365301);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-2720) + "'", int36 == (-2720));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
    }

    @Test
    public void test2724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2724");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusHours((int) (short) 0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.year();
        int int6 = localDateTime2.getEra();
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType13 = periodType12.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        int int28 = mutablePeriod27.getMonths();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableInstant23, (org.joda.time.ReadablePeriod) mutablePeriod27);
        int[] intArray32 = chronology21.get((org.joda.time.ReadablePeriod) mutablePeriod27, 1L, (long) 4);
        org.joda.time.Period period33 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType12, chronology21);
        org.joda.time.Period period34 = new org.joda.time.Period(59L, 100L, chronology21);
        org.joda.time.DateTimeField dateTimeField35 = chronology21.minuteOfHour();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        int int43 = mutablePeriod42.getMonths();
        org.joda.time.Interval interval44 = new org.joda.time.Interval(readableInstant38, (org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.Chronology chronology45 = interval44.getChronology();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) 100, chronology45);
        org.joda.time.DurationField durationField47 = chronology45.centuries();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.dayOfMonth();
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        boolean boolean51 = localDate49.isSupported(dateTimeFieldType50);
        org.joda.time.LocalDate.Property property52 = localDate49.yearOfEra();
        org.joda.time.DateTimeField dateTimeField53 = property52.getField();
        org.joda.time.DurationField durationField54 = property52.getDurationField();
        org.joda.time.LocalDate localDate56 = property52.setCopy(2022);
        org.joda.time.LocalDate localDate57 = property52.roundHalfFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalDate localDate59 = localDate57.plus(readablePeriod58);
        long long61 = chronology45.set((org.joda.time.ReadablePartial) localDate59, (long) 22);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology64 = dateMidnight63.getChronology();
        java.util.Locale locale65 = java.util.Locale.CHINA;
        java.util.Locale locale66 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(locale66);
        java.lang.String str68 = locale65.getDisplayVariant(locale66);
        java.util.Calendar calendar69 = dateMidnight63.toCalendar(locale66);
        java.util.Set<java.lang.String> strSet70 = locale66.getUnicodeLocaleKeys();
        java.lang.String str71 = localDate59.toString("349", locale66);
        java.lang.String str72 = dateTimeField35.getAsText(736, locale66);
        java.lang.String str73 = locale66.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = localDateTime2.toString("2022-02-22T07:19:03.106Z/2022-02-22T07:19:03.140Z", locale66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514440069,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=40,MILLISECOND=69,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1640995200022L + "'", long61 == 1640995200022L);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1645514440069,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=40,MILLISECOND=69,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(calendar69);
        org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "349" + "'", str71, "349");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "736" + "'", str72, "736");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test2725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2725");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        boolean boolean28 = dateTimeFormatter27.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter29 = dateTimeFormatter27.getPrinter();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfYear();
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.now(chronology37);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter27.withChronology(chronology37);
        boolean boolean43 = dateTimeFormatter42.isPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter44 = null;
        org.joda.time.format.DateTimeParser dateTimeParser45 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter44, dateTimeParser45);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType50 = periodType49.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType54);
        int int56 = mutablePeriod55.getMonths();
        org.joda.time.Interval interval57 = new org.joda.time.Interval(readableInstant51, (org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.Chronology chronology58 = interval57.getChronology();
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType63);
        int int65 = mutablePeriod64.getMonths();
        org.joda.time.Interval interval66 = new org.joda.time.Interval(readableInstant60, (org.joda.time.ReadablePeriod) mutablePeriod64);
        int[] intArray69 = chronology58.get((org.joda.time.ReadablePeriod) mutablePeriod64, 1L, (long) 4);
        org.joda.time.Period period70 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType49, chronology58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter46.withChronology(chronology58);
        java.lang.Integer int72 = dateTimeFormatter71.getPivotYear();
        org.joda.time.Chronology chronology73 = dateTimeFormatter71.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter42.withChronology(chronology73);
        java.io.Writer writer75 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter42.printTo(writer75, (long) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(dateTimePrinter29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNull(int72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
    }

    @Test
    public void test2726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2726");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.LocalDate localDate2 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks(13);
        org.joda.time.LocalDate localDate6 = localDate4.plusYears(610);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test2727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2727");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime8 = property7.roundFloorCopy();
        org.joda.time.DateTime.Property property9 = dateTime8.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = property9.addToCopy(1645514207216L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645514207216");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test2728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2728");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime7 = dateTime2.withWeekOfWeekyear((int) '4');
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime.Property property9 = dateTime7.minuteOfDay();
        org.joda.time.DateTime.Property property10 = dateTime7.dayOfMonth();
        org.joda.time.DateTime.Property property11 = dateTime7.secondOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test2729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2729");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        mutableDateTime6.add((long) 1);
        mutableDateTime6.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        mutableDateTime14.add((long) 1);
        org.joda.time.DateTime dateTime17 = mutableDateTime14.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, readableDuration18, periodType19);
        org.joda.time.Chronology chronology21 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(chronology21);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime22.secondOfDay();
        mutableDateTime22.addHours((int) (byte) 100);
        boolean boolean27 = mutableDateTime22.isEqualNow();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime22.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime30 = property28.set(26162430);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26162430 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test2730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2730");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withDurationAdded((long) (byte) 0, (int) (short) 10);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.dayOfYear();
        org.joda.time.Interval interval9 = dateMidnight7.toInterval();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now();
        int int11 = localTime10.size();
        org.joda.time.LocalTime.Property property12 = localTime10.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime14 = localTime10.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded((long) 52, 766);
        org.joda.time.Interval interval18 = interval9.withStart((org.joda.time.ReadableInstant) dateTime17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime17.withDayOfWeek(959);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 959 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval18);
    }

    @Test
    public void test2731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2731");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfSecond(436);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusMonths(2022);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusHours(23);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusYears(2000);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514440225,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=40,MILLISECOND=225,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test2732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2732");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        calendar1.set(2022, (int) (byte) 0, (int) (short) 1, (int) (short) 0, 2022, (int) ' ');
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        calendar1.clear();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        calendar1.setLenient(false);
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime22 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay17.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean28 = timeOfDay24.isSupported(dateTimeFieldType27);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property33 = dateTime32.dayOfMonth();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType40);
        mutablePeriod37.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        java.lang.String str43 = mutablePeriod37.toString();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadablePeriod) mutablePeriod37);
        mutablePeriod37.setValue(0, 2022);
        mutablePeriod37.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay24.plus((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.TimeOfDay.Property property51 = timeOfDay50.millisOfSecond();
        org.joda.time.DurationField durationField52 = property51.getDurationField();
        org.joda.time.TimeOfDay timeOfDay53 = property51.getTimeOfDay();
        java.util.Locale locale54 = java.util.Locale.JAPANESE;
        java.lang.String str55 = locale54.getDisplayScript();
        java.lang.String str56 = property51.getAsText(locale54);
        int int57 = property51.getMaximumValue();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property60 = dateTime59.secondOfDay();
        org.joda.time.DateTime dateTime62 = dateTime59.withEra(1);
        org.joda.time.DateTime dateTime64 = dateTime59.plusMillis(0);
        org.joda.time.DateTime.Property property65 = dateTime59.hourOfDay();
        java.util.Locale locale66 = java.util.Locale.ITALY;
        java.lang.String str67 = locale66.getDisplayName();
        int int68 = property65.getMaximumShortTextLength(locale66);
        java.lang.String str69 = property51.getAsShortText(locale66);
        java.util.Locale locale70 = java.util.Locale.TAIWAN;
        java.lang.String str71 = locale66.getDisplayLanguage(locale70);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap72 = calendar1.getDisplayNames(26296609, 0, locale70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT0.034S" + "'", str43, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "282" + "'", str56, "282");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 999 + "'", int57 == 999);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str67, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "282" + "'", str69, "282");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str71, "\u7fa9\u5927\u5229\u6587");
    }

    @Test
    public void test2733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2733");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime7 = dateMidnight4.toMutableDateTime();
        boolean boolean9 = dateMidnight4.isEqual((long) 2);
        int int10 = dateMidnight3.compareTo((org.joda.time.ReadableInstant) dateMidnight4);
        org.joda.time.Interval interval11 = dateMidnight3.toInterval();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        mutableDateTime13.add((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime13.property(dateTimeFieldType16);
        org.joda.time.Interval interval18 = interval11.withEnd((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.Period period19 = interval11.toPeriod();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        int int25 = mutablePeriod24.getMonths();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(readableInstant20, (org.joda.time.ReadablePeriod) mutablePeriod24);
        boolean boolean27 = interval11.overlaps((org.joda.time.ReadableInterval) interval26);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2734");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.TimeOfDay timeOfDay36 = property34.getTimeOfDay();
        int int37 = timeOfDay36.getMinuteOfHour();
        int int38 = timeOfDay36.getHourOfDay();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((java.lang.Object) "PT0.034S");
        mutablePeriod40.setPeriod(2013, 270, 100, (int) 'x', 2000, 0, 14, (int) (byte) 100);
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay36.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod40, 8);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod40.setValue(26200709, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26200709");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(timeOfDay36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20 + "'", int37 == 20);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 10 + "'", int38 == 10);
        org.junit.Assert.assertNotNull(timeOfDay51);
    }

    @Test
    public void test2735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2735");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.DateTime dateTime9 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property10 = localDateTime2.era();
        int int11 = localDateTime2.getDayOfYear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime2.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime2.withHourOfDay((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514440357,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=40,MILLISECOND=357,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test2736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2736");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfSecond(436);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusSeconds(31);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusSeconds(0);
        int int11 = localDateTime10.getYearOfEra();
        int int12 = localDateTime10.getWeekyear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514440481,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=40,MILLISECOND=481,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
    }

    @Test
    public void test2737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2737");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = timeOfDay7.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay7.minusMillis(26194884);
        int int11 = timeOfDay7.getMinuteOfHour();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        mutableDateTime13.add((long) 1);
        mutableDateTime13.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime13.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime13.dayOfYear();
        int int20 = property19.getMaximumValue();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime22 = dateMidnight21.toMutableDateTime();
        mutableDateTime22.add((long) 1);
        org.joda.time.DateTime dateTime25 = mutableDateTime22.toDateTimeISO();
        mutableDateTime22.addDays((int) (short) 10);
        long long28 = property19.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime22.property(dateTimeFieldType29);
        org.joda.time.MutableDateTime mutableDateTime32 = property30.add((long) 86399999);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime35 = property33.add((int) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int37 = mutableDateTime35.get(dateTimeFieldType36);
        int int38 = timeOfDay7.indexOf(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(timeOfDay10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 365 + "'", int20 == 365);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 35417L + "'", long28 == 35417L);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
    }

    @Test
    public void test2738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2738");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundCeiling();
        java.lang.String str6 = property4.getAsShortText();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime9 = dateTime8.toLocalTime();
        int int10 = property4.compareTo((org.joda.time.ReadablePartial) localTime9);
        org.joda.time.LocalTime localTime12 = localTime9.minusMillis(26283382);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localTime12.getFieldTypes();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
    }

    @Test
    public void test2739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2739");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight11 = yearMonthDay10.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        mutableDateTime13.add((long) 1);
        mutableDateTime13.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime13.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime13.getZone();
        org.joda.time.DateTime dateTime20 = yearMonthDay10.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test2740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2740");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(12);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime7 = dateMidnight6.toMutableDateTime();
        mutableDateTime7.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.months();
        mutableDateTime7.add(durationFieldType10, (int) (byte) 1);
        org.joda.time.DateTime dateTime14 = dateTime5.withFieldAdded(durationFieldType10, 0);
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone17);
        org.joda.time.DateTime dateTime19 = dateTime14.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(32770);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfMonth();
        org.joda.time.DateTime.Property property23 = dateTime21.year();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514440594,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=40,MILLISECOND=594,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test2741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2741");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 436);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType3 = localTime1.getFieldType(855);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 855");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test2742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2742");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) ' ');
        java.util.Locale locale7 = java.util.Locale.PRC;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.fromCalendarFields(calendar8);
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMillisOfDay(436);
        org.joda.time.DateTime dateTime15 = localDateTime12.toDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusWeeks(3);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.plusHours(52);
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime6, (org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime6.minusMillis((-2181354));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514440635,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=40,MILLISECOND=635,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514440635,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=40,MILLISECOND=635,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test2743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2743");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = dateTime1.withYearOfCentury(535);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 535 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test2744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2744");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = localTime1.plusMinutes(0);
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime10 = timeOfDay5.toDateTime((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay5.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.plusMillis((int) (short) -1);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.DateTime dateTime21 = dateTime18.plusSeconds(10);
        org.joda.time.DateTime dateTime23 = dateTime18.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property25 = dateTime23.property(dateTimeFieldType24);
        boolean boolean26 = timeOfDay12.isSupported(dateTimeFieldType24);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        int int34 = mutablePeriod33.getMonths();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(readableInstant29, (org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 100, chronology36);
        org.joda.time.DurationField durationField38 = chronology36.centuries();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.dayOfMonth();
        org.joda.time.Period period40 = new org.joda.time.Period((long) 702, chronology36);
        boolean boolean41 = dateTimeFieldType24.isSupported(chronology36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime.Property property42 = localTime4.property(dateTimeFieldType24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'era' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test2745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2745");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.years();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(chronology13);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.minusMonths((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight17 = yearMonthDay16.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        mutableDateTime19.add((long) 1);
        mutableDateTime19.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime19.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = mutableDateTime19.getZone();
        org.joda.time.DateTime dateTime26 = yearMonthDay16.toDateTimeAtCurrentTime(dateTimeZone25);
        int int28 = dateTimeZone25.getStandardOffset(1L);
        org.joda.time.Chronology chronology29 = chronology4.withZone(dateTimeZone25);
        org.joda.time.DurationField durationField30 = chronology4.halfdays();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test2746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2746");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Interval interval21 = localDate17.toInterval(dateTimeZone20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        boolean boolean38 = interval28.contains((org.joda.time.ReadableInterval) interval36);
        boolean boolean39 = interval21.isBefore((org.joda.time.ReadableInterval) interval36);
        long long40 = interval36.getStartMillis();
        boolean boolean41 = interval6.overlaps((org.joda.time.ReadableInterval) interval36);
        org.joda.time.MutableInterval mutableInterval42 = interval36.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval43 = interval36.toMutableInterval();
        org.joda.time.Period period44 = mutableInterval43.toPeriod();
        int int45 = period44.getSeconds();
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime47 = dateMidnight46.toMutableDateTime();
        mutableDateTime47.add((long) 1);
        org.joda.time.DateTime dateTime50 = mutableDateTime47.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.years();
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime47, readableDuration51, periodType52);
        org.joda.time.Chronology chronology54 = mutableDateTime47.getChronology();
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now(chronology54);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime59 = dateTime57.withDayOfYear((int) (byte) 1);
        int int60 = dateTime59.getDayOfMonth();
        org.joda.time.Duration duration62 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime63 = dateTime59.minus((org.joda.time.ReadableDuration) duration62);
        mutableDateTime55.add((org.joda.time.ReadableDuration) duration62);
        org.joda.time.LocalDate localDate65 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime66 = localDate65.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = localDate65.toDateTimeAtStartOfDay(dateTimeZone67);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.years();
        java.lang.String str70 = periodType69.toString();
        org.joda.time.PeriodType periodType71 = periodType69.withMinutesRemoved();
        org.joda.time.PeriodType periodType72 = periodType69.withMonthsRemoved();
        org.joda.time.Period period73 = duration62.toPeriodFrom((org.joda.time.ReadableInstant) dateTime68, periodType69);
        org.joda.time.PeriodType periodType74 = periodType69.withMonthsRemoved();
        org.joda.time.PeriodType periodType75 = periodType74.withDaysRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period76 = period44.withPeriodType(periodType75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'millis'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645514440719L + "'", long40 == 1645514440719L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "PeriodType[Years]" + "'", str70, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(periodType75);
    }

    @Test
    public void test2747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2747");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        java.lang.String str3 = mutableDateTime2.toString();
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology5 = dateMidnight4.getChronology();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withDayOfMonth(8);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfMonth();
        org.joda.time.DateTime dateTime14 = dateTime11.plusSeconds(10);
        org.joda.time.DateTime dateTime16 = dateTime11.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property18 = dateTime16.property(dateTimeFieldType17);
        int int19 = dateMidnight4.get(dateTimeFieldType17);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime2.property(dateTimeFieldType17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay.Property property21 = yearMonthDay0.property(dateTimeFieldType17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'era' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str3, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test2748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2748");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfYear();
        int int8 = property7.getMaximumValue();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        mutableDateTime10.add((long) 1);
        org.joda.time.DateTime dateTime13 = mutableDateTime10.toDateTimeISO();
        mutableDateTime10.addDays((int) (short) 10);
        long long16 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime10.property(dateTimeFieldType17);
        org.joda.time.MutableDateTime mutableDateTime20 = property18.add((long) 86399999);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime20.toMutableDateTimeISO();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.yearOfCentury();
        int int24 = dateMidnight22.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight22.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.withDurationAdded((long) (byte) 0, (int) (short) 10);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfYear();
        mutableDateTime21.setDate((org.joda.time.ReadableInstant) dateMidnight29);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime21.setMinuteOfHour(26311836);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26311836 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 365 + "'", int8 == 365);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 35417L + "'", long16 == 35417L);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test2749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2749");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = dateTimeField4.getRangeDurationField();
        java.util.Locale locale7 = java.util.Locale.PRC;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        java.lang.String str9 = dateTimeField4.getAsShortText((long) (short) -1, locale7);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale7);
        calendar10.set((int) (short) 100, 26435004, 736, 26172489, 26300068, 26206928);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514440947,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=40,MILLISECOND=947,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1969" + "'", str9, "1969");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=26435004,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=736,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=26172489,MINUTE=26300068,SECOND=26206928,MILLISECOND=947,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test2750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2750");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate7 = property3.setCopy(2022);
        org.joda.time.LocalDate localDate8 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate10 = property3.addToCopy(365);
        org.joda.time.LocalDate localDate12 = property3.setCopy(54);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test2751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2751");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusDays(86399999);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        java.lang.String str29 = mutablePeriod23.toString();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) mutablePeriod23);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusWeeks(0);
        boolean boolean37 = mutablePeriod23.equals((java.lang.Object) 0);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime41 = dateMidnight40.toMutableDateTime();
        int int42 = mutableDateTime41.getYearOfEra();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType45);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.months();
        mutablePeriod46.set(durationFieldType47, (int) 'a');
        mutablePeriod46.addHours((int) (byte) -1);
        mutablePeriod46.addYears(2022);
        mutableDateTime41.add((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime58 = dateMidnight57.toMutableDateTime();
        mutableDateTime58.add((long) 1);
        org.joda.time.DateTime dateTime61 = mutableDateTime58.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.years();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime58, readableDuration62, periodType63);
        java.lang.String str65 = mutableDateTime58.toString();
        org.joda.time.Chronology chronology66 = mutableDateTime58.getChronology();
        mutablePeriod46.setPeriod(1645514159651L, (long) (short) -1, chronology66);
        boolean boolean68 = yearMonthDay8.equals((java.lang.Object) (short) -1);
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime70 = dateMidnight69.toMutableDateTime();
        mutableDateTime70.add((long) 1);
        org.joda.time.DateTime dateTime73 = mutableDateTime70.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.years();
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime70, readableDuration74, periodType75);
        java.lang.String str77 = mutableDateTime70.toString();
        mutableDateTime70.addMinutes((int) ' ');
        int int80 = mutableDateTime70.getCenturyOfEra();
        mutableDateTime70.setDayOfYear(4);
        mutableDateTime70.setTime(1645514165730L);
        org.joda.time.Period period86 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period88 = period86.minusYears(8);
        org.joda.time.Period period90 = period86.withSeconds(11);
        int int91 = period90.getMinutes();
        mutableDateTime70.add((org.joda.time.ReadablePeriod) period90);
        org.joda.time.Period period94 = period90.minusMillis(13);
        org.joda.time.YearMonthDay yearMonthDay95 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) period94);
        int int96 = period94.size();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0.034S" + "'", str29, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str65, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str77, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 20 + "'", int80 == 20);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(yearMonthDay95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 8 + "'", int96 == 8);
    }

    @Test
    public void test2752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2752");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.monthOfYear();
        mutableDateTime1.addYears(100);
        int int6 = mutableDateTime1.getWeekyear();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime8 = dateMidnight7.toMutableDateTime();
        mutableDateTime8.add((long) 1);
        org.joda.time.DateTime dateTime11 = mutableDateTime8.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.era();
        boolean boolean13 = mutableDateTime8.isSupported(dateTimeFieldType12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime8.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.roundHalfFloor();
        mutableDateTime16.add(1645514172000L);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfYear();
        java.util.TimeZone timeZone21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forTimeZone(timeZone21);
        org.joda.time.Interval interval23 = localDate19.toInterval(dateTimeZone22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        int int29 = mutablePeriod28.getMonths();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableInstant24, (org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType35);
        int int37 = mutablePeriod36.getMonths();
        org.joda.time.Interval interval38 = new org.joda.time.Interval(readableInstant32, (org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        boolean boolean40 = interval30.contains((org.joda.time.ReadableInterval) interval38);
        boolean boolean41 = interval23.isBefore((org.joda.time.ReadableInterval) interval38);
        org.joda.time.DateTime dateTime42 = interval38.getStart();
        mutableDateTime16.setTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((long) (byte) 0);
        long long46 = duration45.getMillis();
        org.joda.time.Duration duration48 = new org.joda.time.Duration((long) (byte) 0);
        long long49 = duration48.getMillis();
        int int50 = duration45.compareTo((org.joda.time.ReadableDuration) duration48);
        mutableDateTime16.add((org.joda.time.ReadableDuration) duration48, 30);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration48, 26283382);
        mutableDateTime1.addMillis(26176);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str2, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2122 + "'", int6 == 2122);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test2753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2753");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime2, periodType5);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone9);
        long long12 = dateTimeZone9.previousTransition((long) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(dateTimeZone9);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone9);
        org.joda.time.DateTime dateTime16 = dateTime14.plus((long) 26263259);
        boolean boolean17 = periodType5.equals((java.lang.Object) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfDay(365);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test2754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2754");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.add(4, 0);
        java.time.Instant instant5 = calendar1.toInstant();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime8 = dateMidnight7.toMutableDateTime();
        mutableDateTime8.add((long) 1);
        mutableDateTime8.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime8.getZone();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(0L, dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((java.lang.Object) calendar1, dateTimeZone14);
        boolean boolean17 = dateTimeZone14.isFixed();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514441953,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=41,MILLISECOND=953,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2755");
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType13 = periodType12.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(chronology21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        int int28 = mutablePeriod27.getMonths();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableInstant23, (org.joda.time.ReadablePeriod) mutablePeriod27);
        int[] intArray32 = chronology21.get((org.joda.time.ReadablePeriod) mutablePeriod27, 1L, (long) 4);
        org.joda.time.Period period33 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType12, chronology21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter9.withChronology(chronology21);
        org.joda.time.format.DateTimeParser dateTimeParser35 = dateTimeFormatter34.getParser();
        org.joda.time.Chronology chronology36 = dateTimeFormatter34.getChronology();
        java.util.Locale locale37 = dateTimeFormatter34.getLocale();
        java.lang.Integer int38 = dateTimeFormatter34.getPivotYear();
        org.joda.time.Chronology chronology39 = dateTimeFormatter34.getChronolgy();
        org.joda.time.Chronology chronology40 = chronology39.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(26293596, 26309432, 45, 26392079, 0, 0, 0, chronology40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26392079 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNull(dateTimeParser35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNull(locale37);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
    }

    @Test
    public void test2756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2756");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) '#');
        org.joda.time.LocalDateTime localDateTime5 = dateTime2.toLocalDateTime();
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.yearOfCentury();
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(locale8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.fromCalendarFields(calendar9);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone13);
        long long16 = dateTimeZone13.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime17 = localDateTime10.toDateTime(dateTimeZone13);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = localDateTime10.getFieldType((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.set(dateTimeFieldType19, 26293596);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26293596 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645514442007,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=42,MILLISECOND=7,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
    }

    @Test
    public void test2757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2757");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        int int6 = mutablePeriod5.getMonths();
        org.joda.time.Interval interval7 = new org.joda.time.Interval(readableInstant1, (org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100, chronology8);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property11 = localDate10.dayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = localDate10.toDateMidnight();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateMidnight12);
        java.lang.Object obj14 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType18 = periodType17.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        int int24 = mutablePeriod23.getMonths();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableInstant19, (org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        int int33 = mutablePeriod32.getMonths();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableInstant28, (org.joda.time.ReadablePeriod) mutablePeriod32);
        int[] intArray37 = chronology26.get((org.joda.time.ReadablePeriod) mutablePeriod32, 1L, (long) 4);
        org.joda.time.Period period38 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType17, chronology26);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(obj14, chronology26);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone42);
        org.joda.time.DateTime dateTime44 = localDate39.toDateTimeAtMidnight(dateTimeZone42);
        int int45 = localDate39.getWeekyear();
        org.joda.time.LocalDate localDate47 = localDate39.withDayOfYear((int) (short) 1);
        java.util.Date date48 = localDate47.toDate();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight12.withFields((org.joda.time.ReadablePartial) localDate47);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.Interval interval52 = localDate47.toInterval(dateTimeZone51);
        java.lang.String str53 = interval52.toString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Sat Jan 01 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-01-01T00:00:00.000Z/2022-01-02T00:00:00.000Z" + "'", str53, "2022-01-01T00:00:00.000Z/2022-01-02T00:00:00.000Z");
    }

    @Test
    public void test2758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2758");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        int int7 = mutableDateTime6.getYearOfEra();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.months();
        mutablePeriod11.set(durationFieldType12, (int) 'a');
        mutablePeriod11.addHours((int) (byte) -1);
        mutablePeriod11.addYears(2022);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.LocalTime localTime20 = localTime3.plus((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime23 = dateTime22.toLocalTime();
        org.joda.time.LocalTime localTime25 = localTime23.withMillisOfDay((int) '#');
        org.joda.time.LocalTime.Property property26 = localTime25.minuteOfHour();
        int int27 = localTime3.compareTo((org.joda.time.ReadablePartial) localTime25);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfYear((int) (byte) 1);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableDuration28, (org.joda.time.ReadableInstant) dateTime30, periodType33);
        mutablePeriod34.setYears(999);
        org.joda.time.LocalTime localTime38 = localTime25.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod34, 24);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime40 = dateMidnight39.toMutableDateTime();
        mutableDateTime40.add((long) 1);
        org.joda.time.DateTime dateTime43 = mutableDateTime40.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.years();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime40, readableDuration44, periodType45);
        java.lang.String str47 = mutableDateTime40.toString();
        mutableDateTime40.addMinutes((int) ' ');
        int int50 = mutableDateTime40.getCenturyOfEra();
        mutableDateTime40.setDayOfYear(4);
        mutableDateTime40.setTime(1645514165730L);
        org.joda.time.Period period56 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period58 = period56.minusYears(8);
        org.joda.time.Period period60 = period56.withSeconds(11);
        int int61 = period60.getMinutes();
        mutableDateTime40.add((org.joda.time.ReadablePeriod) period60);
        org.joda.time.Period period64 = period60.minusMillis(13);
        org.joda.time.Period period66 = period60.withSeconds(928);
        org.joda.time.LocalTime localTime67 = localTime38.minus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.Period period69 = period60.minusMinutes(26197883);
        org.joda.time.Hours hours70 = period69.toStandardHours();
        org.joda.time.Period period72 = period69.plusMillis((int) (byte) 0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str47, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 20 + "'", int50 == 20);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(hours70);
        org.junit.Assert.assertNotNull(period72);
    }

    @Test
    public void test2759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2759");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.Duration duration6 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime7 = dateTime3.minus((org.joda.time.ReadableDuration) duration6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = dateTime3.withDayOfMonth((-2181354));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2181354 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test2760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2760");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant(1645514159651L);
        java.util.Calendar.Builder builder4 = builder2.setInstant((long) 2024);
        java.util.Calendar.Builder builder6 = builder4.setLenient(false);
        java.util.Locale locale9 = new java.util.Locale("\ud504\ub791\uc2a4\uc5b4", "it_IT");
        java.util.Calendar.Builder builder10 = builder6.setLocale(locale9);
        java.util.Calendar.Builder builder12 = builder10.setInstant((long) 23);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone("53");
        boolean boolean15 = timeZone14.observesDaylightTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfMonth();
        org.joda.time.DateTime dateTime22 = dateTime19.plusSeconds(10);
        org.joda.time.DateTime.Property property23 = dateTime22.year();
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime29 = timeOfDay24.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay24.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay31.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean35 = timeOfDay31.isSupported(dateTimeFieldType34);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property40 = dateTime39.dayOfMonth();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType43);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType47);
        mutablePeriod44.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        java.lang.String str50 = mutablePeriod44.toString();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadablePeriod) mutablePeriod44);
        mutablePeriod44.setValue(0, 2022);
        mutablePeriod44.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay31.plus((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.TimeOfDay.Property property58 = timeOfDay57.millisOfSecond();
        org.joda.time.DurationField durationField59 = property58.getDurationField();
        org.joda.time.TimeOfDay timeOfDay60 = property58.getTimeOfDay();
        int int61 = property58.getMaximumValueOverall();
        java.util.Locale locale63 = java.util.Locale.CHINA;
        java.util.Locale locale64 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale64);
        java.lang.String str66 = locale63.getDisplayVariant(locale64);
        org.joda.time.TimeOfDay timeOfDay67 = property58.setCopy("1", locale63);
        java.lang.String str68 = property23.getAsShortText(locale63);
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone14, locale63);
        java.util.Calendar.Builder builder70 = builder10.setLocale(locale63);
        java.util.Calendar.Builder builder72 = builder10.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder75 = builder10.setWeekDefinition(26166853, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals(locale9.toString(), "\ud504\ub791\uc2a4\uc5b4_IT_IT");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT0.034S" + "'", str50, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 999 + "'", int61 == 999);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1645514442117,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=42,MILLISECOND=117,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1969" + "'", str68, "1969");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1645514442117,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=42,MILLISECOND=117,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test2761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2761");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.DateMidnight dateMidnight2 = localDate0.toDateMidnight();
        org.joda.time.LocalDate.Property property3 = localDate0.weekOfWeekyear();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property5 = localDate0.year();
        org.joda.time.LocalDate.Property property6 = localDate0.dayOfMonth();
        org.joda.time.LocalDate localDate8 = localDate0.withYear((int) '4');
        org.joda.time.DateTime dateTime9 = localDate8.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test2762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2762");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        boolean boolean33 = interval23.contains((org.joda.time.ReadableInterval) interval31);
        boolean boolean34 = interval6.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((long) 86399);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType40);
        int int42 = mutablePeriod41.getMonths();
        org.joda.time.Interval interval43 = new org.joda.time.Interval(readableInstant37, (org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType49);
        int int51 = mutablePeriod50.getMonths();
        org.joda.time.Interval interval52 = new org.joda.time.Interval(readableInstant46, (org.joda.time.ReadablePeriod) mutablePeriod50);
        int[] intArray55 = chronology44.get((org.joda.time.ReadablePeriod) mutablePeriod50, 1L, (long) 4);
        org.joda.time.PeriodType periodType56 = mutablePeriod50.getPeriodType();
        org.joda.time.Period period57 = duration36.toPeriod(periodType56);
        boolean boolean58 = interval23.equals((java.lang.Object) duration36);
        org.joda.time.DateTime dateTime59 = interval23.getStart();
        org.joda.time.YearMonthDay yearMonthDay60 = dateTime59.toYearMonthDay();
        org.joda.time.Period period62 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period64 = period62.minusYears(8);
        org.joda.time.Period period66 = period62.withSeconds(11);
        int int67 = period66.getMinutes();
        org.joda.time.Period period68 = period66.toPeriod();
        org.joda.time.Period period70 = period66.plusWeeks(11);
        org.joda.time.Period period72 = period66.withMonths(26184964);
        org.joda.time.Period period74 = period66.withYears(292269054);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadablePeriod) period74);
        org.joda.time.DateTime dateTime77 = dateTime59.plusWeeks(26316680);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(dateTime77);
    }

    @Test
    public void test2763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2763");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime3.size();
        org.joda.time.LocalTime.Property property5 = localTime3.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = localTime3.toDateTimeToday(dateTimeZone6);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime1, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology11 = dateMidnight10.getChronology();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        mutablePeriod15.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        java.lang.String str21 = mutablePeriod15.toString();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight10.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight23.withDayOfYear((int) (short) 10);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime33 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType35 = periodType34.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight27, (org.joda.time.ReadableInstant) dateTime30, periodType35);
        int int37 = dateMidnight27.getDayOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) ' ', chronology39);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType43);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.months();
        mutablePeriod44.set(durationFieldType45, (int) 'a');
        mutablePeriod40.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        mutablePeriod44.setDays(0);
        mutablePeriod44.clear();
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime53 = dateMidnight52.toMutableDateTime();
        mutableDateTime53.add((long) 1);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime57 = dateMidnight56.toMutableDateTime();
        mutableDateTime57.add((long) 1);
        org.joda.time.DateTime dateTime60 = mutableDateTime57.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.years();
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime57, readableDuration61, periodType62);
        java.lang.String str64 = mutableDateTime57.toString();
        mutableDateTime57.addMinutes((int) ' ');
        int int67 = mutableDateTime57.getCenturyOfEra();
        mutablePeriod44.setPeriod((org.joda.time.ReadableInstant) mutableDateTime53, (org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight27.plus((org.joda.time.ReadablePeriod) mutablePeriod44);
        mutablePeriod44.addDays(2000);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadablePeriod) mutablePeriod44);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod44);
        int int74 = mutablePeriod44.getSeconds();
        int int75 = mutablePeriod44.getMillis();
        org.joda.time.Period period80 = new org.joda.time.Period(26222448, (int) (short) 0, (-2720), (int) (short) -1);
        mutablePeriod44.add((org.joda.time.ReadablePeriod) period80);
        mutablePeriod44.setMonths(0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.034S" + "'", str21, "PT0.034S");
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str64, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 20 + "'", int67 == 20);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test2764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2764");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay4 = dateTime3.toYearMonthDay();
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withYear(59);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay11 = property8.addToCopy(26164327);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.DateTime dateTime18 = dateTime15.plusSeconds(10);
        org.joda.time.DateTime.Property property19 = dateTime18.year();
        org.joda.time.DateTime dateTime20 = property19.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime22 = dateTime20.minusYears(702);
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.lang.String str25 = dateTime22.toString("1969", locale24);
        int int26 = property8.getMaximumTextLength(locale24);
        java.lang.String str27 = locale24.getDisplayVariant();
        java.util.Locale locale28 = java.util.Locale.CHINA;
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale29);
        java.lang.String str31 = locale28.getDisplayVariant(locale29);
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("GMT");
        java.lang.String str34 = locale29.getDisplayScript(locale33);
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.lang.String str36 = locale35.getDisplayScript();
        java.lang.String str37 = locale35.getLanguage();
        java.lang.String str38 = locale33.getDisplayVariant(locale35);
        java.lang.String str39 = locale24.getDisplayCountry(locale35);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1969" + "'", str25, "1969");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645514443153,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=43,MILLISECOND=153,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "gmt");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ja" + "'", str37, "ja");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test2765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2765");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int8 = dateTime1.get(dateTimeFieldType7);
        org.joda.time.DateTime.Property property9 = dateTime1.monthOfYear();
        org.joda.time.DateTime dateTime11 = dateTime1.minusDays(26192136);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) (short) 10, dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime1.withZone(dateTimeZone13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime16.withTime(2000, 26322, 176, 4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test2766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2766");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        org.joda.time.DateTime.Property property7 = dateTime1.hourOfDay();
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.lang.String str9 = locale8.getDisplayName();
        int int10 = property7.getMaximumShortTextLength(locale8);
        int int11 = property7.getMinimumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str9, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test2767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2767");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        org.joda.time.DateTime.Property property7 = dateTime1.hourOfDay();
        org.joda.time.DateTime dateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime9 = property7.withMinimumValue();
        org.joda.time.LocalTime localTime10 = dateTime9.toLocalTime();
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.fromCalendarFields(calendar12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withMinuteOfHour(0);
        org.joda.time.DateTime dateTime20 = localDateTime13.toDateTime();
        org.joda.time.LocalDateTime.Property property21 = localDateTime13.era();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = localTime10.compareTo((org.joda.time.ReadablePartial) localDateTime13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645514443192,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=43,MILLISECOND=192,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test2768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2768");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        org.joda.time.Chronology chronology9 = mutableDateTime1.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.days();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.weekyearOfCentury();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.DateTime dateTime18 = dateTime15.plusSeconds(10);
        org.joda.time.DateTime dateTime20 = dateTime15.minus((long) (short) -1);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMonths(26167775);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property24 = localDate23.dayOfYear();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.Interval interval27 = localDate23.toInterval(dateTimeZone26);
        long long30 = dateTimeZone26.adjustOffset((long) 11, true);
        long long34 = dateTimeZone26.convertLocalToUTC(1645514159731L, true, (long) (short) 100);
        org.joda.time.DateTime dateTime35 = dateTime20.withZone(dateTimeZone26);
        org.joda.time.Chronology chronology36 = chronology9.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField37 = chronology9.weekyearOfCentury();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str8, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 11L + "'", long30 == 11L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645514159731L + "'", long34 == 1645514159731L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test2769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2769");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Interval interval8 = interval6.withStartMillis(0L);
        org.joda.time.Interval interval9 = interval6.toInterval();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = interval9.withStart(readableInstant10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        int int17 = mutablePeriod16.getMonths();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableInstant12, (org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Interval interval19 = interval18.toInterval();
        boolean boolean20 = interval11.abuts((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.yearOfCentury();
        int int23 = dateMidnight21.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight21.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withDurationAdded((long) (byte) 0, (int) (short) 10);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime30 = dateMidnight29.toMutableDateTime();
        mutableDateTime30.add((long) 1);
        mutableDateTime30.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime30.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone36 = mutableDateTime30.getZone();
        boolean boolean37 = dateTimeZone36.isFixed();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight25.withZoneRetainFields(dateTimeZone36);
        boolean boolean39 = dateMidnight25.isEqualNow();
        boolean boolean40 = interval11.isAfter((org.joda.time.ReadableInstant) dateMidnight25);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2770");
        java.util.Locale locale1 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(locale1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(1L, dateTimeZone4);
        boolean boolean6 = calendar2.before((java.lang.Object) localDate5);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay11 = dateTime10.toYearMonthDay();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        int int17 = mutablePeriod16.getMonths();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableInstant12, (org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(chronology19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        int int26 = mutablePeriod25.getMonths();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableInstant21, (org.joda.time.ReadablePeriod) mutablePeriod25);
        int[] intArray30 = chronology19.get((org.joda.time.ReadablePeriod) mutablePeriod25, 1L, (long) 4);
        org.joda.time.PeriodType periodType31 = mutablePeriod25.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay11.minus((org.joda.time.ReadablePeriod) mutablePeriod25);
        boolean boolean33 = localDate5.isBefore((org.joda.time.ReadablePartial) yearMonthDay11);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now(dateTimeZone35);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        long long40 = dateTimeZone35.getMillisKeepLocal(dateTimeZone38, (long) 2);
        org.joda.time.DateTime dateTime41 = localDate5.toDateTimeAtCurrentTime(dateTimeZone38);
        java.util.TimeZone timeZone42 = dateTimeZone38.toTimeZone();
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) 26365673, dateTimeZone38);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645514443240,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=43,MILLISECOND=240,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 2L + "'", long40 == 2L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
    }

    @Test
    public void test2771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2771");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.LocalDate.Property property4 = localDate0.yearOfEra();
        int int5 = localDate0.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate7 = localDate0.withWeekyear(26160118);
        org.joda.time.LocalDate.Property property8 = localDate7.year();
        org.joda.time.LocalDate localDate9 = property8.roundCeilingCopy();
        org.joda.time.LocalDate localDate10 = property8.withMinimumValue();
        java.util.Date date11 = localDate10.toDate();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfSecond();
        mutableDateTime13.set(dateTimeFieldType14, 0);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        mutableDateTime18.add((long) 1);
        org.joda.time.DateTime dateTime21 = mutableDateTime18.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.years();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime18, readableDuration22, periodType23);
        org.joda.time.Chronology chronology25 = mutableDateTime18.getChronology();
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(chronology25);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime30 = dateTime28.withDayOfYear((int) (byte) 1);
        int int31 = dateTime30.getDayOfMonth();
        org.joda.time.Duration duration33 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime34 = dateTime30.minus((org.joda.time.ReadableDuration) duration33);
        mutableDateTime26.add((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean38 = duration33.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((long) (byte) 0);
        long long41 = duration40.getStandardDays();
        org.joda.time.Duration duration42 = duration33.plus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime48 = dateTime46.withDayOfYear((int) (byte) 1);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(readableDuration44, (org.joda.time.ReadableInstant) dateTime46, periodType49);
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime52 = dateMidnight51.toMutableDateTime();
        mutableDateTime52.add((long) 1);
        org.joda.time.DateTime dateTime55 = mutableDateTime52.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.years();
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime52, readableDuration56, periodType57);
        org.joda.time.Chronology chronology59 = mutableDateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.clockhourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 2, periodType49, chronology59);
        org.joda.time.format.DateTimePrinter dateTimePrinter62 = null;
        org.joda.time.format.DateTimeParser dateTimeParser63 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter62, dateTimeParser63);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType68 = periodType67.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType72);
        int int74 = mutablePeriod73.getMonths();
        org.joda.time.Interval interval75 = new org.joda.time.Interval(readableInstant69, (org.joda.time.ReadablePeriod) mutablePeriod73);
        org.joda.time.Chronology chronology76 = interval75.getChronology();
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay(chronology76);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType81);
        int int83 = mutablePeriod82.getMonths();
        org.joda.time.Interval interval84 = new org.joda.time.Interval(readableInstant78, (org.joda.time.ReadablePeriod) mutablePeriod82);
        int[] intArray87 = chronology76.get((org.joda.time.ReadablePeriod) mutablePeriod82, 1L, (long) 4);
        org.joda.time.Period period88 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType67, chronology76);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = dateTimeFormatter64.withChronology(chronology76);
        org.joda.time.Period period90 = duration42.toPeriod(periodType49, chronology76);
        boolean boolean91 = dateTimeFieldType14.isSupported(chronology76);
        // The following exception was thrown during execution in test generation
        try {
            int int92 = localDate10.get(dateTimeFieldType14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfSecond' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Sun Sep 22 14:25:51 GMT 292272993");
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test2772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2772");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        long long24 = duration23.getStandardDays();
        org.joda.time.Duration duration25 = duration16.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.Duration duration28 = duration23.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.years();
        java.lang.String str32 = periodType31.toString();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        int int38 = mutablePeriod37.getMonths();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableInstant33, (org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.Period period41 = new org.joda.time.Period(1645514159731L, (long) 2022, periodType31, chronology40);
        org.joda.time.Period period42 = duration27.toPeriod(periodType31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period44 = period42.withSeconds(20);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PeriodType[Years]" + "'", str32, "PeriodType[Years]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(period42);
    }

    @Test
    public void test2773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2773");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(0, 451, 26422886, 26365373, 879);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26365373 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2774");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.minusMonths((int) (short) -1);
        int int16 = yearMonthDay13.size();
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        boolean boolean20 = localDate18.isSupported(dateTimeFieldType19);
        org.joda.time.LocalDate.Property property21 = localDate18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        long long24 = dateTimeField22.remainder((long) 10);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        boolean boolean27 = localDate25.isSupported(dateTimeFieldType26);
        int int28 = localDate25.getWeekOfWeekyear();
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.lang.String str30 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDate25, locale29);
        java.lang.String str31 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay13, 2000, locale29);
        org.joda.time.DurationField durationField32 = dateTimeField4.getLeapDurationField();
        java.util.Locale locale33 = java.util.Locale.CANADA_FRENCH;
        int int34 = dateTimeField4.getMaximumShortTextLength(locale33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType38);
        int int40 = mutablePeriod39.getMonths();
        org.joda.time.Interval interval41 = new org.joda.time.Interval(readableInstant35, (org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay(chronology42);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay43.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay43.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay43.minusDays(86399999);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime53 = dateTime51.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property54 = dateTime53.dayOfMonth();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType57);
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType61);
        mutablePeriod58.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod62);
        java.lang.String str64 = mutablePeriod58.toString();
        org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadablePeriod) mutablePeriod58);
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone68);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.minusWeeks(0);
        boolean boolean72 = mutablePeriod58.equals((java.lang.Object) 0);
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay43.minus((org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType76);
        org.joda.time.DurationFieldType durationFieldType78 = org.joda.time.DurationFieldType.months();
        mutablePeriod77.set(durationFieldType78, (int) 'a');
        org.joda.time.ReadableDuration readableDuration81 = null;
        mutablePeriod77.add(readableDuration81);
        org.joda.time.YearMonthDay yearMonthDay83 = yearMonthDay73.minus((org.joda.time.ReadablePeriod) mutablePeriod77);
        org.joda.time.YearMonthDay yearMonthDay85 = yearMonthDay83.plusYears((int) 'a');
        int int86 = dateTimeField4.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay83);
        java.util.Locale locale87 = java.util.Locale.getDefault();
        java.util.Locale locale88 = locale87.stripExtensions();
        int int89 = dateTimeField4.getMaximumTextLength(locale87);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2000" + "'", str31, "2000");
        org.junit.Assert.assertNull(durationField32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_CA");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT0.034S" + "'", str64, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertNotNull(yearMonthDay83);
        org.junit.Assert.assertNotNull(yearMonthDay85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(locale87);
// flaky:         org.junit.Assert.assertEquals(locale87.toString(), "ja");
        org.junit.Assert.assertNotNull(locale88);
// flaky:         org.junit.Assert.assertEquals(locale88.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 9 + "'", int89 == 9);
    }

    @Test
    public void test2775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2775");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.DateTimeField dateTimeField36 = property34.getField();
        int int37 = property34.get();
        org.joda.time.TimeOfDay timeOfDay38 = property34.withMinimumValue();
        int int39 = property34.get();
        org.joda.time.TimeOfDay timeOfDay41 = property34.setCopy("857");
        java.lang.String str42 = timeOfDay41.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 244 + "'", int37 == 244);
        org.junit.Assert.assertNotNull(timeOfDay38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 244 + "'", int39 == 244);
        org.junit.Assert.assertNotNull(timeOfDay41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "T10:20:44.857" + "'", str42, "T10:20:44.857");
    }

    @Test
    public void test2776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2776");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        boolean boolean3 = localDate1.isSupported(dateTimeFieldType2);
        org.joda.time.LocalDate.Property property4 = localDate1.yearOfEra();
        org.joda.time.Interval interval5 = localDate1.toInterval();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.days();
        org.joda.time.LocalDate localDate8 = localDate1.withFieldAdded(durationFieldType6, 20);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property10 = localDate9.dayOfYear();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.Interval interval13 = localDate9.toInterval(dateTimeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = localDate8.toDateMidnight(dateTimeZone12);
        java.lang.Object obj16 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType20 = periodType19.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        int int26 = mutablePeriod25.getMonths();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(readableInstant21, (org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.Chronology chronology28 = interval27.getChronology();
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(chronology28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        int[] intArray39 = chronology28.get((org.joda.time.ReadablePeriod) mutablePeriod34, 1L, (long) 4);
        org.joda.time.Period period40 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType19, chronology28);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate(obj16, chronology28);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone44);
        org.joda.time.DateTime dateTime46 = localDate41.toDateTimeAtMidnight(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = localDate8.toDateTimeAtMidnight(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) 14, dateTimeZone44);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType52);
        int int54 = mutablePeriod53.getMonths();
        org.joda.time.Interval interval55 = new org.joda.time.Interval(readableInstant49, (org.joda.time.ReadablePeriod) mutablePeriod53);
        org.joda.time.Chronology chronology56 = interval55.getChronology();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Interval interval58 = interval55.withDurationAfterStart(readableDuration57);
        boolean boolean59 = dateTimeZone44.equals((java.lang.Object) readableDuration57);
        long long62 = dateTimeZone44.adjustOffset(1645514202107L, true);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1645514202107L + "'", long62 == 1645514202107L);
    }

    @Test
    public void test2777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2777");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period3 = period1.minusYears(8);
        org.joda.time.Period period5 = period1.withYears(2);
        org.joda.time.Period period7 = period5.plusMillis((int) (byte) 10);
        org.joda.time.Period period9 = period5.withMillis(26196307);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = period9.getValue(26340276);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26340276");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test2778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2778");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromDateFields(date5);
        org.joda.time.LocalTime localTime8 = localTime6.withMillisOfDay(26223340);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime11 = localTime9.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutablePeriod13.add(readableDuration14);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.months();
        mutablePeriod20.set(durationFieldType21, (int) 'a');
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) (short) 100, chronology32);
        boolean boolean34 = durationFieldType21.isSupported(chronology32);
        mutablePeriod13.setPeriod((long) '4', chronology32);
        org.joda.time.LocalTime localTime36 = localTime11.minus((org.joda.time.ReadablePeriod) mutablePeriod13);
        int int37 = localTime36.getMillisOfSecond();
        org.joda.time.Period period39 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period41 = period39.minusYears(8);
        org.joda.time.Period period43 = period39.withSeconds(11);
        int int44 = period43.getMinutes();
        org.joda.time.Period period45 = period43.toPeriod();
        org.joda.time.Period period47 = period43.plusWeeks(11);
        org.joda.time.Period period49 = period43.withDays(270);
        org.joda.time.LocalTime localTime50 = localTime36.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        long long53 = duration52.getStandardDays();
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone56);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime57.weekOfWeekyear();
        mutableDateTime57.setSecondOfMinute((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime57.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration52, (org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.LocalTime localTime63 = localTime36.minus((org.joda.time.ReadablePeriod) mutablePeriod62);
        org.joda.time.LocalTime localTime64 = localTime6.withFields((org.joda.time.ReadablePartial) localTime63);
        org.joda.time.LocalTime localTime66 = localTime64.withMillisOfDay(26391959);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 287 + "'", int37 == 287);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime66);
    }

    @Test
    public void test2779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2779");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-22T07:16:04.334Z", (double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-22t07:16:04.334z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2780");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        org.joda.time.Chronology chronology9 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.weekOfWeekyear();
        org.joda.time.DurationField durationField11 = dateTimeField10.getRangeDurationField();
        java.util.Locale locale13 = java.util.Locale.CHINA;
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        java.lang.String str16 = locale13.getDisplayVariant(locale14);
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("GMT");
        java.lang.String str19 = locale14.getDisplayScript(locale18);
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = locale20.getDisplayScript();
        java.lang.String str22 = locale20.getLanguage();
        java.lang.String str23 = locale18.getDisplayVariant(locale20);
        java.lang.String str24 = dateTimeField10.getAsShortText((long) 17, locale20);
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime30 = timeOfDay25.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay25.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay32.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean36 = timeOfDay32.isSupported(dateTimeFieldType35);
        int int37 = timeOfDay32.getHourOfDay();
        int int38 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay32);
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = timeOfDay40.getFieldTypes();
        org.joda.time.Chronology chronology42 = timeOfDay40.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.halfdayOfDay();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime46 = dateTime45.toLocalTime();
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.now();
        int int48 = localTime46.compareTo((org.joda.time.ReadablePartial) localTime47);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime50 = dateMidnight49.toMutableDateTime();
        int int51 = mutableDateTime50.getYearOfEra();
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType54);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.months();
        mutablePeriod55.set(durationFieldType56, (int) 'a');
        mutablePeriod55.addHours((int) (byte) -1);
        mutablePeriod55.addYears(2022);
        mutableDateTime50.add((org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.LocalTime localTime64 = localTime47.plus((org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.LocalTime localTime66 = localTime64.plusSeconds(100);
        org.joda.time.LocalTime localTime68 = localTime64.plusSeconds(2922789);
        java.util.Locale locale69 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str70 = dateTimeField43.getAsShortText((org.joda.time.ReadablePartial) localTime64, locale69);
        int int71 = dateTimeField43.getMaximumValue();
        java.util.Locale.Builder builder73 = new java.util.Locale.Builder();
        java.util.Locale locale74 = java.util.Locale.FRENCH;
        java.util.Locale.Builder builder75 = builder73.setLocale(locale74);
        java.lang.String str76 = locale74.getVariant();
        java.lang.String str77 = dateTimeField43.getAsShortText(1645514267491L, locale74);
        java.lang.String str78 = dateTimeField10.getAsShortText(1645514325771L, locale74);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str8, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1645514444350,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=44,MILLISECOND=350,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "gmt");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ja" + "'", str22, "ja");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "AM" + "'", str70, "AM");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "fr");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "AM" + "'", str77, "AM");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "8" + "'", str78, "8");
    }

    @Test
    public void test2781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2781");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfSecond();
        int int6 = localTime2.size();
        int int7 = localTime2.getHourOfDay();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
    }

    @Test
    public void test2782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2782");
        java.util.Date date6 = new java.util.Date(4, (int) (byte) 100, (int) (short) 0, (int) (short) 0, (int) '4', 2);
        date6.setHours((int) (short) 100);
        date6.setHours(10);
        date6.setMinutes(11);
        org.joda.time.YearMonthDay yearMonthDay13 = org.joda.time.YearMonthDay.fromDateFields(date6);
        java.lang.String str14 = date6.toString();
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Apr 30 10:11:02 GMT 1912");
        org.junit.Assert.assertNotNull(yearMonthDay13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Tue Apr 30 10:11:02 GMT 1912" + "'", str14, "Tue Apr 30 10:11:02 GMT 1912");
    }

    @Test
    public void test2783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2783");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.era();
        org.joda.time.DurationField durationField10 = dateTimeField9.getRangeDurationField();
        int int11 = dateTimeField9.getMaximumValue();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test2784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2784");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        int int4 = localDate0.getEra();
        int int6 = localDate0.getValue(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = localDate0.withDayOfWeek(37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
    }

    @Test
    public void test2785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2785");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.months();
        mutablePeriod12.set(durationFieldType13, (int) 'a');
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfMonth();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType35);
        mutablePeriod32.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        java.lang.String str38 = mutablePeriod32.toString();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Interval interval41 = interval39.withDurationAfterStart(readableDuration40);
        boolean boolean42 = interval23.isBefore((org.joda.time.ReadableInterval) interval39);
        mutablePeriod12.setPeriod((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime45 = dateMidnight44.toMutableDateTime();
        java.lang.String str46 = mutableDateTime45.toString();
        mutableDateTime45.setMonthOfYear(1);
        mutableDateTime45.addWeekyears(4);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.LocalDate localDate53 = org.joda.time.LocalDate.now(dateTimeZone52);
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime45.toMutableDateTime(dateTimeZone52);
        mutableDateTime54.addDays((int) (short) -1);
        boolean boolean57 = interval23.equals((java.lang.Object) mutableDateTime54);
        boolean boolean59 = interval23.contains(1646352000001L);
        org.joda.time.Period period60 = interval23.toPeriod();
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0.034S" + "'", str38, "PT0.034S");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str46, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period60);
    }

    @Test
    public void test2786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2786");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        int int15 = mutablePeriod14.getMonths();
        org.joda.time.Interval interval16 = new org.joda.time.Interval(readableInstant10, (org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.Chronology chronology17 = interval16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(chronology17);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.minusMonths((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime22 = dateMidnight21.toMutableDateTime();
        mutableDateTime22.add((long) 1);
        org.joda.time.DateTime dateTime25 = mutableDateTime22.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.years();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime22, readableDuration26, periodType27);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay20.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfMonth();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType37);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        mutablePeriod38.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod42);
        java.lang.String str44 = mutablePeriod38.toString();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadablePeriod) mutablePeriod38);
        int int46 = mutablePeriod38.getMonths();
        mutablePeriod38.setPeriod((long) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay20.minus((org.joda.time.ReadablePeriod) mutablePeriod38);
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleKeys();
        java.lang.String str53 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay49, 2024, locale51);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT0.034S" + "'", str44, "PT0.034S");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2024" + "'", str53, "2024");
    }

    @Test
    public void test2787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2787");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology4 = dateMidnight3.getChronology();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDayOfMonth(8);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.DateTime dateTime13 = dateTime10.plusSeconds(10);
        org.joda.time.DateTime dateTime15 = dateTime10.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        int int18 = dateMidnight3.get(dateTimeFieldType16);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime1.property(dateTimeFieldType16);
        java.lang.String str20 = dateTimeFieldType16.getName();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str2, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "era" + "'", str20, "era");
    }

    @Test
    public void test2788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2788");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Interval interval21 = localDate17.toInterval(dateTimeZone20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        boolean boolean38 = interval28.contains((org.joda.time.ReadableInterval) interval36);
        boolean boolean39 = interval21.isBefore((org.joda.time.ReadableInterval) interval36);
        long long40 = interval36.getStartMillis();
        boolean boolean41 = interval6.overlaps((org.joda.time.ReadableInterval) interval36);
        org.joda.time.DateTime dateTime42 = interval6.getEnd();
        java.lang.String str43 = interval6.toString();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType47);
        int int49 = mutablePeriod48.getMonths();
        org.joda.time.Interval interval50 = new org.joda.time.Interval(readableInstant44, (org.joda.time.ReadablePeriod) mutablePeriod48);
        boolean boolean51 = interval6.isBefore((org.joda.time.ReadableInterval) interval50);
        org.joda.time.DateTime dateTime52 = interval50.getStart();
        org.joda.time.DateTime dateTime54 = dateTime52.withSecondOfMinute((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645514444576L + "'", long40 == 1645514444576L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T07:20:44.576Z/2022-02-22T07:20:44.610Z" + "'", str43, "2022-02-22T07:20:44.576Z/2022-02-22T07:20:44.610Z");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
    }

    @Test
    public void test2789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2789");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusYears((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withYear((int) (byte) 0);
        org.joda.time.DateMidnight.Property property7 = dateMidnight4.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight9 = property7.addToCopy(12);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.plusYears((int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withDurationAdded((-3600000L), (-1613978169));
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight14);
    }

    @Test
    public void test2790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2790");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        mutableDateTime6.add((long) 1);
        mutableDateTime6.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        mutableDateTime14.add((long) 1);
        org.joda.time.DateTime dateTime17 = mutableDateTime14.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, readableDuration18, periodType19);
        org.joda.time.Chronology chronology21 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(chronology21);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime22.secondOfDay();
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) (byte) 0);
        long long27 = duration26.getMillis();
        long long28 = duration26.getMillis();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime22, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.Period period30 = period29.normalizedStandard();
        org.joda.time.Period period32 = period30.multipliedBy(879);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
    }

    @Test
    public void test2791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2791");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateTime dateTime9 = dateTime3.plusYears((-1));
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks((int) (short) 100);
        org.joda.time.DateTime.Property property12 = dateTime9.millisOfSecond();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone15);
        long long18 = dateTimeZone15.previousTransition((long) (short) -1);
        org.joda.time.DateMidnight dateMidnight19 = org.joda.time.DateMidnight.now(dateTimeZone15);
        org.joda.time.DateTime dateTime20 = dateTime9.withZone(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test2792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2792");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime.Property property3 = localTime2.millisOfSecond();
        int int4 = localTime2.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = localTime2.toString("Tue Aug 04 03:59:00 GMT 2186550");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 23 + "'", int4 == 23);
    }

    @Test
    public void test2793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2793");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime7 = dateMidnight4.toMutableDateTime();
        boolean boolean9 = dateMidnight4.isEqual((long) 2);
        int int10 = dateMidnight3.compareTo((org.joda.time.ReadableInstant) dateMidnight4);
        boolean boolean12 = dateMidnight4.isBefore(295620100L);
        org.joda.time.YearMonthDay yearMonthDay13 = dateMidnight4.toYearMonthDay();
        org.joda.time.LocalDate localDate14 = dateMidnight4.toLocalDate();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight4.withMillis(1645514212789L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight18 = dateMidnight4.withDayOfMonth(429);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 429 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test2794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2794");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval3 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        long long4 = interval3.getEndMillis();
        long long5 = interval3.toDurationMillis();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableDuration6, (org.joda.time.ReadableInstant) dateTime8, periodType11);
        org.joda.time.DateTime dateTime14 = dateTime8.plusHours(26200578);
        boolean boolean15 = interval3.contains((org.joda.time.ReadableInstant) dateTime14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime14.withWeekOfWeekyear(26413696);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26413696 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2795");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight11.toMutableDateTime();
        mutableDateTime12.add((long) 1);
        org.joda.time.DateTime dateTime15 = mutableDateTime12.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime12, readableDuration16, periodType17);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay10.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Chronology chronology20 = yearMonthDay10.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfMinute();
        int int23 = dateTimeField21.getLeapAmount((-19045L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test2796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2796");
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutablePeriod3.add(readableDuration4);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.months();
        mutablePeriod10.set(durationFieldType11, (int) 'a');
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        int int20 = mutablePeriod19.getMonths();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) (short) 100, chronology22);
        boolean boolean24 = durationFieldType11.isSupported(chronology22);
        mutablePeriod3.setPeriod((long) '4', chronology22);
        int[] intArray26 = mutablePeriod3.getValues();
        org.joda.time.Period period28 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period30 = period28.minusYears(8);
        org.joda.time.Period period32 = period28.withSeconds(11);
        int int33 = period32.getMinutes();
        org.joda.time.Period period34 = period32.toPeriod();
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = null;
        boolean boolean37 = localDate35.isSupported(dateTimeFieldType36);
        org.joda.time.LocalDate.Property property38 = localDate35.yearOfEra();
        org.joda.time.DateTimeField dateTimeField39 = property38.getField();
        org.joda.time.DurationField durationField40 = property38.getDurationField();
        boolean boolean41 = durationField40.isPrecise();
        boolean boolean42 = period32.equals((java.lang.Object) boolean41);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime44 = dateMidnight43.toMutableDateTime();
        mutableDateTime44.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.months();
        mutableDateTime44.add(durationFieldType47, (int) (byte) 1);
        org.joda.time.Period period51 = period32.withFieldAdded(durationFieldType47, 70);
        mutablePeriod3.set(durationFieldType47, 2);
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime55 = dateMidnight54.toMutableDateTime();
        mutableDateTime55.add((long) 1);
        org.joda.time.DateTime dateTime58 = mutableDateTime55.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.years();
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime55, readableDuration59, periodType60);
        java.lang.String str62 = mutableDateTime55.toString();
        org.joda.time.Chronology chronology63 = mutableDateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.weekOfWeekyear();
        org.joda.time.DurationField durationField65 = durationFieldType47.getField(chronology63);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((long) 26296609, chronology63);
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay(26215723L, chronology63);
        // The following exception was thrown during execution in test generation
        try {
            long long72 = chronology63.getDateTimeMillis((int) (byte) -1, 4, 26229404, 26299664);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26229404 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 52]");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str62, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
    }

    @Test
    public void test2797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2797");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.era();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withYearOfEra(3600000);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight0.withCenturyOfEra((int) (short) 0);
        org.joda.time.Duration duration7 = new org.joda.time.Duration((long) 86399);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTime();
        mutableDateTime9.add((long) 1);
        org.joda.time.DateTime dateTime12 = mutableDateTime9.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.years();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime9, readableDuration13, periodType14);
        org.joda.time.Chronology chronology16 = mutableDateTime9.getChronology();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(chronology16);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear((int) (byte) 1);
        int int22 = dateTime21.getDayOfMonth();
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime25 = dateTime21.minus((org.joda.time.ReadableDuration) duration24);
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean29 = duration24.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((long) (byte) 0);
        long long32 = duration31.getStandardDays();
        org.joda.time.Duration duration33 = duration24.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.Duration duration36 = duration31.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime40 = dateTime38.withDayOfYear((int) (byte) 1);
        int int41 = dateTime40.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime43 = dateMidnight42.toMutableDateTime();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.DateTime dateTime46 = dateTime40.plusYears((-1));
        org.joda.time.Chronology chronology47 = dateTime40.getChronology();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime52 = dateTime50.withCenturyOfEra((int) (byte) 0);
        java.util.Date date58 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay59 = org.joda.time.YearMonthDay.fromDateFields(date58);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay59.minusYears(2022);
        org.joda.time.DateTime dateTime62 = dateTime50.withFields((org.joda.time.ReadablePartial) yearMonthDay59);
        org.joda.time.Period period63 = duration35.toPeriodTo((org.joda.time.ReadableInstant) dateTime50);
        boolean boolean64 = duration7.isEqual((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight0.withDurationAdded((org.joda.time.ReadableDuration) duration35, 26337997);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight66.withDurationAdded(0L, 0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertEquals(date58.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateMidnight69);
    }

    @Test
    public void test2798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2798");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.TimeOfDay timeOfDay36 = property34.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay38 = property34.addToCopy(5);
        org.joda.time.TimeOfDay.Property property39 = timeOfDay38.millisOfSecond();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime43 = dateTime41.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property44 = dateTime43.dayOfMonth();
        org.joda.time.DateTime dateTime46 = dateTime43.plusSeconds(10);
        org.joda.time.DateTime.Property property47 = dateTime46.year();
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime52 = dateTime50.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime53 = timeOfDay48.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay48.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay55.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean59 = timeOfDay55.isSupported(dateTimeFieldType58);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime63 = dateTime61.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property64 = dateTime63.dayOfMonth();
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType67);
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType71);
        mutablePeriod68.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod72);
        java.lang.String str74 = mutablePeriod68.toString();
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadablePeriod) mutablePeriod68);
        mutablePeriod68.setValue(0, 2022);
        mutablePeriod68.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay81 = timeOfDay55.plus((org.joda.time.ReadablePeriod) mutablePeriod68);
        org.joda.time.TimeOfDay.Property property82 = timeOfDay81.millisOfSecond();
        org.joda.time.DurationField durationField83 = property82.getDurationField();
        org.joda.time.TimeOfDay timeOfDay84 = property82.getTimeOfDay();
        int int85 = property82.getMaximumValueOverall();
        java.util.Locale locale87 = java.util.Locale.CHINA;
        java.util.Locale locale88 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar89 = java.util.Calendar.getInstance(locale88);
        java.lang.String str90 = locale87.getDisplayVariant(locale88);
        org.joda.time.TimeOfDay timeOfDay91 = property82.setCopy("1", locale87);
        java.lang.String str92 = property47.getAsShortText(locale87);
        int int93 = property39.getMaximumShortTextLength(locale87);
        org.joda.time.DateTimeField dateTimeField94 = property39.getField();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "PT0.034S" + "'", str74, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(timeOfDay84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 999 + "'", int85 == 999);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar89);
// flaky:         org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=1645514444796,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=44,MILLISECOND=796,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(timeOfDay91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "1969" + "'", str92, "1969");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 3 + "'", int93 == 3);
        org.junit.Assert.assertNotNull(dateTimeField94);
    }

    @Test
    public void test2799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2799");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.dayOfYear();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.minusMonths((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight16.toMutableDateTime();
        mutableDateTime17.add((long) 1);
        org.joda.time.DateTime dateTime20 = mutableDateTime17.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime17, readableDuration21, periodType22);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay15.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Seconds seconds25 = period23.toStandardSeconds();
        org.joda.time.Period period27 = period23.minusMillis(0);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period23);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test2800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2800");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval3 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        long long4 = interval3.getEndMillis();
        long long5 = interval3.toDurationMillis();
        org.joda.time.Chronology chronology6 = interval3.getChronology();
        org.joda.time.DateTime dateTime7 = interval3.getStart();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        boolean boolean24 = interval14.contains((org.joda.time.ReadableInterval) interval22);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        int int38 = mutablePeriod37.getMonths();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableInstant33, (org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        boolean boolean41 = interval31.contains((org.joda.time.ReadableInterval) interval39);
        boolean boolean42 = interval14.overlaps((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) 86399);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType48);
        int int50 = mutablePeriod49.getMonths();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableInstant45, (org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType57);
        int int59 = mutablePeriod58.getMonths();
        org.joda.time.Interval interval60 = new org.joda.time.Interval(readableInstant54, (org.joda.time.ReadablePeriod) mutablePeriod58);
        int[] intArray63 = chronology52.get((org.joda.time.ReadablePeriod) mutablePeriod58, 1L, (long) 4);
        org.joda.time.PeriodType periodType64 = mutablePeriod58.getPeriodType();
        org.joda.time.Period period65 = duration44.toPeriod(periodType64);
        boolean boolean66 = interval31.equals((java.lang.Object) duration44);
        org.joda.time.DateTime dateTime67 = interval31.getStart();
        org.joda.time.Interval interval68 = interval3.gap((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Period period69 = interval31.toPeriod();
        org.joda.time.MutableInterval mutableInterval70 = interval31.toMutableInterval();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(mutableInterval70);
    }

    @Test
    public void test2801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2801");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology4 = dateMidnight3.getChronology();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDayOfMonth(8);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.DateTime dateTime13 = dateTime10.plusSeconds(10);
        org.joda.time.DateTime dateTime15 = dateTime10.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        int int18 = dateMidnight3.get(dateTimeFieldType16);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime1.property(dateTimeFieldType16);
        java.util.Date date20 = mutableDateTime1.toDate();
        java.time.Instant instant21 = date20.toInstant();
        org.joda.time.YearMonthDay yearMonthDay22 = org.joda.time.YearMonthDay.fromDateFields(date20);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str2, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
    }

    @Test
    public void test2802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2802");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        int int9 = mutablePeriod3.getMonths();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.yearOfCentury();
        int int12 = dateMidnight10.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime18 = timeOfDay13.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        boolean boolean19 = dateMidnight10.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime21 = dateMidnight20.toMutableDateTime();
        mutableDateTime21.add((long) 1);
        mutableDateTime21.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime21.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime21.dayOfYear();
        int int28 = property27.getMaximumValue();
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime30 = dateMidnight29.toMutableDateTime();
        mutableDateTime30.add((long) 1);
        org.joda.time.DateTime dateTime33 = mutableDateTime30.toDateTimeISO();
        mutableDateTime30.addDays((int) (short) 10);
        long long36 = property27.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.property(dateTimeFieldType37);
        org.joda.time.DateMidnight.Property property39 = dateMidnight10.property(dateTimeFieldType37);
        org.joda.time.DateMidnight dateMidnight40 = org.joda.time.DateMidnight.now();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = timeOfDay43.getFieldTypes();
        org.joda.time.Chronology chronology45 = timeOfDay43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.halfdayOfDay();
        mutablePeriod3.add(63113900220000L, chronology45);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime(chronology45);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 365 + "'", int28 == 365);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 35417L + "'", long36 == 35417L);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
    }

    @Test
    public void test2803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2803");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean24 = duration16.isLongerThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime28 = dateTime26.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfMonth();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        mutablePeriod33.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        java.lang.String str39 = mutablePeriod33.toString();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadablePeriod) mutablePeriod33);
        mutablePeriod33.setValue(0, 2022);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((long) (byte) 0);
        long long49 = duration48.getMillis();
        org.joda.time.Duration duration51 = new org.joda.time.Duration((long) (byte) 0);
        long long52 = duration51.getMillis();
        int int53 = duration48.compareTo((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration55 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration51, 10);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime57 = dateMidnight56.toMutableDateTime();
        mutableDateTime57.add((long) 1);
        org.joda.time.DateTime dateTime60 = mutableDateTime57.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.years();
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime57, readableDuration61, periodType62);
        org.joda.time.Chronology chronology64 = mutableDateTime57.getChronology();
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.now(chronology64);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime69 = dateTime67.withDayOfYear((int) (byte) 1);
        int int70 = dateTime69.getDayOfMonth();
        org.joda.time.Duration duration72 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime73 = dateTime69.minus((org.joda.time.ReadableDuration) duration72);
        mutableDateTime65.add((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Duration duration76 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean77 = duration72.isShorterThan((org.joda.time.ReadableDuration) duration76);
        org.joda.time.Duration duration79 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean80 = duration72.isLongerThan((org.joda.time.ReadableDuration) duration79);
        org.joda.time.Duration duration82 = duration51.withDurationAdded((org.joda.time.ReadableDuration) duration79, 999);
        boolean boolean83 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration79);
        org.joda.time.Days days84 = duration23.toStandardDays();
        org.joda.time.Duration duration85 = duration23.toDuration();
        org.joda.time.Duration duration87 = org.joda.time.Duration.standardDays((long) 26172489);
        int int88 = duration23.compareTo((org.joda.time.ReadableDuration) duration87);
        org.joda.time.ReadableDuration readableDuration89 = null;
        org.joda.time.DateTime dateTime91 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval92 = new org.joda.time.Interval(readableDuration89, (org.joda.time.ReadableInstant) dateTime91);
        long long93 = interval92.getEndMillis();
        long long94 = interval92.toDurationMillis();
        org.joda.time.Chronology chronology95 = interval92.getChronology();
        org.joda.time.DateTime dateTime96 = interval92.getStart();
        org.joda.time.TimeOfDay timeOfDay97 = dateTime96.toTimeOfDay();
        org.joda.time.Interval interval98 = duration23.toIntervalTo((org.joda.time.ReadableInstant) dateTime96);
        java.lang.String str99 = duration23.toString();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT0.034S" + "'", str39, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(days84);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-1L) + "'", long93 == (-1L));
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 0L + "'", long94 == 0L);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(timeOfDay97);
        org.junit.Assert.assertNotNull(interval98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "PT0S" + "'", str99, "PT0S");
    }

    @Test
    public void test2804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2804");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight0.toMutableDateTime();
        boolean boolean5 = dateMidnight0.isEqual((long) 2);
        int int6 = dateMidnight0.getMillisOfDay();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDate7.isSupported(dateTimeFieldType8);
        org.joda.time.LocalDate.Property property10 = localDate7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        long long13 = dateTimeField11.remainder((long) 10);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        int int17 = localDate14.getWeekOfWeekyear();
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localDate14, locale18);
        java.util.Calendar calendar20 = dateMidnight0.toCalendar(locale18);
        org.joda.time.DateMidnight.Property property21 = dateMidnight0.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight22 = property21.roundCeilingCopy();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("53");
        boolean boolean25 = timeZone24.observesDaylightTime();
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str27 = locale26.getCountry();
        java.util.Locale locale28 = java.util.Locale.CANADA_FRENCH;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology30 = dateMidnight29.getChronology();
        java.util.Locale locale31 = java.util.Locale.CHINA;
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale32);
        java.lang.String str34 = locale31.getDisplayVariant(locale32);
        java.util.Calendar calendar35 = dateMidnight29.toCalendar(locale32);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale32.getDisplayCountry(locale36);
        java.lang.String str38 = locale28.getDisplayLanguage(locale36);
        java.lang.String str39 = locale26.getDisplayLanguage(locale28);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone24, locale28);
        java.lang.String str41 = locale28.getDisplayName();
        int int42 = property21.getMaximumTextLength(locale28);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "CA" + "'", str27, "CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645514445057,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=45,MILLISECOND=57,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str38, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "fran\347ais" + "'", str39, "fran\347ais");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1645514445057,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=45,MILLISECOND=57,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30ab\u30ca\u30c0)" + "'", str41, "\u30d5\u30e9\u30f3\u30b9\u8a9e\u30ab\u30ca\u30c0)");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }

    @Test
    public void test2805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2805");
        java.util.Date date6 = new java.util.Date(0, 0, 2000, 8, (int) (byte) 100, 436);
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromDateFields(date6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.TimeOfDay.Property property9 = timeOfDay7.property(dateTimeFieldType8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay11 = timeOfDay7.withSecondOfMinute(26440110);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26440110 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Jun 23 09:47:16 GMT 1905");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test2806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2806");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        org.joda.time.DateTime dateTime8 = dateTime1.plusHours(5);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        mutableDateTime10.add((long) 1);
        org.joda.time.DateTime dateTime13 = mutableDateTime10.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.years();
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime10, readableDuration14, periodType15);
        org.joda.time.Chronology chronology17 = mutableDateTime10.getChronology();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology17);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear((int) (byte) 1);
        int int23 = dateTime22.getDayOfMonth();
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime26 = dateTime22.minus((org.joda.time.ReadableDuration) duration25);
        mutableDateTime18.add((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean30 = duration25.isShorterThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) (byte) 0);
        long long33 = duration32.getMillis();
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property35 = localDate34.dayOfYear();
        org.joda.time.DateMidnight dateMidnight36 = localDate34.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Hours hours38 = duration32.toStandardHours();
        org.joda.time.Hours hours39 = duration32.toStandardHours();
        boolean boolean40 = duration25.isEqual((org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTime dateTime41 = dateTime8.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime43 = dateMidnight42.toMutableDateTime();
        mutableDateTime43.add((long) 1);
        org.joda.time.DateTime dateTime46 = mutableDateTime43.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.era();
        boolean boolean48 = mutableDateTime43.isSupported(dateTimeFieldType47);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime43.hourOfDay();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType53);
        int int55 = mutablePeriod54.getMonths();
        org.joda.time.Interval interval56 = new org.joda.time.Interval(readableInstant50, (org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.Chronology chronology57 = interval56.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.weekyearOfCentury();
        long long60 = dateTimeField58.roundHalfFloor((long) 1);
        mutableDateTime43.setRounding(dateTimeField58, (int) (byte) 0);
        mutableDateTime43.setTime((long) 10);
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime();
        boolean boolean66 = mutableDateTime43.isBefore((org.joda.time.ReadableInstant) mutableDateTime65);
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime68 = dateMidnight67.toMutableDateTime();
        mutableDateTime68.add((long) 1);
        org.joda.time.DateTime dateTime71 = mutableDateTime68.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.years();
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime68, readableDuration72, periodType73);
        org.joda.time.Chronology chronology75 = mutableDateTime68.getChronology();
        org.joda.time.YearMonthDay yearMonthDay76 = new org.joda.time.YearMonthDay(chronology75);
        mutableDateTime65.setChronology(chronology75);
        org.joda.time.DateTime dateTime78 = dateTime41.withChronology(chronology75);
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight((java.lang.Object) dateTime78);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertNotNull(hours39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test2807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2807");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime5 = dateTime3.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime6 = timeOfDay1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay1.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean12 = timeOfDay8.isSupported(dateTimeFieldType11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfMonth();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        mutablePeriod21.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        java.lang.String str27 = mutablePeriod21.toString();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadablePeriod) mutablePeriod21);
        mutablePeriod21.setValue(0, 2022);
        mutablePeriod21.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay8.plus((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.TimeOfDay.Property property35 = timeOfDay34.millisOfSecond();
        org.joda.time.DurationField durationField36 = property35.getDurationField();
        org.joda.time.TimeOfDay timeOfDay37 = property35.getTimeOfDay();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.lang.String str39 = locale38.getDisplayScript();
        java.lang.String str40 = property35.getAsText(locale38);
        int int41 = property35.getMaximumValue();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property44 = dateTime43.secondOfDay();
        org.joda.time.DateTime dateTime46 = dateTime43.withEra(1);
        org.joda.time.DateTime dateTime48 = dateTime43.plusMillis(0);
        org.joda.time.DateTime.Property property49 = dateTime43.hourOfDay();
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale50.getDisplayName();
        int int52 = property49.getMaximumShortTextLength(locale50);
        java.lang.String str53 = property35.getAsShortText(locale50);
        java.util.Locale locale54 = java.util.Locale.TAIWAN;
        java.lang.String str55 = locale50.getDisplayLanguage(locale54);
        java.util.Locale.Builder builder56 = builder0.setLocale(locale50);
        java.util.Locale.Builder builder57 = builder56.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder59 = builder57.setScript("117");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 117 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0.034S" + "'", str27, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "235" + "'", str40, "235");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 999 + "'", int41 == 999);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str51, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "235" + "'", str53, "235");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str55, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test2808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2808");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate7 = property3.setCopy(2022);
        org.joda.time.LocalDate localDate8 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate10 = property3.addToCopy(365);
        org.joda.time.DateTimeField dateTimeField11 = property3.getField();
        org.joda.time.LocalDate localDate12 = property3.getLocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.withWeekyear(26187085);
        java.util.Date date15 = localDate14.toDate();
        int int16 = date15.getHours();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Feb 17 00:00:00 GMT 26187085");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test2809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2809");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        boolean boolean9 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight0.withCenturyOfEra(0);
        int int12 = dateMidnight11.getYear();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        mutableDateTime14.add((long) 1);
        org.joda.time.DateTime dateTime17 = mutableDateTime14.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, readableDuration18, periodType19);
        java.lang.String str21 = mutableDateTime14.toString();
        org.joda.time.Chronology chronology22 = mutableDateTime14.getChronology();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight11.withChronology(chronology22);
        org.joda.time.Interval interval24 = dateMidnight11.toInterval();
        org.joda.time.DateTime dateTime25 = interval24.getStart();
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfWeek();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str21, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test2810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2810");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        long long17 = interval14.getEndMillis();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        mutableDateTime19.add((long) 1);
        org.joda.time.DateTime dateTime22 = mutableDateTime19.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.era();
        boolean boolean24 = mutableDateTime19.isSupported(dateTimeFieldType23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime19.hourOfDay();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        int int31 = mutablePeriod30.getMonths();
        org.joda.time.Interval interval32 = new org.joda.time.Interval(readableInstant26, (org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.weekyearOfCentury();
        long long36 = dateTimeField34.roundHalfFloor((long) 1);
        mutableDateTime19.setRounding(dateTimeField34, (int) (byte) 0);
        mutableDateTime19.setTime((long) 10);
        org.joda.time.Duration duration42 = new org.joda.time.Duration((long) (byte) 0);
        long long43 = duration42.getMillis();
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property45 = localDate44.dayOfYear();
        org.joda.time.DateMidnight dateMidnight46 = localDate44.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Hours hours48 = duration42.toStandardHours();
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Interval interval50 = interval14.withDurationAfterStart((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Period period52 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period54 = period52.minusYears(8);
        org.joda.time.Period period56 = period52.withSeconds(11);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType60);
        int int62 = mutablePeriod61.getMonths();
        org.joda.time.Interval interval63 = new org.joda.time.Interval(readableInstant57, (org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.Chronology chronology64 = interval63.getChronology();
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType69);
        int int71 = mutablePeriod70.getMonths();
        org.joda.time.Interval interval72 = new org.joda.time.Interval(readableInstant66, (org.joda.time.ReadablePeriod) mutablePeriod70);
        int[] intArray75 = chronology64.get((org.joda.time.ReadablePeriod) mutablePeriod70, 1L, (long) 4);
        org.joda.time.PeriodType periodType76 = mutablePeriod70.getPeriodType();
        org.joda.time.Period period77 = period52.normalizedStandard(periodType76);
        org.joda.time.Period period78 = interval14.toPeriod(periodType76);
        org.joda.time.LocalDate localDate79 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = null;
        boolean boolean81 = localDate79.isSupported(dateTimeFieldType80);
        org.joda.time.LocalDate.Property property82 = localDate79.yearOfEra();
        org.joda.time.Interval interval83 = localDate79.toInterval();
        boolean boolean84 = interval83.isBeforeNow();
        org.joda.time.Interval interval85 = interval83.toInterval();
        boolean boolean86 = interval83.isBeforeNow();
        boolean boolean87 = interval83.isBeforeNow();
        boolean boolean88 = interval14.overlaps((org.joda.time.ReadableInterval) interval83);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514445286L + "'", long17 == 1645514445286L);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(hours48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test2811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2811");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime7 = dateTime2.withWeekOfWeekyear((int) '4');
        org.joda.time.DateMidnight dateMidnight8 = dateTime2.toDateMidnight();
        org.joda.time.Period period10 = org.joda.time.Period.days((int) (short) -1);
        org.joda.time.Period period12 = period10.minusMinutes((int) (byte) 0);
        org.joda.time.Period period14 = period10.minusWeeks((int) '#');
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.LocalTime localTime19 = localTime17.withMillisOfDay((int) '#');
        org.joda.time.LocalTime.Property property20 = localTime19.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutablePeriod22.add(readableDuration23);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.months();
        mutablePeriod29.set(durationFieldType30, (int) 'a');
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType37);
        int int39 = mutablePeriod38.getMonths();
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableInstant34, (org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 100, chronology41);
        boolean boolean43 = durationFieldType30.isSupported(chronology41);
        mutablePeriod22.setPeriod((long) '4', chronology41);
        int[] intArray45 = mutablePeriod22.getValues();
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType48);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.months();
        mutablePeriod49.set(durationFieldType50, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.months();
        boolean boolean54 = mutablePeriod49.isSupported(durationFieldType53);
        int int55 = mutablePeriod22.indexOf(durationFieldType53);
        boolean boolean56 = localTime19.isSupported(durationFieldType53);
        int int57 = period10.indexOf(durationFieldType53);
        int int58 = period10.getDays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) period10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, 52]");
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test2812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2812");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Interval interval21 = localDate17.toInterval(dateTimeZone20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        boolean boolean38 = interval28.contains((org.joda.time.ReadableInterval) interval36);
        boolean boolean39 = interval21.isBefore((org.joda.time.ReadableInterval) interval36);
        long long40 = interval36.getStartMillis();
        boolean boolean41 = interval6.overlaps((org.joda.time.ReadableInterval) interval36);
        org.joda.time.DateTime dateTime42 = interval6.getEnd();
        org.joda.time.DateTime dateTime44 = dateTime42.minus((long) 2922789);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime46 = dateMidnight45.toMutableDateTime();
        int int47 = mutableDateTime46.getYearOfEra();
        boolean boolean48 = dateTime42.isEqual((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime50 = dateMidnight49.toMutableDateTime();
        mutableDateTime50.add((long) 1);
        mutableDateTime50.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime50.weekOfWeekyear();
        mutableDateTime46.setTime((org.joda.time.ReadableInstant) mutableDateTime50);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property59 = dateTime58.secondOfDay();
        org.joda.time.DateTime dateTime61 = dateTime58.withEra(1);
        org.joda.time.DateTime dateTime63 = dateTime58.plusMillis(0);
        org.joda.time.DateTime dateTime65 = dateTime63.minusHours((-1));
        org.joda.time.DateTime dateTime67 = dateTime63.withYear((int) (byte) 1);
        org.joda.time.DateTime.Property property68 = dateTime67.minuteOfDay();
        mutableDateTime50.setTime((org.joda.time.ReadableInstant) dateTime67);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime50.setDateTime(26286492, 2922789, 26230722, 26200205, 26162974, 26294414, 8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26200205 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645514445345L + "'", long40 == 1645514445345L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
    }

    @Test
    public void test2813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2813");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property5 = dateMidnight0.weekOfWeekyear();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate.Property property9 = localDate6.yearOfEra();
        org.joda.time.Interval interval10 = localDate6.toInterval();
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime13 = dateTime11.plusMillis(20);
        boolean boolean14 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime16 = dateTime13.minusDays(10);
        java.util.TimeZone timeZone18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forTimeZone(timeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime16.toMutableDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = dateTime16.plusSeconds(702);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillis((long) 86340);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime27 = dateMidnight26.toMutableDateTime();
        int int28 = mutableDateTime27.getYearOfEra();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.months();
        mutablePeriod32.set(durationFieldType33, (int) 'a');
        mutablePeriod32.addHours((int) (byte) -1);
        mutablePeriod32.addYears(2022);
        mutableDateTime27.add((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime27.year();
        java.lang.String str42 = property41.toString();
        org.joda.time.MutableDateTime mutableDateTime43 = property41.roundCeiling();
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight44.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property49 = dateMidnight44.weekOfWeekyear();
        org.joda.time.LocalDate localDate50 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        boolean boolean52 = localDate50.isSupported(dateTimeFieldType51);
        org.joda.time.LocalDate.Property property53 = localDate50.yearOfEra();
        org.joda.time.Interval interval54 = localDate50.toInterval();
        org.joda.time.DateTime dateTime55 = localDate50.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime57 = dateTime55.plusMillis(20);
        boolean boolean58 = dateMidnight44.isEqual((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime60 = dateTime57.minusDays(10);
        org.joda.time.DateTime.Property property61 = dateTime60.minuteOfHour();
        mutableDateTime43.setMillis((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType66);
        int int68 = mutablePeriod67.getMonths();
        org.joda.time.Interval interval69 = new org.joda.time.Interval(readableInstant63, (org.joda.time.ReadablePeriod) mutablePeriod67);
        org.joda.time.Chronology chronology70 = interval69.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField72 = chronology70.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField73 = chronology70.dayOfYear();
        org.joda.time.LocalDate localDate74 = org.joda.time.LocalDate.now(chronology70);
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(chronology70);
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(chronology70);
        mutableDateTime43.setChronology(chronology70);
        org.joda.time.MutableDateTime mutableDateTime78 = dateTime25.toMutableDateTime(chronology70);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Property[year]" + "'", str42, "Property[year]");
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(mutableDateTime78);
    }

    @Test
    public void test2814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2814");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime6 = dateTime3.withMillisOfDay(13);
        org.joda.time.DateTime.Property property7 = dateTime3.yearOfEra();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property12 = dateTime11.minuteOfHour();
        org.joda.time.DateTime dateTime13 = property12.roundCeilingCopy();
        org.joda.time.DateTime dateTime14 = property12.roundFloorCopy();
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime14.plusDays(6);
        boolean boolean18 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2815");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Interval interval21 = localDate17.toInterval(dateTimeZone20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        boolean boolean38 = interval28.contains((org.joda.time.ReadableInterval) interval36);
        boolean boolean39 = interval21.isBefore((org.joda.time.ReadableInterval) interval36);
        long long40 = interval36.getStartMillis();
        boolean boolean41 = interval6.overlaps((org.joda.time.ReadableInterval) interval36);
        org.joda.time.MutableInterval mutableInterval42 = interval36.toMutableInterval();
        org.joda.time.MutableInterval mutableInterval43 = interval36.toMutableInterval();
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.parse("2022-02-22T00:00:00.001Z");
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardMinutes((long) 9);
        org.joda.time.DateTime dateTime48 = dateTime45.plus((org.joda.time.ReadableDuration) duration47);
        long long49 = duration47.getStandardDays();
        org.joda.time.format.DateTimePrinter dateTimePrinter50 = null;
        org.joda.time.format.DateTimeParser dateTimeParser51 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter50, dateTimeParser51);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType56 = periodType55.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType60);
        int int62 = mutablePeriod61.getMonths();
        org.joda.time.Interval interval63 = new org.joda.time.Interval(readableInstant57, (org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.Chronology chronology64 = interval63.getChronology();
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay(chronology64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType69);
        int int71 = mutablePeriod70.getMonths();
        org.joda.time.Interval interval72 = new org.joda.time.Interval(readableInstant66, (org.joda.time.ReadablePeriod) mutablePeriod70);
        int[] intArray75 = chronology64.get((org.joda.time.ReadablePeriod) mutablePeriod70, 1L, (long) 4);
        org.joda.time.Period period76 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType55, chronology64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = dateTimeFormatter52.withChronology(chronology64);
        boolean boolean78 = dateTimeFormatter77.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter79 = dateTimeFormatter77.getPrinter();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.PeriodType periodType83 = null;
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType83);
        int int85 = mutablePeriod84.getMonths();
        org.joda.time.Interval interval86 = new org.joda.time.Interval(readableInstant80, (org.joda.time.ReadablePeriod) mutablePeriod84);
        org.joda.time.Chronology chronology87 = interval86.getChronology();
        org.joda.time.DateTimeField dateTimeField88 = chronology87.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField89 = chronology87.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField90 = chronology87.dayOfYear();
        org.joda.time.LocalDate localDate91 = org.joda.time.LocalDate.now(chronology87);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter92 = dateTimeFormatter77.withChronology(chronology87);
        org.joda.time.Period period93 = duration47.toPeriod(chronology87);
        org.joda.time.Interval interval94 = interval36.withChronology(chronology87);
        org.joda.time.DateTime dateTime95 = interval94.getEnd();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645514445462L + "'", long40 == 1645514445462L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(mutableInterval43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(dateTimePrinter79);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertNotNull(dateTimeFormatter92);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(interval94);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test2816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2816");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusWeeks(26404630);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514445506,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=45,MILLISECOND=506,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test2817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2817");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePeriod) mutablePeriod21, 1L, (long) 4);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType6, chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withChronology(chronology15);
        org.joda.time.format.DateTimeParser dateTimeParser29 = dateTimeFormatter28.getParser();
        org.joda.time.Chronology chronology30 = dateTimeFormatter28.getChronology();
        int int31 = dateTimeFormatter28.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.parse("1 Jan 1970 07:16:14 GMT", dateTimeFormatter28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(dateTimeParser29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2000 + "'", int31 == 2000);
    }

    @Test
    public void test2818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2818");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusDays(86399999);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        java.lang.String str29 = mutablePeriod23.toString();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) mutablePeriod23);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusWeeks(0);
        boolean boolean37 = mutablePeriod23.equals((java.lang.Object) 0);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay8.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay40 = property39.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay41 = property39.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay42 = property39.withMinimumValue();
        org.joda.time.Interval interval43 = yearMonthDay42.toInterval();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0.034S" + "'", str29, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(interval43);
    }

    @Test
    public void test2819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2819");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime1 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtStartOfDay(dateTimeZone2);
        org.joda.time.DateTime.Property property4 = dateTime3.millisOfDay();
        int int5 = dateTime3.getMinuteOfDay();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test2820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2820");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra((int) (byte) 0);
        java.util.Date date9 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay10 = org.joda.time.YearMonthDay.fromDateFields(date9);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusYears(2022);
        org.joda.time.DateTime dateTime13 = dateTime1.withFields((org.joda.time.ReadablePartial) yearMonthDay10);
        int int14 = dateTime13.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
    }

    @Test
    public void test2821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2821");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone2);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.weekOfWeekyear();
        mutableDateTime3.setSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        int int11 = dateTime10.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTime dateTime16 = dateTime10.plusYears((-1));
        org.joda.time.Chronology chronology17 = dateTime10.getChronology();
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime3.toMutableDateTime(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.year();
        org.joda.time.DurationField durationField20 = chronology17.seconds();
        long long21 = durationField20.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1000L + "'", long21 == 1000L);
    }

    @Test
    public void test2822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2822");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = null;
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDate.Property property9 = localDate6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.DurationField durationField11 = property9.getDurationField();
        boolean boolean12 = durationField11.isPrecise();
        long long15 = durationField11.subtract((long) ' ', 0L);
        int int16 = durationField5.compareTo(durationField11);
        int int19 = durationField5.getDifference(1645514228848L, (long) 26164327);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutablePeriod22.add(readableDuration23);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.months();
        mutablePeriod29.set(durationFieldType30, (int) 'a');
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType37);
        int int39 = mutablePeriod38.getMonths();
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableInstant34, (org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) 100, chronology41);
        boolean boolean43 = durationFieldType30.isSupported(chronology41);
        mutablePeriod22.setPeriod((long) '4', chronology41);
        java.lang.String str45 = chronology41.toString();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 999, chronology41);
        org.joda.time.DurationField durationField47 = chronology41.centuries();
        int int48 = durationField5.compareTo(durationField47);
        long long50 = durationField47.getValueAsLong(26223309L);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 32L + "'", long15 == 32L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str45, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
    }

    @Test
    public void test2823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2823");
        org.joda.time.Period period1 = org.joda.time.Period.hours(2024);
        org.joda.time.Period period3 = period1.withMillis((int) (short) 0);
        org.joda.time.Period period5 = period1.minusSeconds(26162430);
        org.joda.time.MutablePeriod mutablePeriod6 = period5.toMutablePeriod();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(mutablePeriod6);
    }

    @Test
    public void test2824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2824");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = timeOfDay7.getFieldTypes();
        org.joda.time.Chronology chronology9 = timeOfDay7.getChronology();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test2825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2825");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant(1645514159651L);
        java.util.Calendar.Builder builder4 = builder2.setInstant((long) 2024);
        java.util.Calendar.Builder builder6 = builder4.setLenient(false);
        java.util.Calendar calendar7 = builder6.build();
        java.util.Calendar.Builder builder9 = builder6.setInstant((long) 26176);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=2024,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=2,MILLISECOND=24,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test2826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2826");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfDay(436);
        org.joda.time.DateTime dateTime8 = localDateTime5.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusWeeks(3);
        org.joda.time.Period period12 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period14 = period12.minusYears(8);
        org.joda.time.Period period16 = period12.withYears(2);
        org.joda.time.Period period18 = period16.plusMillis((int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) ' ', chronology20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.months();
        mutablePeriod25.set(durationFieldType26, (int) 'a');
        mutablePeriod21.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        mutablePeriod25.setDays(0);
        mutablePeriod25.clear();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime34 = dateMidnight33.toMutableDateTime();
        mutableDateTime34.add((long) 1);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight37.toMutableDateTime();
        mutableDateTime38.add((long) 1);
        org.joda.time.DateTime dateTime41 = mutableDateTime38.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.years();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime38, readableDuration42, periodType43);
        java.lang.String str45 = mutableDateTime38.toString();
        mutableDateTime38.addMinutes((int) ' ');
        int int48 = mutableDateTime38.getCenturyOfEra();
        mutablePeriod25.setPeriod((org.joda.time.ReadableInstant) mutableDateTime34, (org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.Period period50 = mutablePeriod25.toPeriod();
        org.joda.time.Period period51 = period16.plus((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime10.minus((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        mutablePeriod25.add(readablePeriod53);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514448480,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=48,MILLISECOND=480,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str45, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 20 + "'", int48 == 20);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(localDateTime52);
    }

    @Test
    public void test2827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2827");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(1L, dateTimeZone3);
        boolean boolean5 = calendar1.before((java.lang.Object) localDate4);
        int int6 = localDate4.getDayOfWeek();
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray8 = localDate4.getFieldTypes();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime11 = dateMidnight10.toMutableDateTime();
        int int12 = mutableDateTime11.getYearOfEra();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.months();
        mutablePeriod16.set(durationFieldType17, (int) 'a');
        mutablePeriod16.addHours((int) (byte) -1);
        mutablePeriod16.addYears(2022);
        mutableDateTime11.add((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime28 = dateMidnight27.toMutableDateTime();
        mutableDateTime28.add((long) 1);
        org.joda.time.DateTime dateTime31 = mutableDateTime28.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.years();
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime28, readableDuration32, periodType33);
        java.lang.String str35 = mutableDateTime28.toString();
        org.joda.time.Chronology chronology36 = mutableDateTime28.getChronology();
        mutablePeriod16.setPeriod(1645514159651L, (long) (short) -1, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.year();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.weekOfWeekyear();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.fromMillisOfDay((-315619199995L), chronology36);
        org.joda.time.DateTime dateTime42 = localDate4.toDateTime(localTime41);
        java.util.Locale locale43 = java.util.Locale.PRC;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.fromCalendarFields(calendar44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.era();
        boolean boolean49 = localDateTime47.isSupported(dateTimeFieldType48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property52 = localDateTime47.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime53 = property52.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime54 = property52.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime55 = property52.withMinimumValue();
        int int56 = localDateTime55.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.minusDays((-2720));
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardDays((long) 26223309);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime58.withDurationAdded((org.joda.time.ReadableDuration) duration60, (-219));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = localDate4.isBefore((org.joda.time.ReadablePartial) localDateTime58);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514448499,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=48,MILLISECOND=499,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str35, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1645514448500,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=48,MILLISECOND=500,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2000 + "'", int56 == 2000);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(localDateTime62);
    }

    @Test
    public void test2828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2828");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setValue(0, 2022);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        long long24 = duration23.getMillis();
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) (byte) 0);
        long long27 = duration26.getMillis();
        int int28 = duration23.compareTo((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration30 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration26, 10);
        long long31 = duration30.getStandardDays();
        long long32 = duration30.getStandardDays();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test2829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2829");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.plus(readableDuration2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight0.withYearOfEra(12);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.weekyear();
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime8 = dateMidnight7.toMutableDateTime();
        mutableDateTime8.add((long) 1);
        org.joda.time.DateTime dateTime11 = mutableDateTime8.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.years();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime8, readableDuration12, periodType13);
        org.joda.time.Chronology chronology15 = mutableDateTime8.getChronology();
        int int16 = mutableDateTime8.getDayOfWeek();
        mutableDateTime8.setMillis((long) 53);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfMonth();
        org.joda.time.DateTime dateTime25 = dateTime22.plusSeconds(10);
        org.joda.time.DateTime dateTime27 = dateTime22.minus((long) (short) -1);
        org.joda.time.DateTime dateTime28 = dateTime22.toDateTimeISO();
        mutableDateTime8.setMillis((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Period period31 = org.joda.time.Period.months(5);
        int int32 = period31.getMinutes();
        org.joda.time.Period period33 = period31.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray34 = period33.getFieldTypes();
        org.joda.time.DateTime dateTime35 = dateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadablePeriod) period33);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(durationFieldTypeArray34);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test2830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2830");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod18, 1L, (long) 4);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType3, chronology12);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(obj0, chronology12);
        org.joda.time.DurationField durationField26 = chronology12.millis();
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.YearMonthDay.Property property28 = yearMonthDay27.dayOfMonth();
        int int29 = yearMonthDay27.getMonthOfYear();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
    }

    @Test
    public void test2831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2831");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate localDate4 = localDate0.withWeekyear((int) (short) 100);
        int int5 = localDate0.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property6 = localDate0.monthOfYear();
        org.joda.time.Period period8 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period10 = period8.minusYears(8);
        org.joda.time.Period period12 = period8.withYears(2);
        org.joda.time.Period period14 = period12.plusMillis((int) (byte) 10);
        org.joda.time.Period period16 = period14.minusMillis(270);
        org.joda.time.LocalDate localDate17 = localDate0.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfCentury(9);
        org.joda.time.DateMidnight dateMidnight20 = localDate17.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.withWeekyear(26241884);
        int int23 = dateMidnight20.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
    }

    @Test
    public void test2832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2832");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant(1645514159651L);
        java.util.Calendar.Builder builder4 = builder2.setInstant((long) 2024);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder7 = builder4.set(0, 26266791);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: instant has been set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test2833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2833");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfDay(436);
        org.joda.time.DateTime dateTime8 = localDateTime5.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusWeeks(3);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        int int16 = mutablePeriod15.getMonths();
        org.joda.time.Interval interval17 = new org.joda.time.Interval(readableInstant11, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.Interval interval18 = interval17.toInterval();
        org.joda.time.Interval interval19 = interval17.toInterval();
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.Interval interval22 = interval17.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property25 = dateTime24.secondOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.withEra(1);
        org.joda.time.DateTime dateTime29 = dateTime24.plusMillis(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int31 = dateTime24.get(dateTimeFieldType30);
        org.joda.time.DateTime dateTime33 = dateTime24.withYear((int) (byte) 10);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.Period period35 = duration21.toPeriodFrom((org.joda.time.ReadableInstant) dateTime24, periodType34);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime5.plus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusSeconds((int) '4');
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.minusMonths(117);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = localDateTime36.getValue(26191187);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26191187");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514448706,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=48,MILLISECOND=706,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 31 + "'", int31 == 31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
    }

    @Test
    public void test2834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2834");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfMonth();
        mutableDateTime1.setSecondOfDay(12);
        mutableDateTime1.addMinutes(26172160);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfWeek(625);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 625 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str8, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test2835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2835");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfSecond();
        mutableDateTime1.set(dateTimeFieldType2, 0);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfEven();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        mutablePeriod17.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        java.lang.String str23 = mutablePeriod17.toString();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadablePeriod) mutablePeriod17);
        mutablePeriod17.setValue(0, 2022);
        org.joda.time.Duration duration29 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod17.setPeriod((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) (byte) 0);
        long long33 = duration32.getMillis();
        org.joda.time.Duration duration35 = new org.joda.time.Duration((long) (byte) 0);
        long long36 = duration35.getMillis();
        int int37 = duration32.compareTo((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration39 = duration29.withDurationAdded((org.joda.time.ReadableDuration) duration35, 10);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime41 = dateMidnight40.toMutableDateTime();
        mutableDateTime41.add((long) 1);
        org.joda.time.DateTime dateTime44 = mutableDateTime41.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.years();
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime41, readableDuration45, periodType46);
        org.joda.time.Chronology chronology48 = mutableDateTime41.getChronology();
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(chronology48);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime53 = dateTime51.withDayOfYear((int) (byte) 1);
        int int54 = dateTime53.getDayOfMonth();
        org.joda.time.Duration duration56 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime57 = dateTime53.minus((org.joda.time.ReadableDuration) duration56);
        mutableDateTime49.add((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration60 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean61 = duration56.isShorterThan((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Duration duration63 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean64 = duration56.isLongerThan((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Duration duration66 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration63, 999);
        org.joda.time.LocalDate localDate67 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property68 = localDate67.dayOfYear();
        org.joda.time.DateMidnight dateMidnight69 = localDate67.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight70 = localDate67.toDateMidnight();
        org.joda.time.Period period71 = duration35.toPeriodTo((org.joda.time.ReadableInstant) dateMidnight70);
        org.joda.time.DateMidnight.Property property72 = dateMidnight70.dayOfYear();
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight70.plusMonths(26300068);
        long long75 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight70);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT0.034S" + "'", str23, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
    }

    @Test
    public void test2836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2836");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) (-1));
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds(22);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
    }

    @Test
    public void test2837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2837");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        mutableDateTime1.addMinutes((int) ' ');
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight11.toMutableDateTime();
        boolean boolean16 = dateMidnight11.isEqual((long) 2);
        int int17 = dateMidnight11.getMillisOfDay();
        boolean boolean18 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) dateMidnight11);
        int int19 = dateMidnight11.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str8, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
    }

    @Test
    public void test2838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2838");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        mutableDateTime1.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7, (int) (byte) 1);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.secondOfDay();
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale11);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.fromCalendarFields(calendar12);
        org.joda.time.DateTime dateTime14 = localDateTime13.toDateTime();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfCeilingCopy();
        java.util.Locale locale17 = java.util.Locale.PRC;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.fromCalendarFields(calendar18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.withDayOfMonth(8);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property30 = dateTime29.dayOfMonth();
        org.joda.time.DateTime dateTime32 = dateTime29.plusSeconds(10);
        org.joda.time.DateTime dateTime34 = dateTime29.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property36 = dateTime34.property(dateTimeFieldType35);
        int int37 = dateMidnight22.get(dateTimeFieldType35);
        int int38 = localDateTime19.indexOf(dateTimeFieldType35);
        int int39 = localDateTime19.getMillisOfDay();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime16, (org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.Period period42 = period40.withMillis(22);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period40, 12);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime1.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDate(26340276, 26235826, 440);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26235826 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645514449660,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=49,MILLISECOND=660,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645514449660,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=49,MILLISECOND=660,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 26449660 + "'", int39 == 26449660);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test2839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2839");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        org.joda.time.DateTime.Property property7 = dateTime1.hourOfDay();
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.lang.String str9 = locale8.getDisplayName();
        int int10 = property7.getMaximumShortTextLength(locale8);
        java.lang.String str11 = locale8.getDisplayVariant();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(chronology20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        int[] intArray31 = chronology20.get((org.joda.time.ReadablePeriod) mutablePeriod26, 1L, (long) 4);
        org.joda.time.DateTimeField dateTimeField32 = chronology20.monthOfYear();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(2L, chronology20);
        org.joda.time.DateTime.Property property34 = dateTime33.weekOfWeekyear();
        org.joda.time.DateTime dateTime36 = dateTime33.minusSeconds(26239483);
        org.joda.time.DateTime dateTime38 = dateTime33.plusMillis(7828987);
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology41 = dateMidnight40.getChronology();
        java.util.Locale locale42 = java.util.Locale.CHINA;
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        java.lang.String str45 = locale42.getDisplayVariant(locale43);
        java.util.Calendar calendar46 = dateMidnight40.toCalendar(locale43);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale43.getDisplayCountry(locale47);
        java.util.Locale.setDefault(category39, locale43);
        java.util.Calendar calendar50 = dateTime33.toCalendar(locale43);
        java.lang.String str51 = locale8.getDisplayScript(locale43);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str9, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category39.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1645514449675,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=49,MILLISECOND=675,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(calendar46);
        org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(calendar50);
        org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=2,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=2,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test2840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2840");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        int int7 = mutablePeriod6.getMonths();
        org.joda.time.Interval interval8 = new org.joda.time.Interval(readableInstant2, (org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.Chronology chronology9 = interval8.getChronology();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100, chronology9);
        org.joda.time.DurationField durationField11 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.dayOfMonth();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 702, chronology9);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology9);
        int int15 = localDateTime14.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusMonths(52);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test2841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2841");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.Object obj1 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType5 = periodType4.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        int int20 = mutablePeriod19.getMonths();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadablePeriod) mutablePeriod19);
        int[] intArray24 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod19, 1L, (long) 4);
        org.joda.time.Period period25 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType4, chronology13);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(obj1, chronology13);
        org.joda.time.DateTimeField dateTimeField27 = chronology13.yearOfEra();
        mutableDateTime0.setRounding(dateTimeField27, 0);
        int int30 = dateTimeField27.getMinimumValue();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test2842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2842");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.DurationField durationField9 = chronology7.millis();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = chronology7.getDateTimeMillis(26263259, 26340379, 26162430, 24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26340379 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test2843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2843");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        org.joda.time.DateTime dateTime8 = dateTime6.minusHours((-1));
        int int9 = dateTime8.getEra();
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks(26347434);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test2844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2844");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        mutableDateTime1.setMonthOfYear(1);
        mutableDateTime1.addWeekyears(4);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((long) (byte) 0);
        long long9 = duration8.getMillis();
        org.joda.time.Duration duration11 = new org.joda.time.Duration((long) (byte) 0);
        long long12 = duration11.getMillis();
        int int13 = duration8.compareTo((org.joda.time.ReadableDuration) duration11);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration8, 26162430);
        long long16 = duration8.getMillis();
        long long17 = duration8.getStandardSeconds();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        mutableDateTime19.add((long) 1);
        org.joda.time.DateTime dateTime22 = mutableDateTime19.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime19, readableDuration23, periodType24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        int int31 = mutablePeriod30.getMonths();
        org.joda.time.Interval interval32 = new org.joda.time.Interval(readableInstant26, (org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(chronology33);
        org.joda.time.DurationField durationField35 = chronology33.weeks();
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(chronology33);
        mutableDateTime19.setChronology(chronology33);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime19.secondOfDay();
        org.joda.time.Period period39 = duration8.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime41 = dateMidnight40.toMutableDateTime();
        mutableDateTime41.add((long) 1);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime41.secondOfDay();
        int int45 = property44.getLeapAmount();
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime49 = dateMidnight46.toMutableDateTime();
        boolean boolean51 = dateMidnight46.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight46.minusWeeks((int) ' ');
        int int54 = property44.compareTo((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.Instant instant55 = dateMidnight53.toInstant();
        org.joda.time.DateMidnight.Property property56 = dateMidnight53.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime19, (org.joda.time.ReadableInstant) dateMidnight53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str2, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(property56);
    }

    @Test
    public void test2845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2845");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime1 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtStartOfDay(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property5 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime7 = dateTime3.withMillis(1645514190819L);
        long long8 = dateTime7.getMillis();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645514190819L + "'", long8 == 1645514190819L);
    }

    @Test
    public void test2846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2846");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) (short) 10);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes((int) (byte) 100);
        org.joda.time.DateTime dateTime4 = timeOfDay1.toDateTimeToday();
        java.util.Locale locale5 = java.util.Locale.PRC;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale5);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromCalendarFields(calendar6);
        org.joda.time.DateTime dateTime8 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withCenturyOfEra(365);
        int int11 = localDateTime7.size();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = timeOfDay1.compareTo((org.joda.time.ReadablePartial) localDateTime7);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645514449806,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=49,MILLISECOND=806,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
    }

    @Test
    public void test2847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2847");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("1 Jan 2022 00:00:00 GMT");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        int int3 = calendar2.getWeeksInWeekYear();
        int int4 = calendar2.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645514449833,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=49,MILLISECOND=833,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test2848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2848");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Interval interval8 = interval6.withStartMillis(0L);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = localDate9.isSupported(dateTimeFieldType10);
        org.joda.time.LocalDate localDate13 = localDate9.withWeekyear((int) (short) 100);
        int int14 = localDate9.getWeekOfWeekyear();
        org.joda.time.Interval interval15 = localDate9.toInterval();
        boolean boolean16 = interval6.isAfter((org.joda.time.ReadableInterval) interval15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        boolean boolean33 = interval23.contains((org.joda.time.ReadableInterval) interval31);
        boolean boolean34 = interval15.isAfter((org.joda.time.ReadableInterval) interval23);
        long long35 = interval23.getEndMillis();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645514449874L + "'", long35 == 1645514449874L);
    }

    @Test
    public void test2849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2849");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusDays((int) (short) 1);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.weekOfWeekyear();
        org.joda.time.LocalDate localDate6 = dateMidnight4.toLocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.year();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test2850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2850");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getName((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(dateTimeZone1);
        org.joda.time.LocalDate.Property property5 = localDate4.weekOfWeekyear();
        org.joda.time.DurationField durationField6 = property5.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
    }

    @Test
    public void test2851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2851");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        java.lang.String str8 = mutableDateTime1.toString();
        mutableDateTime1.addMinutes((int) ' ');
        int int11 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = dateTime14.withWeekOfWeekyear((int) '4');
        boolean boolean20 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime.Property property21 = dateTime14.minuteOfDay();
        int int22 = property21.getLeapAmount();
        org.joda.time.DateTime dateTime23 = property21.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime26 = dateTime23.withDurationAdded((long) 'x', 2);
        int int27 = dateTime23.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str8, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test2852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2852");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay36 = property34.addWrapFieldToCopy(26162974);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property34.getFieldType();
        java.lang.String str38 = property34.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay39 = property34.getTimeOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay41 = property34.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "971" + "'", str38, "971");
        org.junit.Assert.assertNotNull(timeOfDay39);
    }

    @Test
    public void test2853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2853");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        java.lang.Object obj1 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType5 = periodType4.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        int int20 = mutablePeriod19.getMonths();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadablePeriod) mutablePeriod19);
        int[] intArray24 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod19, 1L, (long) 4);
        org.joda.time.Period period25 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType4, chronology13);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(obj1, chronology13);
        org.joda.time.DateTimeField dateTimeField27 = chronology13.yearOfEra();
        mutableDateTime0.setRounding(dateTimeField27, 0);
        boolean boolean30 = dateTimeField27.isLenient();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2854");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate7 = property3.setCopy(2022);
        org.joda.time.LocalDate localDate8 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = localDate8.withWeekOfWeekyear(488);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 488 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test2855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2855");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay4 = dateTime3.toYearMonthDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod18, 1L, (long) 4);
        org.joda.time.PeriodType periodType24 = mutablePeriod18.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay4.minus((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay25.minusMonths(26167775);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
    }

    @Test
    public void test2856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2856");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval3 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        long long4 = interval3.getEndMillis();
        long long5 = interval3.toDurationMillis();
        org.joda.time.Interval interval6 = interval3.toInterval();
        org.joda.time.DateTime dateTime7 = interval3.getStart();
        org.joda.time.MutableInterval mutableInterval8 = interval3.toMutableInterval();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        int int13 = dateTime12.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime15 = dateMidnight14.toMutableDateTime();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) mutableDateTime15);
        long long17 = interval16.getEndMillis();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType21);
        int int23 = mutablePeriod22.getMonths();
        org.joda.time.Interval interval24 = new org.joda.time.Interval(readableInstant18, (org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.MutableInterval mutableInterval26 = interval24.toMutableInterval();
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = null;
        boolean boolean29 = localDate27.isSupported(dateTimeFieldType28);
        org.joda.time.LocalDate.Property property30 = localDate27.yearOfEra();
        org.joda.time.Interval interval31 = localDate27.toInterval();
        boolean boolean32 = interval31.isBeforeNow();
        org.joda.time.Interval interval33 = interval31.toInterval();
        boolean boolean34 = interval33.containsNow();
        boolean boolean35 = mutableInterval26.contains((org.joda.time.ReadableInterval) interval33);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight36.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.withDayOfYear(9);
        org.joda.time.Interval interval43 = dateMidnight42.toInterval();
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = null;
        boolean boolean46 = localDate44.isSupported(dateTimeFieldType45);
        org.joda.time.LocalDate.Property property47 = localDate44.yearOfEra();
        org.joda.time.DateTimeField dateTimeField48 = property47.getField();
        org.joda.time.LocalDate localDate49 = property47.roundCeilingCopy();
        int int50 = localDate49.getDayOfMonth();
        int int51 = localDate49.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.Interval interval53 = localDate49.toInterval(dateTimeZone52);
        org.joda.time.Interval interval54 = interval43.gap((org.joda.time.ReadableInterval) interval53);
        boolean boolean56 = interval54.contains((long) 86399);
        org.joda.time.MutableInterval mutableInterval57 = interval54.toMutableInterval();
        org.joda.time.Interval interval58 = interval33.overlap((org.joda.time.ReadableInterval) interval54);
        org.joda.time.Interval interval59 = interval16.overlap((org.joda.time.ReadableInterval) interval54);
        boolean boolean60 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) interval59);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645488000000L + "'", long17 == 1645488000000L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(mutableInterval26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(mutableInterval57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2857");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        int int1 = dateMidnight0.getYearOfEra();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.yearOfEra();
        org.joda.time.DateMidnight dateMidnight4 = property2.addToCopy((int) (byte) 0);
        boolean boolean6 = dateMidnight4.isBefore(1645514195163L);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2022 + "'", int1 == 2022);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2858");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        java.util.Locale locale5 = java.util.Locale.PRC;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale5);
        int int7 = property4.getMaximumShortTextLength(locale5);
        int int8 = property4.get();
        org.joda.time.LocalDateTime localDateTime9 = property4.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekyear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514450168,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=50,MILLISECOND=168,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645514450168,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=50,MILLISECOND=168,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test2859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2859");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant(1645514159651L);
        java.util.Calendar.Builder builder6 = builder2.setWeekDate(292269054, 26187085, 349);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("53");
        boolean boolean9 = timeZone8.observesDaylightTime();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfMonth();
        org.joda.time.DateTime dateTime16 = dateTime13.plusSeconds(10);
        org.joda.time.DateTime.Property property17 = dateTime16.year();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime23 = timeOfDay18.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay18.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay25.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean29 = timeOfDay25.isSupported(dateTimeFieldType28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime33 = dateTime31.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfMonth();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType37);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType41);
        mutablePeriod38.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod42);
        java.lang.String str44 = mutablePeriod38.toString();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadablePeriod) mutablePeriod38);
        mutablePeriod38.setValue(0, 2022);
        mutablePeriod38.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay25.plus((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.TimeOfDay.Property property52 = timeOfDay51.millisOfSecond();
        org.joda.time.DurationField durationField53 = property52.getDurationField();
        org.joda.time.TimeOfDay timeOfDay54 = property52.getTimeOfDay();
        int int55 = property52.getMaximumValueOverall();
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.util.Locale locale58 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(locale58);
        java.lang.String str60 = locale57.getDisplayVariant(locale58);
        org.joda.time.TimeOfDay timeOfDay61 = property52.setCopy("1", locale57);
        java.lang.String str62 = property17.getAsShortText(locale57);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone8, locale57);
        java.util.Calendar.Builder builder64 = builder6.setTimeZone(timeZone8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder67 = builder6.setWeekDefinition(26311836, 26390334);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT0.034S" + "'", str44, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 999 + "'", int55 == 999);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1645514450193,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=50,MILLISECOND=193,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1969" + "'", str62, "1969");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1645514450193,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=50,MILLISECOND=193,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test2860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2860");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (byte) 0);
        long long2 = duration1.getMillis();
        org.joda.time.LocalDate localDate3 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property4 = localDate3.dayOfYear();
        org.joda.time.DateMidnight dateMidnight5 = localDate3.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateMidnight5);
        org.joda.time.Hours hours7 = duration1.toStandardHours();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType14 = periodType13.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        int int20 = mutablePeriod19.getMonths();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        int int29 = mutablePeriod28.getMonths();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableInstant24, (org.joda.time.ReadablePeriod) mutablePeriod28);
        int[] intArray33 = chronology22.get((org.joda.time.ReadablePeriod) mutablePeriod28, 1L, (long) 4);
        org.joda.time.Period period34 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType13, chronology22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter10.withChronology(chronology22);
        org.joda.time.format.DateTimeParser dateTimeParser36 = dateTimeFormatter35.getParser();
        org.joda.time.Chronology chronology37 = dateTimeFormatter35.getChronology();
        java.util.Locale locale38 = dateTimeFormatter35.getLocale();
        java.lang.Integer int39 = dateTimeFormatter35.getPivotYear();
        org.joda.time.Chronology chronology40 = dateTimeFormatter35.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter35.withDefaultYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter35.withDefaultYear(12);
        java.util.Locale locale45 = dateTimeFormatter44.getLocale();
        boolean boolean46 = hours7.equals((java.lang.Object) dateTimeFormatter44);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeFormatter44.getZone();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNull(dateTimeParser36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNull(locale38);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNull(locale45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(dateTimeZone47);
    }

    @Test
    public void test2861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2861");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.months();
        mutablePeriod12.set(durationFieldType13, (int) 'a');
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfMonth();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType35);
        mutablePeriod32.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        java.lang.String str38 = mutablePeriod32.toString();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Interval interval41 = interval39.withDurationAfterStart(readableDuration40);
        boolean boolean42 = interval23.isBefore((org.joda.time.ReadableInterval) interval39);
        mutablePeriod12.setPeriod((org.joda.time.ReadableInterval) interval23);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType47);
        int int49 = mutablePeriod48.getMonths();
        org.joda.time.Interval interval50 = new org.joda.time.Interval(readableInstant44, (org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.Interval interval51 = interval50.toInterval();
        boolean boolean52 = interval23.isAfter((org.joda.time.ReadableInterval) interval50);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType55);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType59);
        mutablePeriod56.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod60);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType64);
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.months();
        mutablePeriod65.set(durationFieldType66, (int) 'a');
        mutablePeriod56.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType73);
        int int75 = mutablePeriod74.getMonths();
        org.joda.time.Interval interval76 = new org.joda.time.Interval(readableInstant70, (org.joda.time.ReadablePeriod) mutablePeriod74);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime80 = dateTime78.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property81 = dateTime80.dayOfMonth();
        org.joda.time.PeriodType periodType84 = null;
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType84);
        org.joda.time.PeriodType periodType88 = null;
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType88);
        mutablePeriod85.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod89);
        java.lang.String str91 = mutablePeriod85.toString();
        org.joda.time.Interval interval92 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime80, (org.joda.time.ReadablePeriod) mutablePeriod85);
        org.joda.time.ReadableDuration readableDuration93 = null;
        org.joda.time.Interval interval94 = interval92.withDurationAfterStart(readableDuration93);
        boolean boolean95 = interval76.isBefore((org.joda.time.ReadableInterval) interval92);
        mutablePeriod65.setPeriod((org.joda.time.ReadableInterval) interval76);
        long long97 = interval76.getStartMillis();
        boolean boolean98 = interval23.overlaps((org.joda.time.ReadableInterval) interval76);
        org.joda.time.MutableInterval mutableInterval99 = interval76.toMutableInterval();
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0.034S" + "'", str38, "PT0.034S");
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "PT0.034S" + "'", str91, "PT0.034S");
        org.junit.Assert.assertNotNull(interval94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long97 + "' != '" + 1645514450238L + "'", long97 == 1645514450238L);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNotNull(mutableInterval99);
    }

    @Test
    public void test2862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2862");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        boolean boolean3 = localDate1.isSupported(dateTimeFieldType2);
        org.joda.time.LocalDate.Property property4 = localDate1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        long long7 = dateTimeField5.remainder((long) 10);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        boolean boolean10 = localDate8.isSupported(dateTimeFieldType9);
        int int11 = localDate8.getWeekOfWeekyear();
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDate8, locale12);
        java.lang.String str14 = locale12.getISO3Language();
        java.util.Set<java.lang.String> strSet15 = locale12.getUnicodeLocaleAttributes();
        boolean boolean17 = strSet15.equals((java.lang.Object) "February");
        strSet15.clear();
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.lang.String[] strArray24 = new java.lang.String[] { "PT0.034S", "53" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray33 = new java.lang.String[] { "PT0.034S", "53" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList34);
        java.lang.String str37 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList34);
        java.lang.String[] strArray45 = new java.lang.String[] { "it_IT", "months", "53", "hi!", "months", "it_IT", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight48.plusYears((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.withYear((int) (byte) 0);
        boolean boolean55 = strSet46.remove((java.lang.Object) dateMidnight54);
        java.util.Locale.FilteringMode filteringMode56 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strSet46, filteringMode56);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags(languageRangeList0, (java.util.Collection<java.lang.String>) strSet15, filteringMode56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022" + "'", str13, "2022");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "jpn" + "'", str14, "jpn");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + filteringMode56 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode56.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList57);
    }

    @Test
    public void test2863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2863");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        org.joda.time.DateTime.Property property7 = dateTime1.hourOfDay();
        java.lang.String str8 = property7.getAsShortText();
        long long9 = property7.remainder();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "23" + "'", str8, "23");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3599999L + "'", long9 == 3599999L);
    }

    @Test
    public void test2864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2864");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514451128,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=51,MILLISECOND=128,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test2865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2865");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime6 = dateTime3.minusMillis((-292275054));
        org.joda.time.DateTime dateTime8 = dateTime3.withMillisOfDay(26173324);
        org.joda.time.DateTime dateTime10 = dateTime8.minusWeeks(26174743);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test2866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2866");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate7 = property3.setCopy(2022);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfWeek();
        org.joda.time.LocalDate.Property property9 = localDate7.weekyear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test2867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2867");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        int int6 = mutablePeriod5.getMonths();
        org.joda.time.Interval interval7 = new org.joda.time.Interval(readableInstant1, (org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) (short) 100, chronology8);
        org.joda.time.DurationField durationField10 = chronology8.centuries();
        int int13 = durationField10.getDifference(1645514321052L, (long) 26215723);
        int int15 = durationField10.getValue((long) ' ');
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test2868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2868");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(45, 356, 26435097);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 356 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2869");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.dayOfMonth();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test2870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2870");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(1L, dateTimeZone3);
        boolean boolean5 = calendar1.before((java.lang.Object) localDate4);
        calendar1.set((int) '4', 6, 17, 9, (int) 'x', 928);
        java.time.Instant instant13 = calendar1.toInstant();
        boolean boolean14 = calendar1.isWeekDateSupported();
        java.time.Instant instant15 = calendar1.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = calendar1.getGreatestMinimum(27425238);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 27425238");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-60509249071628,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=52,MONTH=6,WEEK_OF_YEAR=30,WEEK_OF_MONTH=4,DAY_OF_MONTH=17,DAY_OF_YEAR=199,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=15,SECOND=28,MILLISECOND=372,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(instant15);
    }

    @Test
    public void test2871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2871");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.LocalDate localDate4 = property2.withMinimumValue();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfYear();
        org.joda.time.DateMidnight dateMidnight7 = localDate5.toDateMidnight();
        org.joda.time.Chronology chronology8 = localDate5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime();
        boolean boolean10 = localDate5.equals((java.lang.Object) mutableDateTime9);
        int int11 = localDate5.getDayOfWeek();
        int int12 = localDate4.compareTo((org.joda.time.ReadablePartial) localDate5);
        int int13 = localDate4.getEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test2872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2872");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        int int6 = mutablePeriod5.getMonths();
        org.joda.time.Interval interval7 = new org.joda.time.Interval(readableInstant1, (org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType12);
        int int14 = mutablePeriod13.getMonths();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableInstant9, (org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.Chronology chronology16 = interval15.getChronology();
        boolean boolean17 = interval7.contains((org.joda.time.ReadableInterval) interval15);
        long long18 = interval15.getEndMillis();
        boolean boolean19 = interval15.containsNow();
        org.joda.time.Chronology chronology20 = interval15.getChronology();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(1640995200022L, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.monthOfYear();
        int int24 = dateTimeField22.getMinimumValue(1645514268873L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645514451433L + "'", long18 == 1645514451433L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test2873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2873");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        int int3 = mutableDateTime2.getYearOfEra();
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.months();
        mutablePeriod7.set(durationFieldType8, (int) 'a');
        mutablePeriod7.addHours((int) (byte) -1);
        mutablePeriod7.addYears(2022);
        mutableDateTime2.add((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        mutableDateTime19.add((long) 1);
        org.joda.time.DateTime dateTime22 = mutableDateTime19.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime19, readableDuration23, periodType24);
        java.lang.String str26 = mutableDateTime19.toString();
        org.joda.time.Chronology chronology27 = mutableDateTime19.getChronology();
        mutablePeriod7.setPeriod(1645514159651L, (long) (short) -1, chronology27);
        mutablePeriod7.setSeconds(26160118);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay0.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay0.plus(readablePeriod32);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str26, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
    }

    @Test
    public void test2874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2874");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        int int11 = dateTime10.getDayOfMonth();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime10.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime6.withDurationAdded((org.joda.time.ReadableDuration) duration13, 3);
        int int17 = localDateTime6.getSecondOfMinute();
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale18);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.fromCalendarFields(calendar19);
        org.joda.time.DateTime dateTime21 = localDateTime20.toDateTime();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMillisOfDay(436);
        boolean boolean26 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMillisOfSecond((int) (byte) 0);
        int int30 = localDateTime29.getDayOfYear();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.monthOfYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514451513,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=51,MILLISECOND=513,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 51 + "'", int17 == 51);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645514451513,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=51,MILLISECOND=513,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 53 + "'", int30 == 53);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test2875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2875");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        int int3 = dateTime1.getYear();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime7 = dateTime5.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfMonth();
        org.joda.time.DateTime dateTime10 = dateTime7.plusSeconds(10);
        org.joda.time.DateTime dateTime12 = dateTime7.minus((long) (short) -1);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(26167775);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight15.toMutableDateTime();
        mutableDateTime16.add((long) 1);
        org.joda.time.DateTime dateTime19 = mutableDateTime16.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.years();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime16, readableDuration20, periodType21);
        org.joda.time.Chronology chronology23 = mutableDateTime16.getChronology();
        org.joda.time.DateTime dateTime24 = dateTime14.toDateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.weekyearOfCentury();
        org.joda.time.DateTime dateTime26 = dateTime1.toDateTime(chronology23);
        int int27 = dateTime26.getDayOfYear();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1969 + "'", int3 == 1969);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 365 + "'", int27 == 365);
    }

    @Test
    public void test2876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2876");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime6 = dateTime3.withMillisOfDay(13);
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test2877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2877");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight0.toMutableDateTime();
        boolean boolean5 = dateMidnight0.isEqual((long) 2);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight0.withCenturyOfEra(0);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.months();
        mutablePeriod12.set(durationFieldType13, (int) 'a');
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (short) 100, chronology24);
        boolean boolean26 = durationFieldType13.isSupported(chronology24);
        boolean boolean27 = durationFieldType8.isSupported(chronology24);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay((java.lang.Object) dateMidnight7, chronology24);
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(chronology24);
        org.joda.time.DateTimeField dateTimeField30 = chronology24.clockhourOfHalfday();
        long long32 = dateTimeField30.roundCeiling((long) 26344079);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 28800000L + "'", long32 == 28800000L);
    }

    @Test
    public void test2878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2878");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.DateMidnight dateMidnight2 = localDate0.toDateMidnight();
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.joda.time.LocalDate.Property property4 = localDate0.yearOfCentury();
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfMonth();
        org.joda.time.LocalDate.Property property6 = localDate0.year();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test2879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2879");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfYear();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.Interval interval21 = localDate17.toInterval(dateTimeZone20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        boolean boolean38 = interval28.contains((org.joda.time.ReadableInterval) interval36);
        boolean boolean39 = interval21.isBefore((org.joda.time.ReadableInterval) interval36);
        long long40 = interval36.getStartMillis();
        boolean boolean41 = interval6.overlaps((org.joda.time.ReadableInterval) interval36);
        org.joda.time.DateTime dateTime42 = interval6.getEnd();
        java.lang.String str43 = interval6.toString();
        java.lang.String str44 = interval6.toString();
        org.joda.time.Interval interval45 = interval6.toInterval();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType49);
        int int51 = mutablePeriod50.getMonths();
        org.joda.time.Interval interval52 = new org.joda.time.Interval(readableInstant46, (org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.Chronology chronology53 = interval52.getChronology();
        org.joda.time.MutableInterval mutableInterval54 = interval52.toMutableInterval();
        org.joda.time.LocalDate localDate55 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = null;
        boolean boolean57 = localDate55.isSupported(dateTimeFieldType56);
        org.joda.time.LocalDate.Property property58 = localDate55.yearOfEra();
        org.joda.time.Interval interval59 = localDate55.toInterval();
        boolean boolean60 = interval59.isBeforeNow();
        org.joda.time.Interval interval61 = interval59.toInterval();
        boolean boolean62 = interval61.containsNow();
        boolean boolean63 = mutableInterval54.contains((org.joda.time.ReadableInterval) interval61);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval67 = new org.joda.time.Interval(readableDuration64, (org.joda.time.ReadableInstant) dateTime66);
        long long68 = interval67.getEndMillis();
        org.joda.time.ReadableInstant readableInstant69 = null;
        boolean boolean70 = interval67.isBefore(readableInstant69);
        boolean boolean71 = mutableInterval54.isBefore((org.joda.time.ReadableInterval) interval67);
        boolean boolean72 = interval6.overlaps((org.joda.time.ReadableInterval) interval67);
        org.joda.time.DateTime dateTime73 = interval6.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval75 = interval6.withEndMillis((long) 26394312);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645514451657L + "'", long40 == 1645514451657L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T07:20:51.656Z/2022-02-22T07:20:51.690Z" + "'", str43, "2022-02-22T07:20:51.656Z/2022-02-22T07:20:51.690Z");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T07:20:51.656Z/2022-02-22T07:20:51.690Z" + "'", str44, "2022-02-22T07:20:51.656Z/2022-02-22T07:20:51.690Z");
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(mutableInterval54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-1L) + "'", long68 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test2880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2880");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours((int) (byte) 100);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMinutes(26181768);
        org.joda.time.DateTime dateTime9 = dateTime7.plusDays(436);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime7.withHourOfDay(53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test2881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2881");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight3 = property1.setCopy(26176);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26176 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
    }

    @Test
    public void test2882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2882");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.TimeOfDay timeOfDay36 = property34.getTimeOfDay();
        int int37 = property34.getMaximumValueOverall();
        java.util.Locale locale39 = java.util.Locale.CHINA;
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale40);
        java.lang.String str42 = locale39.getDisplayVariant(locale40);
        org.joda.time.TimeOfDay timeOfDay43 = property34.setCopy("1", locale39);
        org.joda.time.DateTime dateTime44 = timeOfDay43.toDateTimeToday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((java.lang.Object) timeOfDay43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.TimeOfDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 999 + "'", int37 == 999);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645514451728,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=51,MILLISECOND=728,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test2883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2883");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight11 = yearMonthDay10.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        mutableDateTime13.add((long) 1);
        mutableDateTime13.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime13.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime13.getZone();
        org.joda.time.DateTime dateTime20 = yearMonthDay10.toDateTimeAtCurrentTime(dateTimeZone19);
        int int21 = dateTime20.getEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime20.withTime(26311426, 26311836, 40, 26426746);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26311426 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test2884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2884");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        mutableDateTime1.setMonthOfYear(1);
        mutableDateTime1.addWeekyears(4);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime1.toMutableDateTime(dateTimeZone8);
        org.joda.time.Instant instant11 = mutableDateTime10.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime10.setDate(26275508, 26382314, 26318904);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26382314 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str2, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(instant11);
    }

    @Test
    public void test2885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2885");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight11.toMutableDateTime();
        mutableDateTime12.add((long) 1);
        org.joda.time.DateTime dateTime15 = mutableDateTime12.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime12, readableDuration16, periodType17);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay10.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime23 = dateTime21.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfMonth();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        mutablePeriod28.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        java.lang.String str34 = mutablePeriod28.toString();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadablePeriod) mutablePeriod28);
        int int36 = mutablePeriod28.getMonths();
        mutablePeriod28.setPeriod((long) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay10.minus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.Interval interval40 = yearMonthDay39.toInterval();
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight41.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.withDayOfYear(9);
        org.joda.time.Interval interval48 = dateMidnight47.toInterval();
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = null;
        boolean boolean51 = localDate49.isSupported(dateTimeFieldType50);
        org.joda.time.LocalDate.Property property52 = localDate49.yearOfEra();
        org.joda.time.DateTimeField dateTimeField53 = property52.getField();
        org.joda.time.LocalDate localDate54 = property52.roundCeilingCopy();
        int int55 = localDate54.getDayOfMonth();
        int int56 = localDate54.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Interval interval58 = localDate54.toInterval(dateTimeZone57);
        org.joda.time.Interval interval59 = interval48.gap((org.joda.time.ReadableInterval) interval58);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval63 = new org.joda.time.Interval(readableDuration60, (org.joda.time.ReadableInstant) dateTime62);
        long long64 = interval63.getEndMillis();
        org.joda.time.ReadableInterval readableInterval65 = null;
        boolean boolean66 = interval63.isAfter(readableInterval65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType70);
        int int72 = mutablePeriod71.getMonths();
        org.joda.time.Interval interval73 = new org.joda.time.Interval(readableInstant67, (org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.Chronology chronology74 = interval73.getChronology();
        org.joda.time.YearMonthDay yearMonthDay75 = new org.joda.time.YearMonthDay(chronology74);
        org.joda.time.YearMonthDay yearMonthDay77 = yearMonthDay75.minusMonths((int) (short) -1);
        org.joda.time.LocalDate localDate78 = yearMonthDay77.toLocalDate();
        org.joda.time.Interval interval79 = yearMonthDay77.toInterval();
        boolean boolean80 = interval63.isBefore((org.joda.time.ReadableInterval) interval79);
        boolean boolean81 = interval58.contains((org.joda.time.ReadableInterval) interval79);
        boolean boolean82 = interval40.isAfter((org.joda.time.ReadableInterval) interval79);
        long long83 = interval79.getStartMillis();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0.034S" + "'", str34, "PT0.034S");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-1L) + "'", long64 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(yearMonthDay77);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1647907200000L + "'", long83 == 1647907200000L);
    }

    @Test
    public void test2886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2886");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        org.joda.time.DateTime dateTime8 = dateTime1.plusHours(5);
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 2000, dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime1.toDateTime(dateTimeZone12);
        int int16 = dateTime15.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test2887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2887");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalDate localDate3 = localDate1.withCenturyOfEra((int) (short) 0);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.lang.String str7 = dateTimeZone5.getName((long) 100);
        org.joda.time.DateTime dateTime8 = localDate3.toDateTimeAtStartOfDay(dateTimeZone5);
        org.joda.time.DateTime dateTime10 = dateTime8.plusSeconds(26296396);
        org.joda.time.DateTime.Property property11 = dateTime8.era();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        mutableDateTime14.add((long) 1);
        mutableDateTime14.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime14.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime14.getZone();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale22.getCountry();
        java.lang.String str24 = dateTimeZone20.getName(1645514207216L, locale22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = property11.setCopy("P26181768DT0.034S", locale22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"P26181768DT0.034S\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
    }

    @Test
    public void test2888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2888");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime3 = property2.withMaximumValue();
        org.joda.time.DateTime dateTime4 = property2.roundHalfFloorCopy();
        int int5 = dateTime4.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test2889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2889");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        java.lang.String str36 = property34.toString();
        org.joda.time.DurationField durationField37 = property34.getDurationField();
        long long40 = durationField37.getDifferenceAsLong((long) 26200578, 26275273L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Property[millisOfSecond]" + "'", str36, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-74695L) + "'", long40 == (-74695L));
    }

    @Test
    public void test2890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2890");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        int int11 = yearMonthDay8.size();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        int int17 = mutablePeriod16.getMonths();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableInstant12, (org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay(chronology19);
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyearOfCentury();
        org.joda.time.DurationField durationField23 = chronology19.months();
        org.joda.time.DurationFieldType durationFieldType24 = durationField23.getType();
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay8.withFieldAdded(durationFieldType24, 26173324);
        org.joda.time.Chronology chronology27 = yearMonthDay26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.dayOfMonth();
        int int31 = dateTimeField28.getDifference((long) 26352059, (long) 171);
        java.lang.Object obj32 = null;
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType36 = periodType35.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType40);
        int int42 = mutablePeriod41.getMonths();
        org.joda.time.Interval interval43 = new org.joda.time.Interval(readableInstant37, (org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType49);
        int int51 = mutablePeriod50.getMonths();
        org.joda.time.Interval interval52 = new org.joda.time.Interval(readableInstant46, (org.joda.time.ReadablePeriod) mutablePeriod50);
        int[] intArray55 = chronology44.get((org.joda.time.ReadablePeriod) mutablePeriod50, 1L, (long) 4);
        org.joda.time.Period period56 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType35, chronology44);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(obj32, chronology44);
        org.joda.time.DurationField durationField58 = chronology44.millis();
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(chronology44);
        java.lang.String str60 = yearMonthDay59.toString();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType65);
        int int67 = mutablePeriod66.getMonths();
        org.joda.time.Interval interval68 = new org.joda.time.Interval(readableInstant62, (org.joda.time.ReadablePeriod) mutablePeriod66);
        org.joda.time.Chronology chronology69 = interval68.getChronology();
        org.joda.time.YearMonthDay yearMonthDay70 = new org.joda.time.YearMonthDay(chronology69);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay70.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay74 = yearMonthDay70.plusYears(2);
        int[] intArray75 = yearMonthDay70.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray77 = dateTimeField28.addWrapPartial((org.joda.time.ReadablePartial) yearMonthDay59, 26391959, intArray75, 439);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022-02-22" + "'", str60, "2022-02-22");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[2022, 2, 22]");
    }

    @Test
    public void test2891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2891");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology4 = dateMidnight3.getChronology();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDayOfMonth(8);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.DateTime dateTime13 = dateTime10.plusSeconds(10);
        org.joda.time.DateTime dateTime15 = dateTime10.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        int int18 = dateMidnight3.get(dateTimeFieldType16);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime1.property(dateTimeFieldType16);
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        java.lang.String str23 = dateTimeZone21.getName((long) 100);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone21);
        mutableDateTime1.setZoneRetainFields(dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime1.toMutableDateTime();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str2, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime26);
    }

    @Test
    public void test2892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2892");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.plusHours(12);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime7 = dateMidnight6.toMutableDateTime();
        mutableDateTime7.add((long) 1);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.months();
        mutableDateTime7.add(durationFieldType10, (int) (byte) 1);
        org.joda.time.DateTime dateTime14 = dateTime5.withFieldAdded(durationFieldType10, 0);
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        long long17 = duration16.getMillis();
        org.joda.time.Duration duration19 = new org.joda.time.Duration((long) (byte) 0);
        long long20 = duration19.getMillis();
        int int21 = duration16.compareTo((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTime dateTime22 = dateTime14.minus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTime.Property property23 = dateTime14.secondOfMinute();
        org.joda.time.DateTime dateTime25 = dateTime14.minusMillis(16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime25.withMinuteOfHour(722);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 722 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514452066,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=52,MILLISECOND=66,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test2893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2893");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.setHourOfDay((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime1.copy();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration6, (org.joda.time.ReadableInstant) dateTime8);
        long long10 = interval9.getEndMillis();
        long long11 = interval9.toDurationMillis();
        org.joda.time.Chronology chronology12 = interval9.getChronology();
        org.joda.time.DateTime dateTime13 = interval9.getStart();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        boolean boolean30 = interval20.contains((org.joda.time.ReadableInterval) interval28);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType34);
        int int36 = mutablePeriod35.getMonths();
        org.joda.time.Interval interval37 = new org.joda.time.Interval(readableInstant31, (org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.Chronology chronology38 = interval37.getChronology();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType42);
        int int44 = mutablePeriod43.getMonths();
        org.joda.time.Interval interval45 = new org.joda.time.Interval(readableInstant39, (org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.Chronology chronology46 = interval45.getChronology();
        boolean boolean47 = interval37.contains((org.joda.time.ReadableInterval) interval45);
        boolean boolean48 = interval20.overlaps((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((long) 86399);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType54);
        int int56 = mutablePeriod55.getMonths();
        org.joda.time.Interval interval57 = new org.joda.time.Interval(readableInstant51, (org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.Chronology chronology58 = interval57.getChronology();
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(chronology58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType63);
        int int65 = mutablePeriod64.getMonths();
        org.joda.time.Interval interval66 = new org.joda.time.Interval(readableInstant60, (org.joda.time.ReadablePeriod) mutablePeriod64);
        int[] intArray69 = chronology58.get((org.joda.time.ReadablePeriod) mutablePeriod64, 1L, (long) 4);
        org.joda.time.PeriodType periodType70 = mutablePeriod64.getPeriodType();
        org.joda.time.Period period71 = duration50.toPeriod(periodType70);
        boolean boolean72 = interval37.equals((java.lang.Object) duration50);
        org.joda.time.DateTime dateTime73 = interval37.getStart();
        org.joda.time.Interval interval74 = interval9.gap((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Period period75 = interval37.toPeriod();
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period75, 26272337);
        int int78 = mutableDateTime1.getDayOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 63 + "'", int78 == 63);
    }

    @Test
    public void test2894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2894");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        mutablePeriod15.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        java.lang.String str21 = mutablePeriod15.toString();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Interval interval24 = interval22.withDurationAfterStart(readableDuration23);
        boolean boolean25 = interval6.isBefore((org.joda.time.ReadableInterval) interval22);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        int int31 = mutablePeriod30.getMonths();
        org.joda.time.Interval interval32 = new org.joda.time.Interval(readableInstant26, (org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType37);
        int int39 = mutablePeriod38.getMonths();
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableInstant34, (org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.Chronology chronology41 = interval40.getChronology();
        boolean boolean42 = interval32.contains((org.joda.time.ReadableInterval) interval40);
        long long43 = interval40.getEndMillis();
        org.joda.time.Interval interval44 = interval22.gap((org.joda.time.ReadableInterval) interval40);
        org.joda.time.DateTime dateTime45 = interval40.getStart();
        long long46 = interval40.toDurationMillis();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.034S" + "'", str21, "PT0.034S");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645514452206L + "'", long43 == 1645514452206L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 34L + "'", long46 == 34L);
    }

    @Test
    public void test2895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2895");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone2);
        long long5 = dateTimeZone2.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone2);
        org.joda.time.LocalDate localDate9 = localDate7.withYear((int) (byte) -1);
        org.joda.time.LocalDate.Property property10 = localDate7.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test2896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2896");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        java.util.TimeZone timeZone3 = calendar1.getTimeZone();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfYear((int) (byte) 1);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(readableDuration5, (org.joda.time.ReadableInstant) dateTime7, periodType10);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime13 = dateMidnight12.toMutableDateTime();
        mutableDateTime13.add((long) 1);
        org.joda.time.DateTime dateTime16 = mutableDateTime13.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.years();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime13, readableDuration17, periodType18);
        org.joda.time.Chronology chronology20 = mutableDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 2, periodType10, chronology20);
        boolean boolean23 = calendar1.before((java.lang.Object) mutablePeriod22);
        org.joda.time.Period period25 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period27 = period25.minusYears(8);
        org.joda.time.Period period29 = period25.withSeconds(11);
        int int30 = period29.getMinutes();
        org.joda.time.Period period31 = period29.toPeriod();
        org.joda.time.Period period33 = period29.plusWeeks(11);
        org.joda.time.Period period35 = period29.withDays(270);
        java.lang.String str36 = period35.toString();
        int int37 = period35.size();
        org.joda.time.Weeks weeks38 = period35.toStandardWeeks();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod22.setPeriod((org.joda.time.ReadablePeriod) weeks38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514452193,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=52,MILLISECOND=193,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "P270DT11S" + "'", str36, "P270DT11S");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 8 + "'", int37 == 8);
        org.junit.Assert.assertNotNull(weeks38);
    }

    @Test
    public void test2897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2897");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfDay(436);
        org.joda.time.Chronology chronology8 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfEvenCopy();
        int int11 = localDateTime10.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withWeekyear(27425238);
        int int14 = localDateTime13.getCenturyOfEra();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514452220,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=52,MILLISECOND=220,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 274252 + "'", int14 == 274252);
    }

    @Test
    public void test2898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2898");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withCenturyOfEra((int) (byte) 0);
        java.util.Date date9 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay10 = org.joda.time.YearMonthDay.fromDateFields(date9);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusYears(2022);
        org.joda.time.DateTime dateTime13 = dateTime1.withFields((org.joda.time.ReadablePartial) yearMonthDay10);
        org.joda.time.DateTime dateTime14 = dateTime1.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime16 = dateTime14.withYearOfCentury((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime16.toMutableDateTimeISO();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight18.withDayOfYear((int) (short) 10);
        boolean boolean24 = dateMidnight22.isBefore((long) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType29);
        int int31 = mutablePeriod30.getMonths();
        org.joda.time.Interval interval32 = new org.joda.time.Interval(readableInstant26, (org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.Chronology chronology33 = interval32.getChronology();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(chronology33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType38);
        int int40 = mutablePeriod39.getMonths();
        org.joda.time.Interval interval41 = new org.joda.time.Interval(readableInstant35, (org.joda.time.ReadablePeriod) mutablePeriod39);
        int[] intArray44 = chronology33.get((org.joda.time.ReadablePeriod) mutablePeriod39, 1L, (long) 4);
        boolean boolean45 = dateTimeFieldType25.isSupported(chronology33);
        org.joda.time.DateMidnight.Property property46 = dateMidnight22.property(dateTimeFieldType25);
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType25.getDurationType();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime17.property(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test2899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2899");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfMonth();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        mutablePeriod15.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        java.lang.String str21 = mutablePeriod15.toString();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Interval interval24 = interval22.withDurationAfterStart(readableDuration23);
        boolean boolean25 = interval6.isBefore((org.joda.time.ReadableInterval) interval22);
        boolean boolean27 = interval22.contains(0L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.034S" + "'", str21, "PT0.034S");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2900");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod18, 1L, (long) 4);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType3, chronology12);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(obj0, chronology12);
        org.joda.time.DurationField durationField26 = chronology12.millis();
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        int int33 = mutablePeriod32.getMonths();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableInstant28, (org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(chronology35);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay36.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay36.minusDays(86399999);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime46 = dateTime44.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property47 = dateTime46.dayOfMonth();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType50);
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType54);
        mutablePeriod51.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod55);
        java.lang.String str57 = mutablePeriod51.toString();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadablePeriod) mutablePeriod51);
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.minusWeeks(0);
        boolean boolean65 = mutablePeriod51.equals((java.lang.Object) 0);
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay36.minus((org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType69);
        org.joda.time.DurationFieldType durationFieldType71 = org.joda.time.DurationFieldType.months();
        mutablePeriod70.set(durationFieldType71, (int) 'a');
        org.joda.time.ReadableDuration readableDuration74 = null;
        mutablePeriod70.add(readableDuration74);
        org.joda.time.YearMonthDay yearMonthDay76 = yearMonthDay66.minus((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.Period period77 = mutablePeriod70.toPeriod();
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay27.withPeriodAdded((org.joda.time.ReadablePeriod) period77, 366);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PT0.034S" + "'", str57, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(yearMonthDay79);
    }

    @Test
    public void test2901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2901");
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        boolean boolean9 = localDate7.isSupported(dateTimeFieldType8);
        org.joda.time.LocalDate.Property property10 = localDate7.yearOfEra();
        org.joda.time.Interval interval11 = localDate7.toInterval();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        org.joda.time.Duration duration32 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod20.setPeriod((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((long) (byte) 0);
        long long36 = duration35.getMillis();
        org.joda.time.Duration duration38 = new org.joda.time.Duration((long) (byte) 0);
        long long39 = duration38.getMillis();
        int int40 = duration35.compareTo((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration42 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration38, 10);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime44 = dateMidnight43.toMutableDateTime();
        mutableDateTime44.add((long) 1);
        org.joda.time.DateTime dateTime47 = mutableDateTime44.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.years();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime44, readableDuration48, periodType49);
        org.joda.time.Chronology chronology51 = mutableDateTime44.getChronology();
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now(chronology51);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime56 = dateTime54.withDayOfYear((int) (byte) 1);
        int int57 = dateTime56.getDayOfMonth();
        org.joda.time.Duration duration59 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime60 = dateTime56.minus((org.joda.time.ReadableDuration) duration59);
        mutableDateTime52.add((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Duration duration63 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean64 = duration59.isShorterThan((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Duration duration66 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean67 = duration59.isLongerThan((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Duration duration69 = duration38.withDurationAdded((org.joda.time.ReadableDuration) duration66, 999);
        org.joda.time.LocalDate localDate70 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property71 = localDate70.dayOfYear();
        org.joda.time.DateMidnight dateMidnight72 = localDate70.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight73 = localDate70.toDateMidnight();
        org.joda.time.Period period74 = duration38.toPeriodTo((org.joda.time.ReadableInstant) dateMidnight73);
        long long75 = duration38.getStandardDays();
        org.joda.time.Interval interval76 = interval11.withDurationAfterStart((org.joda.time.ReadableDuration) duration38);
        long long77 = interval11.getStartMillis();
        org.joda.time.Chronology chronology78 = interval11.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime79 = new org.joda.time.MutableDateTime(26392079, (-1968), 0, 1970, 0, 1969, 26161854, chronology78);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 1645488000000L + "'", long77 == 1645488000000L);
        org.junit.Assert.assertNotNull(chronology78);
    }

    @Test
    public void test2902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2902");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay((long) (short) 10);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.plusMinutes((int) (byte) 100);
        java.util.Locale locale15 = java.util.Locale.JAPANESE;
        java.lang.String str16 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) timeOfDay14, locale15);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTimeToday();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test2903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2903");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        int int9 = mutableDateTime1.getDayOfWeek();
        mutableDateTime1.setMillis((long) 53);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.DateTime dateTime18 = dateTime15.plusSeconds(10);
        org.joda.time.DateTime dateTime20 = dateTime15.minus((long) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTimeISO();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((int) (short) 1, 21, 26296396, 2922789);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod27);
        java.util.TimeZone timeZone30 = null;
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone31);
        long long34 = dateTimeZone31.previousTransition((long) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone31);
        mutableDateTime1.setZone(dateTimeZone31);
        boolean boolean38 = dateTimeZone31.isFixed();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test2904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2904");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("391");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"391\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2905");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) ' ');
        java.util.Locale locale7 = java.util.Locale.PRC;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.fromCalendarFields(calendar8);
        org.joda.time.DateTime dateTime10 = localDateTime9.toDateTime();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMillisOfDay(436);
        org.joda.time.DateTime dateTime15 = localDateTime12.toDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusWeeks(3);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.plusHours(52);
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime6, (org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property21 = localDateTime6.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField23 = localDateTime6.getField(26344079);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26344079");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514454110,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=54,MILLISECOND=110,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514454110,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=54,MILLISECOND=110,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test2906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2906");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Days days8 = period7.toStandardDays();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime12 = dateTime10.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        mutablePeriod17.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        java.lang.String str23 = mutablePeriod17.toString();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadablePeriod) mutablePeriod17);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusWeeks(0);
        boolean boolean31 = mutablePeriod17.equals((java.lang.Object) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period32 = period7.minus((org.joda.time.ReadablePeriod) mutablePeriod17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT0.034S" + "'", str23, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2907");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 100, chronology12);
        org.joda.time.DurationField durationField14 = chronology12.centuries();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 53, (long) 26173324, chronology12);
        org.joda.time.Period period17 = new org.joda.time.Period(1645514286547L, chronology12);
        boolean boolean18 = dateTimeFieldType0.isSupported(chronology12);
        org.joda.time.DateTimeField dateTimeField19 = chronology12.dayOfMonth();
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale22);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = dateTimeField19.set((long) 26275273, "26296299", locale22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26296299 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645514454144,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=54,MILLISECOND=144,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test2908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2908");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval3 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        long long4 = interval3.getEndMillis();
        long long5 = interval3.toDurationMillis();
        org.joda.time.Chronology chronology6 = interval3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.hours();
        long long9 = durationField7.getValueAsLong(15836504140801182L);
        long long12 = durationField7.getValueAsLong(1645514386378L, (long) 26241884);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4399028928L + "'", long9 == 4399028928L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 457087L + "'", long12 == 457087L);
    }

    @Test
    public void test2909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2909");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime6.copy();
        mutableDateTime9.setMillisOfDay(26310637);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test2910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2910");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        int[] intArray26 = chronology15.get((org.joda.time.ReadablePeriod) mutablePeriod21, 1L, (long) 4);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType6, chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter3.withChronology(chronology15);
        boolean boolean29 = dateTimeFormatter28.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = dateTimeFormatter28.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser31 = dateTimeFormatter28.getParser();
        boolean boolean32 = dateTimeFormatter28.isOffsetParsed();
        org.joda.time.Chronology chronology33 = dateTimeFormatter28.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter34 = dateTimeFormatter28.getPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.parse("Ora media di Greenwich", dateTimeFormatter28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(dateTimePrinter30);
        org.junit.Assert.assertNull(dateTimeParser31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNull(dateTimePrinter34);
    }

    @Test
    public void test2911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2911");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfDay();
        org.joda.time.DateTime dateTime4 = dateTime1.withEra(1);
        org.joda.time.DateTime dateTime6 = dateTime1.plusMillis(0);
        org.joda.time.DateTime.Property property7 = dateTime1.hourOfDay();
        java.lang.String str8 = property7.getAsShortText();
        org.joda.time.DateTime dateTime10 = property7.addToCopy(50);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "23" + "'", str8, "23");
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test2912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2912");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        mutableDateTime1.setMonthOfYear(1);
        mutableDateTime1.addWeekyears(4);
        org.joda.time.Duration duration8 = new org.joda.time.Duration((long) (byte) 0);
        long long9 = duration8.getMillis();
        org.joda.time.Duration duration11 = new org.joda.time.Duration((long) (byte) 0);
        long long12 = duration11.getMillis();
        int int13 = duration8.compareTo((org.joda.time.ReadableDuration) duration11);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration8, 26162430);
        long long16 = duration8.getMillis();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime20 = dateTime18.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfMonth();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        mutablePeriod25.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        java.lang.String str31 = mutablePeriod25.toString();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadablePeriod) mutablePeriod25);
        mutablePeriod25.setValue(0, 2022);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod25.setPeriod((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration40 = new org.joda.time.Duration((long) (byte) 0);
        long long41 = duration40.getMillis();
        org.joda.time.Duration duration43 = new org.joda.time.Duration((long) (byte) 0);
        long long44 = duration43.getMillis();
        int int45 = duration40.compareTo((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration47 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration43, 10);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime49 = dateMidnight48.toMutableDateTime();
        mutableDateTime49.add((long) 1);
        org.joda.time.DateTime dateTime52 = mutableDateTime49.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.years();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime49, readableDuration53, periodType54);
        org.joda.time.Chronology chronology56 = mutableDateTime49.getChronology();
        org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.now(chronology56);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime61 = dateTime59.withDayOfYear((int) (byte) 1);
        int int62 = dateTime61.getDayOfMonth();
        org.joda.time.Duration duration64 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime65 = dateTime61.minus((org.joda.time.ReadableDuration) duration64);
        mutableDateTime57.add((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Duration duration68 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean69 = duration64.isShorterThan((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Duration duration71 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean72 = duration64.isLongerThan((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Duration duration74 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration71, 999);
        org.joda.time.LocalDate localDate75 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property76 = localDate75.dayOfYear();
        org.joda.time.DateMidnight dateMidnight77 = localDate75.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight78 = localDate75.toDateMidnight();
        org.joda.time.Period period79 = duration43.toPeriodTo((org.joda.time.ReadableInstant) dateMidnight78);
        long long80 = duration43.getStandardDays();
        boolean boolean81 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = duration8.toPeriod(chronology82);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str2, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT0.034S" + "'", str31, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(period83);
    }

    @Test
    public void test2913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2913");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(192, 59);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test2914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2914");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        int int2 = mutableDateTime1.getYearOfEra();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime3.size();
        org.joda.time.LocalTime.Property property5 = localTime3.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = localTime3.toDateTimeToday(dateTimeZone6);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime1, dateTimeZone6);
        int int9 = localTime8.getMillisOfDay();
        org.joda.time.LocalTime localTime11 = localTime8.plusMinutes(117);
        org.joda.time.LocalTime.Property property12 = localTime8.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime14 = localTime8.withHourOfDay(26236476);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26236476 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test2915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2915");
        java.util.Date date3 = new java.util.Date(365, 702, 8);
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.fromDateFields(date3);
        org.joda.time.LocalDate localDate6 = localDate4.plusWeeks(16);
        org.joda.time.LocalDate localDate8 = localDate4.minusWeeks(26181768);
        int int9 = localDate4.getEra();
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sun Jul 08 00:00:00 GMT 2323");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test2916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2916");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod18, 1L, (long) 4);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType3, chronology12);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(obj0, chronology12);
        org.joda.time.DateTimeField dateTimeField26 = chronology12.yearOfEra();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology12);
        org.joda.time.YearMonthDay yearMonthDay28 = dateTime27.toYearMonthDay();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
    }

    @Test
    public void test2917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2917");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone2);
        long long5 = dateTimeZone2.previousTransition((long) (short) -1);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(dateTimeZone2);
        org.joda.time.LocalDate localDate9 = localDate7.withYear((int) (byte) -1);
        java.util.Locale locale10 = java.util.Locale.PRC;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(locale10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.fromCalendarFields(calendar11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.withMinuteOfHour(0);
        int int19 = localDateTime12.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime12.plusMillis(12);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime12.withSecondOfMinute(10);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = localDate9.compareTo((org.joda.time.ReadablePartial) localDateTime23);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645514454467,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=54,MILLISECOND=467,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test2918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2918");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withCenturyOfEra(365);
        int int6 = localDateTime5.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int8 = localDateTime5.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusDays((-1));
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.minusMonths(26258407);
        int int13 = localDateTime12.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514454479,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=54,MILLISECOND=479,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 479 + "'", int6 == 479);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
    }

    @Test
    public void test2919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2919");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology1 = dateMidnight0.getChronology();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        mutablePeriod5.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod9);
        java.lang.String str11 = mutablePeriod5.toString();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight0.plus((org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfYear();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.Interval interval17 = localDate13.toInterval(dateTimeZone16);
        long long20 = dateTimeZone16.adjustOffset((long) 11, true);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight0.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.era();
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime25 = dateMidnight24.toMutableDateTime();
        mutableDateTime25.add((long) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.property(dateTimeFieldType28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight22.withField(dateTimeFieldType28, 721);
        org.joda.time.DateMidnight.Property property32 = dateMidnight21.property(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0.034S" + "'", str11, "PT0.034S");
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 11L + "'", long20 == 11L);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test2920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2920");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        int int5 = localDateTime4.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusDays(12);
        int int8 = localDateTime7.getSecondOfMinute();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        java.lang.String str12 = periodType11.toString();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.Period period21 = new org.joda.time.Period(1645514159731L, (long) 2022, periodType11, chronology20);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime7.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime7.minus((org.joda.time.ReadableDuration) duration24);
        int int26 = localDateTime7.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property27 = localDateTime7.dayOfYear();
        org.joda.time.DurationField durationField28 = property27.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime29 = property27.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = property27.getLocalDateTime();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514454565,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=54,MILLISECOND=565,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 26454564 + "'", int5 == 26454564);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 54 + "'", int8 == 54);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PeriodType[Years]" + "'", str12, "PeriodType[Years]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 26454564 + "'", int26 == 26454564);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test2921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2921");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateTime dateTime9 = dateTime3.plusYears((-1));
        org.joda.time.DateTime dateTime11 = dateTime9.withMillisOfSecond(0);
        boolean boolean12 = dateTime9.isAfterNow();
        org.joda.time.DateTime dateTime14 = dateTime9.minusMinutes(26200205);
        org.joda.time.DateTime dateTime16 = dateTime9.plusMonths(26242316);
        org.joda.time.DateTime dateTime18 = dateTime9.minusMonths(2122);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test2922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2922");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.DateTime dateTime3 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.lang.String str8 = property6.getName();
        int int9 = property6.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514454750,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=54,MILLISECOND=750,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hourOfDay" + "'", str8, "hourOfDay");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 23 + "'", int9 == 23);
    }

    @Test
    public void test2923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2923");
        org.joda.time.Period period1 = org.joda.time.Period.days(830);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test2924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2924");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime localTime3 = localTime0.plusMillis(11);
        int int4 = localTime0.size();
        org.joda.time.LocalTime.Property property5 = localTime0.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(4);
        org.joda.time.LocalTime localTime9 = property5.addCopy(5);
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(1970);
        org.joda.time.LocalTime localTime13 = localTime9.plusMinutes(18);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test2925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2925");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.TimeOfDay timeOfDay36 = property34.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay38 = property34.addToCopy(5);
        org.joda.time.DateTimeField dateTimeField39 = property34.getField();
        org.joda.time.TimeOfDay timeOfDay41 = property34.addNoWrapToCopy((int) ' ');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray42 = timeOfDay41.getFieldTypes();
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime44 = dateMidnight43.toMutableDateTime();
        mutableDateTime44.add((long) 1);
        org.joda.time.DateTime dateTime47 = mutableDateTime44.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.years();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime44, readableDuration48, periodType49);
        org.joda.time.Weeks weeks51 = period50.toStandardWeeks();
        org.joda.time.Period period53 = period50.minusYears((int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay41.withPeriodAdded((org.joda.time.ReadablePeriod) period53, (int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime57 = dateMidnight56.toMutableDateTime();
        java.lang.String str58 = mutableDateTime57.toString();
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology60 = dateMidnight59.getChronology();
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight59.withDayOfMonth(8);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime66 = dateTime64.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property67 = dateTime66.dayOfMonth();
        org.joda.time.DateTime dateTime69 = dateTime66.plusSeconds(10);
        org.joda.time.DateTime dateTime71 = dateTime66.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property73 = dateTime71.property(dateTimeFieldType72);
        int int74 = dateMidnight59.get(dateTimeFieldType72);
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime57.property(dateTimeFieldType72);
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime77 = dateMidnight76.toMutableDateTime();
        mutableDateTime77.add((long) 1);
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime77.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = property80.getFieldType();
        mutableDateTime57.set(dateTimeFieldType81, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay.Property property84 = timeOfDay55.property(dateTimeFieldType81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'secondOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray42);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(weeks51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str58, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
    }

    @Test
    public void test2926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2926");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        java.lang.String str2 = mutableDateTime1.toString();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.monthOfYear();
        java.lang.String str4 = mutableDateTime1.toString();
        int int5 = mutableDateTime1.getDayOfYear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.weekyear();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property6.getFieldType();
        org.joda.time.DateTimeField dateTimeField9 = property6.getField();
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getDisplayScript();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str15 = locale12.getDisplayVariant(locale14);
        java.util.Set<java.lang.String> strSet16 = locale14.getUnicodeLocaleAttributes();
        long long17 = dateTimeField9.set((long) 26294414, "134", locale14);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property19 = localDate18.dayOfYear();
        java.util.TimeZone timeZone20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forTimeZone(timeZone20);
        org.joda.time.Interval interval22 = localDate18.toInterval(dateTimeZone21);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.Interval interval24 = localDate23.toInterval();
        int int25 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.LocalDate localDate27 = localDate23.plusDays((int) (byte) 1);
        org.joda.time.DateTime dateTime28 = localDate23.toDateTimeAtStartOfDay();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType32);
        int int34 = mutablePeriod33.getMonths();
        org.joda.time.Interval interval35 = new org.joda.time.Interval(readableInstant29, (org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay(chronology36);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay37.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay37.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay37.minusDays(86399999);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime47 = dateTime45.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property48 = dateTime47.dayOfMonth();
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType51);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType55);
        mutablePeriod52.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod56);
        java.lang.String str58 = mutablePeriod52.toString();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadablePeriod) mutablePeriod52);
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone62);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.minusWeeks(0);
        boolean boolean66 = mutablePeriod52.equals((java.lang.Object) 0);
        org.joda.time.YearMonthDay yearMonthDay67 = yearMonthDay37.minus((org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.YearMonthDay.Property property68 = yearMonthDay37.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay69 = property68.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay69.withYear((-292275054));
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay71.minusDays(4);
        int int74 = localDate23.compareTo((org.joda.time.ReadablePartial) yearMonthDay71);
        org.joda.time.DateTime dateTime75 = localDate23.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str2, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str4, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-57937999305586L) + "'", long17 == (-57937999305586L));
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-292275054) + "'", int25 == (-292275054));
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PT0.034S" + "'", str58, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    public void test2927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2927");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "PT0.034S", "53" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.lang.String[] strArray14 = new java.lang.String[] { "PT0.034S", "53" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList15);
        java.lang.String str18 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList15);
        java.lang.String[] strArray26 = new java.lang.String[] { "it_IT", "months", "53", "hi!", "months", "it_IT", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.plusYears((int) (byte) 0);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.withYear((int) (byte) 0);
        boolean boolean36 = strSet27.remove((java.lang.Object) dateMidnight35);
        java.util.Locale.FilteringMode filteringMode37 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet27, filteringMode37);
        java.util.Iterator<java.lang.String> strItor39 = strSet27.iterator();
        boolean boolean41 = strSet27.add("eras");
        java.util.Iterator<java.lang.String> strItor42 = strSet27.iterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + filteringMode37 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode37.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(strItor39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strItor42);
    }

    @Test
    public void test2928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2928");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        int int3 = mutableDateTime2.getYearOfEra();
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.months();
        mutablePeriod7.set(durationFieldType8, (int) 'a');
        mutablePeriod7.addHours((int) (byte) -1);
        mutablePeriod7.addYears(2022);
        mutableDateTime2.add((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime19 = dateMidnight18.toMutableDateTime();
        mutableDateTime19.add((long) 1);
        org.joda.time.DateTime dateTime22 = mutableDateTime19.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.years();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime19, readableDuration23, periodType24);
        java.lang.String str26 = mutableDateTime19.toString();
        org.joda.time.Chronology chronology27 = mutableDateTime19.getChronology();
        mutablePeriod7.setPeriod(1645514159651L, (long) (short) -1, chronology27);
        mutablePeriod7.setSeconds(26160118);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay0.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        mutablePeriod7.addYears(11);
        mutablePeriod7.addSeconds(6);
        mutablePeriod7.addHours(931);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str26, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(yearMonthDay31);
    }

    @Test
    public void test2929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2929");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "P0Y");
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder6 = builder4.setLanguage("ko");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder4.setUnicodeLocaleKeyword("PT11S", "22 Feb 2022 07:20:52 GMT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: PT11S [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test2930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2930");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        int int1 = localTime0.size();
        org.joda.time.LocalTime localTime3 = localTime0.plusMillis(11);
        int int4 = localTime0.size();
        org.joda.time.LocalTime.Property property5 = localTime0.millisOfDay();
        org.joda.time.LocalTime localTime7 = property5.addWrapFieldToCopy(4);
        org.joda.time.LocalTime localTime9 = property5.addCopy(5);
        org.joda.time.DateTimeField dateTimeField10 = property5.getField();
        java.lang.String str12 = dateTimeField10.getAsShortText((long) 150);
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfYear();
        org.joda.time.LocalDate localDate15 = property14.roundCeilingCopy();
        org.joda.time.LocalDate localDate17 = property14.addWrapFieldToCopy(292269054);
        org.joda.time.LocalDate localDate19 = property14.setCopy((int) 'a');
        org.joda.time.LocalDate localDate20 = property14.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight22.toMutableDateTime();
        mutableDateTime23.add((long) 1);
        org.joda.time.DateTime dateTime26 = mutableDateTime23.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.years();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime23, readableDuration27, periodType28);
        int[] intArray30 = period29.getValues();
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale33);
        java.lang.String str35 = locale32.getDisplayVariant(locale33);
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = null;
        boolean boolean38 = localDate36.isSupported(dateTimeFieldType37);
        org.joda.time.LocalDate.Property property39 = localDate36.yearOfEra();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        org.joda.time.DurationField durationField41 = dateTimeField40.getRangeDurationField();
        java.util.Locale locale43 = java.util.Locale.PRC;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(locale43);
        java.lang.String str45 = dateTimeField40.getAsShortText((long) (short) -1, locale43);
        java.lang.String str46 = locale33.getDisplayScript(locale43);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray47 = dateTimeField10.set((org.joda.time.ReadablePartial) localDate20, 26347901, intArray30, "265", locale33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 4 + "'", int1 == 4);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "150" + "'", str12, "150");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0]");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1645514456823,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=56,MILLISECOND=823,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNull(durationField41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1645514456823,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=56,MILLISECOND=823,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1969" + "'", str45, "1969");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test2931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2931");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMonths(436);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusMillis(26180820);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property11.addToCopy(610);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfEra(26166853);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514456855,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=56,MILLISECOND=855,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test2932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2932");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime3 = dateMidnight2.toMutableDateTime();
        mutableDateTime3.add((long) 1);
        org.joda.time.DateTime dateTime6 = mutableDateTime3.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime3, readableDuration7, periodType8);
        java.lang.String str10 = mutableDateTime3.toString();
        mutableDateTime3.addMinutes((int) ' ');
        int int13 = mutableDateTime3.getCenturyOfEra();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime19 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime21 = dateTime16.withWeekOfWeekyear((int) '4');
        boolean boolean22 = mutableDateTime3.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property23 = dateTime16.minuteOfDay();
        int int24 = property23.getMinimumValue();
        org.joda.time.DateTime dateTime25 = property23.withMinimumValue();
        org.joda.time.DateTime dateTime26 = property23.roundCeilingCopy();
        org.joda.time.Interval interval27 = duration1.toIntervalTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Interval interval29 = interval27.withEnd(readableInstant28);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str10, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 20 + "'", int13 == 20);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval29);
    }

    @Test
    public void test2933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2933");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        int[] intArray23 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod18, 1L, (long) 4);
        org.joda.time.Period period24 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType3, chronology12);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(obj0, chronology12);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone28);
        org.joda.time.DateTime dateTime30 = localDate25.toDateTimeAtMidnight(dateTimeZone28);
        int int31 = localDate25.getWeekyear();
        org.joda.time.LocalDate localDate33 = localDate25.withDayOfYear((int) (short) 1);
        java.util.Date date34 = localDate33.toDate();
        java.lang.String str35 = date34.toGMTString();
        long long36 = date34.getTime();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Sat Jan 01 00:00:00 GMT 2022");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1 Jan 2022 00:00:00 GMT" + "'", str35, "1 Jan 2022 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1640995200000L + "'", long36 == 1640995200000L);
    }

    @Test
    public void test2934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2934");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-22T00:00:00.001Z");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes((long) 9);
        org.joda.time.DateTime dateTime4 = dateTime1.plus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        boolean boolean21 = interval11.contains((org.joda.time.ReadableInterval) interval19);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        int int27 = mutablePeriod26.getMonths();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(readableInstant22, (org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology29 = interval28.getChronology();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        boolean boolean38 = interval28.contains((org.joda.time.ReadableInterval) interval36);
        boolean boolean39 = interval11.overlaps((org.joda.time.ReadableInterval) interval28);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((long) 86399);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType45);
        int int47 = mutablePeriod46.getMonths();
        org.joda.time.Interval interval48 = new org.joda.time.Interval(readableInstant42, (org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.Chronology chronology49 = interval48.getChronology();
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay(chronology49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType54);
        int int56 = mutablePeriod55.getMonths();
        org.joda.time.Interval interval57 = new org.joda.time.Interval(readableInstant51, (org.joda.time.ReadablePeriod) mutablePeriod55);
        int[] intArray60 = chronology49.get((org.joda.time.ReadablePeriod) mutablePeriod55, 1L, (long) 4);
        org.joda.time.PeriodType periodType61 = mutablePeriod55.getPeriodType();
        org.joda.time.Period period62 = duration41.toPeriod(periodType61);
        boolean boolean63 = interval28.equals((java.lang.Object) duration41);
        org.joda.time.DateTime dateTime64 = interval28.getStart();
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.years();
        java.lang.String str66 = periodType65.toString();
        org.joda.time.PeriodType periodType67 = periodType65.withMinutesRemoved();
        org.joda.time.PeriodType periodType68 = periodType65.withHoursRemoved();
        org.joda.time.Period period69 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime64, periodType65);
        org.joda.time.MutablePeriod mutablePeriod70 = period69.toMutablePeriod();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PeriodType[Years]" + "'", str66, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(mutablePeriod70);
    }

    @Test
    public void test2935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2935");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.LocalTime localTime2 = dateTime1.toLocalTime();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now();
        int int4 = localTime2.compareTo((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime2.millisOfSecond();
        org.joda.time.LocalTime localTime6 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime7 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime8 = property5.withMinimumValue();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test2936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2936");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((java.lang.Object) "PT0.034S");
        int int2 = mutablePeriod1.size();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime4 = dateMidnight3.toMutableDateTime();
        mutableDateTime4.add((long) 1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime4.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property7.getFieldType();
        int int9 = property7.getMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime11 = property7.addWrapField(12);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property14 = dateTime13.secondOfDay();
        org.joda.time.DateTime dateTime16 = dateTime13.withEra(1);
        org.joda.time.DateTime dateTime18 = dateTime13.plusMillis(0);
        org.joda.time.DateTime.Property property19 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime20 = property19.roundHalfEvenCopy();
        mutablePeriod1.setPeriod((org.joda.time.ReadableInstant) mutableDateTime11, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = dateTime20.toDateTime();
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property24 = localDate23.dayOfYear();
        org.joda.time.DateMidnight dateMidnight25 = localDate23.toDateMidnight();
        org.joda.time.Chronology chronology26 = localDate23.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.DateTime dateTime28 = dateTime20.toDateTime(chronology26);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 86399 + "'", int9 == 86399);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test2937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2937");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (short) 10);
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        java.lang.String str3 = localDate1.toString();
        java.util.Locale locale4 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(1L, dateTimeZone7);
        boolean boolean9 = calendar5.before((java.lang.Object) localDate8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        int int20 = mutablePeriod19.getMonths();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.Chronology chronology22 = interval21.getChronology();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(chronology22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType27);
        int int29 = mutablePeriod28.getMonths();
        org.joda.time.Interval interval30 = new org.joda.time.Interval(readableInstant24, (org.joda.time.ReadablePeriod) mutablePeriod28);
        int[] intArray33 = chronology22.get((org.joda.time.ReadablePeriod) mutablePeriod28, 1L, (long) 4);
        org.joda.time.PeriodType periodType34 = mutablePeriod28.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay14.minus((org.joda.time.ReadablePeriod) mutablePeriod28);
        boolean boolean36 = localDate8.isBefore((org.joda.time.ReadablePartial) yearMonthDay14);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now(dateTimeZone38);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        long long43 = dateTimeZone38.getMillisKeepLocal(dateTimeZone41, (long) 2);
        org.joda.time.DateTime dateTime44 = localDate8.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.Interval interval45 = localDate1.toInterval(dateTimeZone41);
        org.joda.time.LocalDate.Property property46 = localDate1.weekyear();
        int int47 = localDate1.getEra();
        int int48 = localDate1.getDayOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645514457011,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=57,MILLISECOND=11,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 2L + "'", long43 == 2L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test2938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2938");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', chronology1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.months();
        mutablePeriod6.set(durationFieldType7, (int) 'a');
        mutablePeriod2.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod6);
        mutablePeriod6.setDays(0);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        mutablePeriod6.setPeriod(0L, chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.Chronology chronology24 = chronology21.withZone(dateTimeZone23);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology24);
    }

    @Test
    public void test2939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2939");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.Interval interval3 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateTime2);
        long long4 = interval3.getEndMillis();
        long long5 = interval3.toDurationMillis();
        org.joda.time.Chronology chronology6 = interval3.getChronology();
        org.joda.time.DateTime dateTime7 = interval3.getStart();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Chronology chronology23 = interval22.getChronology();
        boolean boolean24 = interval14.contains((org.joda.time.ReadableInterval) interval22);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        int int38 = mutablePeriod37.getMonths();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableInstant33, (org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        boolean boolean41 = interval31.contains((org.joda.time.ReadableInterval) interval39);
        boolean boolean42 = interval14.overlaps((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Duration duration44 = new org.joda.time.Duration((long) 86399);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType48);
        int int50 = mutablePeriod49.getMonths();
        org.joda.time.Interval interval51 = new org.joda.time.Interval(readableInstant45, (org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.Chronology chronology52 = interval51.getChronology();
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay(chronology52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType57);
        int int59 = mutablePeriod58.getMonths();
        org.joda.time.Interval interval60 = new org.joda.time.Interval(readableInstant54, (org.joda.time.ReadablePeriod) mutablePeriod58);
        int[] intArray63 = chronology52.get((org.joda.time.ReadablePeriod) mutablePeriod58, 1L, (long) 4);
        org.joda.time.PeriodType periodType64 = mutablePeriod58.getPeriodType();
        org.joda.time.Period period65 = duration44.toPeriod(periodType64);
        boolean boolean66 = interval31.equals((java.lang.Object) duration44);
        org.joda.time.DateTime dateTime67 = interval31.getStart();
        org.joda.time.Interval interval68 = interval3.gap((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Duration duration69 = interval3.toDuration();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType73);
        int int75 = mutablePeriod74.getMonths();
        org.joda.time.Interval interval76 = new org.joda.time.Interval(readableInstant70, (org.joda.time.ReadablePeriod) mutablePeriod74);
        org.joda.time.Chronology chronology77 = interval76.getChronology();
        org.joda.time.YearMonthDay yearMonthDay78 = new org.joda.time.YearMonthDay(chronology77);
        org.joda.time.YearMonthDay yearMonthDay80 = yearMonthDay78.minusMonths((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight81 = yearMonthDay80.toDateMidnight();
        org.joda.time.DateMidnight.Property property82 = dateMidnight81.dayOfMonth();
        org.joda.time.DateMidnight.Property property83 = dateMidnight81.dayOfWeek();
        org.joda.time.Interval interval84 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration69, (org.joda.time.ReadableInstant) dateMidnight81);
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight81.withCenturyOfEra(863999);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(yearMonthDay80);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateMidnight86);
    }

    @Test
    public void test2940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2940");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        org.joda.time.LocalDate localDate4 = localDate1.withDayOfYear(59);
        java.util.Date date5 = localDate1.toDate();
        org.joda.time.LocalDate localDate7 = localDate1.withYearOfEra(26352737);
        org.joda.time.LocalDate localDate9 = localDate1.withYear(26200205);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test2941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2941");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.LocalDate localDate2 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate4 = localDate2.minusWeeks(13);
        org.joda.time.Interval interval5 = localDate4.toInterval();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(interval5);
    }

    @Test
    public void test2942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2942");
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.now(dateTimeZone4);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = org.joda.time.DateMidnight.now();
        int int8 = dateTimeZone4.getOffset((org.joda.time.ReadableInstant) dateMidnight7);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(26396653, (-2181354), (-1613978169), dateTimeZone4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2181354 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test2943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2943");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType4);
        int int6 = mutablePeriod5.getMonths();
        org.joda.time.Interval interval7 = new org.joda.time.Interval(readableInstant1, (org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Chronology chronology8 = interval7.getChronology();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(chronology8);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekyearOfCentury();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(1645514182844L, chronology8);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(dateTimeZone14);
        boolean boolean16 = dateTimeZone14.isFixed();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((java.lang.Object) chronology8, dateTimeZone14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test2944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2944");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusDays(86399999);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        java.lang.String str29 = mutablePeriod23.toString();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) mutablePeriod23);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusWeeks(0);
        boolean boolean37 = mutablePeriod23.equals((java.lang.Object) 0);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime40 = dateMidnight39.toMutableDateTime();
        java.lang.String str41 = mutableDateTime40.toString();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime40.monthOfYear();
        mutableDateTime40.addYears(100);
        int int45 = mutableDateTime40.getWeekyear();
        mutableDateTime40.setHourOfDay(21);
        boolean boolean48 = yearMonthDay38.equals((java.lang.Object) 21);
        org.joda.time.Chronology chronology49 = yearMonthDay38.getChronology();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0.034S" + "'", str29, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str41, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2122 + "'", int45 == 2122);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(chronology49);
    }

    @Test
    public void test2945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2945");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        long long24 = duration23.getStandardDays();
        org.joda.time.Duration duration25 = duration16.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Period period28 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period30 = period28.minusYears(8);
        org.joda.time.Period period32 = period28.withSeconds(11);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType36);
        int int38 = mutablePeriod37.getMonths();
        org.joda.time.Interval interval39 = new org.joda.time.Interval(readableInstant33, (org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.Chronology chronology40 = interval39.getChronology();
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay(chronology40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType45);
        int int47 = mutablePeriod46.getMonths();
        org.joda.time.Interval interval48 = new org.joda.time.Interval(readableInstant42, (org.joda.time.ReadablePeriod) mutablePeriod46);
        int[] intArray51 = chronology40.get((org.joda.time.ReadablePeriod) mutablePeriod46, 1L, (long) 4);
        org.joda.time.PeriodType periodType52 = mutablePeriod46.getPeriodType();
        org.joda.time.Period period53 = period28.normalizedStandard(periodType52);
        org.joda.time.Period period54 = duration25.toPeriodTo(readableInstant26, periodType52);
        org.joda.time.Period period56 = period54.multipliedBy(26192581);
        org.joda.time.Period period58 = period56.minusWeeks(6);
        org.joda.time.Period period60 = period58.minusYears(26223309);
        org.joda.time.Period period61 = period58.negated();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period61);
    }

    @Test
    public void test2946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2946");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime20 = dateMidnight19.toMutableDateTime();
        java.lang.String str21 = mutableDateTime20.toString();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime20.monthOfYear();
        int int23 = property22.get();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.getMutableDateTime();
        java.util.TimeZone timeZone25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        java.lang.String str28 = dateTimeZone26.getName((long) 100);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone26);
        mutableDateTime24.setZone(dateTimeZone26);
        mutableDateTime9.setZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone26);
        boolean boolean34 = dateTimeZone26.isFixed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((java.lang.Object) dateTimeZone26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str21, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test2947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2947");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime dateTime8 = dateTime3.minus((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMonths(26167775);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight11.toMutableDateTime();
        mutableDateTime12.add((long) 1);
        org.joda.time.DateTime dateTime15 = mutableDateTime12.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime12, readableDuration16, periodType17);
        org.joda.time.Weeks weeks19 = period18.toStandardWeeks();
        org.joda.time.DateTime dateTime21 = dateTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period18, 26167775);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        int int28 = mutablePeriod27.getMonths();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readableInstant23, (org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Chronology chronology30 = interval29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfHalfday();
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime34 = localTime32.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutablePeriod36.add(readableDuration37);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType42);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.months();
        mutablePeriod43.set(durationFieldType44, (int) 'a');
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType51);
        int int53 = mutablePeriod52.getMonths();
        org.joda.time.Interval interval54 = new org.joda.time.Interval(readableInstant48, (org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.Chronology chronology55 = interval54.getChronology();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) (short) 100, chronology55);
        boolean boolean57 = durationFieldType44.isSupported(chronology55);
        mutablePeriod36.setPeriod((long) '4', chronology55);
        org.joda.time.LocalTime localTime59 = localTime34.minus((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.LocalTime localTime61 = localTime34.minusMinutes((int) (byte) -1);
        java.util.Locale locale62 = java.util.Locale.PRC;
        java.lang.String str63 = locale62.getISO3Country();
        java.lang.String str64 = locale62.getScript();
        java.lang.String str65 = dateTimeField31.getAsText((org.joda.time.ReadablePartial) localTime61, locale62);
        java.lang.String str66 = dateTime21.toString("53", locale62);
        java.lang.Object obj67 = locale62.clone();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(weeks19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "CHN" + "'", str63, "CHN");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "7" + "'", str65, "7");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "53" + "'", str66, "53");
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "zh_CN");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "zh_CN");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "zh_CN");
    }

    @Test
    public void test2948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2948");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.minusWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay4 = dateTime3.toYearMonthDay();
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withYear(59);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.getYearMonthDay();
        java.lang.String str10 = property8.getAsShortText();
        org.joda.time.YearMonthDay yearMonthDay12 = property8.addWrapFieldToCopy(26179299);
        java.lang.String str13 = property8.getAsText();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "4" + "'", str10, "4");
        org.junit.Assert.assertNotNull(yearMonthDay12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u6708" + "'", str13, "\u6708");
    }

    @Test
    public void test2949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2949");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType5);
        int int7 = mutablePeriod6.getMonths();
        org.joda.time.Interval interval8 = new org.joda.time.Interval(readableInstant2, (org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.Chronology chronology9 = interval8.getChronology();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) (short) 100, chronology9);
        org.joda.time.DurationField durationField11 = chronology9.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.dayOfMonth();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 702, chronology9);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology9);
        int int15 = localDateTime14.getYearOfEra();
        int int16 = localDateTime14.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.year();
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test2950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2950");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setWeeks(11);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod8.setValue((-7), 26194884);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -7");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
    }

    @Test
    public void test2951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2951");
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        int int8 = mutablePeriod7.getMonths();
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableInstant3, (org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.Chronology chronology10 = interval9.getChronology();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        int int16 = mutablePeriod15.getMonths();
        org.joda.time.Interval interval17 = new org.joda.time.Interval(readableInstant11, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        boolean boolean19 = interval9.contains((org.joda.time.ReadableInterval) interval17);
        long long20 = interval17.getEndMillis();
        boolean boolean21 = interval17.containsNow();
        org.joda.time.Chronology chronology22 = interval17.getChronology();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(26327306, 7, 366, chronology22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26327306 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645514458375L + "'", long20 == 1645514458375L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test2952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2952");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, readableDuration5, periodType6);
        org.joda.time.Chronology chronology8 = mutableDateTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 1);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.Duration duration16 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime13.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean21 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        long long24 = duration23.getMillis();
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property26 = localDate25.dayOfYear();
        org.joda.time.DateMidnight dateMidnight27 = localDate25.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.Hours hours29 = duration23.toStandardHours();
        org.joda.time.Hours hours30 = duration23.toStandardHours();
        boolean boolean31 = duration16.isEqual((org.joda.time.ReadableDuration) duration23);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = duration23.toPeriod(periodType32);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(period33);
    }

    @Test
    public void test2953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2953");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.add(4, 0);
        int int5 = calendar1.getFirstDayOfWeek();
        java.util.Date date11 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        int int12 = date11.getMonth();
        long long13 = date11.getTime();
        calendar1.setTime(date11);
        int int15 = date11.getSeconds();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-1966881660000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1907,MONTH=8,WEEK_OF_YEAR=36,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=247,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=59,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1966881660000L) + "'", long13 == (-1966881660000L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test2954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2954");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime8 = property7.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withMillis((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight9.toMutableDateTime();
        boolean boolean14 = dateMidnight9.isEqual((long) 2);
        int int15 = dateMidnight9.getMillisOfDay();
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        boolean boolean18 = localDate16.isSupported(dateTimeFieldType17);
        org.joda.time.LocalDate.Property property19 = localDate16.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        long long22 = dateTimeField20.remainder((long) 10);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        boolean boolean25 = localDate23.isSupported(dateTimeFieldType24);
        int int26 = localDate23.getWeekOfWeekyear();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.lang.String str28 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDate23, locale27);
        java.util.Calendar calendar29 = dateMidnight9.toCalendar(locale27);
        java.lang.String str30 = locale27.getLanguage();
        java.util.Locale locale31 = java.util.Locale.UK;
        java.lang.String str32 = locale27.getDisplayVariant(locale31);
        java.lang.String str33 = property7.getAsShortText(locale27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = property7.setCopy("UnsupportedDurationField[eras]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"UnsupportedDurationField[eras]\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 8 + "'", int26 == 8);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022" + "'", str28, "2022");
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ja" + "'", str30, "ja");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1969" + "'", str33, "1969");
    }

    @Test
    public void test2955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2955");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(3109198201000L);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (byte) 0, dateTimeZone4);
        long long7 = dateTimeZone4.previousTransition((long) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(dateTimeZone4);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime11 = dateTime9.plus((long) 26263259);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test2956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2956");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        int int10 = mutablePeriod9.getMonths();
        org.joda.time.Interval interval11 = new org.joda.time.Interval(readableInstant5, (org.joda.time.ReadablePeriod) mutablePeriod9);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay(chronology12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.minusMonths((int) (short) -1);
        int int16 = yearMonthDay13.size();
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        boolean boolean20 = localDate18.isSupported(dateTimeFieldType19);
        org.joda.time.LocalDate.Property property21 = localDate18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        long long24 = dateTimeField22.remainder((long) 10);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        boolean boolean27 = localDate25.isSupported(dateTimeFieldType26);
        int int28 = localDate25.getWeekOfWeekyear();
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.lang.String str30 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDate25, locale29);
        java.lang.String str31 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay13, 2000, locale29);
        int int32 = dateTimeField4.getMinimumValue();
        int int33 = dateTimeField4.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = dateTimeField4.getType();
        long long36 = dateTimeField4.roundHalfEven((-78439680L));
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022" + "'", str30, "2022");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2000" + "'", str31, "2000");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test2957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2957");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("PT100S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PT100S\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2958");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        int int4 = dateTime3.getDayOfMonth();
        org.joda.time.Duration duration6 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime7 = dateTime3.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        org.joda.time.DateMidnight dateMidnight10 = property9.roundHalfEvenCopy();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType16);
        int int18 = mutablePeriod17.getMonths();
        org.joda.time.Interval interval19 = new org.joda.time.Interval(readableInstant13, (org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology20 = interval19.getChronology();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (short) 100, chronology20);
        java.lang.String str23 = dateTime21.toString("53");
        org.joda.time.DateTime dateTime25 = dateTime21.plusHours(70);
        org.joda.time.DateTime dateTime28 = dateTime25.withDurationAdded((long) 928, 5);
        int int29 = dateMidnight10.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight10.minusDays(736);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "53" + "'", str23, "53");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight31);
    }

    @Test
    public void test2959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2959");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.DateMidnight dateMidnight2 = localDate0.toDateMidnight();
        org.joda.time.LocalDate.Property property3 = localDate0.weekOfWeekyear();
        org.joda.time.LocalDate localDate4 = property3.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test2960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2960");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        java.util.Date date8 = new java.util.Date(365, 702, 8);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date8);
        org.joda.time.LocalDate localDate11 = localDate9.plusWeeks(16);
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        long long18 = dateTimeZone13.getMillisKeepLocal(dateTimeZone16, (long) 2);
        org.joda.time.DateTime dateTime19 = localDate11.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime19.toMutableDateTime();
        boolean boolean21 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime20);
        boolean boolean23 = mutableDateTime1.isAfter(1645514344179L);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Sun Jul 08 00:00:00 GMT 2323");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2L + "'", long18 == 2L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2961");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType6 = periodType5.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType10);
        int int12 = mutablePeriod11.getMonths();
        org.joda.time.Interval interval13 = new org.joda.time.Interval(readableInstant7, (org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        int int21 = mutablePeriod20.getMonths();
        org.joda.time.Interval interval22 = new org.joda.time.Interval(readableInstant16, (org.joda.time.ReadablePeriod) mutablePeriod20);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod20, 1L, (long) 4);
        org.joda.time.Period period26 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType5, chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withChronology(chronology14);
        org.joda.time.format.DateTimeParser dateTimeParser28 = dateTimeFormatter27.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter27.withDefaultYear((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = dateTimeFormatter30.parseLocalDate("2013-11-30T23:59:59.966Z/2022-01-01T00:00:00.000Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNull(dateTimeParser28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
    }

    @Test
    public void test2962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2962");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(26296609, 766, 575, 26167775, 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26167775 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2963");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        boolean boolean6 = localDateTime4.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withMillisOfDay((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = property9.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime13 = property9.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withWeekOfWeekyear(26311426);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26311426 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514458646,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=58,MILLISECOND=646,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test2964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2964");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromDateFields(date5);
        java.time.Instant instant7 = date5.toInstant();
        date5.setTime((long) 2922789);
        java.util.Date date15 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromDateFields(date15);
        java.time.Instant instant17 = date15.toInstant();
        boolean boolean18 = date5.after(date15);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.withHourOfDay(2);
        int int23 = timeOfDay22.getSecondOfMinute();
        java.util.Locale locale25 = null;
        java.lang.String str26 = timeOfDay22.toString("1969", locale25);
        org.joda.time.LocalTime localTime27 = timeOfDay22.toLocalTime();
        org.joda.time.LocalTime localTime29 = localTime27.minusSeconds(17);
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime34 = dateTime32.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime35 = timeOfDay30.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay30.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay37.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean41 = timeOfDay37.isSupported(dateTimeFieldType40);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime45 = dateTime43.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property46 = dateTime45.dayOfMonth();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType49);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType53);
        mutablePeriod50.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod54);
        java.lang.String str56 = mutablePeriod50.toString();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadablePeriod) mutablePeriod50);
        mutablePeriod50.setValue(0, 2022);
        mutablePeriod50.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay63 = timeOfDay37.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.TimeOfDay.Property property64 = timeOfDay63.millisOfSecond();
        org.joda.time.DurationField durationField65 = property64.getDurationField();
        org.joda.time.TimeOfDay timeOfDay66 = property64.getTimeOfDay();
        int int67 = timeOfDay66.getMinuteOfHour();
        int int68 = timeOfDay66.getHourOfDay();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((java.lang.Object) "PT0.034S");
        mutablePeriod70.setPeriod(2013, 270, 100, (int) 'x', 2000, 0, 14, (int) (byte) 100);
        org.joda.time.TimeOfDay timeOfDay81 = timeOfDay66.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod70, 8);
        org.joda.time.LocalTime localTime82 = localTime27.minus((org.joda.time.ReadablePeriod) mutablePeriod70);
        // The following exception was thrown during execution in test generation
        try {
            int int83 = localDate19.compareTo((org.joda.time.ReadablePartial) localTime82);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:48:42 GMT 1970");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(instant7);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(timeOfDay22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 58 + "'", int23 == 58);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1969" + "'", str26, "1969");
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT0.034S" + "'", str56, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(timeOfDay66);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 20 + "'", int67 == 20);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 10 + "'", int68 == 10);
        org.junit.Assert.assertNotNull(timeOfDay81);
        org.junit.Assert.assertNotNull(localTime82);
    }

    @Test
    public void test2965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2965");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        int int13 = mutablePeriod12.getMonths();
        org.joda.time.Interval interval14 = new org.joda.time.Interval(readableInstant8, (org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        boolean boolean16 = interval6.contains((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        int int22 = mutablePeriod21.getMonths();
        org.joda.time.Interval interval23 = new org.joda.time.Interval(readableInstant17, (org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.Chronology chronology24 = interval23.getChronology();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType28);
        int int30 = mutablePeriod29.getMonths();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(readableInstant25, (org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        boolean boolean33 = interval23.contains((org.joda.time.ReadableInterval) interval31);
        boolean boolean34 = interval6.overlaps((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((long) 86399);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType40);
        int int42 = mutablePeriod41.getMonths();
        org.joda.time.Interval interval43 = new org.joda.time.Interval(readableInstant37, (org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.Chronology chronology44 = interval43.getChronology();
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay(chronology44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType49);
        int int51 = mutablePeriod50.getMonths();
        org.joda.time.Interval interval52 = new org.joda.time.Interval(readableInstant46, (org.joda.time.ReadablePeriod) mutablePeriod50);
        int[] intArray55 = chronology44.get((org.joda.time.ReadablePeriod) mutablePeriod50, 1L, (long) 4);
        org.joda.time.PeriodType periodType56 = mutablePeriod50.getPeriodType();
        org.joda.time.Period period57 = duration36.toPeriod(periodType56);
        boolean boolean58 = interval23.equals((java.lang.Object) duration36);
        org.joda.time.DateTime dateTime59 = interval23.getStart();
        org.joda.time.YearMonthDay yearMonthDay60 = dateTime59.toYearMonthDay();
        org.joda.time.Period period62 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period64 = period62.minusYears(8);
        org.joda.time.Period period66 = period62.withSeconds(11);
        int int67 = period66.getMinutes();
        org.joda.time.Period period68 = period66.toPeriod();
        org.joda.time.Period period70 = period66.plusWeeks(11);
        org.joda.time.Period period72 = period66.withMonths(26184964);
        org.joda.time.Period period74 = period66.withYears(292269054);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadablePeriod) period74);
        org.joda.time.DateTimeZone dateTimeZone76 = dateTime59.getZone();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(chronology15);
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(dateTimeZone76);
    }

    @Test
    public void test2966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2966");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) ' ');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        java.lang.String str11 = mutableDateTime10.toString();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime10.monthOfYear();
        mutableDateTime10.addHours((int) '#');
        org.joda.time.DateTime dateTime15 = localDateTime2.toDateTime((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime2.minusYears(26258407);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime2.withTime(171, 26367143, 2021, 14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 171 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514458728,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=58,MILLISECOND=728,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str11, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test2967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2967");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setValue(0, 2022);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        long long24 = duration23.getMillis();
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) (byte) 0);
        long long27 = duration26.getMillis();
        int int28 = duration23.compareTo((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration30 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration26, 10);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime32 = dateMidnight31.toMutableDateTime();
        mutableDateTime32.add((long) 1);
        org.joda.time.DateTime dateTime35 = mutableDateTime32.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.years();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime32, readableDuration36, periodType37);
        org.joda.time.Chronology chronology39 = mutableDateTime32.getChronology();
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(chronology39);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime44 = dateTime42.withDayOfYear((int) (byte) 1);
        int int45 = dateTime44.getDayOfMonth();
        org.joda.time.Duration duration47 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime48 = dateTime44.minus((org.joda.time.ReadableDuration) duration47);
        mutableDateTime40.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean52 = duration47.isShorterThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean55 = duration47.isLongerThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration57 = duration26.withDurationAdded((org.joda.time.ReadableDuration) duration54, 999);
        org.joda.time.LocalDate localDate58 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property59 = localDate58.dayOfYear();
        org.joda.time.DateMidnight dateMidnight60 = localDate58.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight61 = localDate58.toDateMidnight();
        org.joda.time.Period period62 = duration26.toPeriodTo((org.joda.time.ReadableInstant) dateMidnight61);
        org.joda.time.DateMidnight.Property property63 = dateMidnight61.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight61.minusWeeks(1907);
        int int66 = dateMidnight61.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 8 + "'", int66 == 8);
    }

    @Test
    public void test2968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2968");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType5 = periodType4.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(chronology13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType18);
        int int20 = mutablePeriod19.getMonths();
        org.joda.time.Interval interval21 = new org.joda.time.Interval(readableInstant15, (org.joda.time.ReadablePeriod) mutablePeriod19);
        int[] intArray24 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod19, 1L, (long) 4);
        org.joda.time.Period period25 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType4, chronology13);
        org.joda.time.Period period26 = new org.joda.time.Period(59L, 100L, chronology13);
        org.joda.time.DateTimeField dateTimeField27 = chronology13.minuteOfHour();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType33);
        int int35 = mutablePeriod34.getMonths();
        org.joda.time.Interval interval36 = new org.joda.time.Interval(readableInstant30, (org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (short) 100, chronology37);
        org.joda.time.DurationField durationField39 = chronology37.centuries();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.dayOfMonth();
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        boolean boolean43 = localDate41.isSupported(dateTimeFieldType42);
        org.joda.time.LocalDate.Property property44 = localDate41.yearOfEra();
        org.joda.time.DateTimeField dateTimeField45 = property44.getField();
        org.joda.time.DurationField durationField46 = property44.getDurationField();
        org.joda.time.LocalDate localDate48 = property44.setCopy(2022);
        org.joda.time.LocalDate localDate49 = property44.roundHalfFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDate localDate51 = localDate49.plus(readablePeriod50);
        long long53 = chronology37.set((org.joda.time.ReadablePartial) localDate51, (long) 22);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology56 = dateMidnight55.getChronology();
        java.util.Locale locale57 = java.util.Locale.CHINA;
        java.util.Locale locale58 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(locale58);
        java.lang.String str60 = locale57.getDisplayVariant(locale58);
        java.util.Calendar calendar61 = dateMidnight55.toCalendar(locale58);
        java.util.Set<java.lang.String> strSet62 = locale58.getUnicodeLocaleKeys();
        java.lang.String str63 = localDate51.toString("349", locale58);
        java.lang.String str64 = dateTimeField27.getAsText(736, locale58);
        long long67 = dateTimeField27.add((long) (byte) -1, 26162616);
        int int68 = dateTimeField27.getMinimumValue();
        java.lang.String str69 = dateTimeField27.toString();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1640995200022L + "'", long53 == 1640995200022L);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1645514458809,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=58,MILLISECOND=809,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=1645488000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "349" + "'", str63, "349");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "736" + "'", str64, "736");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1569756959999L + "'", long67 == 1569756959999L);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "DateTimeField[minuteOfHour]" + "'", str69, "DateTimeField[minuteOfHour]");
    }

    @Test
    public void test2969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2969");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(1L, dateTimeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 26200578, dateTimeZone2);
        long long7 = dateTimeZone2.adjustOffset((long) 70, false);
        int int9 = dateTimeZone2.getOffset((long) 244);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 70L + "'", long7 == 70L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test2970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2970");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
    }

    @Test
    public void test2971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2971");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime5 = dateTime3.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime6 = timeOfDay1.toDateTime((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay1.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean12 = timeOfDay8.isSupported(dateTimeFieldType11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfMonth();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType24);
        mutablePeriod21.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        java.lang.String str27 = mutablePeriod21.toString();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadablePeriod) mutablePeriod21);
        mutablePeriod21.setValue(0, 2022);
        mutablePeriod21.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay8.plus((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.TimeOfDay.Property property35 = timeOfDay34.millisOfSecond();
        org.joda.time.DurationField durationField36 = property35.getDurationField();
        org.joda.time.TimeOfDay timeOfDay37 = property35.getTimeOfDay();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.lang.String str39 = locale38.getDisplayScript();
        java.lang.String str40 = property35.getAsText(locale38);
        int int41 = property35.getMaximumValue();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property44 = dateTime43.secondOfDay();
        org.joda.time.DateTime dateTime46 = dateTime43.withEra(1);
        org.joda.time.DateTime dateTime48 = dateTime43.plusMillis(0);
        org.joda.time.DateTime.Property property49 = dateTime43.hourOfDay();
        java.util.Locale locale50 = java.util.Locale.ITALY;
        java.lang.String str51 = locale50.getDisplayName();
        int int52 = property49.getMaximumShortTextLength(locale50);
        java.lang.String str53 = property35.getAsShortText(locale50);
        java.util.Locale locale54 = java.util.Locale.TAIWAN;
        java.lang.String str55 = locale50.getDisplayLanguage(locale54);
        java.util.Locale.Builder builder56 = builder0.setLocale(locale50);
        java.util.Locale.Builder builder57 = builder56.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder60 = builder56.setExtension('x', "4 May 1915 03:59:00 GMT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 4 May 1915 03:59:00 GMT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0.034S" + "'", str27, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "930" + "'", str40, "930");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 999 + "'", int41 == 999);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)" + "'", str51, "\u30a4\u30bf\u30ea\u30a2\u8a9e\u30a4\u30bf\u30ea\u30a2)");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "930" + "'", str53, "930");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str55, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test2972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2972");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfEra();
        org.joda.time.LocalDate localDate4 = property2.setCopy(436);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(chronology5);
    }

    @Test
    public void test2973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2973");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 12);
        org.joda.time.Chronology chronology2 = localDate1.getChronology();
        org.joda.time.LocalDate.Property property3 = localDate1.yearOfEra();
        org.joda.time.LocalDate localDate5 = property3.addWrapFieldToCopy((-1613978169));
        org.joda.time.LocalDate localDate6 = property3.getLocalDate();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test2974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2974");
        java.util.Date date5 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay6 = org.joda.time.YearMonthDay.fromDateFields(date5);
        java.time.Instant instant7 = date5.toInstant();
        date5.setTime((long) 2922789);
        java.util.Date date15 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromDateFields(date15);
        java.time.Instant instant17 = date15.toInstant();
        boolean boolean18 = date5.after(date15);
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeParser dateTimeParser21 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser21);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType26 = periodType25.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType30);
        int int32 = mutablePeriod31.getMonths();
        org.joda.time.Interval interval33 = new org.joda.time.Interval(readableInstant27, (org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.Chronology chronology34 = interval33.getChronology();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(chronology34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType39);
        int int41 = mutablePeriod40.getMonths();
        org.joda.time.Interval interval42 = new org.joda.time.Interval(readableInstant36, (org.joda.time.ReadablePeriod) mutablePeriod40);
        int[] intArray45 = chronology34.get((org.joda.time.ReadablePeriod) mutablePeriod40, 1L, (long) 4);
        org.joda.time.Period period46 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType25, chronology34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter22.withChronology(chronology34);
        java.lang.Integer int48 = dateTimeFormatter47.getPivotYear();
        org.joda.time.Chronology chronology49 = dateTimeFormatter47.getChronolgy();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.yearOfEra();
        org.joda.time.DurationField durationField52 = chronology49.weeks();
        org.joda.time.DurationFieldType durationFieldType53 = durationField52.getType();
        boolean boolean54 = localDate19.isSupported(durationFieldType53);
        int int55 = localDate19.getWeekOfWeekyear();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:48:42 GMT 1970");
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(instant7);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNull(int48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test2975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2975");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(10);
        org.joda.time.DateTime.Property property7 = dateTime6.year();
        org.joda.time.DateTime dateTime8 = property7.roundFloorCopy();
        org.joda.time.DateTime.Property property9 = dateTime8.weekyear();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now();
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.centuryOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType18 = periodType17.withHoursRemoved();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        int int24 = mutablePeriod23.getMonths();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableInstant19, (org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        int int33 = mutablePeriod32.getMonths();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableInstant28, (org.joda.time.ReadablePeriod) mutablePeriod32);
        int[] intArray37 = chronology26.get((org.joda.time.ReadablePeriod) mutablePeriod32, 1L, (long) 4);
        org.joda.time.Period period38 = new org.joda.time.Period((long) (short) -1, (long) (byte) 1, periodType17, chronology26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter14.withChronology(chronology26);
        org.joda.time.DateTimeField dateTimeField40 = chronology26.year();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight10.withChronology(chronology26);
        int int42 = property9.getDifference((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.DateMidnight.Property property43 = dateMidnight10.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-53) + "'", int42 == (-53));
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test2976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2976");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setValue(0, 2022);
        mutablePeriod8.addDays((int) (short) -1);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime23 = dateMidnight22.toMutableDateTime();
        mutableDateTime23.add((long) 1);
        org.joda.time.DateTime dateTime26 = mutableDateTime23.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.years();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime23, readableDuration27, periodType28);
        org.joda.time.Chronology chronology30 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        mutablePeriod8.add(35417L, chronology30);
        mutablePeriod8.addDays((int) (byte) -1);
        mutablePeriod8.clear();
        mutablePeriod8.addMillis(26337319);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test2977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2977");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration3 = null;
        mutablePeriod2.add(readableDuration3);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.months();
        mutablePeriod9.set(durationFieldType10, (int) 'a');
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType17);
        int int19 = mutablePeriod18.getMonths();
        org.joda.time.Interval interval20 = new org.joda.time.Interval(readableInstant14, (org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Chronology chronology21 = interval20.getChronology();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (short) 100, chronology21);
        boolean boolean23 = durationFieldType10.isSupported(chronology21);
        mutablePeriod2.setPeriod((long) '4', chronology21);
        java.lang.String str25 = chronology21.toString();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 999, chronology21);
        org.joda.time.DurationField durationField27 = chronology21.centuries();
        java.lang.String str28 = durationField27.getName();
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str25, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "centuries" + "'", str28, "centuries");
    }

    @Test
    public void test2978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2978");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime1 = dateMidnight0.toMutableDateTime();
        mutableDateTime1.add((long) 1);
        org.joda.time.DateTime dateTime4 = mutableDateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property5 = dateTime4.hourOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test2979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2979");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate7 = property3.setCopy(2022);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = property8.setCopy("DurationField[weeks]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DurationField[weeks]\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test2980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2980");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType6);
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.months();
        mutablePeriod12.set(durationFieldType13, (int) 'a');
        mutablePeriod3.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        int int24 = mutablePeriod23.getMonths();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableInstant19, (org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay(chronology26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType31);
        int int33 = mutablePeriod32.getMonths();
        org.joda.time.Interval interval34 = new org.joda.time.Interval(readableInstant28, (org.joda.time.ReadablePeriod) mutablePeriod32);
        int[] intArray37 = chronology26.get((org.joda.time.ReadablePeriod) mutablePeriod32, 1L, (long) 4);
        mutablePeriod3.setPeriod((long) 'a', (long) (short) -1, chronology26);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField41 = property40.getField();
        java.util.Locale locale42 = java.util.Locale.PRC;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(locale42);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.fromCalendarFields(calendar43);
        org.joda.time.DateTime dateTime45 = localDateTime44.toDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withCenturyOfEra(365);
        int int48 = localDateTime47.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int50 = localDateTime47.get(dateTimeFieldType49);
        int int51 = localDateTime47.size();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType56);
        int int58 = mutablePeriod57.getMonths();
        org.joda.time.Interval interval59 = new org.joda.time.Interval(readableInstant53, (org.joda.time.ReadablePeriod) mutablePeriod57);
        org.joda.time.Chronology chronology60 = interval59.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField62 = chronology60.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField63 = chronology60.dayOfYear();
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime67 = dateTime65.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property68 = dateTime67.dayOfMonth();
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType71);
        org.joda.time.PeriodType periodType75 = null;
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType75);
        mutablePeriod72.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod76);
        java.lang.String str78 = mutablePeriod72.toString();
        org.joda.time.Interval interval79 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadablePeriod) mutablePeriod72);
        int int80 = mutablePeriod72.getMonths();
        mutablePeriod72.setPeriod((long) (byte) 0);
        int[] intArray85 = chronology60.get((org.joda.time.ReadablePeriod) mutablePeriod72, 10L, (long) 26162430);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray87 = dateTimeField41.addWrapPartial((org.joda.time.ReadablePartial) localDateTime47, 26352737, intArray85, 366);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645514459160,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=59,MILLISECOND=160,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 160 + "'", int48 == 160);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 22 + "'", int50 == 22);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "PT0.034S" + "'", str78, "PT0.034S");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 0, 0, 0, 7, 16, 2, 420]");
    }

    @Test
    public void test2981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2981");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.yearOfCentury();
        int int2 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime6 = dateMidnight5.toMutableDateTime();
        mutableDateTime6.add((long) 1);
        mutableDateTime6.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight0, (org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime14 = dateMidnight13.toMutableDateTime();
        mutableDateTime14.add((long) 1);
        org.joda.time.DateTime dateTime17 = mutableDateTime14.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.years();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime14, readableDuration18, periodType19);
        org.joda.time.Chronology chronology21 = mutableDateTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(chronology21);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime25 = dateMidnight24.toMutableDateTime();
        mutableDateTime25.add((long) 1);
        mutableDateTime25.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime25.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime25.dayOfYear();
        java.util.TimeZone timeZone33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forTimeZone(timeZone33);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight35.minusWeeks(0);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime25, (org.joda.time.ReadableInstant) dateMidnight37, periodType38);
        org.joda.time.DateMidnight.Property property40 = dateMidnight37.year();
        java.util.Locale locale41 = java.util.Locale.PRC;
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(locale41);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.fromCalendarFields(calendar42);
        org.joda.time.DateTime dateTime44 = localDateTime43.toDateTime();
        org.joda.time.LocalDateTime.Property property45 = localDateTime43.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime46 = property45.roundHalfCeilingCopy();
        java.util.Locale locale47 = java.util.Locale.PRC;
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale47);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.fromCalendarFields(calendar48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology53 = dateMidnight52.getChronology();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight52.withDayOfMonth(8);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime59 = dateTime57.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property60 = dateTime59.dayOfMonth();
        org.joda.time.DateTime dateTime62 = dateTime59.plusSeconds(10);
        org.joda.time.DateTime dateTime64 = dateTime59.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property66 = dateTime64.property(dateTimeFieldType65);
        int int67 = dateMidnight52.get(dateTimeFieldType65);
        int int68 = localDateTime49.indexOf(dateTimeFieldType65);
        int int69 = localDateTime49.getMillisOfDay();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime46, (org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.Period period72 = period70.withMillis(22);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight37.plus((org.joda.time.ReadablePeriod) period70);
        mutableDateTime22.add((org.joda.time.ReadablePeriod) period70, 28);
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime77 = dateMidnight76.toMutableDateTime();
        java.lang.String str78 = mutableDateTime77.toString();
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime77.monthOfYear();
        java.lang.String str80 = mutableDateTime77.toString();
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.years();
        java.lang.String str82 = periodType81.toString();
        org.joda.time.PeriodType periodType83 = periodType81.withMinutesRemoved();
        org.joda.time.PeriodType periodType84 = periodType83.withYearsRemoved();
        org.joda.time.PeriodType periodType85 = periodType84.withSecondsRemoved();
        org.joda.time.Period period86 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime22, (org.joda.time.ReadableInstant) mutableDateTime77, periodType85);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1645514459182,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=59,MILLISECOND=182,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1645514459182,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=59,MILLISECOND=182,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 26459182 + "'", int69 == 26459182);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str78, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str80, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "PeriodType[Years]" + "'", str82, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(periodType85);
    }

    @Test
    public void test2982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2982");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.months();
        mutablePeriod3.set(durationFieldType4, (int) 'a');
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutablePeriod3.add(readableDuration7);
        mutablePeriod3.addMinutes(436);
        org.joda.time.Period period11 = mutablePeriod3.toPeriod();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType15);
        int int17 = mutablePeriod16.getMonths();
        org.joda.time.Interval interval18 = new org.joda.time.Interval(readableInstant12, (org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime21 = dateMidnight20.toMutableDateTime();
        int int22 = mutableDateTime21.getYearOfEra();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.months();
        mutablePeriod26.set(durationFieldType27, (int) 'a');
        mutablePeriod26.addHours((int) (byte) -1);
        mutablePeriod26.addYears(2022);
        mutableDateTime21.add((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime38 = dateMidnight37.toMutableDateTime();
        mutableDateTime38.add((long) 1);
        org.joda.time.DateTime dateTime41 = mutableDateTime38.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.years();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime38, readableDuration42, periodType43);
        java.lang.String str45 = mutableDateTime38.toString();
        org.joda.time.Chronology chronology46 = mutableDateTime38.getChronology();
        mutablePeriod26.setPeriod(1645514159651L, (long) (short) -1, chronology46);
        mutablePeriod26.setSeconds(26160118);
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay19.minus((org.joda.time.ReadablePeriod) mutablePeriod26);
        mutablePeriod16.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        mutablePeriod16.addHours(928);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-22T00:00:00.001Z" + "'", str45, "2022-02-22T00:00:00.001Z");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(yearMonthDay50);
    }

    @Test
    public void test2983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2983");
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType9);
        int int11 = mutablePeriod10.getMonths();
        org.joda.time.Interval interval12 = new org.joda.time.Interval(readableInstant6, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((int) (byte) 100, 17, 999, 2, 76, (-2), chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 76 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test2984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2984");
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 10);
        org.joda.time.LocalDate.Property property5 = localDate4.yearOfCentury();
        java.lang.String str6 = localDate4.toString();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.now(dateTimeZone8);
        boolean boolean10 = dateTimeZone8.isFixed();
        org.joda.time.Interval interval11 = localDate4.toInterval(dateTimeZone8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(58, 0, 329, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01" + "'", str6, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(interval11);
    }

    @Test
    public void test2985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2985");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfMonth();
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType11);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        java.lang.String str14 = mutablePeriod8.toString();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadablePeriod) mutablePeriod8);
        mutablePeriod8.setValue(0, 2022);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) (byte) 0);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = new org.joda.time.Duration((long) (byte) 0);
        long long24 = duration23.getMillis();
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) (byte) 0);
        long long27 = duration26.getMillis();
        int int28 = duration23.compareTo((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration30 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration26, 10);
        long long31 = duration30.getMillis();
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight32.toMutableDateTime();
        mutableDateTime33.add((long) 1);
        org.joda.time.DateTime dateTime36 = mutableDateTime33.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.years();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime33, readableDuration37, periodType38);
        org.joda.time.Chronology chronology40 = mutableDateTime33.getChronology();
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now(chronology40);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime45 = dateTime43.withDayOfYear((int) (byte) 1);
        int int46 = dateTime45.getDayOfMonth();
        org.joda.time.Duration duration48 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime49 = dateTime45.minus((org.joda.time.ReadableDuration) duration48);
        mutableDateTime41.add((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration52 = new org.joda.time.Duration((long) (byte) 0);
        boolean boolean53 = duration48.isShorterThan((org.joda.time.ReadableDuration) duration52);
        boolean boolean54 = duration30.isLongerThan((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime56 = dateMidnight55.toMutableDateTime();
        mutableDateTime56.add((long) 1);
        mutableDateTime56.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime56.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime56.dayOfYear();
        int int63 = property62.getMaximumValue();
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime65 = dateMidnight64.toMutableDateTime();
        mutableDateTime65.add((long) 1);
        org.joda.time.DateTime dateTime68 = mutableDateTime65.toDateTimeISO();
        mutableDateTime65.addDays((int) (short) 10);
        long long71 = property62.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime65);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime65.property(dateTimeFieldType72);
        org.joda.time.MutableDateTime mutableDateTime75 = property73.add((long) 86399999);
        org.joda.time.MutableDateTime mutableDateTime76 = mutableDateTime75.toMutableDateTimeISO();
        org.joda.time.Period period77 = duration48.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime75);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime82 = dateTime80.withDayOfYear((int) (byte) 1);
        org.joda.time.PeriodType periodType83 = org.joda.time.PeriodType.years();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(readableDuration78, (org.joda.time.ReadableInstant) dateTime80, periodType83);
        org.joda.time.Period period85 = new org.joda.time.Period((java.lang.Object) period77, periodType83);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.034S" + "'", str14, "PT0.034S");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 365 + "'", int63 == 365);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 35417L + "'", long71 == 35417L);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(periodType83);
    }

    @Test
    public void test2986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2986");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.TimeOfDay timeOfDay36 = property34.getTimeOfDay();
        java.lang.String str37 = property34.getAsShortText();
        java.util.Locale locale38 = java.util.Locale.CHINA;
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale39);
        java.lang.String str41 = locale38.getDisplayVariant(locale39);
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("GMT");
        java.lang.String str44 = locale39.getDisplayScript(locale43);
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        java.lang.String str46 = locale45.getDisplayScript();
        java.lang.String str47 = locale45.getLanguage();
        java.lang.String str48 = locale43.getDisplayVariant(locale45);
        int int49 = property34.getMaximumTextLength(locale43);
        org.joda.time.DurationField durationField50 = property34.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay52 = property34.setCopy("ITALIEN (ITALIE)");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"ITALIEN (ITALIE)\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(timeOfDay36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "450" + "'", str37, "450");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1645514459416,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=20,SECOND=59,MILLISECOND=416,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "gmt");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ja" + "'", str47, "ja");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(durationField50);
    }

    @Test
    public void test2987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2987");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.DurationField durationField2 = property1.getRangeDurationField();
        boolean boolean3 = durationField2.isPrecise();
        long long6 = durationField2.add(0L, 26164327);
        long long9 = durationField2.subtract(1641116552421L, (long) 26299664);
        long long11 = durationField2.getMillis(99);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 825666411312000000L + "'", long6 == 825666411312000000L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-829935593389047579L) + "'", long9 == (-829935593389047579L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3124138248000L + "'", long11 == 3124138248000L);
    }

    @Test
    public void test2988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2988");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.plusYears(2);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay8.minusDays(86399999);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime18 = dateTime16.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        mutablePeriod23.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        java.lang.String str29 = mutablePeriod23.toString();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) mutablePeriod23);
        java.util.TimeZone timeZone32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forTimeZone(timeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (short) -1, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusWeeks(0);
        boolean boolean37 = mutablePeriod23.equals((java.lang.Object) 0);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.YearMonthDay.Property property39 = yearMonthDay8.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay40 = property39.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay40.withYear((-292275054));
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.minusDays(4);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay42.withYear(1969);
        int[] intArray47 = yearMonthDay42.getValues();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0.034S" + "'", str29, "PT0.034S");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[-292275054, 2, 22]");
    }

    @Test
    public void test2989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2989");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.TimeOfDay timeOfDay36 = property34.getTimeOfDay();
        java.util.Locale locale37 = java.util.Locale.JAPANESE;
        java.lang.String str38 = locale37.getDisplayScript();
        java.lang.String str39 = property34.getAsText(locale37);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime41 = dateMidnight40.toMutableDateTime();
        mutableDateTime41.add((long) 1);
        org.joda.time.DateTime dateTime44 = mutableDateTime41.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.era();
        boolean boolean46 = mutableDateTime41.isSupported(dateTimeFieldType45);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime41.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime48 = property47.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime49 = property47.roundHalfFloor();
        mutableDateTime49.add(1645514172000L);
        java.lang.String str52 = mutableDateTime49.toString();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardMinutes((long) 9);
        long long55 = duration54.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime49, (org.joda.time.ReadableDuration) duration54);
        int int57 = property34.compareTo((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType66);
        int int68 = mutablePeriod67.getMonths();
        org.joda.time.Interval interval69 = new org.joda.time.Interval(readableInstant63, (org.joda.time.ReadablePeriod) mutablePeriod67);
        org.joda.time.Chronology chronology70 = interval69.getChronology();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) (short) 100, chronology70);
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime((int) (byte) 10, (int) (byte) 1, 3, (int) (short) 1, chronology70);
        org.joda.time.DateTimeField dateTimeField73 = chronology70.weekyear();
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(chronology70);
        org.joda.time.DateTimeField dateTimeField75 = chronology70.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime49.setRounding(dateTimeField75, 26411869);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 26411869");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "341" + "'", str39, "341");
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2074-04-15T07:16:12.000Z" + "'", str52, "2074-04-15T07:16:12.000Z");
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 540L + "'", long55 == 540L);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField75);
    }

    @Test
    public void test2990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2990");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = timeOfDay0.getFieldTypes();
        org.joda.time.Chronology chronology2 = timeOfDay0.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay0.withMillisOfSecond(4);
        org.joda.time.Chronology chronology5 = timeOfDay4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.halfdays();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.dayOfMonth();
        org.joda.time.Period period9 = org.joda.time.Period.seconds((int) (short) 100);
        org.joda.time.Period period11 = period9.minusYears(8);
        org.joda.time.Period period13 = period9.withSeconds(11);
        int int14 = period13.getMinutes();
        org.joda.time.Period period15 = period13.toPeriod();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime18 = localTime16.plusMillis((int) '4');
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) 3);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutablePeriod20.add(readableDuration21);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.months();
        mutablePeriod27.set(durationFieldType28, (int) 'a');
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType35);
        int int37 = mutablePeriod36.getMonths();
        org.joda.time.Interval interval38 = new org.joda.time.Interval(readableInstant32, (org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.Chronology chronology39 = interval38.getChronology();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 100, chronology39);
        boolean boolean41 = durationFieldType28.isSupported(chronology39);
        mutablePeriod20.setPeriod((long) '4', chronology39);
        org.joda.time.LocalTime localTime43 = localTime18.minus((org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.addSeconds(365);
        org.joda.time.Period period46 = period15.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        int int47 = mutablePeriod20.getMonths();
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime52 = dateTime50.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime53 = timeOfDay48.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay48.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay55.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean59 = timeOfDay55.isSupported(dateTimeFieldType58);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime63 = dateTime61.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property64 = dateTime63.dayOfMonth();
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType67);
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType71);
        mutablePeriod68.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod72);
        java.lang.String str74 = mutablePeriod68.toString();
        org.joda.time.Interval interval75 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadablePeriod) mutablePeriod68);
        mutablePeriod68.setValue(0, 2022);
        mutablePeriod68.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay81 = timeOfDay55.plus((org.joda.time.ReadablePeriod) mutablePeriod68);
        org.joda.time.TimeOfDay.Property property82 = timeOfDay81.millisOfSecond();
        org.joda.time.DurationField durationField83 = property82.getDurationField();
        org.joda.time.TimeOfDay timeOfDay84 = property82.getTimeOfDay();
        int int85 = property82.getMaximumValueOverall();
        java.util.Locale locale87 = java.util.Locale.CHINA;
        java.util.Locale locale88 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar89 = java.util.Calendar.getInstance(locale88);
        java.lang.String str90 = locale87.getDisplayVariant(locale88);
        org.joda.time.TimeOfDay timeOfDay91 = property82.setCopy("1", locale87);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = property82.getFieldType();
        org.joda.time.DurationFieldType durationFieldType93 = dateTimeFieldType92.getRangeDurationType();
        boolean boolean94 = mutablePeriod20.isSupported(durationFieldType93);
        mutablePeriod20.setSeconds(69);
        int[] intArray99 = chronology5.get((org.joda.time.ReadablePeriod) mutablePeriod20, (long) 156, (long) 2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "PT0.034S" + "'", str74, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(timeOfDay84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 999 + "'", int85 == 999);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar89);
// flaky:         org.junit.Assert.assertEquals(calendar89.toString(), "java.util.GregorianCalendar[time=1645514460325,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=0,MILLISECOND=325,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(timeOfDay91);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertNotNull(durationFieldType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(intArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray99), "[0, 0, 0, 0, 0, 0, 0, -154]");
    }

    @Test
    public void test2991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2991");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) ' ');
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime10 = dateTime8.withDayOfYear((int) (byte) 1);
        int int11 = dateTime10.getDayOfMonth();
        org.joda.time.Duration duration13 = new org.joda.time.Duration((long) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime10.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime6.withDurationAdded((org.joda.time.ReadableDuration) duration13, 3);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.minusMonths(26200509);
        int int21 = localDateTime16.getYearOfCentury();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514460396,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=0,MILLISECOND=396,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
    }

    @Test
    public void test2992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2992");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date4 = new java.util.Date(365, 702, 8);
        java.util.Calendar.Builder builder5 = builder0.setInstant(date4);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("1 Jan 2022 00:00:00 GMT");
        java.util.Calendar.Builder builder8 = builder0.setTimeZone(timeZone7);
        java.util.Locale locale9 = java.util.Locale.PRC;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale9);
        calendar10.add(4, 0);
        int int14 = calendar10.getFirstDayOfWeek();
        java.util.Date date20 = new java.util.Date(5, (int) ' ', 0, (int) (short) 100, (int) (byte) -1);
        int int21 = date20.getMonth();
        long long22 = date20.getTime();
        calendar10.setTime(date20);
        java.util.Calendar.Builder builder24 = builder0.setInstant(date20);
        java.util.Calendar calendar25 = builder24.build();
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.fromCalendarFields(calendar25);
        // The following exception was thrown during execution in test generation
        try {
            calendar25.clear(26258407);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26258407");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Sun Jul 08 00:00:00 GMT 2323");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=-1966881660000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1907,MONTH=8,WEEK_OF_YEAR=36,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=247,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=59,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Wed Sep 04 03:59:00 GMT 1907");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1966881660000L) + "'", long22 == (-1966881660000L));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(calendar25);
        org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=-1966881660000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1907,MONTH=8,WEEK_OF_YEAR=36,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=247,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=59,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test2993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2993");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(26182924, (int) 'x', 28439785, 26181768, 26162974);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26181768 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2994");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant(1645514159651L);
        java.util.Calendar.Builder builder4 = builder2.setInstant((long) 2024);
        java.util.Calendar.Builder builder6 = builder4.setLenient(false);
        java.util.Locale locale7 = java.util.Locale.PRC;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        calendar8.add(4, 0);
        java.time.Instant instant12 = calendar8.toInstant();
        java.util.TimeZone timeZone13 = calendar8.getTimeZone();
        int int15 = timeZone13.getOffset(63113904000000L);
        java.util.Calendar.Builder builder16 = builder6.setTimeZone(timeZone13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder19 = builder6.setWeekDefinition(244, 26309432);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514460433,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=0,MILLISECOND=433,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2995");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.withHourOfDay(2);
        int int3 = timeOfDay2.getSecondOfMinute();
        java.util.Locale locale4 = java.util.Locale.PRC;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale4);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.fromCalendarFields(calendar5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMillis((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.Chronology chronology10 = dateMidnight9.getChronology();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withDayOfMonth(8);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfMonth();
        org.joda.time.DateTime dateTime19 = dateTime16.plusSeconds(10);
        org.joda.time.DateTime dateTime21 = dateTime16.minus((long) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property23 = dateTime21.property(dateTimeFieldType22);
        int int24 = dateMidnight9.get(dateTimeFieldType22);
        int int25 = localDateTime6.indexOf(dateTimeFieldType22);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime6.minusWeeks(8);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withMillisOfSecond(365);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusMinutes(21791);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = timeOfDay2.isAfter((org.joda.time.ReadablePartial) localDateTime32);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645514460440,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=0,MILLISECOND=440,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test2996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2996");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType3);
        int int5 = mutablePeriod4.getMonths();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableInstant0, (org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Chronology chronology7 = interval6.getChronology();
        org.joda.time.MutableInterval mutableInterval8 = interval6.toMutableInterval();
        org.joda.time.Period period9 = mutableInterval8.toPeriod();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property15 = dateMidnight10.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight10.withMillis((long) 5);
        org.joda.time.Interval interval18 = dateMidnight17.toInterval();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime.Property property21 = dateTime20.secondOfDay();
        org.joda.time.DateTime dateTime23 = dateTime20.withEra(1);
        org.joda.time.DateTime dateTime25 = dateTime20.plusMillis(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int27 = dateTime20.get(dateTimeFieldType26);
        org.joda.time.DateTime.Property property28 = dateTime20.monthOfYear();
        org.joda.time.DateTime dateTime30 = dateTime20.minusDays(26192136);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.withMillis((long) (short) 0);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight31.withDayOfYear((int) (short) 10);
        org.joda.time.DateMidnight.Property property36 = dateMidnight31.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight31.withMillis((long) 5);
        org.joda.time.DateMidnight.Property property39 = dateMidnight31.yearOfEra();
        org.joda.time.DateMidnight.Property property40 = dateMidnight31.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = dateMidnight31.getZone();
        org.joda.time.DateTime dateTime42 = dateTime30.withZoneRetainFields(dateTimeZone41);
        boolean boolean43 = interval18.isBefore((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = mutableInterval8.contains((org.joda.time.ReadableInterval) interval18);
        long long45 = interval18.getEndMillis();
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType48);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType52);
        mutablePeriod49.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod53);
        int int55 = mutablePeriod49.getHours();
        org.joda.time.PeriodType periodType56 = mutablePeriod49.getPeriodType();
        boolean boolean57 = interval18.equals((java.lang.Object) mutablePeriod49);
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property59 = dateMidnight58.yearOfCentury();
        int int60 = dateMidnight58.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight58.plusDays((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight();
        org.joda.time.MutableDateTime mutableDateTime64 = dateMidnight63.toMutableDateTime();
        mutableDateTime64.add((long) 1);
        mutableDateTime64.addWeekyears((int) 'a');
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime64.weekOfWeekyear();
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight58, (org.joda.time.ReadableInstant) mutableDateTime64);
        org.joda.time.Interval interval71 = interval18.gap((org.joda.time.ReadableInterval) interval70);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(mutableInterval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 31 + "'", int27 == 31);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 86400000L + "'", long45 == 86400000L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(interval71);
    }

    @Test
    public void test2997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2997");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime4 = dateTime2.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime dateTime5 = timeOfDay0.toDateTime((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.withHourOfDay(10);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMillis((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean11 = timeOfDay7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime15 = dateTime13.withDayOfYear((int) (byte) 1);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfMonth();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        mutablePeriod20.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        java.lang.String str26 = mutablePeriod20.toString();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setValue(0, 2022);
        mutablePeriod20.addDays((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.TimeOfDay.Property property34 = timeOfDay33.millisOfSecond();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.joda.time.TimeOfDay timeOfDay36 = property34.getTimeOfDay();
        java.lang.String str37 = property34.toString();
        java.lang.String str38 = property34.getAsString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.034S" + "'", str26, "PT0.034S");
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Property[millisOfSecond]" + "'", str37, "Property[millisOfSecond]");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "534" + "'", str38, "534");
    }

    @Test
    public void test2998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2998");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(1L, dateTimeZone3);
        boolean boolean5 = calendar1.before((java.lang.Object) localDate4);
        int int6 = localDate4.getDayOfWeek();
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtMidnight();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(10L);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.months();
        mutablePeriod14.set(durationFieldType15, (int) 'a');
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.months();
        boolean boolean19 = mutablePeriod14.isSupported(durationFieldType18);
        int int20 = mutablePeriod10.indexOf(durationFieldType18);
        java.lang.String str21 = durationFieldType18.getName();
        boolean boolean22 = periodType8.isSupported(durationFieldType18);
        boolean boolean23 = localDate4.isSupported(durationFieldType18);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.millis();
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        boolean boolean27 = localDate25.isSupported(dateTimeFieldType26);
        org.joda.time.LocalDate.Property property28 = localDate25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = property28.getField();
        org.joda.time.DurationField durationField30 = property28.getDurationField();
        boolean boolean31 = durationField30.isPrecise();
        long long34 = durationField30.add((long) (byte) 1, 0L);
        org.joda.time.DurationFieldType durationFieldType35 = durationField30.getType();
        boolean boolean36 = periodType24.isSupported(durationFieldType35);
        org.joda.time.LocalDate localDate38 = localDate4.withFieldAdded(durationFieldType35, (int) (byte) -1);
        int int39 = localDate38.getDayOfYear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514460596,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=0,MILLISECOND=596,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "months" + "'", str21, "months");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test2999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2999");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = null;
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.LocalDate localDate7 = property3.setCopy(2022);
        org.joda.time.LocalDate localDate8 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate10 = property3.addToCopy(365);
        org.joda.time.DateTimeField dateTimeField11 = property3.getField();
        org.joda.time.LocalDate localDate12 = property3.getLocalDate();
        org.joda.time.LocalDate localDate14 = localDate12.withWeekyear(26187085);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfMonth();
        org.joda.time.LocalDate localDate17 = property15.addToCopy(86399);
        org.joda.time.LocalDate localDate18 = property15.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test3000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test3000");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(1L, dateTimeZone3);
        boolean boolean5 = calendar1.before((java.lang.Object) localDate4);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (short) -1);
        org.joda.time.DateTime dateTime9 = dateTime7.minusWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay10 = dateTime9.toYearMonthDay();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType14);
        int int16 = mutablePeriod15.getMonths();
        org.joda.time.Interval interval17 = new org.joda.time.Interval(readableInstant11, (org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.Chronology chronology18 = interval17.getChronology();
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay(chronology18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(1L, (long) '#', periodType23);
        int int25 = mutablePeriod24.getMonths();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(readableInstant20, (org.joda.time.ReadablePeriod) mutablePeriod24);
        int[] intArray29 = chronology18.get((org.joda.time.ReadablePeriod) mutablePeriod24, 1L, (long) 4);
        org.joda.time.PeriodType periodType30 = mutablePeriod24.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay10.minus((org.joda.time.ReadablePeriod) mutablePeriod24);
        boolean boolean32 = localDate4.isBefore((org.joda.time.ReadablePartial) yearMonthDay10);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay10.minusMonths(26187085);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay10.withField(dateTimeFieldType35, 34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'secondOfMinute' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645514460625,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=21,SECOND=0,MILLISECOND=625,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, 3]");
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
    }
}

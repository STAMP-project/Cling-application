import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test001");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale1);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5, locale7);
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition(16);
        int int11 = parsePosition10.getErrorIndex();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        boolean boolean14 = parsePosition10.equals((java.lang.Object) locale12);
        java.lang.String str15 = locale12.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5, locale12);
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale17.getDisplayVariant(locale19);
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.lang.String str22 = locale17.getDisplayVariant(locale21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone5, locale21);
        java.util.Set<java.lang.Character> charSet24 = locale21.getExtensionKeys();
        java.util.Locale.setDefault(category0, locale21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar23", (calendar8.compareTo(calendar23) == 0) == calendar8.equals(calendar23));
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test002");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.time.ZoneId zoneId7 = timeZone1.toZoneId();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone(zoneId7);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone11, locale13);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition(16);
        int int17 = parsePosition16.getErrorIndex();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) locale18);
        java.lang.String str21 = locale18.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone11, locale18);
        timeZone11.setID("coreano");
        boolean boolean25 = timeZone8.hasSameRules(timeZone11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar14", (calendar6.compareTo(calendar14) == 0) == calendar6.equals(calendar14));
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test003");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = locale14.getDisplayVariant(locale18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone2, locale18);
        int int21 = timeZone2.getRawOffset();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar20", (calendar5.compareTo(calendar20) == 0) == calendar5.equals(calendar20));
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test004");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone3);
        java.lang.String str5 = fastDateFormat4.toString();
        java.lang.String str6 = fastDateFormat4.toString();
        java.util.TimeZone timeZone7 = fastDateFormat4.getTimeZone();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone7, locale8);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        java.lang.String str19 = locale17.getDisplayLanguage();
        java.lang.String str21 = locale17.getUnicodeLocaleType("zh");
        java.lang.String str22 = locale13.getDisplayScript(locale17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("4630-1-10 0:00:00", timeZone7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar12 and calendar18", (calendar12.compareTo(calendar18) == 0) == calendar12.equals(calendar18));
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test005");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = locale14.getDisplayVariant(locale18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone2, locale18);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        java.lang.String str26 = locale18.getDisplayScript(locale24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar20", (calendar5.compareTo(calendar20) == 0) == calendar5.equals(calendar20));
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test006");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int8 = calendar6.getActualMinimum(2);
        java.util.TimeZone timeZone9 = calendar6.getTimeZone();
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        boolean boolean13 = locale11.hasExtensions();
        java.lang.String str14 = locale11.getDisplayCountry();
        java.util.Calendar.Builder builder15 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder19 = builder10.setWeekDate(38, 41, 11);
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone21);
        java.lang.String str23 = fastDateFormat22.toString();
        java.lang.String str24 = fastDateFormat22.toString();
        java.util.TimeZone timeZone25 = fastDateFormat22.getTimeZone();
        java.util.Calendar.Builder builder26 = builder19.setTimeZone(timeZone25);
        boolean boolean27 = timeZone9.hasSameRules(timeZone25);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        java.text.ParsePosition parsePosition35 = new java.text.ParsePosition(16);
        int int36 = parsePosition35.getErrorIndex();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        boolean boolean39 = parsePosition35.equals((java.lang.Object) locale37);
        java.lang.String str40 = locale37.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone30, locale37);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        timeZone42.setRawOffset((-1));
        boolean boolean45 = timeZone30.hasSameRules(timeZone42);
        timeZone42.setRawOffset((int) (short) 1);
        boolean boolean48 = timeZone9.hasSameRules(timeZone42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar33", (calendar6.compareTo(calendar33) == 0) == calendar6.equals(calendar33));
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test007");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = locale14.getDisplayVariant(locale18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone2, locale18);
        java.lang.String str21 = locale18.getDisplayCountry();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar20", (calendar5.compareTo(calendar20) == 0) == calendar5.equals(calendar20));
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test008");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] { languageRange3 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale10.getDisplayCountry();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale10);
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = locale14.getDisplayLanguage(locale15);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale21);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone27);
        java.util.Locale locale30 = fastDateFormat29.getLocale();
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = locale32.getLanguage();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale32.getDisplayVariant(locale34);
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale32.getDisplayVariant(locale36);
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone44);
        java.util.Locale locale47 = fastDateFormat46.getLocale();
        java.util.Locale locale48 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone51);
        java.util.Locale locale54 = fastDateFormat53.getLocale();
        java.util.Locale locale55 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale56 = java.util.Locale.UK;
        java.util.Locale[] localeArray57 = new java.util.Locale[] { locale10, locale14, locale18, locale21, locale23, locale24, locale30, locale31, locale36, locale38, locale39, locale40, locale41, locale47, locale48, locale54, locale55, locale56 };
        java.util.ArrayList<java.util.Locale> localeList58 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList58, localeArray57);
        java.util.Locale locale60 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.util.Locale>) localeList58);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap61 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList62 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strMap61);
        java.lang.String[] strArray68 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022", "FastDateFormat[h:mm:ss a z]", "zh", "java.text.ParsePosition[index=16,errorIndex=-1]", "de" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.lang.Object[] objArray71 = strList69.toArray();
        strList69.clear();
        java.lang.String[] strArray74 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        java.util.stream.Stream<java.lang.String> strStream77 = strList75.stream();
        strList75.clear();
        java.util.Spliterator<java.lang.String> strSpliterator79 = strList75.spliterator();
        boolean boolean80 = strList69.containsAll((java.util.Collection<java.lang.String>) strList75);
        java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList75);
        java.lang.String[] strArray83 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        java.util.stream.Stream<java.lang.String> strStream86 = strList84.stream();
        boolean boolean88 = strList84.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor90 = strList84.listIterator(0);
        java.util.Locale.FilteringMode filteringMode91 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList92 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList84, filteringMode91);
        java.util.Locale.FilteringMode filteringMode93 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList94 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strList92, filteringMode93);
        java.util.Locale locale95 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar96 = java.util.Calendar.getInstance(locale95);
        java.util.Set<java.lang.String> strSet97 = locale95.getUnicodeLocaleKeys();
        boolean boolean98 = strList94.removeAll((java.util.Collection<java.lang.String>) strSet97);
        java.util.stream.Stream<java.lang.String> strStream99 = strList94.parallelStream();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar96", (calendar13.compareTo(calendar96) == 0) == calendar13.equals(calendar96));
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test009");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        java.util.Locale locale5 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale6 = locale5.stripExtensions();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale6);
        java.lang.String str8 = timeZone1.getDisplayName(locale6);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar2 and calendar7", (calendar2.compareTo(calendar7) == 0) == calendar2.equals(calendar7));
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test010");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone3);
        java.lang.String str5 = fastDateFormat4.toString();
        java.lang.String str6 = fastDateFormat4.toString();
        java.util.TimeZone timeZone7 = fastDateFormat4.getTimeZone();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone7, locale8);
        boolean boolean13 = calendar12.isWeekDateSupported();
        calendar12.set(7, 4, 0);
        java.util.Date date18 = calendar12.getTime();
        java.lang.String str19 = fastDateFormat1.format(calendar12);
        java.util.TimeZone timeZone20 = fastDateFormat1.getTimeZone();
        java.lang.Object obj21 = null;
        boolean boolean22 = fastDateFormat1.equals(obj21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        int int24 = calendar23.getWeeksInWeekYear();
        java.time.Instant instant25 = calendar23.toInstant();
        int int27 = calendar23.getMinimum(4);
        java.lang.String str28 = fastDateFormat1.format(calendar23);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet33 = locale32.getExtensionKeys();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone29, locale32);
        int int36 = timeZone29.getOffset((long) 2);
        java.util.Locale.Category category37 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category37, locale38);
        java.util.Locale locale40 = java.util.Locale.getDefault(category37);
        java.util.Locale locale41 = java.util.Locale.getDefault(category37);
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayCountry(locale42);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone29, locale41);
        calendar23.setTimeZone(timeZone29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar34 and calendar44", (calendar34.compareTo(calendar44) == 0) == calendar34.equals(calendar44));
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test011");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = locale14.getDisplayVariant(locale18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone2, locale18);
        java.lang.String str21 = locale18.getDisplayVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar20", (calendar5.compareTo(calendar20) == 0) == calendar5.equals(calendar20));
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test012");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        timeZone14.setRawOffset((-1));
        boolean boolean17 = timeZone2.hasSameRules(timeZone14);
        java.lang.String str18 = timeZone2.getID();
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale19);
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category22, locale23);
        java.lang.String str25 = locale23.getScript();
        java.lang.String str26 = locale21.getDisplayCountry(locale23);
        boolean boolean27 = calendar20.after((java.lang.Object) locale21);
        java.lang.String str28 = timeZone2.getDisplayName(locale21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar20", (calendar5.compareTo(calendar20) == 0) == calendar5.equals(calendar20));
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test013");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.util.Locale.setDefault(category0, locale4);
        java.lang.String str9 = locale4.getDisplayLanguage();
        java.util.Locale locale12 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale13 = locale12.stripExtensions();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale13);
        java.lang.String str15 = locale4.getDisplayVariant(locale13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar14", (calendar7.compareTo(calendar14) == 0) == calendar7.equals(calendar14));
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test014");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        calendar6.set(31, (int) (byte) 100, (int) (byte) 10, (int) (short) 100, 9, 8);
        java.util.Date date17 = new java.util.Date((-1), 32772, (int) (short) 10);
        java.lang.String str18 = date17.toLocaleString();
        calendar6.setTime(date17);
        int int21 = calendar6.getActualMinimum((int) (short) 10);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition(16);
        int int30 = parsePosition29.getErrorIndex();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet32 = locale31.getExtensionKeys();
        boolean boolean33 = parsePosition29.equals((java.lang.Object) locale31);
        java.lang.String str34 = locale31.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone24, locale31);
        int int36 = timeZone24.getRawOffset();
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = locale37.getLanguage();
        boolean boolean39 = locale37.hasExtensions();
        java.lang.String str40 = locale37.getDisplayScript();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale37);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone24, locale37);
        boolean boolean43 = calendar6.after((java.lang.Object) calendar42);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone44.hasSameRules(timeZone45);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone44);
        timeZone44.setRawOffset(40);
        timeZone44.setID("francese (Francia)");
        calendar6.setTimeZone(timeZone44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar27 and calendar47", (calendar27.compareTo(calendar47) == 0) == calendar27.equals(calendar47));
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test015");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale3);
        int int7 = timeZone0.getOffset((long) 2);
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale locale11 = java.util.Locale.getDefault(category8);
        java.util.Locale locale12 = java.util.Locale.getDefault(category8);
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone0, locale12);
        java.lang.String str16 = locale12.getDisplayLanguage();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar15", (calendar5.compareTo(calendar15) == 0) == calendar5.equals(calendar15));
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test016");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale3);
        int int7 = timeZone0.getOffset((long) 2);
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale locale11 = java.util.Locale.getDefault(category8);
        java.util.Locale locale12 = java.util.Locale.getDefault(category8);
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone0, locale12);
        java.lang.String str17 = locale12.getUnicodeLocaleType("en");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar15", (calendar5.compareTo(calendar15) == 0) == calendar5.equals(calendar15));
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test017");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        long long5 = calendar4.getTimeInMillis();
        int int6 = calendar4.getWeekYear();
        java.util.Locale.LanguageRange languageRange10 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] { languageRange10 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale17.getDisplayName();
        java.lang.String str19 = locale17.getDisplayCountry();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone15, locale17);
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = locale21.getDisplayLanguage(locale22);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale28);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone34);
        java.util.Locale locale37 = fastDateFormat36.getLocale();
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = locale39.getLanguage();
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale39.getDisplayVariant(locale41);
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.lang.String str44 = locale39.getDisplayVariant(locale43);
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone51);
        java.util.Locale locale54 = fastDateFormat53.getLocale();
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone57.hasSameRules(timeZone58);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone58);
        java.util.Locale locale61 = fastDateFormat60.getLocale();
        java.util.Locale locale62 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale63 = java.util.Locale.UK;
        java.util.Locale[] localeArray64 = new java.util.Locale[] { locale17, locale21, locale25, locale28, locale30, locale31, locale37, locale38, locale43, locale45, locale46, locale47, locale48, locale54, locale55, locale61, locale62, locale63 };
        java.util.ArrayList<java.util.Locale> localeList65 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList65, localeArray64);
        java.util.Locale locale67 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList65);
        java.util.Map<java.lang.String, java.lang.Integer> strMap68 = calendar4.getDisplayNames(5, 1, locale67);
        boolean boolean69 = locale67.hasExtensions();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar20", (calendar4.compareTo(calendar20) == 0) == calendar4.equals(calendar20));
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test018");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone2);
        int int10 = timeZone2.getOffset(1644572086894L);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone2);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar8", (calendar7.compareTo(calendar8) == 0) == calendar7.equals(calendar8));
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test019");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = locale6.getLanguage();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale6.getDisplayVariant(locale8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone5, locale6);
        boolean boolean11 = calendar10.isWeekDateSupported();
        calendar10.roll(5, 53);
        calendar10.clear();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone23);
        timeZone23.setRawOffset(3);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone29);
        java.lang.String str31 = fastDateFormat30.getPattern();
        java.util.TimeZone timeZone32 = fastDateFormat30.getTimeZone();
        boolean boolean33 = timeZone23.hasSameRules(timeZone32);
        boolean boolean34 = timeZone17.hasSameRules(timeZone32);
        java.util.TimeZone.setDefault(timeZone32);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone37.hasSameRules(timeZone38);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone38, locale40);
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition(16);
        int int44 = parsePosition43.getErrorIndex();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet46 = locale45.getExtensionKeys();
        boolean boolean47 = parsePosition43.equals((java.lang.Object) locale45);
        java.lang.String str48 = locale45.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone38, locale45);
        int int50 = timeZone38.getRawOffset();
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.lang.String str52 = locale51.getLanguage();
        boolean boolean53 = locale51.hasExtensions();
        java.lang.String str54 = locale51.getDisplayScript();
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(locale51);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone38, locale51);
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone32, locale51);
        boolean boolean58 = calendar10.after((java.lang.Object) timeZone32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar20 and calendar41", (calendar20.compareTo(calendar41) == 0) == calendar20.equals(calendar41));
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test020");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone3);
        java.lang.String str5 = fastDateFormat4.toString();
        java.lang.String str6 = fastDateFormat4.toString();
        java.util.TimeZone timeZone7 = fastDateFormat4.getTimeZone();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone7, locale8);
        boolean boolean13 = calendar12.isWeekDateSupported();
        calendar12.set(7, 4, 0);
        java.util.Date date18 = calendar12.getTime();
        java.lang.String str19 = fastDateFormat1.format(calendar12);
        java.util.TimeZone timeZone20 = fastDateFormat1.getTimeZone();
        java.lang.Object obj21 = null;
        boolean boolean22 = fastDateFormat1.equals(obj21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        int int24 = calendar23.getWeeksInWeekYear();
        java.time.Instant instant25 = calendar23.toInstant();
        int int27 = calendar23.getMinimum(4);
        java.lang.String str28 = fastDateFormat1.format(calendar23);
        int int30 = calendar23.getLeastMaximum(3);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone32, locale34);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone37.hasSameRules(timeZone38);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone38);
        timeZone38.setRawOffset(3);
        java.util.TimeZone timeZone44 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone44);
        java.lang.String str46 = fastDateFormat45.getPattern();
        java.util.TimeZone timeZone47 = fastDateFormat45.getTimeZone();
        boolean boolean48 = timeZone38.hasSameRules(timeZone47);
        boolean boolean49 = timeZone32.hasSameRules(timeZone47);
        timeZone32.setRawOffset(50);
        calendar23.setTimeZone(timeZone32);
        int int54 = timeZone32.getOffset(1644572109662L);
        timeZone32.setRawOffset(13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar23 and calendar35", (calendar23.compareTo(calendar35) == 0) == calendar23.equals(calendar35));
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test021");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = locale14.getDisplayVariant(locale18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone2, locale18);
        boolean boolean21 = timeZone2.useDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar20", (calendar5.compareTo(calendar20) == 0) == calendar5.equals(calendar20));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test022");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = locale14.getDisplayVariant(locale18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone2, locale18);
        java.util.Locale locale23 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale24 = locale23.stripExtensions();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale24);
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale26);
        java.lang.String str28 = locale24.getDisplayName(locale26);
        java.lang.String str29 = locale26.getISO3Country();
        java.lang.String str30 = locale18.getDisplayCountry(locale26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar20", (calendar5.compareTo(calendar20) == 0) == calendar5.equals(calendar20));
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test023");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] { languageRange7 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone12, locale14);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale18.getDisplayLanguage(locale19);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale25);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone31);
        java.util.Locale locale34 = fastDateFormat33.getLocale();
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.lang.String str41 = locale36.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone48);
        java.util.Locale locale51 = fastDateFormat50.getLocale();
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone54.hasSameRules(timeZone55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone55);
        java.util.Locale locale58 = fastDateFormat57.getLocale();
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale60 = java.util.Locale.UK;
        java.util.Locale[] localeArray61 = new java.util.Locale[] { locale14, locale18, locale22, locale25, locale27, locale28, locale34, locale35, locale40, locale42, locale43, locale44, locale45, locale51, locale52, locale58, locale59, locale60 };
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.Locale locale64 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList62);
        java.lang.String str65 = locale1.getDisplayName(locale64);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(locale1);
        java.lang.String str67 = locale1.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar66", (calendar17.compareTo(calendar66) == 0) == calendar17.equals(calendar66));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test024");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone2);
        timeZone2.setRawOffset(37);
        timeZone2.setID("2022-2-11 9:34:45");
        boolean boolean13 = timeZone2.observesDaylightTime();
        boolean boolean14 = timeZone0.hasSameRules(timeZone2);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar8", (calendar7.compareTo(calendar8) == 0) == calendar7.equals(calendar8));
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test025");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category6, locale9);
        java.lang.String str11 = locale9.toLanguageTag();
        java.util.Calendar.Builder builder12 = builder0.setLocale(locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        java.text.ParsePosition parsePosition20 = new java.text.ParsePosition(16);
        int int21 = parsePosition20.getErrorIndex();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        boolean boolean24 = parsePosition20.equals((java.lang.Object) locale22);
        java.lang.String str25 = locale22.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15, locale22);
        int int27 = timeZone15.getRawOffset();
        java.util.Calendar.Builder builder28 = builder12.setTimeZone(timeZone15);
        java.util.Calendar calendar29 = builder12.build();
        java.util.Calendar.Builder builder33 = builder12.setTimeOfDay(0, 59, 58);
        java.util.Calendar.Builder builder35 = builder33.setLenient(false);
        java.util.Calendar.Builder builder39 = builder35.setTimeOfDay(1, 0, 18);
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone41);
        java.lang.String str43 = fastDateFormat42.toString();
        java.lang.String str44 = fastDateFormat42.toString();
        java.util.TimeZone timeZone45 = fastDateFormat42.getTimeZone();
        java.util.Locale locale46 = fastDateFormat42.getLocale();
        java.util.TimeZone timeZone47 = fastDateFormat42.getTimeZone();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone47);
        java.util.Calendar.Builder builder49 = builder35.setTimeZone(timeZone47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar48", (calendar18.compareTo(calendar48) == 0) == calendar18.equals(calendar48));
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test026");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        timeZone2.setRawOffset(22);
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder16.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder19 = builder16.clear();
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale20);
        java.util.Locale locale24 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale25 = locale24.stripExtensions();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(locale25);
        java.util.Locale locale27 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale27);
        java.lang.String str29 = locale25.getDisplayName(locale27);
        java.lang.String str30 = locale25.getDisplayVariant();
        java.lang.String str31 = locale20.getDisplayScript(locale25);
        java.util.Locale.Builder builder32 = builder16.setLocale(locale20);
        java.lang.String str33 = timeZone2.getDisplayName(locale20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar21", (calendar5.compareTo(calendar21) == 0) == calendar5.equals(calendar21));
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test027");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayVariant(locale9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale7);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.lang.String str18 = locale16.getDisplayLanguage();
        java.lang.String str20 = locale16.getUnicodeLocaleType("zh");
        java.lang.String str21 = locale12.getDisplayScript(locale16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone6, locale16);
        int int23 = timeZone6.getRawOffset();
        java.util.Date date24 = new java.util.Date();
        int int25 = date24.getTimezoneOffset();
        long long26 = date24.getTime();
        int int27 = date24.getMonth();
        boolean boolean28 = timeZone6.inDaylightTime(date24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar17", (calendar11.compareTo(calendar17) == 0) == calendar11.equals(calendar17));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test028");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str1 = attribute0.toString();
        java.util.Date date2 = new java.util.Date();
        int int3 = date2.getTimezoneOffset();
        long long4 = date2.getTime();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getSeconds();
        long long7 = date5.getTime();
        date5.setTime((long) ' ');
        int int10 = date5.getTimezoneOffset();
        boolean boolean11 = date2.before(date5);
        boolean boolean12 = attribute0.equals((java.lang.Object) date2);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15);
        java.lang.String str17 = fastDateFormat16.toString();
        java.lang.String str18 = fastDateFormat16.toString();
        java.util.TimeZone timeZone19 = fastDateFormat16.getTimeZone();
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = locale20.getLanguage();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale20.getDisplayVariant(locale22);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone19, locale20);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        java.lang.String str31 = locale29.getDisplayLanguage();
        java.lang.String str33 = locale29.getUnicodeLocaleType("zh");
        java.lang.String str34 = locale25.getDisplayScript(locale29);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone19, locale29);
        boolean boolean36 = attribute0.equals((java.lang.Object) timeZone19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar24 and calendar30", (calendar24.compareTo(calendar30) == 0) == calendar24.equals(calendar30));
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test029");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = locale6.getLanguage();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale6.getDisplayVariant(locale8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone5, locale6);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getInstance("");
        java.util.TimeZone timeZone13 = fastDateFormat12.getTimeZone();
        java.util.Locale locale14 = java.util.Locale.UK;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone13, locale14);
        boolean boolean18 = timeZone5.hasSameRules(timeZone13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar17", (calendar10.compareTo(calendar17) == 0) == calendar10.equals(calendar17));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test030");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        timeZone6.setRawOffset((int) (short) 100);
        int int9 = timeZone6.getRawOffset();
        java.text.Format.Field field10 = null;
        java.text.FieldPosition fieldPosition12 = new java.text.FieldPosition(field10, 3);
        fieldPosition12.setEndIndex(49);
        boolean boolean16 = fieldPosition12.equals((java.lang.Object) 8);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone("9:34:37 AM UTC");
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229\u6587");
        boolean boolean22 = timeZone19.hasSameRules(timeZone21);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone19);
        boolean boolean24 = fieldPosition12.equals((java.lang.Object) timeZone19);
        boolean boolean25 = timeZone6.hasSameRules(timeZone19);
        java.util.Calendar.Builder builder26 = new java.util.Calendar.Builder();
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.lang.String str28 = locale27.getLanguage();
        boolean boolean29 = locale27.hasExtensions();
        java.lang.String str30 = locale27.getDisplayCountry();
        java.util.Calendar.Builder builder31 = builder26.setLocale(locale27);
        java.util.Locale.LanguageRange languageRange33 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] { languageRange33 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone37.hasSameRules(timeZone38);
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getDisplayName();
        java.lang.String str42 = locale40.getDisplayCountry();
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone38, locale40);
        java.util.Locale locale44 = java.util.Locale.ITALIAN;
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale45.getLanguage();
        java.lang.String str47 = locale44.getDisplayLanguage(locale45);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet49 = locale48.getExtensionKeys();
        java.util.Locale locale51 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale51);
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone56.hasSameRules(timeZone57);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone57);
        java.util.Locale locale60 = fastDateFormat59.getLocale();
        java.util.Locale locale61 = java.util.Locale.FRANCE;
        java.util.Locale locale62 = java.util.Locale.CHINESE;
        java.lang.String str63 = locale62.getLanguage();
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.lang.String str65 = locale62.getDisplayVariant(locale64);
        java.util.Locale locale66 = java.util.Locale.GERMANY;
        java.lang.String str67 = locale62.getDisplayVariant(locale66);
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        java.util.Locale locale70 = java.util.Locale.ENGLISH;
        java.util.Locale locale71 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        boolean boolean75 = timeZone73.hasSameRules(timeZone74);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat76 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone74);
        java.util.Locale locale77 = fastDateFormat76.getLocale();
        java.util.Locale locale78 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone80 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone81 = java.util.TimeZone.getDefault();
        boolean boolean82 = timeZone80.hasSameRules(timeZone81);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat83 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone81);
        java.util.Locale locale84 = fastDateFormat83.getLocale();
        java.util.Locale locale85 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale86 = java.util.Locale.UK;
        java.util.Locale[] localeArray87 = new java.util.Locale[] { locale40, locale44, locale48, locale51, locale53, locale54, locale60, locale61, locale66, locale68, locale69, locale70, locale71, locale77, locale78, locale84, locale85, locale86 };
        java.util.ArrayList<java.util.Locale> localeList88 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList88, localeArray87);
        java.util.Locale locale90 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.util.Locale>) localeList88);
        java.lang.String str91 = locale27.getDisplayName(locale90);
        java.util.Calendar calendar92 = java.util.Calendar.getInstance(locale27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat93 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone19, locale27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar43 and calendar92", (calendar43.compareTo(calendar92) == 0) == calendar43.equals(calendar92));
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test031");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7);
        timeZone7.setRawOffset(3);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        boolean boolean17 = timeZone7.hasSameRules(timeZone16);
        boolean boolean18 = timeZone1.hasSameRules(timeZone16);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        int int20 = calendar19.getWeeksInWeekYear();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        boolean boolean25 = timeZone21.hasSameRules(timeZone23);
        calendar19.setTimeZone(timeZone21);
        boolean boolean27 = timeZone1.hasSameRules(timeZone21);
        timeZone21.setRawOffset(120);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar19", (calendar4.compareTo(calendar19) == 0) == calendar4.equals(calendar19));
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test032");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.lang.String str6 = locale4.getDisplayLanguage();
        java.lang.String str8 = locale4.getUnicodeLocaleType("zh");
        java.lang.String str9 = locale0.getDisplayScript(locale4);
        java.lang.String str10 = locale0.getVariant();
        java.lang.String str11 = locale0.getDisplayCountry();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder15 = builder12.clear();
        java.util.Locale locale16 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder17 = builder15.setLocale(locale16);
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale.Category category19 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale23.getDisplayName();
        java.lang.String str25 = locale23.getDisplayCountry();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone21, locale23);
        java.util.Locale.setDefault(category19, locale23);
        java.util.Locale locale28 = java.util.Locale.getDefault(category19);
        java.util.Locale.Builder builder29 = builder18.setLocale(locale28);
        java.util.Locale locale30 = builder18.build();
        java.lang.String str31 = locale0.getDisplayName(locale30);
        java.lang.String str32 = locale0.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar26", (calendar5.compareTo(calendar26) == 0) == calendar5.equals(calendar26));
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test033");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("eng", strMap1);
        java.util.Locale.LanguageRange languageRange4 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] { languageRange4 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale11);
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.lang.String str18 = locale15.getDisplayLanguage(locale16);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        java.util.Locale locale22 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale22);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone28);
        java.util.Locale locale31 = fastDateFormat30.getLocale();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale33.getLanguage();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale33.getDisplayVariant(locale35);
        java.util.Locale locale37 = java.util.Locale.GERMANY;
        java.lang.String str38 = locale33.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone44.hasSameRules(timeZone45);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone45);
        java.util.Locale locale48 = fastDateFormat47.getLocale();
        java.util.Locale locale49 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone52);
        java.util.Locale locale55 = fastDateFormat54.getLocale();
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale57 = java.util.Locale.UK;
        java.util.Locale[] localeArray58 = new java.util.Locale[] { locale11, locale15, locale19, locale22, locale24, locale25, locale31, locale32, locale37, locale39, locale40, locale41, locale42, locale48, locale49, locale55, locale56, locale57 };
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        java.util.Locale locale61 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList59);
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList59);
        java.lang.String[] strArray64 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        java.util.stream.Stream<java.lang.String> strStream67 = strList65.stream();
        boolean boolean69 = strList65.add("hi!");
        strList65.clear();
        java.lang.String str71 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strList65);
        java.lang.Object obj72 = null;
        boolean boolean73 = strList65.remove(obj72);
        java.lang.Object[] objArray74 = strList65.toArray();
        java.util.Locale locale76 = java.util.Locale.ROOT;
        boolean boolean77 = locale76.hasExtensions();
        java.util.Set<java.lang.String> strSet78 = locale76.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat79 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale76);
        java.util.Set<java.lang.String> strSet80 = locale76.getUnicodeLocaleAttributes();
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(locale76);
        boolean boolean82 = strList65.contains((java.lang.Object) locale76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar81", (calendar14.compareTo(calendar81) == 0) == calendar14.equals(calendar81));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test034");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone2);
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getDay();
        java.util.Date date7 = new java.util.Date();
        date7.setMinutes((int) '#');
        boolean boolean10 = date5.before(date7);
        date7.setSeconds(122);
        java.lang.String str13 = date7.toGMTString();
        boolean boolean14 = fastDateFormat4.equals((java.lang.Object) str13);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        java.util.Locale locale18 = java.util.Locale.ROOT;
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone16, locale18);
        long long20 = calendar19.getTimeInMillis();
        int int21 = calendar19.getWeekYear();
        java.util.Locale.LanguageRange languageRange25 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] { languageRange25 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale32.getDisplayName();
        java.lang.String str34 = locale32.getDisplayCountry();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone30, locale32);
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = locale36.getDisplayLanguage(locale37);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet41 = locale40.getExtensionKeys();
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale43);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone49);
        java.util.Locale locale52 = fastDateFormat51.getLocale();
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = locale54.getLanguage();
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.lang.String str57 = locale54.getDisplayVariant(locale56);
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.lang.String str59 = locale54.getDisplayVariant(locale58);
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        java.util.Locale locale61 = java.util.Locale.CHINESE;
        java.util.Locale locale62 = java.util.Locale.ENGLISH;
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone65.hasSameRules(timeZone66);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone66);
        java.util.Locale locale69 = fastDateFormat68.getLocale();
        java.util.Locale locale70 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        boolean boolean74 = timeZone72.hasSameRules(timeZone73);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone73);
        java.util.Locale locale76 = fastDateFormat75.getLocale();
        java.util.Locale locale77 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale78 = java.util.Locale.UK;
        java.util.Locale[] localeArray79 = new java.util.Locale[] { locale32, locale36, locale40, locale43, locale45, locale46, locale52, locale53, locale58, locale60, locale61, locale62, locale63, locale69, locale70, locale76, locale77, locale78 };
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.Locale locale82 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.Map<java.lang.String, java.lang.Integer> strMap83 = calendar19.getDisplayNames(5, 1, locale82);
        boolean boolean84 = fastDateFormat4.equals((java.lang.Object) strMap83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar35", (calendar19.compareTo(calendar35) == 0) == calendar19.equals(calendar35));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test035");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        calendar4.clear(0);
        calendar4.setFirstDayOfWeek(51);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone11, locale13);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition(16);
        int int17 = parsePosition16.getErrorIndex();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) locale18);
        java.lang.String str21 = locale18.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone11, locale18);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        long long28 = calendar27.getTimeInMillis();
        java.lang.String str29 = fastDateFormat22.format(calendar27);
        java.util.Date date30 = calendar27.getTime();
        calendar4.setTime(date30);
        java.lang.String str32 = date30.toGMTString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar14", (calendar4.compareTo(calendar14) == 0) == calendar4.equals(calendar14));
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test036");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Date date8 = new java.util.Date(9, 11, (int) '4', 35, 40, 100);
        calendar1.setTime(date8);
        calendar1.setMinimalDaysInFirstWeek(46);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance();
        boolean boolean13 = calendar12.isWeekDateSupported();
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        boolean boolean18 = calendar12.before((java.lang.Object) str17);
        int int19 = calendar12.getFirstDayOfWeek();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale23.getDisplayName();
        java.lang.String str25 = locale23.getDisplayCountry();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone21, locale23);
        int int28 = calendar26.getActualMinimum(2);
        java.util.TimeZone timeZone29 = calendar26.getTimeZone();
        boolean boolean30 = calendar12.before((java.lang.Object) timeZone29);
        calendar1.setTimeZone(timeZone29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar12 and calendar26", (calendar12.compareTo(calendar26) == 0) == calendar12.equals(calendar26));
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test037");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str1 = attribute0.toString();
        java.util.Date date2 = new java.util.Date();
        int int3 = date2.getTimezoneOffset();
        long long4 = date2.getTime();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getSeconds();
        long long7 = date5.getTime();
        date5.setTime((long) ' ');
        int int10 = date5.getTimezoneOffset();
        boolean boolean11 = date2.before(date5);
        boolean boolean12 = attribute0.equals((java.lang.Object) date2);
        boolean boolean14 = attribute0.equals((java.lang.Object) "\u5e74\u6708\u65e5");
        boolean boolean16 = attribute0.equals((java.lang.Object) true);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.parse("eng", strMap18);
        java.util.Locale.LanguageRange languageRange21 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] { languageRange21 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getDisplayName();
        java.lang.String str30 = locale28.getDisplayCountry();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone26, locale28);
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale32.getDisplayLanguage(locale33);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet37 = locale36.getExtensionKeys();
        java.util.Locale locale39 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale39);
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone44.hasSameRules(timeZone45);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone45);
        java.util.Locale locale48 = fastDateFormat47.getLocale();
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = locale50.getLanguage();
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str53 = locale50.getDisplayVariant(locale52);
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.lang.String str55 = locale50.getDisplayVariant(locale54);
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.util.Locale locale57 = java.util.Locale.CHINESE;
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone62 = java.util.TimeZone.getDefault();
        boolean boolean63 = timeZone61.hasSameRules(timeZone62);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone62);
        java.util.Locale locale65 = fastDateFormat64.getLocale();
        java.util.Locale locale66 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone68.hasSameRules(timeZone69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat71 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone69);
        java.util.Locale locale72 = fastDateFormat71.getLocale();
        java.util.Locale locale73 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale74 = java.util.Locale.UK;
        java.util.Locale[] localeArray75 = new java.util.Locale[] { locale28, locale32, locale36, locale39, locale41, locale42, locale48, locale49, locale54, locale56, locale57, locale58, locale59, locale65, locale66, locale72, locale73, locale74 };
        java.util.ArrayList<java.util.Locale> localeList76 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList76, localeArray75);
        java.util.Locale locale78 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList76);
        java.util.List<java.util.Locale> localeList79 = java.util.Locale.filter(languageRangeList19, (java.util.Collection<java.util.Locale>) localeList76);
        boolean boolean80 = attribute0.equals((java.lang.Object) languageRangeList19);
        java.util.TimeZone timeZone82 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone83 = java.util.TimeZone.getDefault();
        boolean boolean84 = timeZone82.hasSameRules(timeZone83);
        java.util.Locale locale85 = java.util.Locale.ROOT;
        java.util.Calendar calendar86 = java.util.Calendar.getInstance(timeZone83, locale85);
        java.text.ParsePosition parsePosition88 = new java.text.ParsePosition(16);
        int int89 = parsePosition88.getErrorIndex();
        java.util.Locale locale90 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet91 = locale90.getExtensionKeys();
        boolean boolean92 = parsePosition88.equals((java.lang.Object) locale90);
        java.lang.String str93 = locale90.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat94 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone83, locale90);
        java.lang.String str96 = fastDateFormat94.format(1644572100996L);
        boolean boolean97 = attribute0.equals((java.lang.Object) fastDateFormat94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar31 and calendar86", (calendar31.compareTo(calendar86) == 0) == calendar31.equals(calendar86));
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test038");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayVariant(locale9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale7);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.lang.String str18 = locale16.getDisplayLanguage();
        java.lang.String str20 = locale16.getUnicodeLocaleType("zh");
        java.lang.String str21 = locale12.getDisplayScript(locale16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone6, locale16);
        java.util.TimeZone timeZone23 = fastDateFormat22.getTimeZone();
        java.lang.String[] strArray29 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.util.stream.Stream<java.lang.String> strStream32 = strList30.stream();
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        int int34 = strList30.lastIndexOf((java.lang.Object) locale33);
        java.util.stream.Stream<java.lang.String> strStream35 = strList30.stream();
        java.lang.String[] strArray37 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.stream.Stream<java.lang.String> strStream40 = strList38.stream();
        strList38.clear();
        java.util.Spliterator<java.lang.String> strSpliterator42 = strList38.spliterator();
        int int43 = strList30.lastIndexOf((java.lang.Object) strSpliterator42);
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone45);
        java.lang.String str47 = fastDateFormat46.getPattern();
        boolean boolean48 = strList30.contains((java.lang.Object) str47);
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone49.hasSameRules(timeZone50);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone50, locale52);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone55.hasSameRules(timeZone56);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone56);
        timeZone56.setRawOffset(3);
        java.util.TimeZone timeZone62 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone62);
        java.lang.String str64 = fastDateFormat63.getPattern();
        java.util.TimeZone timeZone65 = fastDateFormat63.getTimeZone();
        boolean boolean66 = timeZone56.hasSameRules(timeZone65);
        boolean boolean67 = timeZone50.hasSameRules(timeZone65);
        java.util.TimeZone.setDefault(timeZone65);
        boolean boolean69 = strList30.contains((java.lang.Object) timeZone65);
        int int71 = timeZone65.getOffset(1644485708862L);
        boolean boolean72 = fastDateFormat22.equals((java.lang.Object) 1644485708862L);
        java.lang.String str73 = fastDateFormat22.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar17", (calendar11.compareTo(calendar17) == 0) == calendar11.equals(calendar17));
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test039");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str1 = attribute0.toString();
        java.util.Date date2 = new java.util.Date();
        int int3 = date2.getTimezoneOffset();
        long long4 = date2.getTime();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getSeconds();
        long long7 = date5.getTime();
        date5.setTime((long) ' ');
        int int10 = date5.getTimezoneOffset();
        boolean boolean11 = date2.before(date5);
        boolean boolean12 = attribute0.equals((java.lang.Object) date2);
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category13, locale14);
        java.util.Locale locale16 = java.util.Locale.getDefault(category13);
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String[] strArray23 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.util.stream.Stream<java.lang.String> strStream26 = strList24.stream();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        int int28 = strList24.lastIndexOf((java.lang.Object) locale27);
        java.lang.String str29 = locale16.getDisplayVariant(locale27);
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        java.lang.String str32 = locale16.getDisplayVariant(locale30);
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale33.getLanguage();
        boolean boolean35 = locale33.hasExtensions();
        java.lang.String str36 = locale33.getDisplayScript();
        java.lang.String str37 = locale30.getDisplayCountry(locale33);
        boolean boolean38 = attribute0.equals((java.lang.Object) locale30);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale.Category category40 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category40, locale41);
        java.lang.String str43 = locale41.getScript();
        java.lang.String str44 = locale39.getDisplayCountry(locale41);
        java.lang.String str45 = locale39.getISO3Country();
        java.lang.String str46 = locale30.getDisplayVariant(locale39);
        java.lang.String str47 = locale39.getISO3Country();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale39);
        java.util.Calendar.Builder builder49 = new java.util.Calendar.Builder();
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = locale50.getLanguage();
        boolean boolean52 = locale50.hasExtensions();
        java.lang.String str53 = locale50.getDisplayCountry();
        java.util.Calendar.Builder builder54 = builder49.setLocale(locale50);
        java.util.Date date56 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder57 = builder54.setInstant(date56);
        java.util.Calendar.Builder builder61 = builder57.setWeekDate((int) (short) -1, (int) '4', 35);
        java.util.TimeZone timeZone63 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone63);
        java.lang.String str65 = fastDateFormat64.toString();
        java.lang.String str66 = fastDateFormat64.toString();
        java.util.TimeZone timeZone67 = fastDateFormat64.getTimeZone();
        java.util.Locale locale68 = java.util.Locale.CHINESE;
        java.lang.String str69 = locale68.getLanguage();
        java.util.Locale locale70 = java.util.Locale.GERMAN;
        java.lang.String str71 = locale68.getDisplayVariant(locale70);
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone67, locale68);
        java.util.Calendar.Builder builder73 = builder61.setTimeZone(timeZone67);
        boolean boolean74 = locale39.equals((java.lang.Object) builder61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar48 and calendar72", (calendar48.compareTo(calendar72) == 0) == calendar48.equals(calendar72));
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test040");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = locale14.getDisplayVariant(locale18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone2, locale18);
        calendar20.setLenient(false);
        long long23 = calendar20.getTimeInMillis();
        java.util.Locale.LanguageRange languageRange25 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] { languageRange25 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale32.getDisplayName();
        java.lang.String str34 = locale32.getDisplayCountry();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone30, locale32);
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = locale36.getDisplayLanguage(locale37);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet41 = locale40.getExtensionKeys();
        java.util.Locale locale43 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale43);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.util.Locale locale46 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone49);
        java.util.Locale locale52 = fastDateFormat51.getLocale();
        java.util.Locale locale53 = java.util.Locale.FRANCE;
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = locale54.getLanguage();
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.lang.String str57 = locale54.getDisplayVariant(locale56);
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.lang.String str59 = locale54.getDisplayVariant(locale58);
        java.util.Locale locale60 = java.util.Locale.ENGLISH;
        java.util.Locale locale61 = java.util.Locale.CHINESE;
        java.util.Locale locale62 = java.util.Locale.ENGLISH;
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone65.hasSameRules(timeZone66);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone66);
        java.util.Locale locale69 = fastDateFormat68.getLocale();
        java.util.Locale locale70 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        boolean boolean74 = timeZone72.hasSameRules(timeZone73);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone73);
        java.util.Locale locale76 = fastDateFormat75.getLocale();
        java.util.Locale locale77 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale78 = java.util.Locale.UK;
        java.util.Locale[] localeArray79 = new java.util.Locale[] { locale32, locale36, locale40, locale43, locale45, locale46, locale52, locale53, locale58, locale60, locale61, locale62, locale63, locale69, locale70, locale76, locale77, locale78 };
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.Locale locale82 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap83 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList84 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, strMap83);
        java.util.Set<java.lang.String> strSet85 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str86 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strSet85);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap87 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList88 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, strMap87);
        java.lang.String[] strArray90 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList91 = new java.util.ArrayList<java.lang.String>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList91, strArray90);
        java.util.stream.Stream<java.lang.String> strStream93 = strList91.stream();
        boolean boolean95 = strList91.equals((java.lang.Object) (-1.0d));
        java.util.List<java.lang.String> strList96 = java.util.Locale.filterTags(languageRangeList88, (java.util.Collection<java.lang.String>) strList91);
        boolean boolean97 = calendar20.before((java.lang.Object) languageRangeList88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar35", (calendar5.compareTo(calendar35) == 0) == calendar5.equals(calendar35));
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test041");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        boolean boolean2 = calendar1.isWeekDateSupported();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale3.getDisplayVariant(locale5);
        boolean boolean7 = calendar1.before((java.lang.Object) str6);
        int int8 = calendar1.getFirstDayOfWeek();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone9);
        calendar1.setTimeZone(timeZone9);
        java.util.Locale locale15 = new java.util.Locale("");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08", timeZone9, locale15);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        java.lang.String str22 = locale20.getDisplayLanguage();
        java.lang.String str24 = locale20.getUnicodeLocaleType("zh");
        java.util.Locale locale25 = locale20.stripExtensions();
        boolean boolean26 = fastDateFormat16.equals((java.lang.Object) locale20);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.lang.String str32 = locale30.getDisplayCountry();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone28, locale30);
        calendar33.set(31, (int) (byte) 100, (int) (byte) 10, (int) (short) 100, 9, 8);
        java.util.Date date44 = new java.util.Date((-1), 32772, (int) (short) 10);
        java.lang.String str45 = date44.toLocaleString();
        calendar33.setTime(date44);
        int int48 = calendar33.getActualMinimum((int) (short) 10);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51, locale53);
        java.text.ParsePosition parsePosition56 = new java.text.ParsePosition(16);
        int int57 = parsePosition56.getErrorIndex();
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet59 = locale58.getExtensionKeys();
        boolean boolean60 = parsePosition56.equals((java.lang.Object) locale58);
        java.lang.String str61 = locale58.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone51, locale58);
        int int63 = timeZone51.getRawOffset();
        java.util.Locale locale64 = java.util.Locale.CHINESE;
        java.lang.String str65 = locale64.getLanguage();
        boolean boolean66 = locale64.hasExtensions();
        java.lang.String str67 = locale64.getDisplayScript();
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(locale64);
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone51, locale64);
        boolean boolean70 = calendar33.after((java.lang.Object) calendar69);
        calendar33.setMinimalDaysInFirstWeek(17);
        java.lang.String str73 = fastDateFormat16.format(calendar33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar21", (calendar1.compareTo(calendar21) == 0) == calendar1.equals(calendar21));
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test042");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        strList2.clear();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale9.getDisplayName();
        java.lang.String str11 = locale9.getDisplayCountry();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone7, locale9);
        java.time.ZoneId zoneId13 = timeZone7.toZoneId();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getTimeZone(zoneId13);
        boolean boolean15 = strList2.remove((java.lang.Object) timeZone14);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale16);
        int int18 = calendar17.getFirstDayOfWeek();
        boolean boolean19 = strList2.contains((java.lang.Object) int18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar12 and calendar17", (calendar12.compareTo(calendar17) == 0) == calendar12.equals(calendar17));
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test043");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone1);
        timeZone1.setRawOffset(37);
        int int11 = timeZone1.getOffset(1644572116828L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar7", (calendar6.compareTo(calendar7) == 0) == calendar6.equals(calendar7));
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test044");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.lang.String str1 = attribute0.toString();
        java.lang.String str2 = attribute0.toString();
        java.util.Calendar.Builder builder3 = new java.util.Calendar.Builder();
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.lang.String str5 = locale4.getLanguage();
        boolean boolean6 = locale4.hasExtensions();
        java.lang.String str7 = locale4.getDisplayCountry();
        java.util.Calendar.Builder builder8 = builder3.setLocale(locale4);
        boolean boolean9 = attribute0.equals((java.lang.Object) builder8);
        java.util.Calendar.Builder builder12 = builder8.set((int) (byte) 10, 59);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale16.getDisplayName();
        java.lang.String str18 = locale16.getDisplayCountry();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone14);
        timeZone14.setRawOffset(37);
        timeZone14.setID("2022-2-11 9:34:45");
        boolean boolean25 = timeZone14.observesDaylightTime();
        java.util.Calendar.Builder builder26 = builder8.setTimeZone(timeZone14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar20", (calendar19.compareTo(calendar20) == 0) == calendar19.equals(calendar20));
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test045");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale11 = new java.util.Locale("de");
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale11.getCountry();
        java.util.Calendar.Builder builder14 = builder0.setLocale(locale11);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay((int) 'u', 6, 0, 8);
        java.util.Calendar.Builder builder23 = builder19.setTimeOfDay((int) (byte) 100, 51, 100);
        java.util.Calendar.Builder builder27 = builder19.setTimeOfDay((int) (byte) -1, (int) (short) 10, 50);
        java.util.Calendar.Builder builder31 = builder27.setWeekDate(30, 25, (int) '4');
        java.util.Calendar.Builder builder36 = builder27.setTimeOfDay(120, (int) (short) 1, 51, 292278994);
        java.lang.String[] strArray38 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.stream.Stream<java.lang.String> strStream41 = strList39.stream();
        strList39.clear();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.lang.String str47 = locale46.getDisplayName();
        java.lang.String str48 = locale46.getDisplayCountry();
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone44, locale46);
        java.time.ZoneId zoneId50 = timeZone44.toZoneId();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getTimeZone(zoneId50);
        boolean boolean52 = strList39.remove((java.lang.Object) timeZone51);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone51);
        java.util.Calendar.Builder builder54 = builder27.setTimeZone(timeZone51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar49 and calendar53", (calendar49.compareTo(calendar53) == 0) == calendar49.equals(calendar53));
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test046");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int8 = calendar6.getActualMinimum(2);
        java.util.TimeZone timeZone9 = calendar6.getTimeZone();
        java.util.TimeZone timeZone10 = calendar6.getTimeZone();
        java.lang.String str11 = calendar6.getCalendarType();
        java.lang.String str12 = calendar6.getCalendarType();
        java.util.TimeZone timeZone13 = calendar6.getTimeZone();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone13);
        java.util.Date date20 = new java.util.Date(9, (int) 'x', (int) '#', 2, 7);
        java.lang.String str21 = date20.toLocaleString();
        date20.setTime(1644485709348L);
        boolean boolean24 = timeZone13.inDaylightTime(date20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar14", (calendar6.compareTo(calendar14) == 0) == calendar6.equals(calendar14));
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test047");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.lang.String str6 = locale4.getDisplayLanguage();
        java.lang.String str8 = locale4.getUnicodeLocaleType("zh");
        java.lang.String str9 = locale0.getDisplayScript(locale4);
        java.lang.String str10 = locale0.getVariant();
        java.lang.String str11 = locale0.getDisplayCountry();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder15 = builder12.clear();
        java.util.Locale locale16 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder17 = builder15.setLocale(locale16);
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale.Category category19 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale23.getDisplayName();
        java.lang.String str25 = locale23.getDisplayCountry();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone21, locale23);
        java.util.Locale.setDefault(category19, locale23);
        java.util.Locale locale28 = java.util.Locale.getDefault(category19);
        java.util.Locale.Builder builder29 = builder18.setLocale(locale28);
        java.util.Locale locale30 = builder18.build();
        java.lang.String str31 = locale0.getDisplayName(locale30);
        java.lang.String str32 = locale30.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar26", (calendar5.compareTo(calendar26) == 0) == calendar5.equals(calendar26));
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test048");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone1);
        timeZone1.setRawOffset(37);
        java.lang.String str10 = timeZone1.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar7", (calendar6.compareTo(calendar7) == 0) == calendar6.equals(calendar7));
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test049");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.lang.String str7 = fastDateFormat6.toString();
        java.lang.String str8 = fastDateFormat6.toString();
        java.util.TimeZone timeZone9 = fastDateFormat6.getTimeZone();
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getLanguage();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale10.getDisplayVariant(locale12);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale10);
        boolean boolean15 = calendar14.isWeekDateSupported();
        calendar14.set(7, 4, 0);
        java.util.Date date20 = calendar14.getTime();
        java.lang.String str21 = fastDateFormat3.format(calendar14);
        java.util.TimeZone timeZone22 = fastDateFormat3.getTimeZone();
        java.lang.Object obj23 = null;
        boolean boolean24 = fastDateFormat3.equals(obj23);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance();
        int int26 = calendar25.getWeeksInWeekYear();
        java.time.Instant instant27 = calendar25.toInstant();
        int int29 = calendar25.getMinimum(4);
        java.lang.String str30 = fastDateFormat3.format(calendar25);
        int int32 = calendar25.getLeastMaximum(3);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34, locale36);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone40);
        timeZone40.setRawOffset(3);
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone46);
        java.lang.String str48 = fastDateFormat47.getPattern();
        java.util.TimeZone timeZone49 = fastDateFormat47.getTimeZone();
        boolean boolean50 = timeZone40.hasSameRules(timeZone49);
        boolean boolean51 = timeZone34.hasSameRules(timeZone49);
        timeZone34.setRawOffset(50);
        calendar25.setTimeZone(timeZone34);
        int int56 = timeZone34.getOffset(1644572109662L);
        boolean boolean57 = calendar1.after((java.lang.Object) 1644572109662L);
        calendar1.setLenient(false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar25 and calendar37", (calendar25.compareTo(calendar37) == 0) == calendar25.equals(calendar37));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test050");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int8 = calendar6.getActualMinimum(2);
        java.util.TimeZone timeZone9 = calendar6.getTimeZone();
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        boolean boolean13 = locale11.hasExtensions();
        java.lang.String str14 = locale11.getDisplayCountry();
        java.util.Calendar.Builder builder15 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder19 = builder10.setWeekDate(38, 41, 11);
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone21);
        java.lang.String str23 = fastDateFormat22.toString();
        java.lang.String str24 = fastDateFormat22.toString();
        java.util.TimeZone timeZone25 = fastDateFormat22.getTimeZone();
        java.util.Calendar.Builder builder26 = builder19.setTimeZone(timeZone25);
        boolean boolean27 = timeZone9.hasSameRules(timeZone25);
        java.lang.String str28 = timeZone25.getID();
        java.util.Locale.Category category29 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category29, locale30);
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category29, locale32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale34);
        java.util.Locale.setDefault(category29, locale34);
        java.util.Locale locale37 = java.util.Locale.getDefault(category29);
        java.util.Locale locale38 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(category29, locale38);
        java.lang.String str40 = locale38.getCountry();
        java.lang.String str41 = timeZone25.getDisplayName(locale38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar35", (calendar6.compareTo(calendar35) == 0) == calendar6.equals(calendar35));
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test051");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale11 = new java.util.Locale("de");
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale11.getCountry();
        java.util.Calendar.Builder builder14 = builder0.setLocale(locale11);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay((int) 'u', 6, 0, 8);
        java.util.Calendar.Builder builder23 = builder19.setTimeOfDay((int) (byte) 100, 51, 100);
        java.util.Calendar.Builder builder27 = builder19.setTimeOfDay((int) (byte) -1, (int) (short) 10, 50);
        java.util.Calendar.Builder builder31 = builder27.setWeekDate(30, 25, (int) '4');
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale35.getDisplayName();
        java.lang.String str37 = locale35.getDisplayCountry();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone33, locale35);
        int int40 = calendar38.getActualMinimum(2);
        java.util.TimeZone timeZone41 = calendar38.getTimeZone();
        java.util.Calendar.Builder builder42 = new java.util.Calendar.Builder();
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.lang.String str44 = locale43.getLanguage();
        boolean boolean45 = locale43.hasExtensions();
        java.lang.String str46 = locale43.getDisplayCountry();
        java.util.Calendar.Builder builder47 = builder42.setLocale(locale43);
        java.util.Calendar.Builder builder51 = builder42.setWeekDate(38, 41, 11);
        java.util.TimeZone timeZone53 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone53);
        java.lang.String str55 = fastDateFormat54.toString();
        java.lang.String str56 = fastDateFormat54.toString();
        java.util.TimeZone timeZone57 = fastDateFormat54.getTimeZone();
        java.util.Calendar.Builder builder58 = builder51.setTimeZone(timeZone57);
        boolean boolean59 = timeZone41.hasSameRules(timeZone57);
        java.lang.String str60 = timeZone57.getID();
        java.util.Calendar.Builder builder61 = builder31.setTimeZone(timeZone57);
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(locale62);
        java.time.Instant instant64 = calendar63.toInstant();
        int int65 = calendar63.getMinimalDaysInFirstWeek();
        java.lang.String[] strArray69 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        java.util.stream.Stream<java.lang.String> strStream72 = strList70.stream();
        boolean boolean74 = strList70.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor76 = strList70.listIterator(0);
        java.lang.String[] strArray78 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        java.util.stream.Stream<java.lang.String> strStream81 = strList79.stream();
        boolean boolean83 = strList79.add("hi!");
        java.util.Locale locale84 = java.util.Locale.CHINESE;
        java.lang.String str85 = locale84.getLanguage();
        java.util.Locale locale86 = java.util.Locale.GERMAN;
        java.lang.String str87 = locale84.getDisplayVariant(locale86);
        java.util.Locale locale88 = java.util.Locale.GERMANY;
        java.lang.String str89 = locale84.getDisplayVariant(locale88);
        boolean boolean90 = strList79.contains((java.lang.Object) locale84);
        boolean boolean91 = strList70.removeAll((java.util.Collection<java.lang.String>) strList79);
        java.util.Locale locale94 = new java.util.Locale("java.text.ParsePosition[index=100,errorIndex=-1]", "Jan 10, 4630 12:00:00 AM");
        int int95 = strList70.lastIndexOf((java.lang.Object) locale94);
        java.lang.String str96 = calendar63.getDisplayName(2, 3, locale94);
        java.util.Calendar.Builder builder97 = builder31.setLocale(locale94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar38 and calendar63", (calendar38.compareTo(calendar63) == 0) == calendar38.equals(calendar63));
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test052");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder11 = builder0.setLenient(false);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay(15, 0, 32770);
        java.util.Calendar.Builder builder18 = builder15.setWeekDefinition(7, 7);
        java.util.Calendar.Builder builder20 = builder15.setLenient(true);
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22);
        java.lang.String str24 = fastDateFormat23.toString();
        java.lang.String str25 = fastDateFormat23.toString();
        java.util.TimeZone timeZone26 = fastDateFormat23.getTimeZone();
        java.util.Locale locale27 = fastDateFormat23.getLocale();
        boolean boolean28 = fastDateFormat23.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone29 = fastDateFormat23.getTimeZone();
        timeZone29.setID("Chinesisch");
        java.util.Calendar.Builder builder32 = builder15.setTimeZone(timeZone29);
        int int33 = timeZone29.getRawOffset();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone35, locale37);
        int int39 = timeZone35.getRawOffset();
        java.util.TimeZone.setDefault(timeZone35);
        boolean boolean41 = timeZone29.hasSameRules(timeZone35);
        java.lang.String[] strArray47 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.util.stream.Stream<java.lang.String> strStream50 = strList48.stream();
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        int int52 = strList48.lastIndexOf((java.lang.Object) locale51);
        java.util.stream.Stream<java.lang.String> strStream53 = strList48.stream();
        java.lang.String[] strArray55 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        java.util.stream.Stream<java.lang.String> strStream58 = strList56.stream();
        strList56.clear();
        java.util.Spliterator<java.lang.String> strSpliterator60 = strList56.spliterator();
        int int61 = strList48.lastIndexOf((java.lang.Object) strSpliterator60);
        java.util.Locale.Builder builder62 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder64 = builder62.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder65 = builder62.clear();
        java.util.Locale locale66 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder67 = builder65.setLocale(locale66);
        java.util.Locale.Builder builder68 = builder67.clearExtensions();
        java.util.Locale.Category category69 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        boolean boolean72 = timeZone70.hasSameRules(timeZone71);
        java.util.Locale locale73 = java.util.Locale.GERMAN;
        java.lang.String str74 = locale73.getDisplayName();
        java.lang.String str75 = locale73.getDisplayCountry();
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(timeZone71, locale73);
        java.util.Locale.setDefault(category69, locale73);
        java.util.Locale locale78 = java.util.Locale.getDefault(category69);
        java.util.Locale.Builder builder79 = builder68.setLocale(locale78);
        java.util.Locale.Builder builder80 = builder68.clearExtensions();
        boolean boolean81 = strList48.equals((java.lang.Object) builder68);
        java.util.Locale.Builder builder82 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder84 = builder82.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder86 = builder84.setLanguageTag("it");
        java.util.Locale.Builder builder89 = builder84.setExtension('x', "de");
        java.util.Locale locale90 = builder89.build();
        java.util.Locale.Builder builder91 = builder68.setLocale(locale90);
        java.lang.String str92 = timeZone29.getDisplayName(locale90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar38 and calendar76", (calendar38.compareTo(calendar76) == 0) == calendar38.equals(calendar76));
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test053");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7);
        timeZone7.setRawOffset(3);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        boolean boolean17 = timeZone7.hasSameRules(timeZone16);
        boolean boolean18 = timeZone1.hasSameRules(timeZone16);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        int int20 = calendar19.getWeeksInWeekYear();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        boolean boolean25 = timeZone21.hasSameRules(timeZone23);
        calendar19.setTimeZone(timeZone21);
        boolean boolean27 = timeZone1.hasSameRules(timeZone21);
        timeZone21.setRawOffset(122);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar19", (calendar4.compareTo(calendar19) == 0) == calendar4.equals(calendar19));
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test054");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.lang.String str3 = locale2.getLanguage();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale2.getDisplayVariant(locale4);
        boolean boolean6 = calendar0.before((java.lang.Object) str5);
        int int7 = calendar0.getFirstDayOfWeek();
        int int8 = calendar0.getWeekYear();
        int int9 = calendar0.getWeekYear();
        java.util.Date date10 = calendar0.getTime();
        java.util.TimeZone timeZone11 = calendar0.getTimeZone();
        java.util.Locale locale13 = java.util.Locale.ROOT;
        boolean boolean14 = locale13.hasExtensions();
        java.util.Set<java.lang.String> strSet15 = locale13.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale13);
        java.util.Set<java.lang.String> strSet17 = locale13.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale13.getDisplayLanguage();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale13);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone11, locale13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar19", (calendar0.compareTo(calendar19) == 0) == calendar0.equals(calendar19));
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test055");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] { languageRange7 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone12, locale14);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale18.getDisplayLanguage(locale19);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale25);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone31);
        java.util.Locale locale34 = fastDateFormat33.getLocale();
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.lang.String str41 = locale36.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone48);
        java.util.Locale locale51 = fastDateFormat50.getLocale();
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone54.hasSameRules(timeZone55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone55);
        java.util.Locale locale58 = fastDateFormat57.getLocale();
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale60 = java.util.Locale.UK;
        java.util.Locale[] localeArray61 = new java.util.Locale[] { locale14, locale18, locale22, locale25, locale27, locale28, locale34, locale35, locale40, locale42, locale43, locale44, locale45, locale51, locale52, locale58, locale59, locale60 };
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.Locale locale64 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList62);
        java.lang.String str65 = locale1.getDisplayName(locale64);
        java.util.Set<java.lang.Character> charSet66 = locale1.getExtensionKeys();
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone68.hasSameRules(timeZone69);
        java.util.Locale locale71 = java.util.Locale.ROOT;
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone69, locale71);
        java.text.ParsePosition parsePosition74 = new java.text.ParsePosition(16);
        int int75 = parsePosition74.getErrorIndex();
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet77 = locale76.getExtensionKeys();
        boolean boolean78 = parsePosition74.equals((java.lang.Object) locale76);
        java.lang.String str79 = locale76.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat80 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone69, locale76);
        java.util.TimeZone timeZone81 = java.util.TimeZone.getDefault();
        timeZone81.setRawOffset((-1));
        boolean boolean84 = timeZone69.hasSameRules(timeZone81);
        java.util.TimeZone timeZone85 = null;
        boolean boolean86 = timeZone81.hasSameRules(timeZone85);
        boolean boolean87 = locale1.equals((java.lang.Object) timeZone85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar72", (calendar17.compareTo(calendar72) == 0) == calendar17.equals(calendar72));
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test056");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = locale14.getDisplayVariant(locale18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone2, locale18);
        java.lang.String str21 = locale18.toLanguageTag();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar20", (calendar5.compareTo(calendar20) == 0) == calendar5.equals(calendar20));
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test057");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        int int9 = calendar7.getActualMinimum(2);
        java.util.TimeZone timeZone10 = calendar7.getTimeZone();
        java.util.TimeZone timeZone11 = calendar7.getTimeZone();
        java.lang.String str12 = calendar7.getCalendarType();
        java.lang.String str13 = calendar7.getCalendarType();
        java.util.TimeZone timeZone14 = calendar7.getTimeZone();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone14);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        int int18 = calendar17.getWeeksInWeekYear();
        java.time.Instant instant19 = calendar17.toInstant();
        int int21 = calendar17.getMinimum(4);
        calendar17.setFirstDayOfWeek(13);
        calendar17.clear();
        calendar17.set((int) (byte) 100, 34, 8, 1, 4);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.Locale locale33 = java.util.Locale.PRC;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone32, locale33);
        calendar17.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder36 = new java.util.Calendar.Builder();
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = locale37.getLanguage();
        boolean boolean39 = locale37.hasExtensions();
        java.lang.String str40 = locale37.getDisplayCountry();
        java.util.Calendar.Builder builder41 = builder36.setLocale(locale37);
        java.util.Locale.Category category42 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category42, locale43);
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category42, locale45);
        java.lang.String str47 = locale45.toLanguageTag();
        java.util.Calendar.Builder builder48 = builder36.setLocale(locale45);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", timeZone32, locale45);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone14, locale45);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar15", (calendar7.compareTo(calendar15) == 0) == calendar7.equals(calendar15));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test058");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Date date7 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder8 = builder5.setInstant(date7);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate((int) (short) -1, (int) '4', 35);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone14);
        java.lang.String str16 = fastDateFormat15.toString();
        java.lang.String str17 = fastDateFormat15.toString();
        java.util.TimeZone timeZone18 = fastDateFormat15.getTimeZone();
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale19.getDisplayVariant(locale21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone18, locale19);
        java.util.Calendar.Builder builder24 = builder12.setTimeZone(timeZone18);
        java.util.Calendar.Builder builder27 = builder12.set(13, 38);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        java.lang.String str34 = locale32.getDisplayLanguage();
        java.lang.String str36 = locale32.getUnicodeLocaleType("zh");
        java.lang.String str37 = locale28.getDisplayScript(locale32);
        java.lang.String str38 = locale28.getVariant();
        java.lang.String str39 = locale28.getDisplayCountry();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale40.getDisplayName();
        java.lang.String str42 = locale40.getDisplayCountry();
        java.util.Set<java.lang.String> strSet43 = locale40.getUnicodeLocaleKeys();
        java.lang.String str44 = locale28.getDisplayLanguage(locale40);
        java.util.Calendar.Builder builder45 = builder12.setLocale(locale28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar23 and calendar33", (calendar23.compareTo(calendar33) == 0) == calendar23.equals(calendar33));
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test059");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category6, locale9);
        java.lang.String str11 = locale9.toLanguageTag();
        java.util.Calendar.Builder builder12 = builder0.setLocale(locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        java.text.ParsePosition parsePosition20 = new java.text.ParsePosition(16);
        int int21 = parsePosition20.getErrorIndex();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        boolean boolean24 = parsePosition20.equals((java.lang.Object) locale22);
        java.lang.String str25 = locale22.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15, locale22);
        int int27 = timeZone15.getRawOffset();
        java.util.Calendar.Builder builder28 = builder12.setTimeZone(timeZone15);
        java.util.Calendar calendar29 = builder12.build();
        java.util.Calendar.Builder builder33 = builder12.setTimeOfDay(0, 59, 58);
        java.util.Calendar.Builder builder35 = builder33.setLenient(false);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance();
        boolean boolean37 = calendar36.isWeekDateSupported();
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.lang.String str39 = locale38.getLanguage();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale38.getDisplayVariant(locale40);
        boolean boolean42 = calendar36.before((java.lang.Object) str41);
        long long43 = calendar36.getTimeInMillis();
        int int44 = calendar36.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone45 = calendar36.getTimeZone();
        int int46 = timeZone45.getRawOffset();
        java.util.Calendar.Builder builder47 = builder35.setTimeZone(timeZone45);
        timeZone45.setRawOffset(50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar36", (calendar18.compareTo(calendar36) == 0) == calendar18.equals(calendar36));
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test060");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        timeZone2.setID("coreano");
        boolean boolean16 = timeZone2.observesDaylightTime();
        boolean boolean17 = timeZone2.observesDaylightTime();
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.lang.String str19 = locale18.getDisplayVariant();
        java.lang.String str20 = locale18.getVariant();
        java.text.ParsePosition parsePosition22 = new java.text.ParsePosition(16);
        int int23 = parsePosition22.getErrorIndex();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        boolean boolean26 = parsePosition22.equals((java.lang.Object) locale24);
        java.lang.String str27 = locale24.getDisplayName();
        java.lang.String str28 = locale18.getDisplayVariant(locale24);
        java.util.Locale locale29 = java.util.Locale.PRC;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale29);
        java.lang.String str31 = locale24.getDisplayLanguage(locale29);
        java.lang.String str32 = timeZone2.getDisplayName(locale24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar30", (calendar5.compareTo(calendar30) == 0) == calendar5.equals(calendar30));
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test061");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale3);
        int int7 = timeZone0.getOffset((long) 2);
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale locale11 = java.util.Locale.getDefault(category8);
        java.util.Locale locale12 = java.util.Locale.getDefault(category8);
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone0, locale12);
        java.util.Set<java.lang.String> strSet16 = locale12.getUnicodeLocaleKeys();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar15", (calendar5.compareTo(calendar15) == 0) == calendar5.equals(calendar15));
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test062");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String[] strArray10 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        int int15 = strList11.lastIndexOf((java.lang.Object) locale14);
        java.lang.String str16 = locale3.getDisplayVariant(locale14);
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        java.lang.String str19 = locale3.getDisplayVariant(locale17);
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = locale20.getLanguage();
        boolean boolean22 = locale20.hasExtensions();
        java.lang.String str23 = locale20.getDisplayScript();
        java.lang.String str24 = locale17.getDisplayCountry(locale20);
        java.util.Locale locale25 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        java.lang.String str31 = locale29.getDisplayLanguage();
        java.lang.String str33 = locale29.getUnicodeLocaleType("zh");
        java.lang.String str34 = locale25.getDisplayScript(locale29);
        java.lang.String str35 = locale25.getVariant();
        java.lang.String str36 = locale25.getDisplayCountry();
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder37.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder40 = builder37.clear();
        java.util.Locale locale41 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder42 = builder40.setLocale(locale41);
        java.util.Locale.Builder builder43 = builder42.clearExtensions();
        java.util.Locale.Category category44 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.lang.String str49 = locale48.getDisplayName();
        java.lang.String str50 = locale48.getDisplayCountry();
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone46, locale48);
        java.util.Locale.setDefault(category44, locale48);
        java.util.Locale locale53 = java.util.Locale.getDefault(category44);
        java.util.Locale.Builder builder54 = builder43.setLocale(locale53);
        java.util.Locale locale55 = builder43.build();
        java.lang.String str56 = locale25.getDisplayName(locale55);
        java.lang.String str57 = locale17.getDisplayLanguage(locale55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar30 and calendar51", (calendar30.compareTo(calendar51) == 0) == calendar30.equals(calendar51));
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test063");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.lang.String str3 = locale2.getLanguage();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale2.getDisplayVariant(locale4);
        boolean boolean6 = calendar0.before((java.lang.Object) str5);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale10.getDisplayCountry();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale10);
        int int15 = calendar13.getActualMinimum(2);
        java.util.TimeZone timeZone16 = calendar13.getTimeZone();
        calendar0.setTimeZone(timeZone16);
        java.util.Locale locale20 = new java.util.Locale("\u671d\u9c9c\u6587", "");
        java.lang.String str21 = locale20.getISO3Language();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone16, locale20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar13", (calendar0.compareTo(calendar13) == 0) == calendar0.equals(calendar13));
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test064");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        strList2.clear();
        java.lang.String[] strArray7 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.stream.Stream<java.lang.String> strStream10 = strList8.stream();
        boolean boolean11 = strList2.containsAll((java.util.Collection<java.lang.String>) strList8);
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale16.getDisplayName();
        java.lang.String str18 = locale16.getDisplayCountry();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.util.Locale.setDefault(category12, locale16);
        java.util.Locale locale21 = java.util.Locale.getDefault(category12);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = locale22.getDisplayLanguage();
        java.util.Locale.setDefault(category12, locale22);
        java.util.Locale.Category category26 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category26, locale27);
        java.util.Locale locale29 = java.util.Locale.getDefault(category26);
        java.util.Locale locale30 = java.util.Locale.getDefault(category26);
        java.util.Locale locale31 = java.util.Locale.getDefault(category26);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone33, locale35);
        java.lang.String str37 = locale35.getDisplayLanguage();
        java.util.Locale.setDefault(category26, locale35);
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category39, locale40);
        java.util.Locale locale42 = java.util.Locale.getDefault(category39);
        java.util.Locale.Category category43 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale44 = java.util.Locale.getDefault(category43);
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale45.getLanguage();
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.lang.String str48 = locale45.getDisplayVariant(locale47);
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleKeys();
        java.lang.String str51 = locale47.getDisplayCountry(locale49);
        java.lang.String str52 = locale49.toLanguageTag();
        java.util.Locale.setDefault(category43, locale49);
        java.util.Locale.Category category54 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone55.hasSameRules(timeZone56);
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.lang.String str59 = locale58.getDisplayName();
        java.lang.String str60 = locale58.getDisplayCountry();
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(timeZone56, locale58);
        java.util.Locale.setDefault(category54, locale58);
        java.util.Locale.Category[] categoryArray63 = new java.util.Locale.Category[] { category12, category26, category39, category43, category54 };
        java.util.Locale.Category[] categoryArray64 = strList2.toArray(categoryArray63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar36", (calendar19.compareTo(calendar36) == 0) == calendar19.equals(calendar36));
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test065");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] { languageRange7 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone12, locale14);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale18.getDisplayLanguage(locale19);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale25);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone31);
        java.util.Locale locale34 = fastDateFormat33.getLocale();
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.lang.String str41 = locale36.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone48);
        java.util.Locale locale51 = fastDateFormat50.getLocale();
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone54.hasSameRules(timeZone55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone55);
        java.util.Locale locale58 = fastDateFormat57.getLocale();
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale60 = java.util.Locale.UK;
        java.util.Locale[] localeArray61 = new java.util.Locale[] { locale14, locale18, locale22, locale25, locale27, locale28, locale34, locale35, locale40, locale42, locale43, locale44, locale45, locale51, locale52, locale58, locale59, locale60 };
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.Locale locale64 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList62);
        java.lang.String str65 = locale1.getDisplayName(locale64);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(locale1);
        java.util.Locale locale67 = java.util.Locale.CHINESE;
        java.lang.String str68 = locale67.getLanguage();
        java.util.Locale locale69 = java.util.Locale.GERMAN;
        java.lang.String str70 = locale67.getDisplayVariant(locale69);
        java.util.Locale locale71 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet72 = locale71.getUnicodeLocaleKeys();
        java.lang.String str73 = locale69.getDisplayCountry(locale71);
        java.lang.String str74 = locale71.getISO3Country();
        java.lang.String str75 = locale1.getDisplayVariant(locale71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar66", (calendar17.compareTo(calendar66) == 0) == calendar17.equals(calendar66));
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test066");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.lang.String str3 = locale2.getLanguage();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale2.getDisplayVariant(locale4);
        boolean boolean6 = calendar0.before((java.lang.Object) str5);
        int int7 = calendar0.getFirstDayOfWeek();
        java.util.TimeZone timeZone8 = calendar0.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.lang.String str14 = fastDateFormat13.toString();
        java.lang.String str15 = fastDateFormat13.toString();
        java.util.TimeZone timeZone16 = fastDateFormat13.getTimeZone();
        java.util.Locale locale17 = fastDateFormat13.getLocale();
        java.util.TimeZone timeZone18 = fastDateFormat13.getTimeZone();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone18);
        boolean boolean20 = timeZone8.hasSameRules(timeZone18);
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder21.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder24 = builder21.clear();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder26 = builder24.setLocale(locale25);
        java.lang.String str27 = locale25.getISO3Country();
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.lang.String str29 = locale28.getLanguage();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale28.getDisplayVariant(locale30);
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.lang.String str33 = locale28.getDisplayVariant(locale32);
        boolean boolean34 = locale32.hasExtensions();
        java.lang.String str35 = locale25.getDisplayLanguage(locale32);
        java.lang.String str36 = timeZone8.getDisplayName(locale25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar19", (calendar0.compareTo(calendar19) == 0) == calendar0.equals(calendar19));
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test067");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale11);
        java.util.Locale.setDefault(category7, locale11);
        java.util.Locale locale16 = java.util.Locale.getDefault(category7);
        java.util.Locale.Builder builder17 = builder6.setLocale(locale16);
        java.util.Locale locale18 = builder6.build();
        java.lang.String str19 = locale18.getScript();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone21);
        java.lang.StringBuffer stringBuffer24 = null;
        java.lang.StringBuffer stringBuffer25 = fastDateFormat22.format((long) 32772, stringBuffer24);
        java.util.Date date26 = new java.util.Date();
        int int27 = date26.getTimezoneOffset();
        long long28 = date26.getTime();
        int int29 = date26.getMinutes();
        java.lang.String str30 = fastDateFormat22.format(date26);
        java.util.TimeZone timeZone31 = fastDateFormat22.getTimeZone();
        int int33 = timeZone31.getOffset((long) 36);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone35, locale37);
        boolean boolean39 = timeZone31.hasSameRules(timeZone35);
        java.util.Locale locale41 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale41);
        java.util.TimeZone timeZone43 = fastDateFormat42.getTimeZone();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone44.hasSameRules(timeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet48 = locale47.getExtensionKeys();
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone44, locale47);
        java.lang.String str50 = locale47.getCountry();
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone43, locale47);
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone35, locale47);
        java.lang.String str53 = locale18.getDisplayCountry(locale47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar38", (calendar14.compareTo(calendar38) == 0) == calendar14.equals(calendar38));
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test068");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        int int14 = timeZone2.getRawOffset();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        boolean boolean17 = locale15.hasExtensions();
        java.lang.String str18 = locale15.getDisplayScript();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale15);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone2, locale15);
        timeZone2.setID("\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar19", (calendar5.compareTo(calendar19) == 0) == calendar5.equals(calendar19));
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test069");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int8 = calendar6.getActualMinimum(2);
        int int9 = calendar6.getWeeksInWeekYear();
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone12, locale14);
        int int19 = calendar17.getActualMinimum(2);
        java.util.TimeZone timeZone20 = calendar17.getTimeZone();
        java.util.TimeZone timeZone21 = calendar17.getTimeZone();
        java.util.Calendar.Builder builder22 = builder10.setTimeZone(timeZone21);
        calendar6.setTimeZone(timeZone21);
        java.util.TimeZone.setDefault(timeZone21);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone21);
        int int26 = timeZone21.getRawOffset();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar25", (calendar6.compareTo(calendar25) == 0) == calendar6.equals(calendar25));
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test070");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset(1644572072169L);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone6);
        java.lang.String str8 = fastDateFormat7.toString();
        java.lang.String str9 = fastDateFormat7.toString();
        java.util.TimeZone timeZone10 = fastDateFormat7.getTimeZone();
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale11.getDisplayVariant(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone10, locale11);
        boolean boolean16 = calendar15.isWeekDateSupported();
        calendar15.set(7, 4, 0);
        java.util.Date date21 = calendar15.getTime();
        java.lang.String str22 = fastDateFormat4.format(calendar15);
        java.util.TimeZone timeZone23 = fastDateFormat4.getTimeZone();
        java.lang.Object obj24 = null;
        boolean boolean25 = fastDateFormat4.equals(obj24);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int27 = calendar26.getWeeksInWeekYear();
        java.time.Instant instant28 = calendar26.toInstant();
        int int30 = calendar26.getMinimum(4);
        java.lang.String str31 = fastDateFormat4.format(calendar26);
        int int33 = calendar26.getLeastMaximum(3);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone35, locale37);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone41);
        timeZone41.setRawOffset(3);
        java.util.TimeZone timeZone47 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone47);
        java.lang.String str49 = fastDateFormat48.getPattern();
        java.util.TimeZone timeZone50 = fastDateFormat48.getTimeZone();
        boolean boolean51 = timeZone41.hasSameRules(timeZone50);
        boolean boolean52 = timeZone35.hasSameRules(timeZone50);
        timeZone35.setRawOffset(50);
        calendar26.setTimeZone(timeZone35);
        boolean boolean56 = timeZone0.hasSameRules(timeZone35);
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar38", (calendar26.compareTo(calendar38) == 0) == calendar26.equals(calendar38));
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test071");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getTimeZone("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone15);
        boolean boolean17 = timeZone2.hasSameRules(timeZone15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar16", (calendar5.compareTo(calendar16) == 0) == calendar5.equals(calendar16));
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test072");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        int int5 = date3.getSeconds();
        java.lang.StringBuffer stringBuffer6 = null;
        java.text.Format.Field field7 = null;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition(field7, 1);
        fieldPosition9.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer12 = fastDateFormat2.format((java.lang.Object) date3, stringBuffer6, fieldPosition9);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        boolean boolean14 = calendar13.isWeekDateSupported();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        boolean boolean19 = calendar13.before((java.lang.Object) str18);
        long long20 = calendar13.getTimeInMillis();
        int int21 = calendar13.getMinimalDaysInFirstWeek();
        java.lang.StringBuffer stringBuffer22 = null;
        java.text.Format.Field field23 = null;
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition(field23, 3);
        fieldPosition25.setEndIndex(12);
        java.lang.StringBuffer stringBuffer28 = fastDateFormat2.format((java.lang.Object) calendar13, stringBuffer22, fieldPosition25);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale29);
        java.time.Instant instant31 = calendar30.toInstant();
        java.time.Instant instant32 = calendar30.toInstant();
        java.text.AttributedCharacterIterator attributedCharacterIterator33 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) calendar30);
        java.lang.String str35 = fastDateFormat2.format((long) ' ');
        int int36 = fastDateFormat2.getMaxLengthEstimate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar30", (calendar13.compareTo(calendar30) == 0) == calendar13.equals(calendar30));
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test073");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale3);
        int int7 = timeZone0.getOffset((long) 2);
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale locale11 = java.util.Locale.getDefault(category8);
        java.util.Locale locale12 = java.util.Locale.getDefault(category8);
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone0, locale12);
        java.lang.String str16 = calendar15.getCalendarType();
        java.util.Date date17 = calendar15.getTime();
        java.lang.String str18 = date17.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar15", (calendar5.compareTo(calendar15) == 0) == calendar5.equals(calendar15));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test074");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale7.getVariant();
        java.lang.String str10 = locale3.getDisplayScript(locale7);
        java.lang.String str11 = locale3.getISO3Language();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        java.lang.String str14 = locale3.getDisplayVariant(locale12);
        java.lang.String str15 = locale12.getISO3Language();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar13", (calendar6.compareTo(calendar13) == 0) == calendar6.equals(calendar13));
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test075");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        long long5 = calendar4.getTimeInMillis();
        java.util.Locale locale10 = new java.util.Locale("java.text.FieldPosition[field=1,attribute=null,beginIndex=0,endIndex=0]", "\u4e0a\u5348", "h:mm:ss a z");
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale16.getDisplayName();
        java.lang.String str18 = locale16.getDisplayCountry();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.lang.String str22 = locale20.getVariant();
        java.lang.String str23 = locale16.getDisplayScript(locale20);
        java.util.Set<java.lang.String> strSet24 = locale16.getUnicodeLocaleKeys();
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale.Category category26 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category26, locale27);
        java.lang.String str29 = locale27.getScript();
        java.lang.String str30 = locale25.getDisplayCountry(locale27);
        java.lang.String str31 = locale16.getDisplayCountry(locale27);
        java.lang.String str32 = locale11.getDisplayCountry(locale27);
        java.lang.String str33 = locale10.getDisplayScript(locale11);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, locale10);
        boolean boolean35 = calendar4.after((java.lang.Object) fastDateFormat34);
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition(16);
        java.lang.String str39 = parsePosition38.toString();
        int int40 = parsePosition38.getIndex();
        java.lang.String str41 = parsePosition38.toString();
        parsePosition38.setErrorIndex(24);
        java.util.Calendar.Builder builder44 = new java.util.Calendar.Builder();
        java.util.Calendar calendar45 = builder44.build();
        int int46 = calendar45.getWeekYear();
        calendar45.setLenient(true);
        int int50 = calendar45.getActualMinimum(3);
        int int51 = calendar45.getWeeksInWeekYear();
        boolean boolean52 = parsePosition38.equals((java.lang.Object) calendar45);
        java.lang.Object obj53 = fastDateFormat34.parseObject("java.util.GregorianCalendar[time=1644572158753,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=35,SECOND=58,MILLISECOND=853,ZONE_OFFSET=100,DST_OFFSET=0]", parsePosition38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar19", (calendar4.compareTo(calendar19) == 0) == calendar4.equals(calendar19));
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test076");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        int int9 = calendar7.getActualMinimum(2);
        java.util.TimeZone timeZone10 = calendar7.getTimeZone();
        java.util.TimeZone timeZone11 = calendar7.getTimeZone();
        java.lang.String str12 = calendar7.getCalendarType();
        java.lang.String str13 = calendar7.getCalendarType();
        java.util.TimeZone timeZone14 = calendar7.getTimeZone();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        java.text.ParsePosition parsePosition22 = new java.text.ParsePosition(16);
        int int23 = parsePosition22.getErrorIndex();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        boolean boolean26 = parsePosition22.equals((java.lang.Object) locale24);
        java.lang.String str27 = locale24.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17, locale24);
        int int29 = timeZone17.getRawOffset();
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        boolean boolean32 = locale30.hasExtensions();
        java.lang.String str33 = locale30.getDisplayScript();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale30);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone17, locale30);
        java.lang.String str36 = locale30.getDisplayCountry();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone14, locale30);
        java.lang.String str38 = timeZone14.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar20", (calendar7.compareTo(calendar20) == 0) == calendar7.equals(calendar20));
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test077");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayVariant(locale9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale7);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.lang.String str18 = locale16.getDisplayLanguage();
        java.lang.String str20 = locale16.getUnicodeLocaleType("zh");
        java.lang.String str21 = locale12.getDisplayScript(locale16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone6, locale16);
        boolean boolean23 = timeZone6.observesDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar17", (calendar11.compareTo(calendar17) == 0) == calendar11.equals(calendar17));
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test078");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int8 = calendar6.getActualMinimum(2);
        java.util.TimeZone timeZone9 = calendar6.getTimeZone();
        java.util.TimeZone timeZone10 = calendar6.getTimeZone();
        java.lang.String str11 = calendar6.getCalendarType();
        java.lang.String str12 = calendar6.getCalendarType();
        java.util.TimeZone timeZone13 = calendar6.getTimeZone();
        timeZone13.setID("deu");
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale20.getDisplayName();
        java.lang.String str22 = locale20.getDisplayCountry();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone18, locale20);
        boolean boolean24 = timeZone13.hasSameRules(timeZone18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar23", (calendar6.compareTo(calendar23) == 0) == calendar6.equals(calendar23));
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test079");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        long long19 = calendar18.getTimeInMillis();
        java.lang.String str20 = fastDateFormat13.format(calendar18);
        java.lang.String[] strArray22 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.util.stream.Stream<java.lang.String> strStream25 = strList23.stream();
        boolean boolean27 = strList23.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor29 = strList23.listIterator(0);
        java.lang.String[] strArray31 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.stream.Stream<java.lang.String> strStream34 = strList32.stream();
        boolean boolean36 = strList32.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor38 = strList32.listIterator(0);
        java.lang.String[] strArray40 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.util.stream.Stream<java.lang.String> strStream43 = strList41.stream();
        java.util.ListIterator<java.lang.String> strItor44 = strList41.listIterator();
        boolean boolean45 = strList32.removeAll((java.util.Collection<java.lang.String>) strList41);
        boolean boolean46 = strList23.containsAll((java.util.Collection<java.lang.String>) strList32);
        boolean boolean48 = strList32.remove((java.lang.Object) 0.0d);
        boolean boolean49 = calendar18.before((java.lang.Object) 0.0d);
        int int50 = calendar18.getWeekYear();
        calendar18.set(26, 37, 17);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone55.hasSameRules(timeZone56);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone55);
        timeZone55.setRawOffset(40);
        calendar18.setTimeZone(timeZone55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar58", (calendar5.compareTo(calendar58) == 0) == calendar5.equals(calendar58));
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test080");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale11 = new java.util.Locale("de");
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale11.getCountry();
        java.util.Calendar.Builder builder14 = builder0.setLocale(locale11);
        java.util.Calendar calendar15 = builder14.build();
        int int17 = calendar15.getActualMaximum(10);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.lang.String str23 = locale21.getDisplayCountry();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone19, locale21);
        int int26 = calendar24.getActualMinimum(2);
        java.util.TimeZone timeZone27 = calendar24.getTimeZone();
        java.util.TimeZone timeZone28 = calendar24.getTimeZone();
        java.lang.String str29 = calendar24.getCalendarType();
        java.lang.String str30 = calendar24.getCalendarType();
        java.util.TimeZone timeZone31 = calendar24.getTimeZone();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone31);
        calendar15.setTimeZone(timeZone31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar24 and calendar32", (calendar24.compareTo(calendar32) == 0) == calendar24.equals(calendar32));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test081");
        java.lang.String[] strArray35 = new java.lang.String[] { "eng", "Jan 10, 4630 12:00:00 AM", "2022-2-11 9:34:42", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "java.util.GregorianCalendar[time=1644572075684,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=15,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=684,ZONE_OFFSET=0,DST_OFFSET=0]", "zh", "java.text.ParsePosition[index=100,errorIndex=-1]", "9:34:41 AM UTC", "Greenwich Mean Time", "Chinese", "\uc624\uc804\uc2dc\ubd84\ucd08", "9:34:37 AM UTC", "9:34:38 AM UTC", "9:34:41 AM UTC", "9:34:37 AM UTC", "Chinese", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "\u4e2d\u6587", "FastDateFormat[h:mm:ss a z]", "Jan 10, 4630 12:00:00 AM", "9:34:41 AM UTC", "it", "\u610f\u5927\u5229\u6587", "Tue Jan 11 09:34:31 UTC 2022", "9:34:38 AM UTC", "", "de", "tedesco", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "\uc624\uc804\uc2dc\ubd84\ucd08", "12:00:00 AM UTC", "eng", "\uc624\uc804\uc2dc\ubd84\ucd08", "\u5e74\u6708\u65e5", "\u610f\u5927\u5229\u6587" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.lang.String str39 = strList36.remove(0);
        java.util.ListIterator<java.lang.String> strItor40 = strList36.listIterator();
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone42);
        java.lang.String str44 = fastDateFormat43.toString();
        java.lang.String str45 = fastDateFormat43.toString();
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition(100);
        java.lang.String str49 = parsePosition48.toString();
        java.lang.Object obj50 = fastDateFormat43.parseObject("de", parsePosition48);
        int int51 = parsePosition48.getErrorIndex();
        java.util.Locale locale53 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale53);
        java.lang.String str55 = locale53.getLanguage();
        java.lang.String str56 = locale53.getVariant();
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(locale53);
        calendar57.setLenient(false);
        boolean boolean60 = parsePosition48.equals((java.lang.Object) calendar57);
        boolean boolean61 = strList36.equals((java.lang.Object) parsePosition48);
        java.util.Locale locale62 = java.util.Locale.CHINESE;
        java.lang.String str63 = locale62.getLanguage();
        java.lang.String str64 = locale62.getDisplayLanguage();
        java.util.Locale locale65 = locale62.stripExtensions();
        java.lang.String str67 = locale62.getExtension('u');
        java.util.Locale locale71 = new java.util.Locale("java.text.FieldPosition[field=1,attribute=null,beginIndex=0,endIndex=0]", "\u4e0a\u5348", "h:mm:ss a z");
        java.util.Locale locale72 = java.util.Locale.PRC;
        java.lang.String str73 = locale72.getDisplayLanguage();
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone74.hasSameRules(timeZone75);
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.lang.String str78 = locale77.getDisplayName();
        java.lang.String str79 = locale77.getDisplayCountry();
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(timeZone75, locale77);
        java.util.Locale locale81 = java.util.Locale.CHINESE;
        java.util.Locale locale82 = locale81.stripExtensions();
        java.lang.String str83 = locale81.getVariant();
        java.lang.String str84 = locale77.getDisplayScript(locale81);
        java.util.Set<java.lang.String> strSet85 = locale77.getUnicodeLocaleKeys();
        java.util.Locale locale86 = java.util.Locale.GERMAN;
        java.util.Locale.Category category87 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale88 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category87, locale88);
        java.lang.String str90 = locale88.getScript();
        java.lang.String str91 = locale86.getDisplayCountry(locale88);
        java.lang.String str92 = locale77.getDisplayCountry(locale88);
        java.lang.String str93 = locale72.getDisplayCountry(locale88);
        java.lang.String str94 = locale71.getDisplayScript(locale72);
        java.lang.String str95 = locale62.getDisplayScript(locale72);
        boolean boolean96 = strList36.contains((java.lang.Object) locale62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar57 and calendar80", (calendar57.compareTo(calendar80) == 0) == calendar57.equals(calendar80));
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test082");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] { languageRange3 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale10.getDisplayCountry();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale10);
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = locale14.getDisplayLanguage(locale15);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale21);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone27);
        java.util.Locale locale30 = fastDateFormat29.getLocale();
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = locale32.getLanguage();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale32.getDisplayVariant(locale34);
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale32.getDisplayVariant(locale36);
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone44);
        java.util.Locale locale47 = fastDateFormat46.getLocale();
        java.util.Locale locale48 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone51);
        java.util.Locale locale54 = fastDateFormat53.getLocale();
        java.util.Locale locale55 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale56 = java.util.Locale.UK;
        java.util.Locale[] localeArray57 = new java.util.Locale[] { locale10, locale14, locale18, locale21, locale23, locale24, locale30, locale31, locale36, locale38, locale39, locale40, locale41, locale47, locale48, locale54, locale55, locale56 };
        java.util.ArrayList<java.util.Locale> localeList58 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList58, localeArray57);
        java.util.Locale locale60 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.util.Locale>) localeList58);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap61 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList62 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strMap61);
        java.lang.String[] strArray68 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022", "FastDateFormat[h:mm:ss a z]", "zh", "java.text.ParsePosition[index=16,errorIndex=-1]", "de" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.lang.Object[] objArray71 = strList69.toArray();
        strList69.clear();
        java.lang.String[] strArray74 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        java.util.stream.Stream<java.lang.String> strStream77 = strList75.stream();
        strList75.clear();
        java.util.Spliterator<java.lang.String> strSpliterator79 = strList75.spliterator();
        boolean boolean80 = strList69.containsAll((java.util.Collection<java.lang.String>) strList75);
        java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList75);
        java.lang.String[] strArray83 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        java.util.stream.Stream<java.lang.String> strStream86 = strList84.stream();
        boolean boolean88 = strList84.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor90 = strList84.listIterator(0);
        java.util.Locale.FilteringMode filteringMode91 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList92 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList84, filteringMode91);
        java.util.Locale.FilteringMode filteringMode93 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList94 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strList92, filteringMode93);
        java.util.Locale locale95 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar96 = java.util.Calendar.getInstance(locale95);
        java.util.Set<java.lang.String> strSet97 = locale95.getUnicodeLocaleKeys();
        boolean boolean98 = strList94.removeAll((java.util.Collection<java.lang.String>) strSet97);
        java.util.stream.Stream<java.lang.String> strStream99 = strSet97.stream();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar96", (calendar13.compareTo(calendar96) == 0) == calendar13.equals(calendar96));
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test083");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale9 = java.util.Locale.getDefault(category0);
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale12 = java.util.Locale.getDefault(category0);
        java.util.Locale locale13 = java.util.Locale.getDefault(category0);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale locale17 = builder14.build();
        java.util.Locale locale18 = builder14.build();
        java.util.Locale.Category category19 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category19, locale20);
        java.util.Locale locale22 = java.util.Locale.getDefault(category19);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        java.lang.String str28 = locale26.getDisplayLanguage();
        java.lang.String str29 = locale22.getDisplayCountry(locale26);
        java.lang.String str30 = locale26.getLanguage();
        java.util.Locale.Category category31 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category31, locale32);
        java.util.Locale locale34 = java.util.Locale.getDefault(category31);
        boolean boolean35 = locale34.hasExtensions();
        java.lang.String[] strArray41 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.stream.Stream<java.lang.String> strStream44 = strList42.stream();
        java.util.Locale locale45 = java.util.Locale.JAPANESE;
        int int46 = strList42.lastIndexOf((java.lang.Object) locale45);
        java.lang.String str47 = locale34.getDisplayVariant(locale45);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = locale48.getLanguage();
        java.lang.String str50 = locale34.getDisplayVariant(locale48);
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.lang.String str52 = locale51.getLanguage();
        boolean boolean53 = locale51.hasExtensions();
        java.lang.String str54 = locale51.getDisplayScript();
        java.lang.String str55 = locale48.getDisplayCountry(locale51);
        java.lang.String str56 = locale26.getDisplayVariant(locale48);
        java.util.Set<java.lang.String> strSet57 = locale48.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder58 = builder14.setLocale(locale48);
        java.util.Locale locale59 = locale48.stripExtensions();
        java.util.Locale.setDefault(category0, locale59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar27", (calendar7.compareTo(calendar27) == 0) == calendar7.equals(calendar27));
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test084");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone4);
        java.lang.String str6 = fastDateFormat5.toString();
        java.lang.String str7 = fastDateFormat5.toString();
        java.util.TimeZone timeZone8 = fastDateFormat5.getTimeZone();
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale9.getDisplayVariant(locale11);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale9);
        boolean boolean14 = calendar13.isWeekDateSupported();
        calendar13.set(7, 4, 0);
        java.util.Date date19 = calendar13.getTime();
        java.lang.String str20 = fastDateFormat2.format(calendar13);
        java.util.TimeZone timeZone21 = fastDateFormat2.getTimeZone();
        java.lang.Object obj22 = null;
        boolean boolean23 = fastDateFormat2.equals(obj22);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        int int25 = calendar24.getWeeksInWeekYear();
        java.time.Instant instant26 = calendar24.toInstant();
        int int28 = calendar24.getMinimum(4);
        java.lang.String str29 = fastDateFormat2.format(calendar24);
        int int31 = calendar24.getLeastMaximum(3);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone33, locale35);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone39);
        timeZone39.setRawOffset(3);
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone45);
        java.lang.String str47 = fastDateFormat46.getPattern();
        java.util.TimeZone timeZone48 = fastDateFormat46.getTimeZone();
        boolean boolean49 = timeZone39.hasSameRules(timeZone48);
        boolean boolean50 = timeZone33.hasSameRules(timeZone48);
        timeZone33.setRawOffset(50);
        calendar24.setTimeZone(timeZone33);
        int int55 = timeZone33.getOffset(1644572109662L);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 0, timeZone33);
        java.util.TimeZone timeZone57 = fastDateFormat56.getTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar24 and calendar36", (calendar24.compareTo(calendar36) == 0) == calendar24.equals(calendar36));
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test085");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor8 = strList2.listIterator(0);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        boolean boolean15 = strList11.add("hi!");
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale16.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale16.getDisplayVariant(locale20);
        boolean boolean22 = strList11.contains((java.lang.Object) locale16);
        boolean boolean23 = strList2.removeAll((java.util.Collection<java.lang.String>) strList11);
        java.util.Locale locale26 = new java.util.Locale("java.text.ParsePosition[index=100,errorIndex=-1]", "Jan 10, 4630 12:00:00 AM");
        int int27 = strList2.lastIndexOf((java.lang.Object) locale26);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone29);
        java.lang.StringBuffer stringBuffer32 = null;
        java.lang.StringBuffer stringBuffer33 = fastDateFormat30.format((long) 32772, stringBuffer32);
        java.util.TimeZone timeZone34 = fastDateFormat30.getTimeZone();
        int int35 = timeZone34.getRawOffset();
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone37);
        java.lang.String str39 = fastDateFormat38.toString();
        java.lang.String str40 = fastDateFormat38.toString();
        java.util.TimeZone timeZone41 = fastDateFormat38.getTimeZone();
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = locale42.getLanguage();
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale42.getDisplayVariant(locale44);
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone41, locale42);
        boolean boolean47 = timeZone34.hasSameRules(timeZone41);
        java.lang.String str48 = timeZone41.getID();
        int int49 = strList2.lastIndexOf((java.lang.Object) timeZone41);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance();
        int int52 = calendar51.getWeeksInWeekYear();
        java.time.Instant instant53 = calendar51.toInstant();
        int int55 = calendar51.getMinimum(4);
        calendar51.setFirstDayOfWeek(13);
        java.lang.String[] strArray59 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        java.util.stream.Stream<java.lang.String> strStream62 = strList60.stream();
        boolean boolean64 = strList60.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor66 = strList60.listIterator(0);
        java.lang.String[] strArray68 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.util.stream.Stream<java.lang.String> strStream71 = strList69.stream();
        java.util.ListIterator<java.lang.String> strItor72 = strList69.listIterator();
        boolean boolean73 = strList60.removeAll((java.util.Collection<java.lang.String>) strList69);
        java.util.Iterator<java.lang.String> strItor74 = strList60.iterator();
        java.util.ListIterator<java.lang.String> strItor75 = strList60.listIterator();
        boolean boolean76 = calendar51.before((java.lang.Object) strList60);
        boolean boolean77 = strList2.addAll(0, (java.util.Collection<java.lang.String>) strList60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar46 and calendar51", (calendar46.compareTo(calendar51) == 0) == calendar46.equals(calendar51));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test086");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition(16);
        int int9 = parsePosition8.getErrorIndex();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        boolean boolean12 = parsePosition8.equals((java.lang.Object) locale10);
        java.lang.String str13 = locale10.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone3, locale10);
        timeZone3.setID("coreano");
        boolean boolean17 = timeZone3.observesDaylightTime();
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder18.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder22 = builder20.setLanguageTag("it");
        java.util.Locale.Builder builder25 = builder20.setExtension('x', "de");
        java.util.Locale.Builder builder27 = builder20.setVariant("tedesco");
        java.util.Locale.Builder builder29 = builder20.setVariant("");
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale.Builder builder31 = builder20.setLocale(locale30);
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone3, locale30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar32", (calendar6.compareTo(calendar32) == 0) == calendar6.equals(calendar32));
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test087");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7);
        timeZone7.setRawOffset(3);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        boolean boolean17 = timeZone7.hasSameRules(timeZone16);
        boolean boolean18 = timeZone1.hasSameRules(timeZone16);
        java.util.TimeZone.setDefault(timeZone16);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition(16);
        int int28 = parsePosition27.getErrorIndex();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        boolean boolean31 = parsePosition27.equals((java.lang.Object) locale29);
        java.lang.String str32 = locale29.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22, locale29);
        int int34 = timeZone22.getRawOffset();
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.lang.String str36 = locale35.getLanguage();
        boolean boolean37 = locale35.hasExtensions();
        java.lang.String str38 = locale35.getDisplayScript();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale35);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone22, locale35);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone16, locale35);
        int int42 = calendar41.getFirstDayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar25", (calendar4.compareTo(calendar25) == 0) == calendar4.equals(calendar25));
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test088");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        int int9 = calendar7.getActualMinimum(2);
        java.util.TimeZone timeZone10 = calendar7.getTimeZone();
        java.util.TimeZone timeZone11 = calendar7.getTimeZone();
        java.lang.String str12 = calendar7.getCalendarType();
        java.lang.String str13 = calendar7.getCalendarType();
        java.util.TimeZone timeZone14 = calendar7.getTimeZone();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        java.text.ParsePosition parsePosition22 = new java.text.ParsePosition(16);
        int int23 = parsePosition22.getErrorIndex();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        boolean boolean26 = parsePosition22.equals((java.lang.Object) locale24);
        java.lang.String str27 = locale24.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17, locale24);
        int int29 = timeZone17.getRawOffset();
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        boolean boolean32 = locale30.hasExtensions();
        java.lang.String str33 = locale30.getDisplayScript();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale30);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone17, locale30);
        java.lang.String str36 = locale30.getDisplayCountry();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone14, locale30);
        int int39 = timeZone14.getOffset(1644572166594L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar20", (calendar7.compareTo(calendar20) == 0) == calendar7.equals(calendar20));
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test089");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = fastDateFormat2.getLocale();
        java.util.TimeZone timeZone7 = fastDateFormat2.getTimeZone();
        java.lang.String str9 = fastDateFormat2.format((long) 9);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition(16);
        int int13 = parsePosition12.getErrorIndex();
        java.lang.String str14 = parsePosition12.toString();
        boolean boolean16 = parsePosition12.equals((java.lang.Object) "9:34:49 AM UTC");
        parsePosition12.setIndex(56);
        java.lang.Object obj19 = fastDateFormat2.parseObject("", parsePosition12);
        java.util.Calendar.Builder builder20 = new java.util.Calendar.Builder();
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.lang.String str22 = locale21.getLanguage();
        boolean boolean23 = locale21.hasExtensions();
        java.lang.String str24 = locale21.getDisplayCountry();
        java.util.Calendar.Builder builder25 = builder20.setLocale(locale21);
        java.util.Date date27 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder28 = builder25.setInstant(date27);
        java.util.Calendar.Builder builder32 = builder28.setWeekDate((int) (short) -1, (int) '4', 35);
        java.util.TimeZone timeZone34 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone34);
        java.lang.String str36 = fastDateFormat35.toString();
        java.lang.String str37 = fastDateFormat35.toString();
        java.util.TimeZone timeZone38 = fastDateFormat35.getTimeZone();
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = locale39.getLanguage();
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale39.getDisplayVariant(locale41);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone38, locale39);
        java.util.Calendar.Builder builder44 = builder32.setTimeZone(timeZone38);
        java.util.Locale.Category category45 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category45, locale46);
        java.util.Locale locale48 = java.util.Locale.getDefault(category45);
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone49.hasSameRules(timeZone50);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone50, locale52);
        java.lang.String str54 = locale52.getDisplayLanguage();
        java.lang.String str55 = locale48.getDisplayCountry(locale52);
        java.lang.String str56 = locale52.getLanguage();
        java.util.Calendar.Builder builder57 = builder32.setLocale(locale52);
        boolean boolean58 = fastDateFormat2.equals((java.lang.Object) locale52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar43 and calendar53", (calendar43.compareTo(calendar53) == 0) == calendar43.equals(calendar53));
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test090");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone1);
        timeZone1.setRawOffset(37);
        boolean boolean10 = timeZone1.observesDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar7", (calendar6.compareTo(calendar7) == 0) == calendar6.equals(calendar7));
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test091");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        timeZone0.setRawOffset(40);
        timeZone0.setID("francese (Francia)");
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone0);
        java.lang.String str9 = timeZone0.getID();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12, locale14);
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition(16);
        int int18 = parsePosition17.getErrorIndex();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        boolean boolean21 = parsePosition17.equals((java.lang.Object) locale19);
        java.lang.String str22 = locale19.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12, locale19);
        timeZone12.setRawOffset(22);
        boolean boolean26 = timeZone0.hasSameRules(timeZone12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar15", (calendar3.compareTo(calendar15) == 0) == calendar3.equals(calendar15));
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test092");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone2);
        java.lang.StringBuffer stringBuffer5 = null;
        java.lang.StringBuffer stringBuffer6 = fastDateFormat3.format((long) 32772, stringBuffer5);
        java.util.TimeZone timeZone7 = fastDateFormat3.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone7);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.Locale locale11 = java.util.Locale.PRC;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone10, locale11);
        java.util.Date date13 = new java.util.Date();
        int int14 = date13.getTimezoneOffset();
        date13.setMonth(0);
        int int17 = date13.getSeconds();
        int int18 = date13.getDay();
        java.text.AttributedCharacterIterator attributedCharacterIterator19 = fastDateFormat12.formatToCharacterIterator((java.lang.Object) date13);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone21, locale23);
        long long25 = calendar24.getTimeInMillis();
        calendar24.set(2022, (int) 'a', 8);
        int int31 = calendar24.getGreatestMinimum(5);
        java.time.Instant instant32 = calendar24.toInstant();
        calendar24.setLenient(false);
        java.lang.StringBuffer stringBuffer35 = null;
        java.lang.StringBuffer stringBuffer36 = fastDateFormat12.format(calendar24, stringBuffer35);
        calendar24.set(6, 43, (int) (short) 0);
        int int42 = calendar24.getGreatestMinimum(0);
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder45 = builder43.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder46 = builder43.clear();
        java.util.Locale locale47 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder48 = builder46.setLocale(locale47);
        java.util.Locale.Builder builder49 = builder48.clearExtensions();
        java.util.Locale.Category category50 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.lang.String str55 = locale54.getDisplayName();
        java.lang.String str56 = locale54.getDisplayCountry();
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone52, locale54);
        java.util.Locale.setDefault(category50, locale54);
        java.util.Locale locale59 = java.util.Locale.getDefault(category50);
        java.util.Locale.Builder builder60 = builder49.setLocale(locale59);
        java.util.Locale locale61 = builder49.build();
        boolean boolean62 = calendar24.before((java.lang.Object) locale61);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone7, locale61);
        timeZone7.setID("11-Feb-2022 09:34:51");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar57 and calendar63", (calendar57.compareTo(calendar63) == 0) == calendar57.equals(calendar63));
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test093");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("it");
        java.util.Locale.Builder builder7 = builder2.setExtension('x', "de");
        java.util.Locale.Builder builder9 = builder2.setLanguage("fra");
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.lang.String str14 = fastDateFormat13.toString();
        java.lang.String str15 = fastDateFormat13.toString();
        java.util.TimeZone timeZone16 = fastDateFormat13.getTimeZone();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale17.getDisplayVariant(locale19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone16, locale17);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        java.lang.String str28 = locale26.getDisplayLanguage();
        java.lang.String str30 = locale26.getUnicodeLocaleType("zh");
        java.lang.String str31 = locale22.getDisplayScript(locale26);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone16, locale26);
        java.util.Set<java.lang.Character> charSet33 = locale26.getExtensionKeys();
        java.util.Locale.Builder builder34 = builder2.setLocale(locale26);
        java.util.Locale.Builder builder35 = builder2.clear();
        java.util.Locale.Builder builder37 = builder2.setLanguageTag("CHN");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar21 and calendar27", (calendar21.compareTo(calendar27) == 0) == calendar21.equals(calendar27));
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test094");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale5.getDisplayName();
        java.lang.String str7 = locale5.getDisplayCountry();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone3, locale5);
        int int10 = calendar8.getActualMinimum(2);
        java.util.TimeZone timeZone11 = calendar8.getTimeZone();
        boolean boolean12 = timeZone11.observesDaylightTime();
        boolean boolean13 = timeZone1.hasSameRules(timeZone11);
        timeZone11.setRawOffset(4);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone11);
        java.lang.String str17 = timeZone11.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar16", (calendar8.compareTo(calendar16) == 0) == calendar8.equals(calendar16));
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test095");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        int int3 = calendar1.getGreatestMinimum(4);
        int int4 = calendar1.getWeekYear();
        calendar1.set(47, (int) (byte) 0, (-1969), 0, 57);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.lang.String str15 = fastDateFormat14.toString();
        java.lang.String str16 = fastDateFormat14.toString();
        java.util.TimeZone timeZone17 = fastDateFormat14.getTimeZone();
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.lang.String str19 = locale18.getLanguage();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale18.getDisplayVariant(locale20);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone17, locale18);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone25, locale27);
        java.lang.String str29 = locale27.getDisplayLanguage();
        java.lang.String str31 = locale27.getUnicodeLocaleType("zh");
        java.lang.String str32 = locale23.getDisplayScript(locale27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone17, locale27);
        int int34 = timeZone17.getRawOffset();
        calendar1.setTimeZone(timeZone17);
        java.lang.String str36 = timeZone17.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar22 and calendar28", (calendar22.compareTo(calendar28) == 0) == calendar22.equals(calendar28));
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test096");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        int int3 = timeZone1.getOffset(1644572101904L);
        java.lang.String str4 = timeZone1.getID();
        timeZone1.setID("eng");
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        boolean boolean11 = locale9.hasExtensions();
        java.lang.String str12 = locale9.getDisplayScript();
        java.lang.String str13 = locale9.getDisplayScript();
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category14, locale15);
        java.util.Locale locale17 = java.util.Locale.getDefault(category14);
        java.lang.String str18 = locale9.getDisplayLanguage(locale17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 1, locale9);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale9);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale9);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone1, locale9);
        java.lang.Object obj23 = timeZone1.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar20 and calendar22", (calendar20.compareTo(calendar22) == 0) == calendar20.equals(calendar22));
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test097");
        java.lang.String[] strArray35 = new java.lang.String[] { "eng", "Jan 10, 4630 12:00:00 AM", "2022-2-11 9:34:42", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "java.util.GregorianCalendar[time=1644572075684,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=15,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=684,ZONE_OFFSET=0,DST_OFFSET=0]", "zh", "java.text.ParsePosition[index=100,errorIndex=-1]", "9:34:41 AM UTC", "Greenwich Mean Time", "Chinese", "\uc624\uc804\uc2dc\ubd84\ucd08", "9:34:37 AM UTC", "9:34:38 AM UTC", "9:34:41 AM UTC", "9:34:37 AM UTC", "Chinese", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "\u4e2d\u6587", "FastDateFormat[h:mm:ss a z]", "Jan 10, 4630 12:00:00 AM", "9:34:41 AM UTC", "it", "\u610f\u5927\u5229\u6587", "Tue Jan 11 09:34:31 UTC 2022", "9:34:38 AM UTC", "", "de", "tedesco", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "\uc624\uc804\uc2dc\ubd84\ucd08", "12:00:00 AM UTC", "eng", "\uc624\uc804\uc2dc\ubd84\ucd08", "\u5e74\u6708\u65e5", "\u610f\u5927\u5229\u6587" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.lang.String str39 = strList36.remove(0);
        java.util.ListIterator<java.lang.String> strItor40 = strList36.listIterator();
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone42);
        java.lang.String str44 = fastDateFormat43.toString();
        java.lang.String str45 = fastDateFormat43.toString();
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition(100);
        java.lang.String str49 = parsePosition48.toString();
        java.lang.Object obj50 = fastDateFormat43.parseObject("de", parsePosition48);
        int int51 = parsePosition48.getErrorIndex();
        java.util.Locale locale53 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale53);
        java.lang.String str55 = locale53.getLanguage();
        java.lang.String str56 = locale53.getVariant();
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(locale53);
        calendar57.setLenient(false);
        boolean boolean60 = parsePosition48.equals((java.lang.Object) calendar57);
        boolean boolean61 = strList36.equals((java.lang.Object) parsePosition48);
        java.util.TimeZone timeZone63 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        boolean boolean65 = timeZone63.hasSameRules(timeZone64);
        java.util.Locale locale66 = java.util.Locale.ROOT;
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(timeZone64, locale66);
        java.text.ParsePosition parsePosition69 = new java.text.ParsePosition(16);
        int int70 = parsePosition69.getErrorIndex();
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet72 = locale71.getExtensionKeys();
        boolean boolean73 = parsePosition69.equals((java.lang.Object) locale71);
        java.lang.String str74 = locale71.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone64, locale71);
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone77 = java.util.TimeZone.getDefault();
        boolean boolean78 = timeZone76.hasSameRules(timeZone77);
        java.util.Locale locale79 = java.util.Locale.ROOT;
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(timeZone77, locale79);
        long long81 = calendar80.getTimeInMillis();
        java.lang.String str82 = fastDateFormat75.format(calendar80);
        long long83 = calendar80.getTimeInMillis();
        int int84 = calendar80.getMinimalDaysInFirstWeek();
        int int86 = calendar80.getGreatestMinimum(2);
        boolean boolean87 = parsePosition48.equals((java.lang.Object) 2);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar57 and calendar67", (calendar57.compareTo(calendar67) == 0) == calendar57.equals(calendar67));
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test098");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("FRA");
        java.util.Locale locale3 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale3);
        java.lang.String str5 = locale3.getLanguage();
        java.lang.String str6 = locale3.getVariant();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        boolean boolean9 = locale7.hasExtensions();
        java.lang.String str10 = locale3.getDisplayCountry(locale7);
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale locale14 = java.util.Locale.getDefault(category11);
        boolean boolean15 = locale14.hasExtensions();
        java.lang.String[] strArray21 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.util.stream.Stream<java.lang.String> strStream24 = strList22.stream();
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        int int26 = strList22.lastIndexOf((java.lang.Object) locale25);
        java.lang.String str27 = locale14.getDisplayVariant(locale25);
        java.lang.String str28 = locale3.getDisplayCountry(locale14);
        java.lang.String str29 = locale3.getDisplayName();
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition(16);
        int int32 = parsePosition31.getErrorIndex();
        java.util.TimeZone timeZone34 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone34);
        java.lang.String str36 = fastDateFormat35.getPattern();
        boolean boolean37 = parsePosition31.equals((java.lang.Object) fastDateFormat35);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        boolean boolean39 = parsePosition31.equals((java.lang.Object) locale38);
        java.lang.String str40 = locale38.getDisplayScript();
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder44 = builder41.clear();
        java.util.Locale locale45 = builder44.build();
        java.lang.String str46 = locale38.getDisplayVariant(locale45);
        java.lang.String str47 = locale3.getDisplayVariant(locale38);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet52 = locale51.getExtensionKeys();
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone48, locale51);
        java.lang.String str54 = locale51.getCountry();
        java.lang.String str55 = locale3.getDisplayName(locale51);
        java.lang.String str56 = locale51.getDisplayLanguage();
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone1, locale51);
        timeZone1.setRawOffset(31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar53 and calendar57", (calendar53.compareTo(calendar57) == 0) == calendar53.equals(calendar57));
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test099");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] { languageRange7 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone12, locale14);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale18.getDisplayLanguage(locale19);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale25);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone31);
        java.util.Locale locale34 = fastDateFormat33.getLocale();
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.lang.String str41 = locale36.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone48);
        java.util.Locale locale51 = fastDateFormat50.getLocale();
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone54.hasSameRules(timeZone55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone55);
        java.util.Locale locale58 = fastDateFormat57.getLocale();
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale60 = java.util.Locale.UK;
        java.util.Locale[] localeArray61 = new java.util.Locale[] { locale14, locale18, locale22, locale25, locale27, locale28, locale34, locale35, locale40, locale42, locale43, locale44, locale45, locale51, locale52, locale58, locale59, locale60 };
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.Locale locale64 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList62);
        java.lang.String str65 = locale1.getDisplayName(locale64);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(locale1);
        java.util.Date date67 = calendar66.getTime();
        date67.setSeconds(97);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar66", (calendar17.compareTo(calendar66) == 0) == calendar17.equals(calendar66));
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test100");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.StringBuffer stringBuffer4 = null;
        java.lang.StringBuffer stringBuffer5 = fastDateFormat2.format((long) 32772, stringBuffer4);
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getTimezoneOffset();
        long long8 = date6.getTime();
        int int9 = date6.getMinutes();
        java.lang.String str10 = fastDateFormat2.format(date6);
        java.util.TimeZone timeZone11 = fastDateFormat2.getTimeZone();
        int int13 = timeZone11.getOffset((long) 36);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        boolean boolean19 = timeZone11.hasSameRules(timeZone15);
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale21);
        java.util.TimeZone timeZone23 = fastDateFormat22.getTimeZone();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet28 = locale27.getExtensionKeys();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone24, locale27);
        java.lang.String str30 = locale27.getCountry();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone23, locale27);
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone15, locale27);
        timeZone15.setRawOffset(20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar29", (calendar18.compareTo(calendar29) == 0) == calendar18.equals(calendar29));
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test101");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone2);
        java.util.Locale locale5 = fastDateFormat4.getLocale();
        java.lang.String str6 = fastDateFormat4.toString();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        int int8 = calendar7.getWeeksInWeekYear();
        java.lang.String str9 = fastDateFormat4.format(calendar7);
        java.lang.String str11 = fastDateFormat4.format((long) (byte) 100);
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition(43);
        java.lang.Object obj15 = fastDateFormat4.parseObject("hi!", parsePosition14);
        boolean boolean16 = fastDateFormat4.getTimeZoneOverridesCalendar();
        java.lang.String str17 = fastDateFormat4.getPattern();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        int int19 = calendar18.getWeeksInWeekYear();
        calendar18.setMinimalDaysInFirstWeek(1910);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance();
        int int23 = calendar22.getWeeksInWeekYear();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        boolean boolean28 = timeZone24.hasSameRules(timeZone26);
        calendar22.setTimeZone(timeZone24);
        calendar22.setMinimalDaysInFirstWeek((int) (byte) 10);
        calendar22.set(54, 41, 14, (int) ' ', 45, (int) (short) -1);
        calendar22.setMinimalDaysInFirstWeek(30);
        boolean boolean41 = calendar18.before((java.lang.Object) calendar22);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5e74\u6708\u65e5");
        java.lang.String str45 = fastDateFormat43.format(1644572104526L);
        java.util.Date date47 = new java.util.Date(1644572120674L);
        java.lang.String str48 = fastDateFormat43.format(date47);
        calendar22.setTime(date47);
        java.lang.String str50 = fastDateFormat4.format(calendar22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar18", (calendar7.compareTo(calendar18) == 0) == calendar7.equals(calendar18));
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test102");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7);
        timeZone7.setRawOffset(3);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        boolean boolean17 = timeZone7.hasSameRules(timeZone16);
        boolean boolean18 = timeZone1.hasSameRules(timeZone16);
        java.util.TimeZone.setDefault(timeZone16);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition(16);
        int int28 = parsePosition27.getErrorIndex();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        boolean boolean31 = parsePosition27.equals((java.lang.Object) locale29);
        java.lang.String str32 = locale29.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22, locale29);
        int int34 = timeZone22.getRawOffset();
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.lang.String str36 = locale35.getLanguage();
        boolean boolean37 = locale35.hasExtensions();
        java.lang.String str38 = locale35.getDisplayScript();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale35);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone22, locale35);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone16, locale35);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone43 = fastDateFormat42.getTimeZone();
        int int45 = timeZone43.getOffset(1644572101904L);
        calendar41.setTimeZone(timeZone43);
        calendar41.clear();
        java.util.Date date53 = new java.util.Date((int) 'a', (int) (byte) 1, 36, 39, 3);
        int int54 = date53.getSeconds();
        date53.setMinutes((int) (short) 10);
        int int57 = date53.getDate();
        date53.setSeconds((int) (byte) 1);
        date53.setDate(292269054);
        calendar41.setTime(date53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar25", (calendar4.compareTo(calendar25) == 0) == calendar4.equals(calendar25));
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test103");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        int int5 = date3.getSeconds();
        java.lang.StringBuffer stringBuffer6 = null;
        java.text.Format.Field field7 = null;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition(field7, 1);
        fieldPosition9.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer12 = fastDateFormat2.format((java.lang.Object) date3, stringBuffer6, fieldPosition9);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        boolean boolean14 = calendar13.isWeekDateSupported();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        boolean boolean19 = calendar13.before((java.lang.Object) str18);
        long long20 = calendar13.getTimeInMillis();
        int int21 = calendar13.getMinimalDaysInFirstWeek();
        java.lang.StringBuffer stringBuffer22 = null;
        java.text.Format.Field field23 = null;
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition(field23, 3);
        fieldPosition25.setEndIndex(12);
        java.lang.StringBuffer stringBuffer28 = fastDateFormat2.format((java.lang.Object) calendar13, stringBuffer22, fieldPosition25);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale29);
        java.time.Instant instant31 = calendar30.toInstant();
        java.time.Instant instant32 = calendar30.toInstant();
        java.text.AttributedCharacterIterator attributedCharacterIterator33 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) calendar30);
        java.util.Date date34 = new java.util.Date();
        int int35 = date34.getTimezoneOffset();
        long long36 = date34.getTime();
        java.util.Date date37 = new java.util.Date();
        int int38 = date37.getSeconds();
        long long39 = date37.getTime();
        date37.setTime((long) ' ');
        int int42 = date37.getTimezoneOffset();
        boolean boolean43 = date34.before(date37);
        java.util.Date date47 = new java.util.Date(11, 11, 3);
        boolean boolean48 = date34.before(date47);
        java.util.Date date49 = new java.util.Date();
        int int50 = date49.getDay();
        java.util.Date date51 = new java.util.Date();
        date51.setMinutes((int) '#');
        boolean boolean54 = date49.before(date51);
        int int55 = date51.getHours();
        boolean boolean56 = date34.before(date51);
        int int57 = date34.getDate();
        date34.setTime((-1L));
        date34.setYear((int) '#');
        calendar30.setTime(date34);
        java.lang.String[] strArray64 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        java.util.stream.Stream<java.lang.String> strStream67 = strList65.stream();
        boolean boolean69 = strList65.add("hi!");
        java.util.Locale locale70 = java.util.Locale.CHINESE;
        java.lang.String str71 = locale70.getLanguage();
        java.util.Locale locale72 = java.util.Locale.GERMAN;
        java.lang.String str73 = locale70.getDisplayVariant(locale72);
        java.util.Locale locale74 = java.util.Locale.GERMANY;
        java.lang.String str75 = locale70.getDisplayVariant(locale74);
        boolean boolean76 = strList65.contains((java.lang.Object) locale70);
        java.lang.String str77 = locale70.getVariant();
        java.lang.String str78 = locale70.getISO3Country();
        java.lang.String str79 = locale70.getVariant();
        java.util.Locale locale80 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet81 = locale80.getExtensionKeys();
        java.util.Locale locale83 = new java.util.Locale("de");
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(locale83);
        java.lang.String str85 = locale80.getDisplayVariant(locale83);
        java.lang.String str86 = locale70.getDisplayLanguage(locale83);
        boolean boolean87 = calendar30.equals((java.lang.Object) str86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar84", (calendar13.compareTo(calendar84) == 0) == calendar13.equals(calendar84));
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test104");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set(14, 2022);
        calendar1.setTimeInMillis(1644572083287L);
        java.time.Instant instant7 = calendar1.toInstant();
        java.util.Date date8 = new java.util.Date();
        int int9 = date8.getDay();
        java.time.Instant instant10 = date8.toInstant();
        calendar1.setTime(date8);
        calendar1.setLenient(true);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone15 = fastDateFormat14.getTimeZone();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale19.getDisplayName();
        java.lang.String str21 = locale19.getDisplayCountry();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone17, locale19);
        int int24 = calendar22.getActualMinimum(2);
        java.util.TimeZone timeZone25 = calendar22.getTimeZone();
        boolean boolean26 = timeZone25.observesDaylightTime();
        boolean boolean27 = timeZone15.hasSameRules(timeZone25);
        timeZone25.setRawOffset(4);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone25);
        calendar1.setTimeZone(timeZone25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar22 and calendar30", (calendar22.compareTo(calendar30) == 0) == calendar22.equals(calendar30));
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test105");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        int int9 = calendar7.getActualMinimum(2);
        java.util.TimeZone timeZone10 = calendar7.getTimeZone();
        java.util.TimeZone timeZone11 = calendar7.getTimeZone();
        java.lang.String str12 = calendar7.getCalendarType();
        java.lang.String str13 = calendar7.getCalendarType();
        java.util.TimeZone timeZone14 = calendar7.getTimeZone();
        timeZone14.setID("deu");
        boolean boolean17 = timeZone14.observesDaylightTime();
        int int19 = timeZone14.getOffset(1644572163398L);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder20.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder23 = builder20.clear();
        java.util.Locale locale24 = builder23.build();
        java.util.Locale locale25 = builder23.build();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone14, locale25);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14);
        int int28 = timeZone14.getDSTSavings();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar27", (calendar7.compareTo(calendar27) == 0) == calendar7.equals(calendar27));
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test106");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        int int9 = calendar7.getActualMinimum(2);
        int int10 = calendar7.getWeeksInWeekYear();
        java.util.Calendar.Builder builder11 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getDisplayName();
        java.lang.String str17 = locale15.getDisplayCountry();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone13, locale15);
        int int20 = calendar18.getActualMinimum(2);
        java.util.TimeZone timeZone21 = calendar18.getTimeZone();
        java.util.TimeZone timeZone22 = calendar18.getTimeZone();
        java.util.Calendar.Builder builder23 = builder11.setTimeZone(timeZone22);
        calendar7.setTimeZone(timeZone22);
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone26);
        java.lang.StringBuffer stringBuffer29 = null;
        java.lang.StringBuffer stringBuffer30 = fastDateFormat27.format((long) 32772, stringBuffer29);
        java.util.Date date31 = new java.util.Date();
        int int32 = date31.getTimezoneOffset();
        long long33 = date31.getTime();
        int int34 = date31.getMinutes();
        java.lang.String str35 = fastDateFormat27.format(date31);
        java.util.TimeZone timeZone36 = fastDateFormat27.getTimeZone();
        int int38 = timeZone36.getOffset((long) 36);
        calendar7.setTimeZone(timeZone36);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        boolean boolean44 = timeZone40.hasSameRules(timeZone42);
        int int45 = timeZone40.getRawOffset();
        boolean boolean46 = timeZone36.hasSameRules(timeZone40);
        java.util.Locale locale47 = java.util.Locale.PRC;
        java.lang.String str48 = locale47.getDisplayScript();
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        java.lang.String str50 = locale49.getISO3Country();
        java.lang.String str51 = locale49.getVariant();
        java.lang.String str52 = locale47.getDisplayCountry(locale49);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08", timeZone36, locale47);
        timeZone36.setRawOffset(53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar18", (calendar7.compareTo(calendar18) == 0) == calendar7.equals(calendar18));
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test107");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int8 = calendar6.getActualMinimum(2);
        java.util.TimeZone timeZone9 = calendar6.getTimeZone();
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        boolean boolean13 = locale11.hasExtensions();
        java.lang.String str14 = locale11.getDisplayCountry();
        java.util.Calendar.Builder builder15 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder19 = builder10.setWeekDate(38, 41, 11);
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone21);
        java.lang.String str23 = fastDateFormat22.toString();
        java.lang.String str24 = fastDateFormat22.toString();
        java.util.TimeZone timeZone25 = fastDateFormat22.getTimeZone();
        java.util.Calendar.Builder builder26 = builder19.setTimeZone(timeZone25);
        boolean boolean27 = timeZone9.hasSameRules(timeZone25);
        java.lang.String str28 = timeZone25.getID();
        boolean boolean29 = timeZone25.observesDaylightTime();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone25);
        java.lang.String str31 = timeZone25.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar30", (calendar6.compareTo(calendar30) == 0) == calendar6.equals(calendar30));
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test108");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        int int5 = date3.getSeconds();
        java.lang.StringBuffer stringBuffer6 = null;
        java.text.Format.Field field7 = null;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition(field7, 1);
        fieldPosition9.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer12 = fastDateFormat2.format((java.lang.Object) date3, stringBuffer6, fieldPosition9);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        boolean boolean14 = calendar13.isWeekDateSupported();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        boolean boolean19 = calendar13.before((java.lang.Object) str18);
        long long20 = calendar13.getTimeInMillis();
        int int21 = calendar13.getMinimalDaysInFirstWeek();
        java.lang.StringBuffer stringBuffer22 = null;
        java.text.Format.Field field23 = null;
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition(field23, 3);
        fieldPosition25.setEndIndex(12);
        java.lang.StringBuffer stringBuffer28 = fastDateFormat2.format((java.lang.Object) calendar13, stringBuffer22, fieldPosition25);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale29);
        java.time.Instant instant31 = calendar30.toInstant();
        java.time.Instant instant32 = calendar30.toInstant();
        java.text.AttributedCharacterIterator attributedCharacterIterator33 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) calendar30);
        java.util.Locale locale34 = fastDateFormat2.getLocale();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar30", (calendar13.compareTo(calendar30) == 0) == calendar13.equals(calendar30));
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test109");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7);
        timeZone7.setRawOffset(3);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        boolean boolean17 = timeZone7.hasSameRules(timeZone16);
        boolean boolean18 = timeZone1.hasSameRules(timeZone16);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        int int20 = calendar19.getWeeksInWeekYear();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        boolean boolean25 = timeZone21.hasSameRules(timeZone23);
        calendar19.setTimeZone(timeZone21);
        boolean boolean27 = timeZone1.hasSameRules(timeZone21);
        int int28 = timeZone1.getRawOffset();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar19", (calendar4.compareTo(calendar19) == 0) == calendar4.equals(calendar19));
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test110");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.lang.String str3 = locale2.getLanguage();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale2.getDisplayVariant(locale4);
        boolean boolean6 = calendar0.before((java.lang.Object) str5);
        int int7 = calendar0.getFirstDayOfWeek();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone8);
        calendar0.setTimeZone(timeZone8);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        java.lang.String str19 = locale17.getDisplayLanguage();
        java.lang.String str21 = locale17.getUnicodeLocaleType("zh");
        java.lang.String str22 = locale13.getDisplayScript(locale17);
        java.lang.String str23 = locale13.getVariant();
        java.lang.String str24 = locale13.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet25 = locale13.getExtensionKeys();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone8, locale13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar18", (calendar0.compareTo(calendar18) == 0) == calendar0.equals(calendar18));
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test111");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7);
        timeZone7.setRawOffset(3);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        boolean boolean17 = timeZone7.hasSameRules(timeZone16);
        boolean boolean18 = timeZone1.hasSameRules(timeZone16);
        java.util.TimeZone.setDefault(timeZone16);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition(16);
        int int28 = parsePosition27.getErrorIndex();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        boolean boolean31 = parsePosition27.equals((java.lang.Object) locale29);
        java.lang.String str32 = locale29.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22, locale29);
        int int34 = timeZone22.getRawOffset();
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.lang.String str36 = locale35.getLanguage();
        boolean boolean37 = locale35.hasExtensions();
        java.lang.String str38 = locale35.getDisplayScript();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale35);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone22, locale35);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone16, locale35);
        java.lang.String[] strArray43 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.util.stream.Stream<java.lang.String> strStream46 = strList44.stream();
        boolean boolean48 = strList44.add("hi!");
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.lang.String str50 = locale49.getLanguage();
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.lang.String str52 = locale49.getDisplayVariant(locale51);
        java.util.Locale locale53 = java.util.Locale.GERMANY;
        java.lang.String str54 = locale49.getDisplayVariant(locale53);
        boolean boolean55 = strList44.contains((java.lang.Object) locale49);
        java.lang.String str56 = locale49.getVariant();
        java.lang.String str57 = locale35.getDisplayCountry(locale49);
        java.lang.Object obj58 = locale49.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar25", (calendar4.compareTo(calendar25) == 0) == calendar4.equals(calendar25));
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test112");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.StringBuffer stringBuffer4 = null;
        java.lang.StringBuffer stringBuffer5 = fastDateFormat2.format((long) 32772, stringBuffer4);
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getTimezoneOffset();
        long long8 = date6.getTime();
        int int9 = date6.getMinutes();
        java.lang.String str10 = fastDateFormat2.format(date6);
        java.util.TimeZone timeZone11 = fastDateFormat2.getTimeZone();
        int int13 = timeZone11.getOffset((long) 36);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        boolean boolean19 = timeZone11.hasSameRules(timeZone15);
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale21);
        java.util.TimeZone timeZone23 = fastDateFormat22.getTimeZone();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet28 = locale27.getExtensionKeys();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone24, locale27);
        java.lang.String str30 = locale27.getCountry();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone23, locale27);
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone15, locale27);
        int int33 = timeZone15.getRawOffset();
        java.util.Locale.Category category34 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale38.getDisplayName();
        java.lang.String str40 = locale38.getDisplayCountry();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone36, locale38);
        java.util.Locale.setDefault(category34, locale38);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone15, locale38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar41", (calendar18.compareTo(calendar41) == 0) == calendar18.equals(calendar41));
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test113");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale9 = java.util.Locale.getDefault(category0);
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale12 = java.util.Locale.getDefault(category0);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder13.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder16 = builder13.clear();
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder18 = builder16.setLocale(locale17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = locale21.getDisplayLanguage(locale22);
        java.lang.String str25 = locale19.getDisplayLanguage(locale21);
        java.util.Locale.Builder builder26 = builder16.setLocale(locale21);
        java.util.Locale locale27 = builder16.build();
        java.lang.String str28 = locale27.getCountry();
        java.util.Locale.setDefault(category0, locale27);
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder32 = builder30.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale locale33 = builder30.build();
        java.util.Locale locale34 = builder30.build();
        java.util.Locale.Category category35 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category35, locale36);
        java.util.Locale locale38 = java.util.Locale.getDefault(category35);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone40, locale42);
        java.lang.String str44 = locale42.getDisplayLanguage();
        java.lang.String str45 = locale38.getDisplayCountry(locale42);
        java.lang.String str46 = locale42.getLanguage();
        java.util.Locale.Category category47 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale48 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category47, locale48);
        java.util.Locale locale50 = java.util.Locale.getDefault(category47);
        boolean boolean51 = locale50.hasExtensions();
        java.lang.String[] strArray57 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList58 = new java.util.ArrayList<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList58, strArray57);
        java.util.stream.Stream<java.lang.String> strStream60 = strList58.stream();
        java.util.Locale locale61 = java.util.Locale.JAPANESE;
        int int62 = strList58.lastIndexOf((java.lang.Object) locale61);
        java.lang.String str63 = locale50.getDisplayVariant(locale61);
        java.util.Locale locale64 = java.util.Locale.CHINESE;
        java.lang.String str65 = locale64.getLanguage();
        java.lang.String str66 = locale50.getDisplayVariant(locale64);
        java.util.Locale locale67 = java.util.Locale.CHINESE;
        java.lang.String str68 = locale67.getLanguage();
        boolean boolean69 = locale67.hasExtensions();
        java.lang.String str70 = locale67.getDisplayScript();
        java.lang.String str71 = locale64.getDisplayCountry(locale67);
        java.lang.String str72 = locale42.getDisplayVariant(locale64);
        java.util.Set<java.lang.String> strSet73 = locale64.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder74 = builder30.setLocale(locale64);
        java.util.Locale locale75 = locale64.stripExtensions();
        java.lang.String str76 = locale75.getDisplayName();
        java.util.Locale.setDefault(category0, locale75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar43", (calendar7.compareTo(calendar43) == 0) == calendar7.equals(calendar43));
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test114");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale8.getDisplayCountry();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale8);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale12.getDisplayLanguage(locale13);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale19);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone25);
        java.util.Locale locale28 = fastDateFormat27.getLocale();
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale30.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.lang.String str35 = locale30.getDisplayVariant(locale34);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone42);
        java.util.Locale locale45 = fastDateFormat44.getLocale();
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone49);
        java.util.Locale locale52 = fastDateFormat51.getLocale();
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale54 = java.util.Locale.UK;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale8, locale12, locale16, locale19, locale21, locale22, locale28, locale29, locale34, locale36, locale37, locale38, locale39, locale45, locale46, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale locale58 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList56);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap59);
        java.util.Set<java.lang.String> strSet61 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str62 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet61);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap63 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList64 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap63);
        java.lang.String[] strArray66 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        java.util.stream.Stream<java.lang.String> strStream69 = strList67.stream();
        strList67.clear();
        java.util.Spliterator<java.lang.String> strSpliterator71 = strList67.spliterator();
        java.util.Locale.FilteringMode filteringMode72 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList67, filteringMode72);
        strList73.clear();
        java.util.Calendar calendar75 = java.util.Calendar.getInstance();
        boolean boolean76 = calendar75.isWeekDateSupported();
        java.util.Locale locale77 = java.util.Locale.CHINESE;
        java.lang.String str78 = locale77.getLanguage();
        java.util.Locale locale79 = java.util.Locale.GERMAN;
        java.lang.String str80 = locale77.getDisplayVariant(locale79);
        boolean boolean81 = calendar75.before((java.lang.Object) str80);
        int int82 = calendar75.getFirstDayOfWeek();
        java.util.TimeZone timeZone83 = calendar75.getTimeZone();
        java.util.TimeZone timeZone84 = null;
        boolean boolean85 = timeZone83.hasSameRules(timeZone84);
        java.util.TimeZone timeZone87 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat88 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone87);
        java.lang.String str89 = fastDateFormat88.toString();
        java.lang.String str90 = fastDateFormat88.toString();
        java.util.TimeZone timeZone91 = fastDateFormat88.getTimeZone();
        java.util.Locale locale92 = fastDateFormat88.getLocale();
        java.util.TimeZone timeZone93 = fastDateFormat88.getTimeZone();
        java.util.Calendar calendar94 = java.util.Calendar.getInstance(timeZone93);
        boolean boolean95 = timeZone83.hasSameRules(timeZone93);
        boolean boolean96 = strList73.equals((java.lang.Object) boolean95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar75", (calendar11.compareTo(calendar75) == 0) == calendar11.equals(calendar75));
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test115");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        calendar6.set(31, (int) (byte) 100, (int) (byte) 10, (int) (short) 100, 9, 8);
        java.util.Date date17 = new java.util.Date((-1), 32772, (int) (short) 10);
        java.lang.String str18 = date17.toLocaleString();
        calendar6.setTime(date17);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone21, locale23);
        calendar6.setTimeZone(timeZone21);
        boolean boolean27 = calendar6.before((java.lang.Object) "_HI!");
        java.util.Locale.Builder builder28 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder28.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder31 = builder28.clear();
        java.util.Locale locale32 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder33 = builder31.setLocale(locale32);
        java.util.Locale.Builder builder34 = builder33.clearExtensions();
        java.util.Locale.Category category35 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale39.getDisplayName();
        java.lang.String str41 = locale39.getDisplayCountry();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone37, locale39);
        java.util.Locale.setDefault(category35, locale39);
        java.util.Locale locale44 = java.util.Locale.getDefault(category35);
        java.util.Locale.Builder builder45 = builder34.setLocale(locale44);
        java.util.Locale.Builder builder46 = builder34.clearExtensions();
        java.util.Locale.Builder builder47 = builder46.clear();
        java.util.Locale.Category category48 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale49 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category48, locale49);
        java.util.Locale locale51 = java.util.Locale.getDefault(category48);
        java.util.Locale locale52 = java.util.Locale.getDefault(category48);
        java.util.Locale locale53 = java.util.Locale.getDefault(category48);
        java.util.Locale locale54 = java.util.Locale.getDefault(category48);
        java.util.Locale locale55 = locale54.stripExtensions();
        java.util.Locale.Builder builder56 = builder47.setLocale(locale54);
        boolean boolean57 = calendar6.before((java.lang.Object) builder47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar24 and calendar42", (calendar24.compareTo(calendar42) == 0) == calendar24.equals(calendar42));
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test116");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.StringBuffer stringBuffer4 = null;
        java.lang.StringBuffer stringBuffer5 = fastDateFormat2.format((long) 32772, stringBuffer4);
        java.lang.StringBuffer stringBuffer7 = null;
        java.lang.StringBuffer stringBuffer8 = fastDateFormat2.format(1644572128302L, stringBuffer7);
        java.util.Date date15 = new java.util.Date(45, (int) (byte) 100, (int) '#', 50, 100, 36);
        date15.setMinutes((int) '4');
        java.lang.String str18 = fastDateFormat2.format(date15);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        calendar19.setMinimalDaysInFirstWeek(15);
        java.util.Date date22 = calendar19.getTime();
        calendar19.roll(0, 44);
        java.lang.String str26 = fastDateFormat2.format(calendar19);
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition(16);
        int int30 = parsePosition29.getErrorIndex();
        java.util.TimeZone timeZone32 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone32);
        java.lang.String str34 = fastDateFormat33.getPattern();
        boolean boolean35 = parsePosition29.equals((java.lang.Object) fastDateFormat33);
        int int36 = parsePosition29.getIndex();
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = locale37.getLanguage();
        java.lang.String str39 = locale37.getDisplayLanguage();
        java.util.Locale locale40 = locale37.stripExtensions();
        java.lang.String str42 = locale37.getExtension('u');
        java.util.Locale locale46 = new java.util.Locale("java.text.FieldPosition[field=1,attribute=null,beginIndex=0,endIndex=0]", "\u4e0a\u5348", "h:mm:ss a z");
        java.util.Locale locale47 = java.util.Locale.PRC;
        java.lang.String str48 = locale47.getDisplayLanguage();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone49.hasSameRules(timeZone50);
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str53 = locale52.getDisplayName();
        java.lang.String str54 = locale52.getDisplayCountry();
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone50, locale52);
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.util.Locale locale57 = locale56.stripExtensions();
        java.lang.String str58 = locale56.getVariant();
        java.lang.String str59 = locale52.getDisplayScript(locale56);
        java.util.Set<java.lang.String> strSet60 = locale52.getUnicodeLocaleKeys();
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Locale.Category category62 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale63 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category62, locale63);
        java.lang.String str65 = locale63.getScript();
        java.lang.String str66 = locale61.getDisplayCountry(locale63);
        java.lang.String str67 = locale52.getDisplayCountry(locale63);
        java.lang.String str68 = locale47.getDisplayCountry(locale63);
        java.lang.String str69 = locale46.getDisplayScript(locale47);
        java.lang.String str70 = locale37.getDisplayScript(locale47);
        boolean boolean71 = parsePosition29.equals((java.lang.Object) locale37);
        java.lang.Object obj72 = fastDateFormat2.parseObject("9:37:37 AM UTC", parsePosition29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar55", (calendar19.compareTo(calendar55) == 0) == calendar19.equals(calendar55));
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test117");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        boolean boolean2 = calendar1.isWeekDateSupported();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale3.getDisplayVariant(locale5);
        boolean boolean7 = calendar1.before((java.lang.Object) str6);
        int int8 = calendar1.getFirstDayOfWeek();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone9);
        calendar1.setTimeZone(timeZone9);
        java.util.Locale locale15 = new java.util.Locale("");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08", timeZone9, locale15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone9);
        timeZone9.setRawOffset(47);
        java.util.Locale locale22 = new java.util.Locale("Deutsch");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u610f\u5927\u5229\u6587", locale22);
        java.lang.String str24 = locale22.getVariant();
        java.util.Locale.setDefault(locale22);
        java.util.Set<java.lang.String> strSet26 = locale22.getUnicodeLocaleKeys();
        java.lang.String str27 = locale22.toLanguageTag();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone9, locale22);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getTimeZone("4-mar-1910 1.00.00");
        boolean boolean31 = timeZone9.hasSameRules(timeZone30);
        java.lang.Object obj32 = timeZone9.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar28", (calendar1.compareTo(calendar28) == 0) == calendar1.equals(calendar28));
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test118");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7);
        timeZone7.setRawOffset(3);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        boolean boolean17 = timeZone7.hasSameRules(timeZone16);
        boolean boolean18 = timeZone1.hasSameRules(timeZone16);
        java.util.TimeZone.setDefault(timeZone16);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition(16);
        int int28 = parsePosition27.getErrorIndex();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        boolean boolean31 = parsePosition27.equals((java.lang.Object) locale29);
        java.lang.String str32 = locale29.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22, locale29);
        int int34 = timeZone22.getRawOffset();
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.lang.String str36 = locale35.getLanguage();
        boolean boolean37 = locale35.hasExtensions();
        java.lang.String str38 = locale35.getDisplayScript();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale35);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone22, locale35);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone16, locale35);
        calendar41.setMinimalDaysInFirstWeek(292278994);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar25", (calendar4.compareTo(calendar25) == 0) == calendar4.equals(calendar25));
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test119");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = locale6.getLanguage();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale6.getDisplayVariant(locale8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone5, locale6);
        java.time.Instant instant11 = calendar10.toInstant();
        java.util.Locale locale13 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale13);
        java.util.TimeZone timeZone15 = fastDateFormat14.getTimeZone();
        calendar10.setTimeZone(timeZone15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone15);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance();
        int int19 = calendar18.getWeeksInWeekYear();
        java.time.Instant instant20 = calendar18.toInstant();
        boolean boolean21 = calendar18.isWeekDateSupported();
        int int22 = calendar18.getWeekYear();
        int int23 = calendar18.getWeekYear();
        calendar18.setFirstDayOfWeek(27);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone28, locale30);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition(16);
        int int34 = parsePosition33.getErrorIndex();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet36 = locale35.getExtensionKeys();
        boolean boolean37 = parsePosition33.equals((java.lang.Object) locale35);
        java.lang.String str38 = locale35.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone28, locale35);
        timeZone28.setRawOffset(22);
        int int43 = timeZone28.getOffset(3922746524000L);
        calendar18.setTimeZone(timeZone28);
        int int45 = calendar17.compareTo(calendar18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar31", (calendar10.compareTo(calendar31) == 0) == calendar10.equals(calendar31));
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test120");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone3);
        java.lang.String str5 = fastDateFormat4.toString();
        java.lang.String str6 = fastDateFormat4.toString();
        java.util.TimeZone timeZone7 = fastDateFormat4.getTimeZone();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone7, locale8);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        java.lang.String str19 = locale17.getDisplayLanguage();
        java.lang.String str21 = locale17.getUnicodeLocaleType("zh");
        java.lang.String str22 = locale13.getDisplayScript(locale17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7, locale17);
        java.util.TimeZone timeZone24 = fastDateFormat23.getTimeZone();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.lang.String str27 = locale26.getLanguage();
        boolean boolean28 = locale26.hasExtensions();
        java.lang.String str29 = locale26.getDisplayScript();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getInstance("11.02.2022 09:34:59", timeZone24, locale26);
        java.lang.String str33 = timeZone24.getDisplayName(false, 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar12 and calendar18", (calendar12.compareTo(calendar18) == 0) == calendar12.equals(calendar18));
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test121");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayVariant(locale9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale7);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.lang.String str18 = locale16.getDisplayLanguage();
        java.lang.String str20 = locale16.getUnicodeLocaleType("zh");
        java.lang.String str21 = locale12.getDisplayScript(locale16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone6, locale16);
        int int23 = timeZone6.getRawOffset();
        int int24 = timeZone6.getRawOffset();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar17", (calendar11.compareTo(calendar17) == 0) == calendar11.equals(calendar17));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test122");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] { languageRange7 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone12, locale14);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale18.getDisplayLanguage(locale19);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale25);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone31);
        java.util.Locale locale34 = fastDateFormat33.getLocale();
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.lang.String str41 = locale36.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone48);
        java.util.Locale locale51 = fastDateFormat50.getLocale();
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone54.hasSameRules(timeZone55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone55);
        java.util.Locale locale58 = fastDateFormat57.getLocale();
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale60 = java.util.Locale.UK;
        java.util.Locale[] localeArray61 = new java.util.Locale[] { locale14, locale18, locale22, locale25, locale27, locale28, locale34, locale35, locale40, locale42, locale43, locale44, locale45, locale51, locale52, locale58, locale59, locale60 };
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.Locale locale64 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList62);
        java.lang.String str65 = locale1.getDisplayName(locale64);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(locale1);
        java.util.Set<java.lang.Character> charSet67 = locale1.getExtensionKeys();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar66", (calendar17.compareTo(calendar66) == 0) == calendar17.equals(calendar66));
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test123");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getWeeksInWeekYear();
        java.time.Instant instant2 = calendar0.toInstant();
        int int4 = calendar0.getActualMinimum((int) (byte) 10);
        java.lang.String str5 = calendar0.getCalendarType();
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getTimezoneOffset();
        int int8 = date6.getMinutes();
        calendar0.setTime(date6);
        calendar0.setLenient(true);
        java.util.TimeZone timeZone12 = calendar0.getTimeZone();
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.lang.String str15 = locale14.getVariant();
        java.util.Set<java.lang.Character> charSet16 = locale14.getExtensionKeys();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale14);
        int int18 = calendar17.getFirstDayOfWeek();
        java.lang.String str19 = calendar17.getCalendarType();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet24 = locale23.getExtensionKeys();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone20, locale23);
        calendar17.setTimeZone(timeZone20);
        boolean boolean27 = timeZone12.hasSameRules(timeZone20);
        java.lang.String str28 = timeZone20.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar17", (calendar0.compareTo(calendar17) == 0) == calendar0.equals(calendar17));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test124");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int8 = calendar6.getActualMinimum(2);
        int int9 = calendar6.getWeeksInWeekYear();
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone12, locale14);
        int int19 = calendar17.getActualMinimum(2);
        java.util.TimeZone timeZone20 = calendar17.getTimeZone();
        java.util.TimeZone timeZone21 = calendar17.getTimeZone();
        java.util.Calendar.Builder builder22 = builder10.setTimeZone(timeZone21);
        calendar6.setTimeZone(timeZone21);
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone25);
        java.lang.StringBuffer stringBuffer28 = null;
        java.lang.StringBuffer stringBuffer29 = fastDateFormat26.format((long) 32772, stringBuffer28);
        java.util.Date date30 = new java.util.Date();
        int int31 = date30.getTimezoneOffset();
        long long32 = date30.getTime();
        int int33 = date30.getMinutes();
        java.lang.String str34 = fastDateFormat26.format(date30);
        java.util.TimeZone timeZone35 = fastDateFormat26.getTimeZone();
        int int37 = timeZone35.getOffset((long) 36);
        calendar6.setTimeZone(timeZone35);
        calendar6.setFirstDayOfWeek(37);
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone42);
        java.lang.String str44 = fastDateFormat43.toString();
        java.lang.String str45 = fastDateFormat43.toString();
        java.util.TimeZone timeZone46 = fastDateFormat43.getTimeZone();
        java.util.Locale locale47 = fastDateFormat43.getLocale();
        boolean boolean48 = fastDateFormat43.getTimeZoneOverridesCalendar();
        java.lang.String str49 = fastDateFormat43.getPattern();
        java.lang.String str50 = fastDateFormat43.toString();
        java.lang.Object obj51 = fastDateFormat43.clone();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(locale52);
        java.time.Instant instant54 = calendar53.toInstant();
        java.time.Instant instant55 = calendar53.toInstant();
        java.time.Instant instant56 = calendar53.toInstant();
        java.lang.String str57 = fastDateFormat43.format(calendar53);
        java.text.ParsePosition parsePosition60 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj61 = fastDateFormat43.parseObject("9:36:06 AM UTC", parsePosition60);
        java.util.TimeZone timeZone62 = fastDateFormat43.getTimeZone();
        int int63 = timeZone62.getRawOffset();
        boolean boolean64 = calendar6.before((java.lang.Object) int63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar53", (calendar17.compareTo(calendar53) == 0) == calendar17.equals(calendar53));
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test125");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int8 = calendar6.getActualMinimum(2);
        int int9 = calendar6.getWeeksInWeekYear();
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone12, locale14);
        int int19 = calendar17.getActualMinimum(2);
        java.util.TimeZone timeZone20 = calendar17.getTimeZone();
        java.util.TimeZone timeZone21 = calendar17.getTimeZone();
        java.util.Calendar.Builder builder22 = builder10.setTimeZone(timeZone21);
        calendar6.setTimeZone(timeZone21);
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone25);
        java.lang.StringBuffer stringBuffer28 = null;
        java.lang.StringBuffer stringBuffer29 = fastDateFormat26.format((long) 32772, stringBuffer28);
        java.util.Date date30 = new java.util.Date();
        int int31 = date30.getTimezoneOffset();
        long long32 = date30.getTime();
        int int33 = date30.getMinutes();
        java.lang.String str34 = fastDateFormat26.format(date30);
        java.util.TimeZone timeZone35 = fastDateFormat26.getTimeZone();
        int int37 = timeZone35.getOffset((long) 36);
        calendar6.setTimeZone(timeZone35);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        boolean boolean43 = timeZone39.hasSameRules(timeZone41);
        int int44 = timeZone39.getRawOffset();
        boolean boolean45 = timeZone35.hasSameRules(timeZone39);
        java.util.Locale locale46 = java.util.Locale.UK;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.lang.String str48 = locale46.getDisplayCountry(locale47);
        java.lang.String str49 = locale46.getISO3Language();
        java.lang.String str51 = locale46.getExtension('x');
        java.lang.String str52 = locale46.getLanguage();
        java.lang.String str53 = locale46.getScript();
        java.util.Locale.setDefault(locale46);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone35, locale46);
        boolean boolean56 = timeZone35.observesDaylightTime();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone57.hasSameRules(timeZone58);
        java.util.Locale locale60 = java.util.Locale.ROOT;
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(timeZone58, locale60);
        boolean boolean62 = locale60.hasExtensions();
        java.lang.String str63 = timeZone35.getDisplayName(locale60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar61", (calendar6.compareTo(calendar61) == 0) == calendar6.equals(calendar61));
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test126");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.lang.String str6 = locale4.getDisplayLanguage();
        java.lang.String str8 = locale4.getUnicodeLocaleType("zh");
        java.lang.String str9 = locale0.getDisplayScript(locale4);
        java.lang.String str10 = locale0.getVariant();
        java.lang.String str11 = locale0.getDisplayCountry();
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder15 = builder12.clear();
        java.util.Locale locale16 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder17 = builder15.setLocale(locale16);
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale.Category category19 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale23.getDisplayName();
        java.lang.String str25 = locale23.getDisplayCountry();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone21, locale23);
        java.util.Locale.setDefault(category19, locale23);
        java.util.Locale locale28 = java.util.Locale.getDefault(category19);
        java.util.Locale.Builder builder29 = builder18.setLocale(locale28);
        java.util.Locale locale30 = builder18.build();
        java.lang.String str31 = locale0.getDisplayName(locale30);
        java.util.Locale locale32 = java.util.Locale.CHINA;
        java.util.Locale locale33 = locale32.stripExtensions();
        boolean boolean34 = locale32.hasExtensions();
        java.lang.String str35 = locale30.getDisplayLanguage(locale32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar26", (calendar5.compareTo(calendar26) == 0) == calendar5.equals(calendar26));
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test127");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition(16);
        int int9 = parsePosition8.getErrorIndex();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        boolean boolean12 = parsePosition8.equals((java.lang.Object) locale10);
        java.lang.String str13 = locale10.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone3, locale10);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.lang.String str20 = locale15.getDisplayVariant(locale19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone3, locale19);
        java.util.Set<java.lang.Character> charSet22 = locale19.getExtensionKeys();
        java.lang.String str23 = locale0.getDisplayScript(locale19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar21", (calendar6.compareTo(calendar21) == 0) == calendar6.equals(calendar21));
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test128");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        calendar0.setLenient(true);
        int int4 = calendar0.getFirstDayOfWeek();
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("de");
        double double7 = languageRange6.getWeight();
        double double8 = languageRange6.getWeight();
        double double9 = languageRange6.getWeight();
        boolean boolean10 = calendar0.after((java.lang.Object) languageRange6);
        double double11 = languageRange6.getWeight();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13, locale15);
        java.lang.String str17 = locale15.getDisplayLanguage();
        java.lang.String str18 = locale15.getDisplayScript();
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale19.getDisplayVariant(locale21);
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleKeys();
        java.lang.String str25 = locale21.getDisplayCountry(locale23);
        java.util.Locale locale26 = locale23.stripExtensions();
        java.lang.String str27 = locale23.getISO3Country();
        java.lang.String str28 = locale15.getDisplayName(locale23);
        java.lang.String str29 = locale15.getDisplayVariant();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale15);
        boolean boolean31 = languageRange6.equals((java.lang.Object) calendar30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar16", (calendar0.compareTo(calendar16) == 0) == calendar0.equals(calendar16));
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test129");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(21);
        parsePosition1.setIndex(3);
        int int4 = parsePosition1.getIndex();
        parsePosition1.setIndex(23);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale10.getDisplayCountry();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale10);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone8);
        timeZone8.setRawOffset(37);
        int int18 = timeZone8.getOffset(1644572143523L);
        boolean boolean19 = parsePosition1.equals((java.lang.Object) 1644572143523L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar14", (calendar13.compareTo(calendar14) == 0) == calendar13.equals(calendar14));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test130");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229\u6587");
        timeZone1.setID("\u5e74\u6708\u65e5");
        java.lang.String str4 = timeZone1.getID();
        java.util.TimeZone.setDefault(timeZone1);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone1);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder11 = builder8.clear();
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder13 = builder11.setLocale(locale12);
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale19.getDisplayName();
        java.lang.String str21 = locale19.getDisplayCountry();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone17, locale19);
        java.util.Locale.setDefault(category15, locale19);
        java.util.Locale locale24 = java.util.Locale.getDefault(category15);
        java.util.Locale.Builder builder25 = builder14.setLocale(locale24);
        java.lang.String str26 = timeZone1.getDisplayName(locale24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar22", (calendar6.compareTo(calendar22) == 0) == calendar6.equals(calendar22));
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test131");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayVariant(locale9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale7);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.lang.String str18 = locale16.getDisplayLanguage();
        java.lang.String str20 = locale16.getUnicodeLocaleType("zh");
        java.lang.String str21 = locale12.getDisplayScript(locale16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone6, locale16);
        java.util.TimeZone timeZone23 = fastDateFormat22.getTimeZone();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        calendar24.set(12, 10);
        java.util.Calendar.Builder builder28 = new java.util.Calendar.Builder();
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.lang.String str30 = locale29.getLanguage();
        boolean boolean31 = locale29.hasExtensions();
        java.lang.String str32 = locale29.getDisplayCountry();
        java.util.Calendar.Builder builder33 = builder28.setLocale(locale29);
        java.util.Date date35 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder36 = builder33.setInstant(date35);
        boolean boolean37 = calendar24.before((java.lang.Object) date35);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5e74\u6708\u65e5");
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition(16);
        java.lang.Object obj44 = fastDateFormat40.parseObject("12:00:00 AM UTC", parsePosition43);
        java.util.TimeZone timeZone45 = fastDateFormat40.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone45);
        java.lang.String str47 = timeZone45.getID();
        calendar24.setTimeZone(timeZone45);
        int int50 = timeZone45.getOffset(1644485689758L);
        boolean boolean51 = timeZone23.hasSameRules(timeZone45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar17", (calendar11.compareTo(calendar17) == 0) == calendar11.equals(calendar17));
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test132");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        int int5 = date3.getSeconds();
        java.lang.StringBuffer stringBuffer6 = null;
        java.text.Format.Field field7 = null;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition(field7, 1);
        fieldPosition9.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer12 = fastDateFormat2.format((java.lang.Object) date3, stringBuffer6, fieldPosition9);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        boolean boolean14 = calendar13.isWeekDateSupported();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        boolean boolean19 = calendar13.before((java.lang.Object) str18);
        long long20 = calendar13.getTimeInMillis();
        int int21 = calendar13.getMinimalDaysInFirstWeek();
        java.lang.StringBuffer stringBuffer22 = null;
        java.text.Format.Field field23 = null;
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition(field23, 3);
        fieldPosition25.setEndIndex(12);
        java.lang.StringBuffer stringBuffer28 = fastDateFormat2.format((java.lang.Object) calendar13, stringBuffer22, fieldPosition25);
        java.lang.Object obj29 = fastDateFormat2.clone();
        java.util.TimeZone timeZone30 = fastDateFormat2.getTimeZone();
        int int32 = timeZone30.getOffset(1644485748425L);
        java.util.Locale locale34 = new java.util.Locale("29 Sep 2577 21:34:31 GMT");
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone30, locale34);
        java.lang.String str36 = locale34.getISO3Country();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar35", (calendar13.compareTo(calendar35) == 0) == calendar13.equals(calendar35));
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test133");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        java.util.Locale locale8 = new java.util.Locale("DEU", "java.util.GregorianCalendar[time=1644572075684,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=15,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=684,ZONE_OFFSET=0,DST_OFFSET=0]", "\u65e5\u6587");
        java.lang.String str9 = locale1.getDisplayVariant(locale8);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("4630-1-10 0:00:00", locale8);
        java.util.Locale locale11 = fastDateFormat10.getLocale();
        java.util.Calendar.Builder builder12 = new java.util.Calendar.Builder();
        java.util.Calendar calendar13 = builder12.build();
        java.text.AttributedCharacterIterator attributedCharacterIterator14 = fastDateFormat10.formatToCharacterIterator((java.lang.Object) calendar13);
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition(16);
        java.util.Date date18 = new java.util.Date();
        int int19 = date18.getDay();
        java.util.Date date20 = new java.util.Date();
        date20.setMinutes((int) '#');
        boolean boolean23 = date18.before(date20);
        boolean boolean24 = parsePosition17.equals((java.lang.Object) boolean23);
        parsePosition17.setErrorIndex((int) (short) 10);
        int int27 = parsePosition17.getIndex();
        java.lang.String[] strArray29 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.util.stream.Stream<java.lang.String> strStream32 = strList30.stream();
        boolean boolean34 = strList30.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor36 = strList30.listIterator(0);
        java.lang.String[] strArray38 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.stream.Stream<java.lang.String> strStream41 = strList39.stream();
        java.util.ListIterator<java.lang.String> strItor42 = strList39.listIterator();
        boolean boolean43 = strList30.removeAll((java.util.Collection<java.lang.String>) strList39);
        int int44 = strList30.size();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone46, locale48);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone52);
        timeZone52.setRawOffset(3);
        java.util.TimeZone timeZone58 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone58);
        java.lang.String str60 = fastDateFormat59.getPattern();
        java.util.TimeZone timeZone61 = fastDateFormat59.getTimeZone();
        boolean boolean62 = timeZone52.hasSameRules(timeZone61);
        boolean boolean63 = timeZone46.hasSameRules(timeZone61);
        boolean boolean64 = strList30.contains((java.lang.Object) boolean63);
        java.util.stream.Stream<java.lang.String> strStream65 = strList30.stream();
        java.lang.String[] strArray67 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        java.util.stream.Stream<java.lang.String> strStream70 = strList68.stream();
        boolean boolean72 = strList68.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor74 = strList68.listIterator(0);
        strList68.clear();
        boolean boolean76 = strList30.retainAll((java.util.Collection<java.lang.String>) strList68);
        boolean boolean77 = parsePosition17.equals((java.lang.Object) strList68);
        java.lang.Object obj78 = fastDateFormat10.parseObject("10 Feb 2022 09:34:55 GMT", parsePosition17);
        java.util.Locale locale80 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale81 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet82 = locale81.getExtensionKeys();
        java.util.Locale locale84 = new java.util.Locale("de");
        java.util.Calendar calendar85 = java.util.Calendar.getInstance(locale84);
        java.lang.String str86 = locale81.getDisplayVariant(locale84);
        java.lang.String str87 = locale80.getDisplayCountry(locale81);
        java.util.Set<java.lang.String> strSet88 = locale81.getUnicodeLocaleKeys();
        boolean boolean89 = parsePosition17.equals((java.lang.Object) strSet88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar49 and calendar85", (calendar49.compareTo(calendar85) == 0) == calendar49.equals(calendar85));
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test134");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7);
        timeZone7.setRawOffset(3);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        boolean boolean17 = timeZone7.hasSameRules(timeZone16);
        boolean boolean18 = timeZone1.hasSameRules(timeZone16);
        java.util.TimeZone.setDefault(timeZone16);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition(16);
        int int28 = parsePosition27.getErrorIndex();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        boolean boolean31 = parsePosition27.equals((java.lang.Object) locale29);
        java.lang.String str32 = locale29.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22, locale29);
        int int34 = timeZone22.getRawOffset();
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.lang.String str36 = locale35.getLanguage();
        boolean boolean37 = locale35.hasExtensions();
        java.lang.String str38 = locale35.getDisplayScript();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale35);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone22, locale35);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone16, locale35);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone43 = fastDateFormat42.getTimeZone();
        int int45 = timeZone43.getOffset(1644572101904L);
        calendar41.setTimeZone(timeZone43);
        java.util.Date date47 = new java.util.Date();
        int int48 = date47.getSeconds();
        long long49 = date47.getTime();
        date47.setTime((long) ' ');
        int int52 = date47.getTimezoneOffset();
        int int53 = date47.getMinutes();
        java.lang.String str54 = date47.toLocaleString();
        int int55 = date47.getMinutes();
        calendar41.setTime(date47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar25", (calendar4.compareTo(calendar25) == 0) == calendar4.equals(calendar25));
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test135");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale3);
        int int7 = timeZone0.getOffset((long) 2);
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale locale11 = java.util.Locale.getDefault(category8);
        java.util.Locale locale12 = java.util.Locale.getDefault(category8);
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone0, locale12);
        int int16 = timeZone0.getDSTSavings();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar15", (calendar5.compareTo(calendar15) == 0) == calendar5.equals(calendar15));
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test136");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder11 = builder0.setLenient(false);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay(15, 0, 32770);
        java.util.Calendar.Builder builder18 = builder15.setWeekDefinition(7, 7);
        java.util.Calendar.Builder builder20 = builder15.setLenient(true);
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22);
        java.lang.String str24 = fastDateFormat23.toString();
        java.lang.String str25 = fastDateFormat23.toString();
        java.util.TimeZone timeZone26 = fastDateFormat23.getTimeZone();
        java.util.Locale locale27 = fastDateFormat23.getLocale();
        boolean boolean28 = fastDateFormat23.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone29 = fastDateFormat23.getTimeZone();
        timeZone29.setID("Chinesisch");
        java.util.Calendar.Builder builder32 = builder15.setTimeZone(timeZone29);
        int int33 = timeZone29.getRawOffset();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone35, locale37);
        int int39 = timeZone35.getRawOffset();
        java.util.TimeZone.setDefault(timeZone35);
        boolean boolean41 = timeZone29.hasSameRules(timeZone35);
        int int42 = timeZone35.getRawOffset();
        int int44 = timeZone35.getOffset((long) (short) 100);
        java.util.TimeZone timeZone47 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone47);
        java.lang.String str49 = fastDateFormat48.toString();
        java.lang.String str50 = fastDateFormat48.toString();
        java.util.TimeZone timeZone51 = fastDateFormat48.getTimeZone();
        java.util.Locale locale52 = java.util.Locale.CHINESE;
        java.lang.String str53 = locale52.getLanguage();
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.lang.String str55 = locale52.getDisplayVariant(locale54);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone51, locale52);
        java.util.Locale locale57 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        boolean boolean60 = timeZone58.hasSameRules(timeZone59);
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone59, locale61);
        java.lang.String str63 = locale61.getDisplayLanguage();
        java.lang.String str65 = locale61.getUnicodeLocaleType("zh");
        java.lang.String str66 = locale57.getDisplayScript(locale61);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone51, locale61);
        int int68 = timeZone51.getRawOffset();
        boolean boolean69 = timeZone51.observesDaylightTime();
        boolean boolean70 = timeZone35.hasSameRules(timeZone51);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar38 and calendar56", (calendar38.compareTo(calendar56) == 0) == calendar38.equals(calendar56));
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test137");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category6, locale9);
        java.lang.String str11 = locale9.toLanguageTag();
        java.util.Calendar.Builder builder12 = builder0.setLocale(locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        java.text.ParsePosition parsePosition20 = new java.text.ParsePosition(16);
        int int21 = parsePosition20.getErrorIndex();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        boolean boolean24 = parsePosition20.equals((java.lang.Object) locale22);
        java.lang.String str25 = locale22.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15, locale22);
        int int27 = timeZone15.getRawOffset();
        java.util.Calendar.Builder builder28 = builder12.setTimeZone(timeZone15);
        java.util.Calendar calendar29 = builder12.build();
        int int31 = calendar29.getLeastMaximum(4);
        java.util.TimeZone timeZone34 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone34);
        java.lang.String str36 = fastDateFormat35.toString();
        java.lang.String str37 = fastDateFormat35.toString();
        java.util.TimeZone timeZone38 = fastDateFormat35.getTimeZone();
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = locale39.getLanguage();
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale39.getDisplayVariant(locale41);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone38, locale39);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone46, locale48);
        java.lang.String str50 = locale48.getDisplayLanguage();
        java.lang.String str52 = locale48.getUnicodeLocaleType("zh");
        java.lang.String str53 = locale44.getDisplayScript(locale48);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone38, locale48);
        calendar29.setTimeZone(timeZone38);
        java.lang.Class<?> wildcardClass56 = calendar29.getClass();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar43", (calendar18.compareTo(calendar43) == 0) == calendar18.equals(calendar43));
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test138");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category6, locale9);
        java.lang.String str11 = locale9.toLanguageTag();
        java.util.Calendar.Builder builder12 = builder0.setLocale(locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        java.text.ParsePosition parsePosition20 = new java.text.ParsePosition(16);
        int int21 = parsePosition20.getErrorIndex();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        boolean boolean24 = parsePosition20.equals((java.lang.Object) locale22);
        java.lang.String str25 = locale22.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15, locale22);
        int int27 = timeZone15.getRawOffset();
        java.util.Calendar.Builder builder28 = builder12.setTimeZone(timeZone15);
        java.util.Calendar calendar29 = builder12.build();
        java.lang.String str30 = calendar29.getCalendarType();
        calendar29.setFirstDayOfWeek(100);
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale34);
        java.lang.String str36 = locale34.getLanguage();
        java.lang.String str37 = locale34.getVariant();
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.lang.String str39 = locale38.getLanguage();
        boolean boolean40 = locale38.hasExtensions();
        java.lang.String str41 = locale34.getDisplayCountry(locale38);
        java.util.Locale.Category category42 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category42, locale43);
        java.util.Locale locale45 = java.util.Locale.getDefault(category42);
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String[] strArray52 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        java.util.stream.Stream<java.lang.String> strStream55 = strList53.stream();
        java.util.Locale locale56 = java.util.Locale.JAPANESE;
        int int57 = strList53.lastIndexOf((java.lang.Object) locale56);
        java.lang.String str58 = locale45.getDisplayVariant(locale56);
        java.lang.String str59 = locale34.getDisplayCountry(locale45);
        java.lang.String str60 = locale34.getDisplayName();
        java.text.ParsePosition parsePosition62 = new java.text.ParsePosition(16);
        int int63 = parsePosition62.getErrorIndex();
        java.util.TimeZone timeZone65 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone65);
        java.lang.String str67 = fastDateFormat66.getPattern();
        boolean boolean68 = parsePosition62.equals((java.lang.Object) fastDateFormat66);
        java.util.Locale locale69 = java.util.Locale.FRANCE;
        boolean boolean70 = parsePosition62.equals((java.lang.Object) locale69);
        java.lang.String str71 = locale69.getDisplayScript();
        java.util.Locale.Builder builder72 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder74 = builder72.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder75 = builder72.clear();
        java.util.Locale locale76 = builder75.build();
        java.lang.String str77 = locale69.getDisplayVariant(locale76);
        java.lang.String str78 = locale34.getDisplayVariant(locale69);
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone80 = java.util.TimeZone.getDefault();
        boolean boolean81 = timeZone79.hasSameRules(timeZone80);
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet83 = locale82.getExtensionKeys();
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(timeZone79, locale82);
        java.lang.String str85 = locale82.getCountry();
        java.lang.String str86 = locale34.getDisplayName(locale82);
        java.util.Calendar calendar87 = java.util.Calendar.getInstance(locale82);
        int int88 = calendar87.getFirstDayOfWeek();
        java.util.TimeZone timeZone90 = java.util.TimeZone.getTimeZone("9:34:37 AM UTC");
        java.util.TimeZone timeZone92 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229\u6587");
        boolean boolean93 = timeZone90.hasSameRules(timeZone92);
        calendar87.setTimeZone(timeZone92);
        java.util.Date date95 = calendar87.getTime();
        calendar29.setTime(date95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar87", (calendar18.compareTo(calendar87) == 0) == calendar18.equals(calendar87));
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test139");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("java.util.GregorianCalendar[time=1031884392964949,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=34669,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=36,SECOND=4,MILLISECOND=949,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2);
        calendar5.add(11, 36);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale12);
        calendar5.setTimeZone(timeZone9);
        int int16 = timeZone9.getRawOffset();
        boolean boolean17 = timeZone1.hasSameRules(timeZone9);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.lang.String str23 = locale21.getDisplayCountry();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone19, locale21);
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.lang.String str27 = locale25.getVariant();
        java.lang.String str28 = locale21.getDisplayScript(locale25);
        java.util.Set<java.lang.String> strSet29 = locale21.getUnicodeLocaleKeys();
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.util.Locale.Category category31 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category31, locale32);
        java.lang.String str34 = locale32.getScript();
        java.lang.String str35 = locale30.getDisplayCountry(locale32);
        java.lang.String str36 = locale21.getDisplayCountry(locale32);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(locale32);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone1, locale32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar24", (calendar14.compareTo(calendar24) == 0) == calendar14.equals(calendar24));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test140");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = locale14.getDisplayVariant(locale18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone2, locale18);
        java.lang.Object obj21 = timeZone2.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar20", (calendar5.compareTo(calendar20) == 0) == calendar5.equals(calendar20));
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test141");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        strList2.clear();
        java.lang.String[] strArray7 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.stream.Stream<java.lang.String> strStream10 = strList8.stream();
        boolean boolean11 = strList2.containsAll((java.util.Collection<java.lang.String>) strList8);
        java.lang.Object[] objArray12 = strList2.toArray();
        java.lang.Object obj13 = null;
        int int14 = strList2.lastIndexOf(obj13);
        java.util.ListIterator<java.lang.String> strItor15 = strList2.listIterator();
        java.text.AttributedCharacterIterator.Attribute attribute16 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str17 = attribute16.toString();
        java.lang.String str18 = attribute16.toString();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str21 = fastDateFormat19.format((long) 100);
        boolean boolean22 = attribute16.equals((java.lang.Object) str21);
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition(16);
        java.util.Date date30 = new java.util.Date();
        int int31 = date30.getDay();
        java.util.Date date32 = new java.util.Date();
        date32.setMinutes((int) '#');
        boolean boolean35 = date30.before(date32);
        boolean boolean36 = parsePosition29.equals((java.lang.Object) boolean35);
        java.lang.Object obj37 = fastDateFormat25.parseObject("eng", parsePosition29);
        boolean boolean38 = fastDateFormat25.getTimeZoneOverridesCalendar();
        boolean boolean39 = attribute16.equals((java.lang.Object) fastDateFormat25);
        java.lang.String str40 = attribute16.toString();
        java.util.Date date41 = new java.util.Date();
        int int42 = date41.getTimezoneOffset();
        long long43 = date41.getTime();
        date41.setDate((int) (byte) 10);
        long long46 = date41.getTime();
        boolean boolean47 = attribute16.equals((java.lang.Object) long46);
        java.lang.String str48 = attribute16.toString();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone49.hasSameRules(timeZone50);
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str53 = locale52.getDisplayName();
        java.lang.String str54 = locale52.getDisplayCountry();
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone50, locale52);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone50);
        boolean boolean57 = attribute16.equals((java.lang.Object) calendar56);
        boolean boolean58 = strList2.contains((java.lang.Object) boolean57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar55 and calendar56", (calendar55.compareTo(calendar56) == 0) == calendar55.equals(calendar56));
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test142");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone4);
        java.lang.String str6 = fastDateFormat5.toString();
        java.lang.String str7 = fastDateFormat5.toString();
        java.util.TimeZone timeZone8 = fastDateFormat5.getTimeZone();
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale9.getDisplayVariant(locale11);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale9);
        boolean boolean14 = calendar13.isWeekDateSupported();
        calendar13.set(7, 4, 0);
        java.util.Date date19 = calendar13.getTime();
        java.lang.String str20 = fastDateFormat2.format(calendar13);
        java.util.TimeZone timeZone21 = fastDateFormat2.getTimeZone();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        boolean boolean24 = locale23.hasExtensions();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale23);
        java.util.Set<java.lang.String> strSet27 = locale23.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 0, timeZone21, locale23);
        java.lang.String str29 = timeZone21.getID();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone33, locale35);
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition(16);
        int int39 = parsePosition38.getErrorIndex();
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet41 = locale40.getExtensionKeys();
        boolean boolean42 = parsePosition38.equals((java.lang.Object) locale40);
        java.lang.String str43 = locale40.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone33, locale40);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        timeZone45.setRawOffset((-1));
        boolean boolean48 = timeZone33.hasSameRules(timeZone45);
        java.util.TimeZone timeZone49 = null;
        boolean boolean50 = timeZone45.hasSameRules(timeZone49);
        int int51 = timeZone45.getRawOffset();
        java.text.ParsePosition parsePosition54 = new java.text.ParsePosition(16);
        int int55 = parsePosition54.getErrorIndex();
        java.util.TimeZone timeZone57 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone57);
        java.lang.String str59 = fastDateFormat58.getPattern();
        boolean boolean60 = parsePosition54.equals((java.lang.Object) fastDateFormat58);
        java.util.Locale locale61 = java.util.Locale.FRANCE;
        boolean boolean62 = parsePosition54.equals((java.lang.Object) locale61);
        java.lang.String str63 = locale61.toLanguageTag();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale61);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat65 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone45, locale61);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone21, locale61);
        boolean boolean67 = timeZone21.useDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar36 and calendar66", (calendar36.compareTo(calendar66) == 0) == calendar36.equals(calendar66));
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test143");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category6, locale9);
        java.lang.String str11 = locale9.toLanguageTag();
        java.util.Calendar.Builder builder12 = builder0.setLocale(locale9);
        java.util.Calendar.Builder builder16 = builder12.setWeekDate(97, 0, 37);
        java.util.Calendar.Builder builder18 = builder12.setLenient(true);
        java.lang.String[] strArray20 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.stream.Stream<java.lang.String> strStream23 = strList21.stream();
        boolean boolean25 = strList21.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor27 = strList21.listIterator(0);
        java.lang.String[] strArray29 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.util.stream.Stream<java.lang.String> strStream32 = strList30.stream();
        boolean boolean34 = strList30.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor36 = strList30.listIterator(0);
        java.lang.String[] strArray38 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.stream.Stream<java.lang.String> strStream41 = strList39.stream();
        java.util.ListIterator<java.lang.String> strItor42 = strList39.listIterator();
        boolean boolean43 = strList30.removeAll((java.util.Collection<java.lang.String>) strList39);
        boolean boolean44 = strList21.containsAll((java.util.Collection<java.lang.String>) strList30);
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone46);
        java.lang.String str48 = fastDateFormat47.toString();
        java.lang.String str49 = fastDateFormat47.toString();
        java.util.TimeZone timeZone50 = fastDateFormat47.getTimeZone();
        timeZone50.setRawOffset((int) (short) 100);
        int int53 = timeZone50.getRawOffset();
        java.util.TimeZone.setDefault(timeZone50);
        int int55 = strList21.indexOf((java.lang.Object) timeZone50);
        java.util.Calendar.Builder builder56 = builder12.setTimeZone(timeZone50);
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        boolean boolean60 = timeZone58.hasSameRules(timeZone59);
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.lang.String str62 = locale61.getDisplayName();
        java.lang.String str63 = locale61.getDisplayCountry();
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone59, locale61);
        int int66 = calendar64.getActualMinimum(2);
        java.util.TimeZone timeZone67 = calendar64.getTimeZone();
        java.util.TimeZone timeZone68 = calendar64.getTimeZone();
        java.lang.String str69 = calendar64.getCalendarType();
        java.lang.String str70 = calendar64.getCalendarType();
        java.util.TimeZone timeZone71 = calendar64.getTimeZone();
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        boolean boolean75 = timeZone73.hasSameRules(timeZone74);
        java.util.Locale locale76 = java.util.Locale.ROOT;
        java.util.Calendar calendar77 = java.util.Calendar.getInstance(timeZone74, locale76);
        java.text.ParsePosition parsePosition79 = new java.text.ParsePosition(16);
        int int80 = parsePosition79.getErrorIndex();
        java.util.Locale locale81 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet82 = locale81.getExtensionKeys();
        boolean boolean83 = parsePosition79.equals((java.lang.Object) locale81);
        java.lang.String str84 = locale81.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat85 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone74, locale81);
        int int86 = timeZone74.getRawOffset();
        java.util.Locale locale87 = java.util.Locale.CHINESE;
        java.lang.String str88 = locale87.getLanguage();
        boolean boolean89 = locale87.hasExtensions();
        java.lang.String str90 = locale87.getDisplayScript();
        java.util.Calendar calendar91 = java.util.Calendar.getInstance(locale87);
        java.util.Calendar calendar92 = java.util.Calendar.getInstance(timeZone74, locale87);
        java.lang.String str93 = locale87.getDisplayCountry();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat94 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone71, locale87);
        java.util.Calendar.Builder builder95 = builder12.setTimeZone(timeZone71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar64 and calendar77", (calendar64.compareTo(calendar77) == 0) == calendar64.equals(calendar77));
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test144");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        boolean boolean5 = timeZone1.hasSameRules(timeZone3);
        boolean boolean6 = timeZone3.observesDaylightTime();
        int int8 = timeZone3.getOffset(1644572072169L);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 0, timeZone3);
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone11);
        java.lang.StringBuffer stringBuffer14 = null;
        java.lang.StringBuffer stringBuffer15 = fastDateFormat12.format((long) 32772, stringBuffer14);
        java.util.TimeZone timeZone16 = fastDateFormat12.getTimeZone();
        int int17 = timeZone16.getRawOffset();
        boolean boolean18 = timeZone3.hasSameRules(timeZone16);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone3);
        int int21 = timeZone3.getOffset(1644572229506L);
        boolean boolean22 = timeZone3.observesDaylightTime();
        java.util.Calendar.Builder builder23 = new java.util.Calendar.Builder();
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = locale24.getLanguage();
        boolean boolean26 = locale24.hasExtensions();
        java.lang.String str27 = locale24.getDisplayCountry();
        java.util.Calendar.Builder builder28 = builder23.setLocale(locale24);
        java.util.Calendar.Builder builder30 = builder23.setLenient(false);
        java.util.Calendar calendar31 = builder23.build();
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone33);
        java.lang.String str35 = fastDateFormat34.toString();
        java.lang.String str36 = fastDateFormat34.toString();
        java.util.TimeZone timeZone37 = fastDateFormat34.getTimeZone();
        timeZone37.setRawOffset((int) (short) 100);
        java.util.Calendar.Builder builder40 = builder23.setTimeZone(timeZone37);
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone42);
        java.lang.StringBuffer stringBuffer45 = null;
        java.lang.StringBuffer stringBuffer46 = fastDateFormat43.format((long) 32772, stringBuffer45);
        java.util.TimeZone timeZone47 = fastDateFormat43.getTimeZone();
        int int48 = timeZone47.getRawOffset();
        java.util.TimeZone timeZone50 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone50);
        java.lang.String str52 = fastDateFormat51.toString();
        java.lang.String str53 = fastDateFormat51.toString();
        java.util.TimeZone timeZone54 = fastDateFormat51.getTimeZone();
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.lang.String str56 = locale55.getLanguage();
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.lang.String str58 = locale55.getDisplayVariant(locale57);
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone54, locale55);
        boolean boolean60 = timeZone47.hasSameRules(timeZone54);
        java.util.Calendar.Builder builder61 = builder23.setTimeZone(timeZone47);
        boolean boolean62 = timeZone3.hasSameRules(timeZone47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar59", (calendar19.compareTo(calendar59) == 0) == calendar19.equals(calendar59));
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test145");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        calendar3.add(11, 36);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone7, locale10);
        calendar3.setTimeZone(timeZone7);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15);
        java.lang.String str17 = fastDateFormat16.toString();
        java.lang.String str18 = fastDateFormat16.toString();
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition(100);
        java.lang.String str22 = parsePosition21.toString();
        java.lang.Object obj23 = fastDateFormat16.parseObject("de", parsePosition21);
        int int24 = parsePosition21.getErrorIndex();
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale26);
        java.lang.String str28 = locale26.getLanguage();
        java.lang.String str29 = locale26.getVariant();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale26);
        calendar30.setLenient(false);
        boolean boolean33 = parsePosition21.equals((java.lang.Object) calendar30);
        boolean boolean34 = calendar3.before((java.lang.Object) calendar30);
        java.util.TimeZone timeZone35 = null;
        calendar3.setTimeZone(timeZone35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar12 and calendar30", (calendar12.compareTo(calendar30) == 0) == calendar12.equals(calendar30));
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test146");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int8 = calendar6.getActualMinimum(2);
        java.util.TimeZone timeZone9 = calendar6.getTimeZone();
        java.util.TimeZone timeZone10 = calendar6.getTimeZone();
        java.lang.String str11 = calendar6.getCalendarType();
        java.lang.String str12 = calendar6.getCalendarType();
        java.util.TimeZone timeZone13 = calendar6.getTimeZone();
        timeZone13.setID("deu");
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13);
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone19);
        java.lang.String str21 = fastDateFormat20.toString();
        java.lang.String str22 = fastDateFormat20.toString();
        java.util.TimeZone timeZone23 = fastDateFormat20.getTimeZone();
        java.util.Locale locale24 = fastDateFormat20.getLocale();
        java.util.TimeZone timeZone25 = fastDateFormat20.getTimeZone();
        java.util.Locale locale28 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String[] strArray31 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.stream.Stream<java.lang.String> strStream34 = strList32.stream();
        boolean boolean36 = strList32.add("hi!");
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = locale37.getLanguage();
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale37.getDisplayVariant(locale39);
        java.util.Locale locale41 = java.util.Locale.GERMANY;
        java.lang.String str42 = locale37.getDisplayVariant(locale41);
        boolean boolean43 = strList32.contains((java.lang.Object) locale37);
        java.lang.String str44 = locale37.getVariant();
        boolean boolean45 = locale37.hasExtensions();
        java.lang.String str46 = locale29.getDisplayCountry(locale37);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getInstance("d. MMMM yyyy", timeZone25, locale29);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getTimeZone("9:34:37 AM UTC");
        java.util.TimeZone timeZone52 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229\u6587");
        boolean boolean53 = timeZone50.hasSameRules(timeZone52);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone50);
        java.util.Locale locale55 = fastDateFormat54.getLocale();
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone25, locale55);
        java.lang.String str57 = locale55.toLanguageTag();
        java.util.Set<java.lang.Character> charSet58 = locale55.getExtensionKeys();
        java.lang.String str59 = timeZone13.getDisplayName(locale55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar56", (calendar6.compareTo(calendar56) == 0) == calendar6.equals(calendar56));
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test147");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.lang.String str8 = fastDateFormat0.format(calendar7);
        boolean boolean9 = fastDateFormat0.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale13.getDisplayName();
        java.lang.String str15 = locale13.getDisplayCountry();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone11, locale13);
        calendar16.set(31, (int) (byte) 100, (int) (byte) 10, (int) (short) 100, 9, 8);
        java.util.Date date27 = new java.util.Date((-1), 32772, (int) (short) 10);
        java.lang.String str28 = date27.toLocaleString();
        calendar16.setTime(date27);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone31, locale33);
        calendar16.setTimeZone(timeZone31);
        calendar16.add(9, 1970);
        java.util.Date date39 = new java.util.Date();
        int int40 = date39.getTimezoneOffset();
        long long41 = date39.getTime();
        java.util.Date date42 = new java.util.Date();
        int int43 = date42.getSeconds();
        long long44 = date42.getTime();
        date42.setTime((long) ' ');
        int int47 = date42.getTimezoneOffset();
        boolean boolean48 = date39.before(date42);
        java.util.Date date52 = new java.util.Date(11, 11, 3);
        boolean boolean53 = date39.before(date52);
        java.util.Date date54 = new java.util.Date();
        int int55 = date54.getDay();
        java.util.Date date56 = new java.util.Date();
        date56.setMinutes((int) '#');
        boolean boolean59 = date54.before(date56);
        int int60 = date56.getHours();
        boolean boolean61 = date39.before(date56);
        java.time.Instant instant62 = date39.toInstant();
        java.util.Date date63 = java.util.Date.from(instant62);
        boolean boolean64 = calendar16.before((java.lang.Object) instant62);
        java.lang.String str65 = fastDateFormat0.format(calendar16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar34", (calendar7.compareTo(calendar34) == 0) == calendar7.equals(calendar34));
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test148");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        boolean boolean5 = timeZone1.hasSameRules(timeZone3);
        boolean boolean6 = timeZone3.observesDaylightTime();
        int int8 = timeZone3.getOffset(1644572072169L);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 0, timeZone3);
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone11);
        java.lang.StringBuffer stringBuffer14 = null;
        java.lang.StringBuffer stringBuffer15 = fastDateFormat12.format((long) 32772, stringBuffer14);
        java.util.TimeZone timeZone16 = fastDateFormat12.getTimeZone();
        int int17 = timeZone16.getRawOffset();
        boolean boolean18 = timeZone3.hasSameRules(timeZone16);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone3);
        boolean boolean20 = timeZone3.observesDaylightTime();
        timeZone3.setRawOffset(19);
        int int23 = timeZone3.getRawOffset();
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder24.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder28 = builder26.setLanguageTag("it");
        java.util.Locale.Builder builder31 = builder26.setExtension('x', "de");
        java.util.Locale locale32 = builder31.build();
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale33.getDisplayLanguage();
        java.util.Locale locale36 = locale33.stripExtensions();
        java.util.Locale locale39 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale40 = locale39.stripExtensions();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale40);
        java.util.Locale locale42 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(locale42);
        java.lang.String str44 = locale40.getDisplayName(locale42);
        java.lang.String str45 = locale36.getDisplayName(locale40);
        java.lang.String str46 = locale32.getDisplayScript(locale36);
        java.lang.String str47 = timeZone3.getDisplayName(locale36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar41", (calendar19.compareTo(calendar41) == 0) == calendar19.equals(calendar41));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test149");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = locale6.getLanguage();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale6.getDisplayVariant(locale8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone5, locale6);
        int int12 = calendar10.getActualMinimum(0);
        boolean boolean13 = calendar10.isWeekDateSupported();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone16);
        boolean boolean18 = fastDateFormat17.getTimeZoneOverridesCalendar();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        int int20 = calendar19.getWeeksInWeekYear();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        boolean boolean25 = timeZone21.hasSameRules(timeZone23);
        calendar19.setTimeZone(timeZone21);
        calendar19.set((int) (byte) 100, (int) (byte) 1, 0, 6, (-1));
        java.lang.String str33 = fastDateFormat17.format(calendar19);
        java.util.TimeZone timeZone34 = fastDateFormat17.getTimeZone();
        java.lang.String[] strArray36 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.util.stream.Stream<java.lang.String> strStream39 = strList37.stream();
        strList37.clear();
        boolean boolean41 = strList37.isEmpty();
        boolean boolean42 = strList37.isEmpty();
        java.util.ListIterator<java.lang.String> strItor43 = strList37.listIterator();
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone46, locale48);
        java.lang.String str50 = locale48.getDisplayLanguage();
        java.lang.String str52 = locale48.getUnicodeLocaleType("zh");
        java.lang.String str53 = locale44.getDisplayScript(locale48);
        int int54 = strList37.indexOf((java.lang.Object) locale44);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone34, locale44);
        boolean boolean56 = calendar10.after((java.lang.Object) timeZone34);
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone57.hasSameRules(timeZone58);
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone57);
        timeZone57.setRawOffset(40);
        boolean boolean63 = timeZone57.observesDaylightTime();
        int int65 = timeZone57.getOffset(1644572074258L);
        java.util.TimeZone.setDefault(timeZone57);
        java.util.TimeZone.setDefault(timeZone57);
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone57);
        calendar10.setTimeZone(timeZone57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar49 and calendar60", (calendar49.compareTo(calendar60) == 0) == calendar49.equals(calendar60));
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test150");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale3);
        calendar5.setMinimalDaysInFirstWeek((int) (short) 0);
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        boolean boolean9 = calendar5.after((java.lang.Object) locale8);
        java.lang.String str10 = locale8.getDisplayLanguage();
        java.lang.String str11 = locale8.getISO3Country();
        java.util.Calendar.Builder builder12 = new java.util.Calendar.Builder();
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        boolean boolean15 = locale13.hasExtensions();
        java.lang.String str16 = locale13.getDisplayCountry();
        java.util.Calendar.Builder builder17 = builder12.setLocale(locale13);
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category18, locale19);
        java.util.Locale locale21 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category18, locale21);
        java.lang.String str23 = locale21.toLanguageTag();
        java.util.Calendar.Builder builder24 = builder12.setLocale(locale21);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        java.text.ParsePosition parsePosition32 = new java.text.ParsePosition(16);
        int int33 = parsePosition32.getErrorIndex();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet35 = locale34.getExtensionKeys();
        boolean boolean36 = parsePosition32.equals((java.lang.Object) locale34);
        java.lang.String str37 = locale34.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone27, locale34);
        int int39 = timeZone27.getRawOffset();
        java.util.Calendar.Builder builder40 = builder24.setTimeZone(timeZone27);
        java.util.Calendar calendar41 = builder24.build();
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = locale42.getLanguage();
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale42.getDisplayVariant(locale44);
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        java.lang.String str47 = locale42.getDisplayVariant(locale46);
        java.util.Locale locale48 = java.util.Locale.PRC;
        java.lang.String str49 = locale46.getDisplayScript(locale48);
        java.util.Locale locale50 = locale46.stripExtensions();
        boolean boolean51 = calendar41.before((java.lang.Object) locale46);
        boolean boolean52 = locale46.hasExtensions();
        java.util.Set<java.lang.Character> charSet53 = locale46.getExtensionKeys();
        java.lang.String str54 = locale8.getDisplayScript(locale46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar30", (calendar5.compareTo(calendar30) == 0) == calendar5.equals(calendar30));
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test151");
        java.util.Locale locale4 = new java.util.Locale("java.text.FieldPosition[field=1,attribute=null,beginIndex=0,endIndex=0]", "\u4e0a\u5348", "h:mm:ss a z");
        java.util.Locale locale5 = java.util.Locale.PRC;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale10.getDisplayCountry();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale10);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale14.getVariant();
        java.lang.String str17 = locale10.getDisplayScript(locale14);
        java.util.Set<java.lang.String> strSet18 = locale10.getUnicodeLocaleKeys();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category20, locale21);
        java.lang.String str23 = locale21.getScript();
        java.lang.String str24 = locale19.getDisplayCountry(locale21);
        java.lang.String str25 = locale10.getDisplayCountry(locale21);
        java.lang.String str26 = locale5.getDisplayCountry(locale21);
        java.lang.String str27 = locale4.getDisplayScript(locale5);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, locale4);
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition(16);
        java.util.Date date32 = new java.util.Date();
        int int33 = date32.getDay();
        java.util.Date date34 = new java.util.Date();
        date34.setMinutes((int) '#');
        boolean boolean37 = date32.before(date34);
        boolean boolean38 = parsePosition31.equals((java.lang.Object) boolean37);
        parsePosition31.setErrorIndex((int) (short) 10);
        int int41 = parsePosition31.getIndex();
        java.lang.String[] strArray43 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.util.stream.Stream<java.lang.String> strStream46 = strList44.stream();
        boolean boolean48 = strList44.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor50 = strList44.listIterator(0);
        java.lang.String[] strArray52 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        java.util.stream.Stream<java.lang.String> strStream55 = strList53.stream();
        java.util.ListIterator<java.lang.String> strItor56 = strList53.listIterator();
        boolean boolean57 = strList44.removeAll((java.util.Collection<java.lang.String>) strList53);
        int int58 = strList44.size();
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        boolean boolean61 = timeZone59.hasSameRules(timeZone60);
        java.util.Locale locale62 = java.util.Locale.ROOT;
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone60, locale62);
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone65.hasSameRules(timeZone66);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone66);
        timeZone66.setRawOffset(3);
        java.util.TimeZone timeZone72 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat73 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone72);
        java.lang.String str74 = fastDateFormat73.getPattern();
        java.util.TimeZone timeZone75 = fastDateFormat73.getTimeZone();
        boolean boolean76 = timeZone66.hasSameRules(timeZone75);
        boolean boolean77 = timeZone60.hasSameRules(timeZone75);
        boolean boolean78 = strList44.contains((java.lang.Object) boolean77);
        java.util.stream.Stream<java.lang.String> strStream79 = strList44.stream();
        java.lang.String[] strArray81 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        java.util.stream.Stream<java.lang.String> strStream84 = strList82.stream();
        boolean boolean86 = strList82.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor88 = strList82.listIterator(0);
        strList82.clear();
        boolean boolean90 = strList44.retainAll((java.util.Collection<java.lang.String>) strList82);
        boolean boolean91 = parsePosition31.equals((java.lang.Object) strList82);
        java.lang.Object obj92 = fastDateFormat28.parseObject("\uc624\uc804\uc2dc\ubd84\ucd08", parsePosition31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar63", (calendar13.compareTo(calendar63) == 0) == calendar13.equals(calendar63));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test152");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        int int5 = calendar3.getActualMaximum(0);
        java.util.TimeZone timeZone6 = calendar3.getTimeZone();
        timeZone6.setID("hi!");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.lang.String str15 = fastDateFormat14.toString();
        java.lang.String str16 = fastDateFormat14.toString();
        java.util.TimeZone timeZone17 = fastDateFormat14.getTimeZone();
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.lang.String str19 = locale18.getLanguage();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale18.getDisplayVariant(locale20);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone17, locale18);
        boolean boolean23 = calendar22.isWeekDateSupported();
        calendar22.set(7, 4, 0);
        java.util.Date date28 = calendar22.getTime();
        java.lang.String str29 = fastDateFormat11.format(calendar22);
        java.util.TimeZone timeZone30 = fastDateFormat11.getTimeZone();
        java.util.Locale locale32 = java.util.Locale.ROOT;
        boolean boolean33 = locale32.hasExtensions();
        java.util.Set<java.lang.String> strSet34 = locale32.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale32);
        java.util.Set<java.lang.String> strSet36 = locale32.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 0, timeZone30, locale32);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale41.getDisplayName();
        java.lang.String str43 = locale41.getDisplayCountry();
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone39, locale41);
        int int46 = calendar44.getActualMinimum(2);
        java.util.TimeZone timeZone47 = calendar44.getTimeZone();
        java.util.Calendar.Builder builder48 = new java.util.Calendar.Builder();
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.lang.String str50 = locale49.getLanguage();
        boolean boolean51 = locale49.hasExtensions();
        java.lang.String str52 = locale49.getDisplayCountry();
        java.util.Calendar.Builder builder53 = builder48.setLocale(locale49);
        java.util.Calendar.Builder builder57 = builder48.setWeekDate(38, 41, 11);
        java.util.TimeZone timeZone59 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone59);
        java.lang.String str61 = fastDateFormat60.toString();
        java.lang.String str62 = fastDateFormat60.toString();
        java.util.TimeZone timeZone63 = fastDateFormat60.getTimeZone();
        java.util.Calendar.Builder builder64 = builder57.setTimeZone(timeZone63);
        boolean boolean65 = timeZone47.hasSameRules(timeZone63);
        boolean boolean66 = timeZone30.hasSameRules(timeZone63);
        boolean boolean67 = timeZone6.hasSameRules(timeZone30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar44", (calendar3.compareTo(calendar44) == 0) == calendar3.equals(calendar44));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test153");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale3);
        int int7 = timeZone0.getOffset((long) 2);
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale locale11 = java.util.Locale.getDefault(category8);
        java.util.Locale locale12 = java.util.Locale.getDefault(category8);
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone0, locale12);
        java.util.Locale locale19 = new java.util.Locale("it", "", "United States");
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale19);
        java.lang.String str22 = timeZone0.getDisplayName(locale19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar15", (calendar5.compareTo(calendar15) == 0) == calendar5.equals(calendar15));
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test154");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone1);
        int int9 = timeZone1.getOffset(1644572086894L);
        timeZone1.setRawOffset(23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar7", (calendar6.compareTo(calendar7) == 0) == calendar6.equals(calendar7));
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test155");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone3);
        java.lang.String str5 = fastDateFormat4.toString();
        java.lang.String str6 = fastDateFormat4.toString();
        java.util.TimeZone timeZone7 = fastDateFormat4.getTimeZone();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone7, locale8);
        boolean boolean13 = calendar12.isWeekDateSupported();
        calendar12.set(7, 4, 0);
        java.util.Date date18 = calendar12.getTime();
        java.lang.String str19 = fastDateFormat1.format(calendar12);
        java.util.TimeZone timeZone20 = fastDateFormat1.getTimeZone();
        java.lang.Object obj21 = null;
        boolean boolean22 = fastDateFormat1.equals(obj21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        int int24 = calendar23.getWeeksInWeekYear();
        java.time.Instant instant25 = calendar23.toInstant();
        int int27 = calendar23.getMinimum(4);
        java.lang.String str28 = fastDateFormat1.format(calendar23);
        int int30 = calendar23.getLeastMaximum(3);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone32, locale34);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone37.hasSameRules(timeZone38);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone38);
        timeZone38.setRawOffset(3);
        java.util.TimeZone timeZone44 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone44);
        java.lang.String str46 = fastDateFormat45.getPattern();
        java.util.TimeZone timeZone47 = fastDateFormat45.getTimeZone();
        boolean boolean48 = timeZone38.hasSameRules(timeZone47);
        boolean boolean49 = timeZone32.hasSameRules(timeZone47);
        timeZone32.setRawOffset(50);
        calendar23.setTimeZone(timeZone32);
        int int54 = timeZone32.getOffset(1644572109662L);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar23 and calendar35", (calendar23.compareTo(calendar35) == 0) == calendar23.equals(calendar35));
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test156");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7);
        timeZone7.setRawOffset(3);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        boolean boolean17 = timeZone7.hasSameRules(timeZone16);
        boolean boolean18 = timeZone1.hasSameRules(timeZone16);
        java.util.TimeZone.setDefault(timeZone16);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition(16);
        int int28 = parsePosition27.getErrorIndex();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        boolean boolean31 = parsePosition27.equals((java.lang.Object) locale29);
        java.lang.String str32 = locale29.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22, locale29);
        int int34 = timeZone22.getRawOffset();
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.lang.String str36 = locale35.getLanguage();
        boolean boolean37 = locale35.hasExtensions();
        java.lang.String str38 = locale35.getDisplayScript();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale35);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone22, locale35);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone16, locale35);
        boolean boolean42 = calendar41.isWeekDateSupported();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar25", (calendar4.compareTo(calendar25) == 0) == calendar4.equals(calendar25));
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test157");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = locale14.getDisplayVariant(locale18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone2, locale18);
        timeZone2.setID("9:34:35 AM UTC");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar20", (calendar5.compareTo(calendar20) == 0) == calendar5.equals(calendar20));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test158");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone1);
        timeZone1.setRawOffset(37);
        timeZone1.setID("2022-2-11 9:34:45");
        java.lang.String str12 = timeZone1.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar7", (calendar6.compareTo(calendar7) == 0) == calendar6.equals(calendar7));
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test159");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone1);
        timeZone1.setRawOffset(37);
        int int11 = timeZone1.getOffset(1644572143523L);
        java.lang.String str12 = timeZone1.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar7", (calendar6.compareTo(calendar7) == 0) == calendar6.equals(calendar7));
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test160");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("FRA");
        java.util.Locale locale3 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale3);
        java.lang.String str5 = locale3.getLanguage();
        java.lang.String str6 = locale3.getVariant();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        boolean boolean9 = locale7.hasExtensions();
        java.lang.String str10 = locale3.getDisplayCountry(locale7);
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale locale14 = java.util.Locale.getDefault(category11);
        boolean boolean15 = locale14.hasExtensions();
        java.lang.String[] strArray21 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.util.stream.Stream<java.lang.String> strStream24 = strList22.stream();
        java.util.Locale locale25 = java.util.Locale.JAPANESE;
        int int26 = strList22.lastIndexOf((java.lang.Object) locale25);
        java.lang.String str27 = locale14.getDisplayVariant(locale25);
        java.lang.String str28 = locale3.getDisplayCountry(locale14);
        java.lang.String str29 = locale3.getDisplayName();
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition(16);
        int int32 = parsePosition31.getErrorIndex();
        java.util.TimeZone timeZone34 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone34);
        java.lang.String str36 = fastDateFormat35.getPattern();
        boolean boolean37 = parsePosition31.equals((java.lang.Object) fastDateFormat35);
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        boolean boolean39 = parsePosition31.equals((java.lang.Object) locale38);
        java.lang.String str40 = locale38.getDisplayScript();
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder44 = builder41.clear();
        java.util.Locale locale45 = builder44.build();
        java.lang.String str46 = locale38.getDisplayVariant(locale45);
        java.lang.String str47 = locale3.getDisplayVariant(locale38);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet52 = locale51.getExtensionKeys();
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone48, locale51);
        java.lang.String str54 = locale51.getCountry();
        java.lang.String str55 = locale3.getDisplayName(locale51);
        java.lang.String str56 = locale51.getDisplayLanguage();
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone1, locale51);
        java.lang.String str58 = locale51.getDisplayVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar53 and calendar57", (calendar53.compareTo(calendar57) == 0) == calendar53.equals(calendar57));
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test161");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str5 = locale0.getExtension('x');
        java.lang.String str6 = locale0.getLanguage();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.ROOT;
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone8, locale10);
        java.lang.String str12 = locale10.getDisplayLanguage();
        java.lang.String str14 = locale10.getUnicodeLocaleType("zh");
        java.util.Locale locale15 = locale10.stripExtensions();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition(16);
        int int24 = parsePosition23.getErrorIndex();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        boolean boolean27 = parsePosition23.equals((java.lang.Object) locale25);
        java.lang.String str28 = locale25.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone18, locale25);
        int int30 = timeZone18.getRawOffset();
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = locale31.getLanguage();
        boolean boolean33 = locale31.hasExtensions();
        java.lang.String str34 = locale31.getDisplayScript();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale31);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone18, locale31);
        java.lang.String str37 = locale31.getDisplayCountry();
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.lang.String str39 = locale38.getLanguage();
        boolean boolean40 = locale38.hasExtensions();
        java.lang.String str41 = locale38.getDisplayCountry();
        java.lang.String str42 = locale31.getDisplayScript(locale38);
        java.lang.String str43 = locale10.getDisplayName(locale38);
        java.lang.String str44 = locale0.getDisplayName(locale10);
        java.lang.String str45 = locale0.getDisplayCountry();
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(locale0);
        java.lang.String str47 = locale0.getCountry();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar46", (calendar11.compareTo(calendar46) == 0) == calendar11.equals(calendar46));
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test162");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        boolean boolean4 = timeZone0.hasSameRules(timeZone2);
        boolean boolean5 = timeZone2.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone2);
        java.util.Locale locale7 = java.util.Locale.UK;
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getLanguage();
        boolean boolean12 = locale10.hasExtensions();
        java.lang.String str13 = locale8.getDisplayVariant(locale10);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(locale8);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone2, locale8);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone20);
        java.lang.String str22 = fastDateFormat21.toString();
        java.lang.String str23 = fastDateFormat21.toString();
        java.util.TimeZone timeZone24 = fastDateFormat21.getTimeZone();
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = locale25.getLanguage();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.lang.String str28 = locale25.getDisplayVariant(locale27);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone24, locale25);
        boolean boolean30 = calendar29.isWeekDateSupported();
        calendar29.set(7, 4, 0);
        java.util.Date date35 = calendar29.getTime();
        java.lang.String str36 = fastDateFormat18.format(calendar29);
        java.util.TimeZone timeZone37 = fastDateFormat18.getTimeZone();
        java.lang.Object obj38 = null;
        boolean boolean39 = fastDateFormat18.equals(obj38);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance();
        int int41 = calendar40.getWeeksInWeekYear();
        java.time.Instant instant42 = calendar40.toInstant();
        int int44 = calendar40.getMinimum(4);
        java.lang.String str45 = fastDateFormat18.format(calendar40);
        int int47 = calendar40.getLeastMaximum(3);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone49, locale51);
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone54.hasSameRules(timeZone55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone55);
        timeZone55.setRawOffset(3);
        java.util.TimeZone timeZone61 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone61);
        java.lang.String str63 = fastDateFormat62.getPattern();
        java.util.TimeZone timeZone64 = fastDateFormat62.getTimeZone();
        boolean boolean65 = timeZone55.hasSameRules(timeZone64);
        boolean boolean66 = timeZone49.hasSameRules(timeZone64);
        timeZone49.setRawOffset(50);
        calendar40.setTimeZone(timeZone49);
        int int71 = timeZone49.getOffset(1644572109662L);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 0, timeZone49);
        calendar15.setTimeZone(timeZone49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar40", (calendar14.compareTo(calendar40) == 0) == calendar14.equals(calendar40));
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test163");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        timeZone14.setRawOffset((-1));
        boolean boolean17 = timeZone2.hasSameRules(timeZone14);
        java.util.TimeZone timeZone18 = null;
        boolean boolean19 = timeZone14.hasSameRules(timeZone18);
        int int20 = timeZone14.getRawOffset();
        java.util.Calendar.Builder builder21 = new java.util.Calendar.Builder();
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        boolean boolean24 = locale22.hasExtensions();
        java.lang.String str25 = locale22.getDisplayCountry();
        java.util.Calendar.Builder builder26 = builder21.setLocale(locale22);
        java.util.Calendar.Builder builder30 = builder21.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder32 = builder21.setLenient(false);
        java.util.Calendar.Builder builder36 = builder21.setTimeOfDay(15, 0, 32770);
        java.util.Calendar.Builder builder39 = builder36.setWeekDefinition(7, 7);
        java.util.Calendar.Builder builder41 = builder36.setLenient(true);
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone43);
        java.lang.String str45 = fastDateFormat44.toString();
        java.lang.String str46 = fastDateFormat44.toString();
        java.util.TimeZone timeZone47 = fastDateFormat44.getTimeZone();
        java.util.Locale locale48 = fastDateFormat44.getLocale();
        boolean boolean49 = fastDateFormat44.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone50 = fastDateFormat44.getTimeZone();
        timeZone50.setID("Chinesisch");
        java.util.Calendar.Builder builder53 = builder36.setTimeZone(timeZone50);
        int int54 = timeZone50.getRawOffset();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone55.hasSameRules(timeZone56);
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone56, locale58);
        int int60 = timeZone56.getRawOffset();
        java.util.TimeZone.setDefault(timeZone56);
        boolean boolean62 = timeZone50.hasSameRules(timeZone56);
        int int63 = timeZone56.getRawOffset();
        int int65 = timeZone56.getOffset((long) (short) 100);
        java.util.TimeZone timeZone68 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone68);
        java.lang.String str70 = fastDateFormat69.toString();
        java.lang.String str71 = fastDateFormat69.toString();
        java.util.TimeZone timeZone72 = fastDateFormat69.getTimeZone();
        java.util.Locale locale73 = java.util.Locale.CHINESE;
        java.lang.String str74 = locale73.getLanguage();
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.lang.String str76 = locale73.getDisplayVariant(locale75);
        java.util.Calendar calendar77 = java.util.Calendar.getInstance(timeZone72, locale73);
        java.util.Locale locale78 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone80 = java.util.TimeZone.getDefault();
        boolean boolean81 = timeZone79.hasSameRules(timeZone80);
        java.util.Locale locale82 = java.util.Locale.ROOT;
        java.util.Calendar calendar83 = java.util.Calendar.getInstance(timeZone80, locale82);
        java.lang.String str84 = locale82.getDisplayLanguage();
        java.lang.String str86 = locale82.getUnicodeLocaleType("zh");
        java.lang.String str87 = locale78.getDisplayScript(locale82);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat88 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone72, locale82);
        int int89 = timeZone72.getRawOffset();
        boolean boolean90 = timeZone72.observesDaylightTime();
        boolean boolean91 = timeZone56.hasSameRules(timeZone72);
        boolean boolean92 = timeZone14.hasSameRules(timeZone56);
        timeZone56.setID("\uc624\uc804\uc2dc\ubd84\ucd08");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar59", (calendar5.compareTo(calendar59) == 0) == calendar5.equals(calendar59));
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test164");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        int int9 = calendar7.getActualMinimum(2);
        java.util.TimeZone timeZone10 = calendar7.getTimeZone();
        java.util.TimeZone timeZone11 = calendar7.getTimeZone();
        java.lang.String str12 = calendar7.getCalendarType();
        java.lang.String str13 = calendar7.getCalendarType();
        java.util.TimeZone timeZone14 = calendar7.getTimeZone();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        java.text.ParsePosition parsePosition22 = new java.text.ParsePosition(16);
        int int23 = parsePosition22.getErrorIndex();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        boolean boolean26 = parsePosition22.equals((java.lang.Object) locale24);
        java.lang.String str27 = locale24.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17, locale24);
        int int29 = timeZone17.getRawOffset();
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        boolean boolean32 = locale30.hasExtensions();
        java.lang.String str33 = locale30.getDisplayScript();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale30);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone17, locale30);
        java.lang.String str36 = locale30.getDisplayCountry();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone14, locale30);
        java.util.Set<java.lang.Character> charSet38 = locale30.getExtensionKeys();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar20", (calendar7.compareTo(calendar20) == 0) == calendar7.equals(calendar20));
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test165");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayVariant(locale9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale7);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.lang.String str18 = locale16.getDisplayLanguage();
        java.lang.String str20 = locale16.getUnicodeLocaleType("zh");
        java.lang.String str21 = locale12.getDisplayScript(locale16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone6, locale16);
        java.util.Locale locale23 = java.util.Locale.UK;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = locale23.getDisplayCountry(locale24);
        java.util.Set<java.lang.String> strSet26 = locale23.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale23);
        java.lang.String str28 = locale16.getDisplayScript(locale23);
        boolean boolean29 = locale16.hasExtensions();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar17", (calendar11.compareTo(calendar17) == 0) == calendar11.equals(calendar17));
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test166");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        calendar4.clear(0);
        calendar4.setFirstDayOfWeek(51);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone11, locale13);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition(16);
        int int17 = parsePosition16.getErrorIndex();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) locale18);
        java.lang.String str21 = locale18.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone11, locale18);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        long long28 = calendar27.getTimeInMillis();
        java.lang.String str29 = fastDateFormat22.format(calendar27);
        java.util.Date date30 = calendar27.getTime();
        calendar4.setTime(date30);
        int int32 = date30.getDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar14", (calendar4.compareTo(calendar14) == 0) == calendar4.equals(calendar14));
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test167");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] { languageRange7 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone12, locale14);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale18.getDisplayLanguage(locale19);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale25);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone31);
        java.util.Locale locale34 = fastDateFormat33.getLocale();
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.lang.String str41 = locale36.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone48);
        java.util.Locale locale51 = fastDateFormat50.getLocale();
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone54.hasSameRules(timeZone55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone55);
        java.util.Locale locale58 = fastDateFormat57.getLocale();
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale60 = java.util.Locale.UK;
        java.util.Locale[] localeArray61 = new java.util.Locale[] { locale14, locale18, locale22, locale25, locale27, locale28, locale34, locale35, locale40, locale42, locale43, locale44, locale45, locale51, locale52, locale58, locale59, locale60 };
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.Locale locale64 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList62);
        java.lang.String str65 = locale1.getDisplayName(locale64);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(locale1);
        java.util.Locale locale67 = java.util.Locale.PRC;
        java.lang.String str68 = locale67.getDisplayLanguage();
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        boolean boolean71 = timeZone69.hasSameRules(timeZone70);
        java.util.Locale locale72 = java.util.Locale.GERMAN;
        java.lang.String str73 = locale72.getDisplayName();
        java.lang.String str74 = locale72.getDisplayCountry();
        java.util.Calendar calendar75 = java.util.Calendar.getInstance(timeZone70, locale72);
        java.util.Locale locale76 = java.util.Locale.CHINESE;
        java.util.Locale locale77 = locale76.stripExtensions();
        java.lang.String str78 = locale76.getVariant();
        java.lang.String str79 = locale72.getDisplayScript(locale76);
        java.util.Set<java.lang.String> strSet80 = locale72.getUnicodeLocaleKeys();
        java.util.Locale locale81 = java.util.Locale.GERMAN;
        java.util.Locale.Category category82 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale83 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category82, locale83);
        java.lang.String str85 = locale83.getScript();
        java.lang.String str86 = locale81.getDisplayCountry(locale83);
        java.lang.String str87 = locale72.getDisplayCountry(locale83);
        java.lang.String str88 = locale67.getDisplayCountry(locale83);
        java.lang.String str89 = locale1.getDisplayVariant(locale67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar66", (calendar17.compareTo(calendar66) == 0) == calendar17.equals(calendar66));
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test168");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition(16);
        int int9 = parsePosition8.getErrorIndex();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        boolean boolean12 = parsePosition8.equals((java.lang.Object) locale10);
        java.lang.String str13 = locale10.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone3, locale10);
        int int15 = timeZone3.getRawOffset();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        boolean boolean18 = locale16.hasExtensions();
        java.lang.String str19 = locale16.getDisplayScript();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale16);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone3, locale16);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition(16);
        java.util.Date date24 = new java.util.Date();
        int int25 = date24.getDay();
        java.util.Date date26 = new java.util.Date();
        date26.setMinutes((int) '#');
        boolean boolean29 = date24.before(date26);
        boolean boolean30 = parsePosition23.equals((java.lang.Object) boolean29);
        parsePosition23.setErrorIndex((int) (short) 10);
        int int33 = parsePosition23.getIndex();
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.lang.String str35 = locale34.getLanguage();
        boolean boolean36 = locale34.hasExtensions();
        java.lang.String str37 = locale34.getDisplayScript();
        java.lang.String str38 = locale34.getDisplayScript();
        boolean boolean39 = parsePosition23.equals((java.lang.Object) locale34);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone3, locale34);
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.lang.String str44 = locale43.getLanguage();
        boolean boolean45 = locale43.hasExtensions();
        java.lang.String str46 = locale43.getDisplayScript();
        java.lang.String str47 = locale43.getDisplayScript();
        java.util.Locale.Category category48 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale49 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category48, locale49);
        java.util.Locale locale51 = java.util.Locale.getDefault(category48);
        java.lang.String str52 = locale43.getDisplayLanguage(locale51);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 1, locale43);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(locale43);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale43);
        java.lang.String str56 = locale34.getDisplayName(locale43);
        java.util.Locale.Builder builder57 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder59 = builder57.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder60 = builder57.clear();
        java.util.Locale locale61 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder62 = builder60.setLocale(locale61);
        java.util.Locale.Builder builder63 = builder62.clearExtensions();
        java.util.Locale locale64 = builder62.build();
        java.lang.String str65 = locale34.getDisplayName(locale64);
        java.util.Locale.Builder builder66 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder68 = builder66.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder69 = builder66.clear();
        java.util.Locale locale70 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder71 = builder69.setLocale(locale70);
        java.util.Locale.Builder builder72 = builder71.clearExtensions();
        java.util.Locale.Category category73 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone74.hasSameRules(timeZone75);
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.lang.String str78 = locale77.getDisplayName();
        java.lang.String str79 = locale77.getDisplayCountry();
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(timeZone75, locale77);
        java.util.Locale.setDefault(category73, locale77);
        java.util.Locale locale82 = java.util.Locale.getDefault(category73);
        java.util.Locale.Builder builder83 = builder72.setLocale(locale82);
        java.util.Locale.Builder builder84 = builder72.clearExtensions();
        java.util.Locale.Category category85 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale86 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category85, locale86);
        java.lang.String str88 = locale86.getDisplayName();
        java.util.Locale.Builder builder89 = builder72.setLocale(locale86);
        java.util.Locale locale90 = locale86.stripExtensions();
        boolean boolean91 = locale90.hasExtensions();
        java.lang.String str92 = locale34.getDisplayLanguage(locale90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar80", (calendar6.compareTo(calendar80) == 0) == calendar6.equals(calendar80));
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test169");
        java.util.Locale locale2 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale3 = locale2.stripExtensions();
        java.lang.String[] strArray5 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.stream.Stream<java.lang.String> strStream8 = strList6.stream();
        boolean boolean10 = strList6.add("hi!");
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale11.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.lang.String str16 = locale11.getDisplayVariant(locale15);
        boolean boolean17 = strList6.contains((java.lang.Object) locale11);
        java.lang.String str18 = locale11.getVariant();
        boolean boolean19 = locale11.hasExtensions();
        java.lang.String str20 = locale3.getDisplayCountry(locale11);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale11);
        calendar21.clear();
        calendar21.setWeekDate((int) (short) -1, 29, 6);
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale28);
        java.lang.String str30 = locale28.getLanguage();
        java.lang.String str31 = locale28.getVariant();
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = locale32.getLanguage();
        boolean boolean34 = locale32.hasExtensions();
        java.lang.String str35 = locale28.getDisplayCountry(locale32);
        java.util.Locale.Category category36 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category36, locale37);
        java.util.Locale locale39 = java.util.Locale.getDefault(category36);
        boolean boolean40 = locale39.hasExtensions();
        java.lang.String[] strArray46 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        java.util.stream.Stream<java.lang.String> strStream49 = strList47.stream();
        java.util.Locale locale50 = java.util.Locale.JAPANESE;
        int int51 = strList47.lastIndexOf((java.lang.Object) locale50);
        java.lang.String str52 = locale39.getDisplayVariant(locale50);
        java.lang.String str53 = locale28.getDisplayCountry(locale39);
        java.lang.String str54 = locale28.getDisplayName();
        java.text.ParsePosition parsePosition56 = new java.text.ParsePosition(16);
        int int57 = parsePosition56.getErrorIndex();
        java.util.TimeZone timeZone59 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone59);
        java.lang.String str61 = fastDateFormat60.getPattern();
        boolean boolean62 = parsePosition56.equals((java.lang.Object) fastDateFormat60);
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        boolean boolean64 = parsePosition56.equals((java.lang.Object) locale63);
        java.lang.String str65 = locale63.getDisplayScript();
        java.util.Locale.Builder builder66 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder68 = builder66.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder69 = builder66.clear();
        java.util.Locale locale70 = builder69.build();
        java.lang.String str71 = locale63.getDisplayVariant(locale70);
        java.lang.String str72 = locale28.getDisplayVariant(locale63);
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        boolean boolean75 = timeZone73.hasSameRules(timeZone74);
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet77 = locale76.getExtensionKeys();
        java.util.Calendar calendar78 = java.util.Calendar.getInstance(timeZone73, locale76);
        java.lang.String str79 = locale76.getCountry();
        java.lang.String str80 = locale28.getDisplayName(locale76);
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(locale76);
        int int82 = calendar81.getFirstDayOfWeek();
        java.util.TimeZone timeZone84 = java.util.TimeZone.getTimeZone("9:34:37 AM UTC");
        java.util.TimeZone timeZone86 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229\u6587");
        boolean boolean87 = timeZone84.hasSameRules(timeZone86);
        calendar81.setTimeZone(timeZone86);
        calendar21.setTimeZone(timeZone86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar78 and calendar81", (calendar78.compareTo(calendar81) == 0) == calendar78.equals(calendar81));
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test170");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.lang.String str3 = locale2.getLanguage();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale2.getDisplayVariant(locale4);
        boolean boolean6 = calendar0.before((java.lang.Object) str5);
        int int7 = calendar0.getFirstDayOfWeek();
        java.util.TimeZone timeZone8 = calendar0.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.lang.String str14 = fastDateFormat13.toString();
        java.lang.String str15 = fastDateFormat13.toString();
        java.util.TimeZone timeZone16 = fastDateFormat13.getTimeZone();
        java.util.Locale locale17 = fastDateFormat13.getLocale();
        java.util.TimeZone timeZone18 = fastDateFormat13.getTimeZone();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone18);
        boolean boolean20 = timeZone8.hasSameRules(timeZone18);
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22);
        java.lang.String str24 = fastDateFormat23.toString();
        java.lang.String str25 = fastDateFormat23.toString();
        java.util.TimeZone timeZone26 = fastDateFormat23.getTimeZone();
        timeZone26.setRawOffset((int) (short) 100);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone26);
        boolean boolean30 = timeZone18.hasSameRules(timeZone26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar19", (calendar0.compareTo(calendar19) == 0) == calendar0.equals(calendar19));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test171");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getWeeksInWeekYear();
        java.time.Instant instant2 = calendar0.toInstant();
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.setTimeInMillis(1644572085058L);
        boolean boolean6 = calendar0.isWeekDateSupported();
        java.util.Date date7 = calendar0.getTime();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition(16);
        int int10 = parsePosition9.getErrorIndex();
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        boolean boolean15 = parsePosition9.equals((java.lang.Object) fastDateFormat13);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        boolean boolean17 = parsePosition9.equals((java.lang.Object) locale16);
        java.lang.String str18 = locale16.getDisplayScript();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder22 = builder19.clear();
        java.util.Locale locale23 = builder22.build();
        java.lang.String str24 = locale16.getDisplayVariant(locale23);
        boolean boolean25 = calendar0.after((java.lang.Object) locale23);
        int int26 = calendar0.getWeeksInWeekYear();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone31);
        java.lang.String str33 = fastDateFormat32.toString();
        java.lang.String str34 = fastDateFormat32.toString();
        java.util.TimeZone timeZone35 = fastDateFormat32.getTimeZone();
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone35, locale36);
        boolean boolean41 = calendar40.isWeekDateSupported();
        calendar40.set(7, 4, 0);
        java.util.Date date46 = calendar40.getTime();
        java.lang.String str47 = fastDateFormat29.format(calendar40);
        java.util.TimeZone timeZone48 = fastDateFormat29.getTimeZone();
        java.util.Locale locale50 = java.util.Locale.ROOT;
        boolean boolean51 = locale50.hasExtensions();
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale50);
        java.util.Set<java.lang.String> strSet54 = locale50.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 0, timeZone48, locale50);
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone56.hasSameRules(timeZone57);
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.lang.String str60 = locale59.getDisplayName();
        java.lang.String str61 = locale59.getDisplayCountry();
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone57, locale59);
        int int64 = calendar62.getActualMinimum(2);
        java.util.TimeZone timeZone65 = calendar62.getTimeZone();
        java.util.Calendar.Builder builder66 = new java.util.Calendar.Builder();
        java.util.Locale locale67 = java.util.Locale.CHINESE;
        java.lang.String str68 = locale67.getLanguage();
        boolean boolean69 = locale67.hasExtensions();
        java.lang.String str70 = locale67.getDisplayCountry();
        java.util.Calendar.Builder builder71 = builder66.setLocale(locale67);
        java.util.Calendar.Builder builder75 = builder66.setWeekDate(38, 41, 11);
        java.util.TimeZone timeZone77 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat78 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone77);
        java.lang.String str79 = fastDateFormat78.toString();
        java.lang.String str80 = fastDateFormat78.toString();
        java.util.TimeZone timeZone81 = fastDateFormat78.getTimeZone();
        java.util.Calendar.Builder builder82 = builder75.setTimeZone(timeZone81);
        boolean boolean83 = timeZone65.hasSameRules(timeZone81);
        boolean boolean84 = timeZone48.hasSameRules(timeZone81);
        java.util.Calendar calendar85 = java.util.Calendar.getInstance(timeZone81);
        calendar0.setTimeZone(timeZone81);
        boolean boolean87 = timeZone81.observesDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar62 and calendar85", (calendar62.compareTo(calendar85) == 0) == calendar62.equals(calendar85));
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test172");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5e74\u6708\u65e5");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        long long7 = calendar6.getTimeInMillis();
        calendar6.set(2022, (int) 'a', 8);
        int int13 = calendar6.getGreatestMinimum(5);
        java.lang.String str14 = fastDateFormat1.format(calendar6);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        java.text.ParsePosition parsePosition22 = new java.text.ParsePosition(16);
        int int23 = parsePosition22.getErrorIndex();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        boolean boolean26 = parsePosition22.equals((java.lang.Object) locale24);
        java.lang.String str27 = locale24.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17, locale24);
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.lang.String str30 = locale29.getLanguage();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale29.getDisplayVariant(locale31);
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.lang.String str34 = locale29.getDisplayVariant(locale33);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone17, locale33);
        java.lang.String str36 = fastDateFormat1.format(calendar35);
        java.util.Locale locale37 = fastDateFormat1.getLocale();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar20 and calendar35", (calendar20.compareTo(calendar35) == 0) == calendar20.equals(calendar35));
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test173");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        java.util.Calendar.Builder builder3 = new java.util.Calendar.Builder();
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.lang.String str5 = locale4.getLanguage();
        boolean boolean6 = locale4.hasExtensions();
        java.lang.String str7 = locale4.getDisplayCountry();
        java.util.Calendar.Builder builder8 = builder3.setLocale(locale4);
        java.util.Calendar.Builder builder12 = builder3.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale14 = new java.util.Locale("de");
        java.lang.String str15 = locale14.toLanguageTag();
        java.lang.String str16 = locale14.getCountry();
        java.util.Calendar.Builder builder17 = builder3.setLocale(locale14);
        java.util.Calendar calendar18 = builder17.build();
        calendar18.set(100, 2, 44, (int) (byte) 100, 45, (int) (short) 1);
        java.lang.String str26 = fastDateFormat2.format(calendar18);
        long long27 = calendar18.getTimeInMillis();
        int int28 = calendar18.getFirstDayOfWeek();
        java.util.TimeZone timeZone29 = calendar18.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone33);
        java.lang.String str35 = fastDateFormat34.toString();
        java.lang.String str36 = fastDateFormat34.toString();
        java.util.TimeZone timeZone37 = fastDateFormat34.getTimeZone();
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.lang.String str39 = locale38.getLanguage();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale38.getDisplayVariant(locale40);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone37, locale38);
        boolean boolean43 = calendar42.isWeekDateSupported();
        calendar42.set(7, 4, 0);
        java.util.Date date48 = calendar42.getTime();
        java.lang.String str49 = fastDateFormat31.format(calendar42);
        java.util.TimeZone timeZone50 = fastDateFormat31.getTimeZone();
        java.lang.Object obj51 = null;
        boolean boolean52 = fastDateFormat31.equals(obj51);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance();
        int int54 = calendar53.getWeeksInWeekYear();
        java.time.Instant instant55 = calendar53.toInstant();
        int int57 = calendar53.getMinimum(4);
        java.lang.String str58 = fastDateFormat31.format(calendar53);
        int int60 = calendar53.getLeastMaximum(3);
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone62 = java.util.TimeZone.getDefault();
        boolean boolean63 = timeZone61.hasSameRules(timeZone62);
        java.util.Locale locale64 = java.util.Locale.ROOT;
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(timeZone62, locale64);
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        boolean boolean69 = timeZone67.hasSameRules(timeZone68);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat70 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone68);
        timeZone68.setRawOffset(3);
        java.util.TimeZone timeZone74 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone74);
        java.lang.String str76 = fastDateFormat75.getPattern();
        java.util.TimeZone timeZone77 = fastDateFormat75.getTimeZone();
        boolean boolean78 = timeZone68.hasSameRules(timeZone77);
        boolean boolean79 = timeZone62.hasSameRules(timeZone77);
        timeZone62.setRawOffset(50);
        calendar53.setTimeZone(timeZone62);
        int int84 = timeZone62.getOffset(1644572109662L);
        timeZone62.setID("tedesco (Germania)");
        boolean boolean87 = timeZone29.hasSameRules(timeZone62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar53 and calendar65", (calendar53.compareTo(calendar65) == 0) == calendar53.equals(calendar65));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test174");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        timeZone0.setRawOffset(40);
        timeZone0.setID("francese (Francia)");
        java.lang.String str8 = timeZone0.getID();
        java.lang.String str9 = timeZone0.getID();
        timeZone0.setID("2022-2-7 9:38:29");
        java.lang.String[] strArray13 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.stream.Stream<java.lang.String> strStream16 = strList14.stream();
        boolean boolean18 = strList14.add("hi!");
        strList14.clear();
        java.util.Date date20 = new java.util.Date();
        int int21 = date20.getTimezoneOffset();
        long long22 = date20.getTime();
        int int23 = date20.getHours();
        boolean boolean24 = strList14.contains((java.lang.Object) date20);
        java.util.stream.Stream<java.lang.String> strStream25 = strList14.parallelStream();
        java.util.TimeZone timeZone27 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone27);
        java.lang.String str29 = fastDateFormat28.toString();
        java.lang.String str30 = fastDateFormat28.toString();
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition(100);
        java.lang.String str34 = parsePosition33.toString();
        java.lang.Object obj35 = fastDateFormat28.parseObject("de", parsePosition33);
        int int36 = strList14.indexOf((java.lang.Object) "de");
        java.lang.String[] strArray40 = new java.lang.String[] { "\uc624\uc804\uc2dc\ubd84\ucd08", "java.util.GregorianCalendar[time=1644572138551,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=-1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=35,SECOND=38,MILLISECOND=550,ZONE_OFFSET=-1,DST_OFFSET=0]", "tue jan 11 09:34:31 utc 2022" };
        java.lang.String[] strArray44 = new java.lang.String[] { "\uc624\uc804\uc2dc\ubd84\ucd08", "java.util.GregorianCalendar[time=1644572138551,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=-1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=35,SECOND=38,MILLISECOND=550,ZONE_OFFSET=-1,DST_OFFSET=0]", "tue jan 11 09:34:31 utc 2022" };
        java.lang.String[] strArray48 = new java.lang.String[] { "\uc624\uc804\uc2dc\ubd84\ucd08", "java.util.GregorianCalendar[time=1644572138551,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=-1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=35,SECOND=38,MILLISECOND=550,ZONE_OFFSET=-1,DST_OFFSET=0]", "tue jan 11 09:34:31 utc 2022" };
        java.lang.String[] strArray52 = new java.lang.String[] { "\uc624\uc804\uc2dc\ubd84\ucd08", "java.util.GregorianCalendar[time=1644572138551,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=-1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=35,SECOND=38,MILLISECOND=550,ZONE_OFFSET=-1,DST_OFFSET=0]", "tue jan 11 09:34:31 utc 2022" };
        java.lang.String[] strArray56 = new java.lang.String[] { "\uc624\uc804\uc2dc\ubd84\ucd08", "java.util.GregorianCalendar[time=1644572138551,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=-1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=35,SECOND=38,MILLISECOND=550,ZONE_OFFSET=-1,DST_OFFSET=0]", "tue jan 11 09:34:31 utc 2022" };
        java.lang.Comparable[][] comparableArray58 = new java.lang.Comparable[5][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][] strComparableArray59 = (java.lang.Comparable<java.lang.String>[][]) comparableArray58;
        strComparableArray59[0] = strArray40;
        strComparableArray59[1] = strArray44;
        strComparableArray59[2] = strArray48;
        strComparableArray59[3] = strArray52;
        strComparableArray59[4] = strArray56;
        java.lang.Comparable<java.lang.String>[][] strComparableArray70 = strList14.toArray(strComparableArray59);
        java.util.TimeZone timeZone72 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat73 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone72);
        java.lang.StringBuffer stringBuffer75 = null;
        java.lang.StringBuffer stringBuffer76 = fastDateFormat73.format((long) 32772, stringBuffer75);
        java.lang.StringBuffer stringBuffer78 = null;
        java.lang.StringBuffer stringBuffer79 = fastDateFormat73.format((long) 97, stringBuffer78);
        java.lang.String str80 = fastDateFormat73.getPattern();
        java.util.TimeZone timeZone81 = fastDateFormat73.getTimeZone();
        int int82 = strList14.lastIndexOf((java.lang.Object) timeZone81);
        java.util.Locale locale83 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet84 = locale83.getExtensionKeys();
        java.util.Locale locale86 = new java.util.Locale("de");
        java.util.Calendar calendar87 = java.util.Calendar.getInstance(locale86);
        java.lang.String str88 = locale83.getDisplayVariant(locale86);
        java.lang.String str89 = locale86.getDisplayName();
        java.util.Locale locale90 = locale86.stripExtensions();
        java.util.Calendar calendar91 = java.util.Calendar.getInstance(timeZone81, locale86);
        java.lang.String str92 = timeZone0.getDisplayName(locale86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar87", (calendar3.compareTo(calendar87) == 0) == calendar3.equals(calendar87));
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test175");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = fastDateFormat2.getLocale();
        java.util.TimeZone timeZone7 = fastDateFormat2.getTimeZone();
        java.util.Locale locale10 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale11 = locale10.stripExtensions();
        java.lang.String str12 = locale11.toLanguageTag();
        java.util.Locale.setDefault(locale11);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone7, locale11);
        java.util.TimeZone.setDefault(timeZone7);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance();
        int int17 = calendar16.getWeeksInWeekYear();
        java.time.Instant instant18 = calendar16.toInstant();
        boolean boolean19 = calendar16.isWeekDateSupported();
        int int20 = calendar16.getWeekYear();
        int int21 = calendar16.getWeekYear();
        calendar16.setFirstDayOfWeek(27);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone26, locale28);
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition(16);
        int int32 = parsePosition31.getErrorIndex();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet34 = locale33.getExtensionKeys();
        boolean boolean35 = parsePosition31.equals((java.lang.Object) locale33);
        java.lang.String str36 = locale33.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone26, locale33);
        timeZone26.setRawOffset(22);
        int int41 = timeZone26.getOffset(3922746524000L);
        calendar16.setTimeZone(timeZone26);
        boolean boolean43 = timeZone7.hasSameRules(timeZone26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar16", (calendar14.compareTo(calendar16) == 0) == calendar14.equals(calendar16));
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test176");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder5 = builder0.setDate(12, 13, 15);
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("zh");
        java.util.Calendar.Builder builder8 = builder0.setLocale(locale7);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale13.getDisplayName();
        java.lang.String str15 = locale13.getDisplayCountry();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone11, locale13);
        int int18 = calendar16.getActualMinimum(2);
        java.util.TimeZone timeZone19 = calendar16.getTimeZone();
        java.util.TimeZone timeZone20 = calendar16.getTimeZone();
        java.lang.String str21 = calendar16.getCalendarType();
        java.lang.String str22 = calendar16.getCalendarType();
        java.util.TimeZone timeZone23 = calendar16.getTimeZone();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone23);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int27 = calendar26.getWeeksInWeekYear();
        java.time.Instant instant28 = calendar26.toInstant();
        int int30 = calendar26.getMinimum(4);
        calendar26.setFirstDayOfWeek(13);
        calendar26.clear();
        calendar26.set((int) (byte) 100, 34, 8, 1, 4);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.Locale locale42 = java.util.Locale.PRC;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone41, locale42);
        calendar26.setTimeZone(timeZone41);
        java.util.Calendar.Builder builder45 = new java.util.Calendar.Builder();
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.lang.String str47 = locale46.getLanguage();
        boolean boolean48 = locale46.hasExtensions();
        java.lang.String str49 = locale46.getDisplayCountry();
        java.util.Calendar.Builder builder50 = builder45.setLocale(locale46);
        java.util.Locale.Category category51 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category51, locale52);
        java.util.Locale locale54 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category51, locale54);
        java.lang.String str56 = locale54.toLanguageTag();
        java.util.Calendar.Builder builder57 = builder45.setLocale(locale54);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", timeZone41, locale54);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone23, locale54);
        java.util.Calendar.Builder builder60 = builder0.setTimeZone(timeZone23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar16 and calendar24", (calendar16.compareTo(calendar24) == 0) == calendar16.equals(calendar24));
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test177");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        long long19 = calendar18.getTimeInMillis();
        java.lang.String str20 = fastDateFormat13.format(calendar18);
        java.util.Date date21 = calendar18.getTime();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale26.getDisplayName();
        java.lang.String str28 = locale26.getDisplayCountry();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone24, locale26);
        int int31 = calendar29.getActualMinimum(2);
        java.util.TimeZone timeZone32 = calendar29.getTimeZone();
        boolean boolean33 = timeZone32.observesDaylightTime();
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale35);
        java.lang.String str37 = locale35.getLanguage();
        java.lang.String str38 = locale35.getVariant();
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = locale39.getLanguage();
        boolean boolean41 = locale39.hasExtensions();
        java.lang.String str42 = locale35.getDisplayCountry(locale39);
        java.util.Locale.Category category43 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale44 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category43, locale44);
        java.util.Locale locale46 = java.util.Locale.getDefault(category43);
        boolean boolean47 = locale46.hasExtensions();
        java.lang.String[] strArray53 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        java.util.stream.Stream<java.lang.String> strStream56 = strList54.stream();
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        int int58 = strList54.lastIndexOf((java.lang.Object) locale57);
        java.lang.String str59 = locale46.getDisplayVariant(locale57);
        java.lang.String str60 = locale35.getDisplayCountry(locale46);
        java.lang.String str61 = locale35.getDisplayName();
        java.text.ParsePosition parsePosition63 = new java.text.ParsePosition(16);
        int int64 = parsePosition63.getErrorIndex();
        java.util.TimeZone timeZone66 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone66);
        java.lang.String str68 = fastDateFormat67.getPattern();
        boolean boolean69 = parsePosition63.equals((java.lang.Object) fastDateFormat67);
        java.util.Locale locale70 = java.util.Locale.FRANCE;
        boolean boolean71 = parsePosition63.equals((java.lang.Object) locale70);
        java.lang.String str72 = locale70.getDisplayScript();
        java.util.Locale.Builder builder73 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder75 = builder73.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder76 = builder73.clear();
        java.util.Locale locale77 = builder76.build();
        java.lang.String str78 = locale70.getDisplayVariant(locale77);
        java.lang.String str79 = locale35.getDisplayVariant(locale70);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat80 = org.apache.commons.lang3.time.FastDateFormat.getInstance("DE", timeZone32, locale70);
        timeZone32.setRawOffset(100);
        java.lang.String str83 = timeZone32.getID();
        boolean boolean84 = timeZone32.observesDaylightTime();
        calendar18.setTimeZone(timeZone32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar29", (calendar5.compareTo(calendar29) == 0) == calendar5.equals(calendar29));
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test178");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        calendar4.clear(0);
        calendar4.setFirstDayOfWeek(51);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone11, locale13);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition(16);
        int int17 = parsePosition16.getErrorIndex();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) locale18);
        java.lang.String str21 = locale18.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone11, locale18);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        long long28 = calendar27.getTimeInMillis();
        java.lang.String str29 = fastDateFormat22.format(calendar27);
        java.util.Date date30 = calendar27.getTime();
        calendar4.setTime(date30);
        calendar4.setFirstDayOfWeek(32770);
        java.util.TimeZone timeZone34 = calendar4.getTimeZone();
        java.time.ZoneId zoneId35 = timeZone34.toZoneId();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar14", (calendar4.compareTo(calendar14) == 0) == calendar4.equals(calendar14));
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test179");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.StringBuffer stringBuffer4 = null;
        java.lang.StringBuffer stringBuffer5 = fastDateFormat2.format((long) 32772, stringBuffer4);
        java.lang.StringBuffer stringBuffer7 = null;
        java.lang.StringBuffer stringBuffer8 = fastDateFormat2.format(1644572128302L, stringBuffer7);
        java.util.Date date15 = new java.util.Date(45, (int) (byte) 100, (int) '#', 50, 100, 36);
        date15.setMinutes((int) '4');
        java.lang.String str18 = fastDateFormat2.format(date15);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        calendar19.setMinimalDaysInFirstWeek(15);
        java.util.Date date22 = calendar19.getTime();
        calendar19.roll(0, 44);
        java.lang.String str26 = fastDateFormat2.format(calendar19);
        int int27 = calendar19.getWeekYear();
        int int28 = calendar19.getFirstDayOfWeek();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        int int32 = calendar31.getWeeksInWeekYear();
        java.time.Instant instant33 = calendar31.toInstant();
        int int35 = calendar31.getActualMinimum((int) (byte) 10);
        java.lang.String str36 = calendar31.getCalendarType();
        java.util.Date date37 = new java.util.Date();
        int int38 = date37.getTimezoneOffset();
        int int39 = date37.getMinutes();
        calendar31.setTime(date37);
        calendar31.setLenient(true);
        java.util.TimeZone timeZone43 = calendar31.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 1, timeZone43);
        calendar19.setTimeZone(timeZone43);
        int int47 = timeZone43.getOffset(1644572164551L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar31", (calendar19.compareTo(calendar31) == 0) == calendar19.equals(calendar31));
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test180");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale11 = new java.util.Locale("de");
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale11.getCountry();
        java.util.Calendar.Builder builder14 = builder0.setLocale(locale11);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay((int) 'u', 6, 0, 8);
        java.util.Calendar.Builder builder23 = builder19.setTimeOfDay((int) (byte) 100, 51, 100);
        java.util.Calendar.Builder builder27 = builder19.setTimeOfDay((int) (byte) -1, (int) (short) 10, 50);
        java.util.Calendar.Builder builder31 = builder27.setWeekDate(30, 25, (int) '4');
        java.util.Calendar.Builder builder36 = builder27.setTimeOfDay(120, (int) (short) 1, 51, 292278994);
        java.util.TimeZone timeZone38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone38);
        java.lang.String str40 = fastDateFormat39.toString();
        java.lang.String str41 = fastDateFormat39.toString();
        java.util.TimeZone timeZone42 = fastDateFormat39.getTimeZone();
        timeZone42.setRawOffset((int) (short) 100);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone42);
        java.util.Calendar.Builder builder46 = builder36.setTimeZone(timeZone42);
        java.util.Locale locale48 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale48);
        java.lang.String str50 = locale48.getLanguage();
        java.lang.String str51 = locale48.getVariant();
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(locale48);
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = locale54.getLanguage();
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str57 = locale54.getDisplayScript(locale56);
        java.util.Locale locale61 = new java.util.Locale("DEU", "java.util.GregorianCalendar[time=1644572075684,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=15,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=684,ZONE_OFFSET=0,DST_OFFSET=0]", "\u65e5\u6587");
        java.lang.String str62 = locale54.getDisplayVariant(locale61);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getInstance("4630-1-10 0:00:00", locale61);
        java.lang.String str64 = locale48.getDisplayName(locale61);
        java.util.Calendar.Builder builder65 = builder46.setLocale(locale48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar45 and calendar52", (calendar45.compareTo(calendar52) == 0) == calendar45.equals(calendar52));
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test181");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(16);
        int int2 = parsePosition1.getErrorIndex();
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        boolean boolean7 = parsePosition1.equals((java.lang.Object) fastDateFormat5);
        int int8 = parsePosition1.getIndex();
        int int9 = parsePosition1.getIndex();
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        boolean boolean13 = locale11.hasExtensions();
        java.lang.String str14 = locale11.getDisplayCountry();
        java.util.Calendar.Builder builder15 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder19 = builder10.setWeekDate((int) (short) 1, 9, 1);
        int[] intArray22 = new int[] { 14, ' ' };
        java.util.Calendar.Builder builder23 = builder19.setFields(intArray22);
        boolean boolean24 = parsePosition1.equals((java.lang.Object) builder19);
        java.util.Calendar.Builder builder28 = builder19.setTimeOfDay(32770, 50, 38);
        java.util.Calendar.Builder builder30 = builder28.setLenient(false);
        java.util.Calendar.Builder builder35 = builder28.setTimeOfDay(19, 0, 36, 34);
        java.util.TimeZone timeZone38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone38);
        java.lang.String str40 = fastDateFormat39.toString();
        java.lang.String str41 = fastDateFormat39.toString();
        java.util.TimeZone timeZone42 = fastDateFormat39.getTimeZone();
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale43.getDisplayVariant(locale45);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone42, locale43);
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone49.hasSameRules(timeZone50);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone50, locale52);
        java.lang.String str54 = locale52.getDisplayLanguage();
        java.lang.String str56 = locale52.getUnicodeLocaleType("zh");
        java.lang.String str57 = locale48.getDisplayScript(locale52);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone42, locale52);
        java.util.Calendar.Builder builder59 = builder28.setTimeZone(timeZone42);
        java.lang.String str60 = timeZone42.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar47 and calendar53", (calendar47.compareTo(calendar53) == 0) == calendar47.equals(calendar53));
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test182");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("de");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        java.lang.String str6 = languageRange1.getRange();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale10.getDisplayCountry();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale10);
        int int15 = calendar13.getActualMinimum(2);
        java.util.TimeZone timeZone16 = calendar13.getTimeZone();
        java.util.TimeZone timeZone17 = calendar13.getTimeZone();
        java.lang.String str18 = calendar13.getCalendarType();
        java.lang.String str19 = calendar13.getCalendarType();
        java.util.TimeZone timeZone20 = calendar13.getTimeZone();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone20);
        timeZone20.setRawOffset((-99));
        int int24 = timeZone20.getRawOffset();
        boolean boolean25 = languageRange1.equals((java.lang.Object) int24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar21", (calendar13.compareTo(calendar21) == 0) == calendar13.equals(calendar21));
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test183");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder11 = builder0.setLenient(false);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay(15, 0, 32770);
        java.util.Calendar.Builder builder18 = builder15.setWeekDefinition(7, 7);
        java.util.Calendar.Builder builder20 = builder15.setLenient(true);
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22);
        java.lang.String str24 = fastDateFormat23.toString();
        java.lang.String str25 = fastDateFormat23.toString();
        java.util.TimeZone timeZone26 = fastDateFormat23.getTimeZone();
        java.util.Locale locale27 = fastDateFormat23.getLocale();
        boolean boolean28 = fastDateFormat23.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone29 = fastDateFormat23.getTimeZone();
        timeZone29.setID("Chinesisch");
        java.util.Calendar.Builder builder32 = builder15.setTimeZone(timeZone29);
        int int33 = timeZone29.getRawOffset();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone35, locale37);
        int int39 = timeZone35.getRawOffset();
        java.util.TimeZone.setDefault(timeZone35);
        boolean boolean41 = timeZone29.hasSameRules(timeZone35);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet46 = locale45.getExtensionKeys();
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone42, locale45);
        java.lang.String str48 = locale45.getCountry();
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone29, locale45);
        boolean boolean50 = locale45.hasExtensions();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar38 and calendar49", (calendar38.compareTo(calendar49) == 0) == calendar38.equals(calendar49));
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test184");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        boolean boolean3 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.Object obj4 = fastDateFormat2.clone();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getTimeZone("FRA");
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale8);
        java.lang.String str10 = locale8.getLanguage();
        java.lang.String str11 = locale8.getVariant();
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = locale12.getLanguage();
        boolean boolean14 = locale12.hasExtensions();
        java.lang.String str15 = locale8.getDisplayCountry(locale12);
        java.util.Locale.Category category16 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category16, locale17);
        java.util.Locale locale19 = java.util.Locale.getDefault(category16);
        boolean boolean20 = locale19.hasExtensions();
        java.lang.String[] strArray26 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        java.util.stream.Stream<java.lang.String> strStream29 = strList27.stream();
        java.util.Locale locale30 = java.util.Locale.JAPANESE;
        int int31 = strList27.lastIndexOf((java.lang.Object) locale30);
        java.lang.String str32 = locale19.getDisplayVariant(locale30);
        java.lang.String str33 = locale8.getDisplayCountry(locale19);
        java.lang.String str34 = locale8.getDisplayName();
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition(16);
        int int37 = parsePosition36.getErrorIndex();
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone39);
        java.lang.String str41 = fastDateFormat40.getPattern();
        boolean boolean42 = parsePosition36.equals((java.lang.Object) fastDateFormat40);
        java.util.Locale locale43 = java.util.Locale.FRANCE;
        boolean boolean44 = parsePosition36.equals((java.lang.Object) locale43);
        java.lang.String str45 = locale43.getDisplayScript();
        java.util.Locale.Builder builder46 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder48 = builder46.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder49 = builder46.clear();
        java.util.Locale locale50 = builder49.build();
        java.lang.String str51 = locale43.getDisplayVariant(locale50);
        java.lang.String str52 = locale8.getDisplayVariant(locale43);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone53.hasSameRules(timeZone54);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet57 = locale56.getExtensionKeys();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone53, locale56);
        java.lang.String str59 = locale56.getCountry();
        java.lang.String str60 = locale8.getDisplayName(locale56);
        java.lang.String str61 = locale56.getDisplayLanguage();
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone6, locale56);
        boolean boolean63 = fastDateFormat2.equals((java.lang.Object) timeZone6);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar58 and calendar62", (calendar58.compareTo(calendar62) == 0) == calendar58.equals(calendar62));
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test185");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.StringBuffer stringBuffer4 = null;
        java.lang.StringBuffer stringBuffer5 = fastDateFormat2.format((long) 32772, stringBuffer4);
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getTimezoneOffset();
        long long8 = date6.getTime();
        int int9 = date6.getMinutes();
        java.lang.String str10 = fastDateFormat2.format(date6);
        java.util.TimeZone timeZone11 = fastDateFormat2.getTimeZone();
        int int13 = timeZone11.getOffset((long) 36);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        boolean boolean19 = timeZone11.hasSameRules(timeZone15);
        int int20 = timeZone15.getRawOffset();
        java.util.Calendar.Builder builder21 = new java.util.Calendar.Builder();
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        boolean boolean24 = locale22.hasExtensions();
        java.lang.String str25 = locale22.getDisplayCountry();
        java.util.Calendar.Builder builder26 = builder21.setLocale(locale22);
        java.util.Calendar.Builder builder30 = builder21.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder32 = builder21.setLenient(false);
        java.util.Calendar.Builder builder36 = builder21.setTimeOfDay(15, 0, 32770);
        java.util.Calendar.Builder builder39 = builder36.setWeekDefinition(7, 7);
        java.util.Calendar.Builder builder41 = builder36.setLenient(true);
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone43);
        java.lang.String str45 = fastDateFormat44.toString();
        java.lang.String str46 = fastDateFormat44.toString();
        java.util.TimeZone timeZone47 = fastDateFormat44.getTimeZone();
        java.util.Locale locale48 = fastDateFormat44.getLocale();
        boolean boolean49 = fastDateFormat44.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone50 = fastDateFormat44.getTimeZone();
        timeZone50.setID("Chinesisch");
        java.util.Calendar.Builder builder53 = builder36.setTimeZone(timeZone50);
        int int54 = timeZone50.getRawOffset();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone55.hasSameRules(timeZone56);
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone56, locale58);
        int int60 = timeZone56.getRawOffset();
        java.util.TimeZone.setDefault(timeZone56);
        boolean boolean62 = timeZone50.hasSameRules(timeZone56);
        int int63 = timeZone56.getRawOffset();
        int int65 = timeZone56.getOffset((long) (short) 100);
        java.util.TimeZone timeZone68 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone68);
        java.lang.String str70 = fastDateFormat69.toString();
        java.lang.String str71 = fastDateFormat69.toString();
        java.util.TimeZone timeZone72 = fastDateFormat69.getTimeZone();
        java.util.Locale locale73 = java.util.Locale.CHINESE;
        java.lang.String str74 = locale73.getLanguage();
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.lang.String str76 = locale73.getDisplayVariant(locale75);
        java.util.Calendar calendar77 = java.util.Calendar.getInstance(timeZone72, locale73);
        java.util.Locale locale78 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone80 = java.util.TimeZone.getDefault();
        boolean boolean81 = timeZone79.hasSameRules(timeZone80);
        java.util.Locale locale82 = java.util.Locale.ROOT;
        java.util.Calendar calendar83 = java.util.Calendar.getInstance(timeZone80, locale82);
        java.lang.String str84 = locale82.getDisplayLanguage();
        java.lang.String str86 = locale82.getUnicodeLocaleType("zh");
        java.lang.String str87 = locale78.getDisplayScript(locale82);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat88 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone72, locale82);
        int int89 = timeZone72.getRawOffset();
        boolean boolean90 = timeZone72.observesDaylightTime();
        boolean boolean91 = timeZone56.hasSameRules(timeZone72);
        boolean boolean92 = timeZone15.hasSameRules(timeZone72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar77", (calendar18.compareTo(calendar77) == 0) == calendar18.equals(calendar77));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test186");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7);
        timeZone7.setRawOffset(3);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        boolean boolean17 = timeZone7.hasSameRules(timeZone16);
        boolean boolean18 = timeZone1.hasSameRules(timeZone16);
        java.util.TimeZone.setDefault(timeZone16);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition(16);
        int int28 = parsePosition27.getErrorIndex();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        boolean boolean31 = parsePosition27.equals((java.lang.Object) locale29);
        java.lang.String str32 = locale29.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22, locale29);
        int int34 = timeZone22.getRawOffset();
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.lang.String str36 = locale35.getLanguage();
        boolean boolean37 = locale35.hasExtensions();
        java.lang.String str38 = locale35.getDisplayScript();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale35);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone22, locale35);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone16, locale35);
        java.lang.String[] strArray43 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.util.stream.Stream<java.lang.String> strStream46 = strList44.stream();
        boolean boolean48 = strList44.add("hi!");
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.lang.String str50 = locale49.getLanguage();
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.lang.String str52 = locale49.getDisplayVariant(locale51);
        java.util.Locale locale53 = java.util.Locale.GERMANY;
        java.lang.String str54 = locale49.getDisplayVariant(locale53);
        boolean boolean55 = strList44.contains((java.lang.Object) locale49);
        java.lang.String str56 = locale49.getVariant();
        java.lang.String str57 = locale35.getDisplayCountry(locale49);
        java.util.Set<java.lang.String> strSet58 = locale35.getUnicodeLocaleAttributes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar25", (calendar4.compareTo(calendar25) == 0) == calendar4.equals(calendar25));
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test187");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale3);
        int int7 = timeZone0.getOffset((long) 2);
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale locale11 = java.util.Locale.getDefault(category8);
        java.util.Locale locale12 = java.util.Locale.getDefault(category8);
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone0, locale12);
        java.lang.String str16 = calendar15.getCalendarType();
        java.util.Date date17 = calendar15.getTime();
        date17.setMonth(34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar15", (calendar5.compareTo(calendar15) == 0) == calendar5.equals(calendar15));
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test188");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.StringBuffer stringBuffer4 = null;
        java.lang.StringBuffer stringBuffer5 = fastDateFormat2.format((long) 32772, stringBuffer4);
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getTimezoneOffset();
        long long8 = date6.getTime();
        int int9 = date6.getMinutes();
        java.lang.String str10 = fastDateFormat2.format(date6);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone12, locale14);
        calendar17.setWeekDate(36, (int) (short) 100, (int) (short) 1);
        java.util.TimeZone timeZone22 = calendar17.getTimeZone();
        calendar17.set(37, 0, (int) (short) 100);
        calendar17.setFirstDayOfWeek(37);
        java.lang.StringBuffer stringBuffer29 = null;
        java.text.Format.Field field30 = null;
        java.text.FieldPosition fieldPosition32 = new java.text.FieldPosition(field30, 1);
        int int33 = fieldPosition32.getBeginIndex();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone35);
        java.lang.String str37 = fastDateFormat36.toString();
        java.lang.String str38 = fastDateFormat36.toString();
        java.util.TimeZone timeZone39 = fastDateFormat36.getTimeZone();
        java.util.Locale locale40 = fastDateFormat36.getLocale();
        java.util.TimeZone timeZone41 = fastDateFormat36.getTimeZone();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone41);
        java.lang.Object obj43 = timeZone41.clone();
        boolean boolean44 = fieldPosition32.equals((java.lang.Object) timeZone41);
        java.lang.StringBuffer stringBuffer45 = fastDateFormat2.format((java.lang.Object) calendar17, stringBuffer29, fieldPosition32);
        java.util.TimeZone timeZone46 = calendar17.getTimeZone();
        java.util.TimeZone timeZone48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone48);
        java.lang.String str50 = fastDateFormat49.toString();
        java.lang.String str51 = fastDateFormat49.toString();
        java.util.TimeZone timeZone52 = fastDateFormat49.getTimeZone();
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.lang.String str54 = locale53.getLanguage();
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.lang.String str56 = locale53.getDisplayVariant(locale55);
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone52, locale53);
        java.time.Instant instant58 = calendar57.toInstant();
        java.util.Locale locale60 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat61 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale60);
        java.util.TimeZone timeZone62 = fastDateFormat61.getTimeZone();
        calendar57.setTimeZone(timeZone62);
        boolean boolean64 = calendar57.isWeekDateSupported();
        calendar57.setFirstDayOfWeek(54);
        java.time.Instant instant67 = calendar57.toInstant();
        java.util.Date date68 = java.util.Date.from(instant67);
        boolean boolean69 = timeZone46.inDaylightTime(date68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar42 and calendar57", (calendar42.compareTo(calendar57) == 0) == calendar42.equals(calendar57));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test189");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int8 = calendar6.getActualMinimum(2);
        java.util.TimeZone timeZone9 = calendar6.getTimeZone();
        java.util.TimeZone timeZone10 = calendar6.getTimeZone();
        calendar6.setLenient(false);
        calendar6.set(15, 15);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17);
        java.lang.String str19 = fastDateFormat18.toString();
        java.lang.String str20 = fastDateFormat18.toString();
        java.util.TimeZone timeZone21 = fastDateFormat18.getTimeZone();
        java.util.Locale locale22 = fastDateFormat18.getLocale();
        java.util.TimeZone timeZone23 = fastDateFormat18.getTimeZone();
        int int24 = timeZone23.getRawOffset();
        timeZone23.setRawOffset(43);
        java.util.TimeZone.setDefault(timeZone23);
        boolean boolean28 = timeZone23.observesDaylightTime();
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("");
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone23, locale30);
        calendar6.setTimeZone(timeZone23);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        int int34 = calendar33.getWeeksInWeekYear();
        java.time.Instant instant35 = calendar33.toInstant();
        boolean boolean36 = calendar33.isWeekDateSupported();
        calendar33.setTimeInMillis(1644572085058L);
        boolean boolean40 = calendar33.before((java.lang.Object) "German");
        calendar33.setLenient(true);
        java.util.Locale locale43 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet44 = locale43.getExtensionKeys();
        java.util.Locale locale46 = new java.util.Locale("de");
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(locale46);
        java.lang.String str48 = locale43.getDisplayVariant(locale46);
        java.lang.String str49 = locale46.getDisplayVariant();
        boolean boolean50 = locale46.hasExtensions();
        boolean boolean51 = calendar33.before((java.lang.Object) boolean50);
        java.util.TimeZone timeZone52 = calendar33.getTimeZone();
        boolean boolean53 = timeZone23.hasSameRules(timeZone52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar31 and calendar47", (calendar31.compareTo(calendar47) == 0) == calendar31.equals(calendar47));
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test190");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        strList2.clear();
        java.util.Spliterator<java.lang.String> strSpliterator6 = strList2.spliterator();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone8);
        boolean boolean10 = fastDateFormat9.getTimeZoneOverridesCalendar();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale11);
        java.lang.StringBuffer stringBuffer13 = null;
        java.lang.StringBuffer stringBuffer14 = fastDateFormat9.format(calendar12, stringBuffer13);
        boolean boolean15 = strList2.equals((java.lang.Object) fastDateFormat9);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale16);
        java.time.Instant instant18 = calendar17.toInstant();
        calendar17.set(14, (int) (byte) 0, 52, 3, 56, 47);
        boolean boolean26 = calendar17.isWeekDateSupported();
        java.lang.String str27 = fastDateFormat9.format(calendar17);
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale28);
        java.lang.String str30 = locale28.toLanguageTag();
        java.text.Format.Field field31 = null;
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition(field31, 3);
        int int34 = fieldPosition33.getBeginIndex();
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.util.Locale locale36 = locale35.stripExtensions();
        java.lang.String str37 = locale36.getVariant();
        java.util.Set<java.lang.Character> charSet38 = locale36.getExtensionKeys();
        boolean boolean39 = fieldPosition33.equals((java.lang.Object) locale36);
        java.lang.String str40 = locale28.getDisplayCountry(locale36);
        boolean boolean41 = calendar17.before((java.lang.Object) str40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar12 and calendar29", (calendar12.compareTo(calendar29) == 0) == calendar12.equals(calendar29));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test191");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.StringBuffer stringBuffer4 = null;
        java.lang.StringBuffer stringBuffer5 = fastDateFormat2.format((long) 32772, stringBuffer4);
        java.util.TimeZone timeZone6 = fastDateFormat2.getTimeZone();
        int int7 = timeZone6.getRawOffset();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone9);
        java.lang.String str11 = fastDateFormat10.toString();
        java.lang.String str12 = fastDateFormat10.toString();
        java.util.TimeZone timeZone13 = fastDateFormat10.getTimeZone();
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone13, locale14);
        boolean boolean19 = timeZone6.hasSameRules(timeZone13);
        java.util.TimeZone.setDefault(timeZone13);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone23, locale25);
        java.text.ParsePosition parsePosition28 = new java.text.ParsePosition(16);
        int int29 = parsePosition28.getErrorIndex();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet31 = locale30.getExtensionKeys();
        boolean boolean32 = parsePosition28.equals((java.lang.Object) locale30);
        java.lang.String str33 = locale30.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone23, locale30);
        boolean boolean35 = timeZone13.hasSameRules(timeZone23);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone37.hasSameRules(timeZone38);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone38, locale40);
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition(16);
        int int44 = parsePosition43.getErrorIndex();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet46 = locale45.getExtensionKeys();
        boolean boolean47 = parsePosition43.equals((java.lang.Object) locale45);
        java.lang.String str48 = locale45.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone38, locale45);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        timeZone50.setRawOffset((-1));
        boolean boolean53 = timeZone38.hasSameRules(timeZone50);
        java.util.TimeZone timeZone54 = null;
        boolean boolean55 = timeZone50.hasSameRules(timeZone54);
        int int56 = timeZone50.getRawOffset();
        java.util.Calendar.Builder builder57 = new java.util.Calendar.Builder();
        java.util.Calendar calendar58 = builder57.build();
        int int59 = calendar58.getWeekYear();
        calendar58.setLenient(true);
        calendar58.set((int) (byte) 0, 56, 100, 2022, (int) '#');
        calendar58.setFirstDayOfWeek(44);
        calendar58.setFirstDayOfWeek((int) (byte) 100);
        java.util.TimeZone timeZone72 = calendar58.getTimeZone();
        boolean boolean73 = timeZone50.hasSameRules(timeZone72);
        boolean boolean74 = timeZone23.hasSameRules(timeZone50);
        java.util.Calendar calendar75 = java.util.Calendar.getInstance(timeZone50);
        timeZone50.setRawOffset(48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar75", (calendar18.compareTo(calendar75) == 0) == calendar18.equals(calendar75));
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test192");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone2);
        java.util.Locale locale5 = fastDateFormat4.getLocale();
        java.lang.String str6 = fastDateFormat4.toString();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition(16);
        int int10 = parsePosition9.getErrorIndex();
        java.lang.Object obj11 = fastDateFormat4.parseObject("Vereinigtes K\366nigreich", parsePosition9);
        java.util.Locale locale12 = fastDateFormat4.getLocale();
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.lang.String str14 = locale12.getISO3Country();
        java.lang.String str15 = locale12.getDisplayScript();
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone18);
        java.lang.String str20 = fastDateFormat19.toString();
        java.lang.String str21 = fastDateFormat19.toString();
        java.util.TimeZone timeZone22 = fastDateFormat19.getTimeZone();
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.lang.String str24 = locale23.getLanguage();
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.lang.String str26 = locale23.getDisplayVariant(locale25);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone22, locale23);
        java.util.Locale locale28 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        java.lang.String str34 = locale32.getDisplayLanguage();
        java.lang.String str36 = locale32.getUnicodeLocaleType("zh");
        java.lang.String str37 = locale28.getDisplayScript(locale32);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone22, locale32);
        java.lang.String str39 = locale12.getDisplayScript(locale32);
        java.util.Locale.setDefault(locale32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar27 and calendar33", (calendar27.compareTo(calendar33) == 0) == calendar27.equals(calendar33));
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test193");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        boolean boolean2 = calendar1.isWeekDateSupported();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale3.getDisplayVariant(locale5);
        boolean boolean7 = calendar1.before((java.lang.Object) str6);
        long long8 = calendar1.getTimeInMillis();
        int int9 = calendar1.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        int int11 = timeZone10.getRawOffset();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5e74\u6708\u65e5");
        int int14 = fastDateFormat13.getMaxLengthEstimate();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.Locale locale17 = java.util.Locale.PRC;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone16, locale17);
        boolean boolean19 = fastDateFormat13.equals((java.lang.Object) locale17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("11.02.1916 09:34:55", timeZone10, locale17);
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder21.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder25 = builder23.setLanguageTag("it");
        java.util.Locale.Builder builder28 = builder23.setExtension('x', "de");
        java.util.Locale.Builder builder30 = builder23.setVariant("tedesco");
        java.util.Locale.Builder builder32 = builder23.setVariant("");
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale.Builder builder34 = builder23.setLocale(locale33);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale33);
        java.util.Locale.setDefault(locale33);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone10, locale33);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance();
        boolean boolean40 = calendar39.isWeekDateSupported();
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = locale41.getLanguage();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale41.getDisplayVariant(locale43);
        boolean boolean45 = calendar39.before((java.lang.Object) str44);
        int int46 = calendar39.getFirstDayOfWeek();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone47);
        calendar39.setTimeZone(timeZone47);
        java.util.Locale locale53 = new java.util.Locale("");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08", timeZone47, locale53);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone47);
        timeZone47.setID("9:36:04 AM UTC");
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale.Category category59 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale60 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category59, locale60);
        java.lang.String str62 = locale60.getScript();
        java.lang.String str63 = locale58.getDisplayCountry(locale60);
        java.lang.String str64 = locale58.getISO3Country();
        java.lang.String str65 = locale58.getCountry();
        java.util.Locale.setDefault(locale58);
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(timeZone47, locale58);
        java.util.Date date71 = new java.util.Date(11, 11, 3);
        date71.setSeconds((int) (byte) -1);
        long long74 = date71.getTime();
        date71.setYear((int) (short) 10);
        calendar67.setTime(date71);
        int int78 = calendar37.compareTo(calendar67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar35", (calendar1.compareTo(calendar35) == 0) == calendar1.equals(calendar35));
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test194");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, 1);
        int int3 = fieldPosition2.getBeginIndex();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.lang.String str7 = fastDateFormat6.toString();
        java.lang.String str8 = fastDateFormat6.toString();
        java.util.TimeZone timeZone9 = fastDateFormat6.getTimeZone();
        java.util.Locale locale10 = fastDateFormat6.getLocale();
        java.util.TimeZone timeZone11 = fastDateFormat6.getTimeZone();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone11);
        java.lang.Object obj13 = timeZone11.clone();
        boolean boolean14 = fieldPosition2.equals((java.lang.Object) timeZone11);
        int int15 = fieldPosition2.getBeginIndex();
        int int16 = fieldPosition2.getBeginIndex();
        int int17 = fieldPosition2.getField();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.lang.String str23 = locale21.getDisplayCountry();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone19, locale21);
        int int26 = calendar24.getActualMinimum(2);
        java.util.TimeZone timeZone27 = calendar24.getTimeZone();
        java.util.TimeZone timeZone28 = calendar24.getTimeZone();
        java.lang.String str29 = calendar24.getCalendarType();
        java.lang.String str30 = calendar24.getCalendarType();
        java.util.TimeZone timeZone31 = calendar24.getTimeZone();
        timeZone31.setID("deu");
        boolean boolean34 = timeZone31.observesDaylightTime();
        boolean boolean35 = fieldPosition2.equals((java.lang.Object) boolean34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar12 and calendar24", (calendar12.compareTo(calendar24) == 0) == calendar12.equals(calendar24));
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test195");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getTimezoneOffset();
        long long6 = date4.getTime();
        int int7 = date4.getMonth();
        date4.setSeconds(7);
        date4.setSeconds(1);
        java.util.Date date12 = new java.util.Date();
        int int13 = date12.getTimezoneOffset();
        long long14 = date12.getTime();
        int int15 = date12.getMonth();
        date12.setSeconds(7);
        date12.setSeconds(1);
        boolean boolean20 = date4.before(date12);
        long long21 = date4.getTime();
        java.text.AttributedCharacterIterator attributedCharacterIterator22 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) date4);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        calendar27.clear(0);
        calendar27.setFirstDayOfWeek(51);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34, locale36);
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition(16);
        int int40 = parsePosition39.getErrorIndex();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        boolean boolean43 = parsePosition39.equals((java.lang.Object) locale41);
        java.lang.String str44 = locale41.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone34, locale41);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone47, locale49);
        long long51 = calendar50.getTimeInMillis();
        java.lang.String str52 = fastDateFormat45.format(calendar50);
        java.util.Date date53 = calendar50.getTime();
        calendar27.setTime(date53);
        int int56 = calendar27.getLeastMaximum(0);
        java.lang.String str57 = fastDateFormat2.format(calendar27);
        java.util.Locale locale58 = fastDateFormat2.getLocale();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar27 and calendar37", (calendar27.compareTo(calendar37) == 0) == calendar27.equals(calendar37));
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test196");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale11 = new java.util.Locale("de");
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale11.getCountry();
        java.util.Calendar.Builder builder14 = builder0.setLocale(locale11);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay((int) 'u', 6, 0, 8);
        java.util.Calendar.Builder builder21 = builder14.setLenient(false);
        java.util.Calendar.Builder builder25 = builder21.setTimeOfDay(26, (int) (short) 0, 54);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale29.getDisplayName();
        java.lang.String str31 = locale29.getDisplayCountry();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone27, locale29);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone27);
        java.util.Calendar.Builder builder34 = builder21.setTimeZone(timeZone27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar32 and calendar33", (calendar32.compareTo(calendar33) == 0) == calendar32.equals(calendar33));
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test197");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayVariant(locale9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale7);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.lang.String str18 = locale16.getDisplayLanguage();
        java.lang.String str20 = locale16.getUnicodeLocaleType("zh");
        java.lang.String str21 = locale12.getDisplayScript(locale16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone6, locale16);
        java.lang.String str24 = fastDateFormat22.format(1644572321668L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar17", (calendar11.compareTo(calendar17) == 0) == calendar11.equals(calendar17));
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test198");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        java.lang.String str3 = locale1.getLanguage();
        java.lang.String str4 = locale1.getVariant();
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        boolean boolean7 = locale5.hasExtensions();
        java.lang.String str8 = locale1.getDisplayCountry(locale5);
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category9, locale10);
        java.util.Locale locale12 = java.util.Locale.getDefault(category9);
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String[] strArray19 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.stream.Stream<java.lang.String> strStream22 = strList20.stream();
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        int int24 = strList20.lastIndexOf((java.lang.Object) locale23);
        java.lang.String str25 = locale12.getDisplayVariant(locale23);
        java.lang.String str26 = locale1.getDisplayCountry(locale12);
        java.lang.String str27 = locale1.getDisplayName();
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition(16);
        int int30 = parsePosition29.getErrorIndex();
        java.util.TimeZone timeZone32 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone32);
        java.lang.String str34 = fastDateFormat33.getPattern();
        boolean boolean35 = parsePosition29.equals((java.lang.Object) fastDateFormat33);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        boolean boolean37 = parsePosition29.equals((java.lang.Object) locale36);
        java.lang.String str38 = locale36.getDisplayScript();
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder39.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder42 = builder39.clear();
        java.util.Locale locale43 = builder42.build();
        java.lang.String str44 = locale36.getDisplayVariant(locale43);
        java.lang.String str45 = locale1.getDisplayVariant(locale36);
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(locale1);
        int int48 = calendar46.getLeastMaximum(0);
        int int50 = calendar46.getLeastMaximum(9);
        int int51 = calendar46.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone52.hasSameRules(timeZone53);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.lang.String str56 = locale55.getDisplayName();
        java.lang.String str57 = locale55.getDisplayCountry();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone53, locale55);
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone53);
        calendar46.setTimeZone(timeZone53);
        java.util.Calendar calendar61 = java.util.Calendar.getInstance();
        int int62 = calendar61.getWeeksInWeekYear();
        java.time.Instant instant63 = calendar61.toInstant();
        boolean boolean64 = calendar61.isWeekDateSupported();
        calendar61.setTimeInMillis(1644572085058L);
        boolean boolean68 = calendar61.before((java.lang.Object) "German");
        calendar61.setLenient(true);
        java.util.Locale locale71 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet72 = locale71.getExtensionKeys();
        java.util.Locale locale74 = new java.util.Locale("de");
        java.util.Calendar calendar75 = java.util.Calendar.getInstance(locale74);
        java.lang.String str76 = locale71.getDisplayVariant(locale74);
        java.lang.String str77 = locale74.getDisplayVariant();
        boolean boolean78 = locale74.hasExtensions();
        boolean boolean79 = calendar61.before((java.lang.Object) boolean78);
        java.util.TimeZone timeZone80 = calendar61.getTimeZone();
        boolean boolean81 = timeZone53.hasSameRules(timeZone80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar46 and calendar58", (calendar46.compareTo(calendar58) == 0) == calendar46.equals(calendar58));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test199");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int8 = calendar6.getActualMinimum(2);
        java.util.TimeZone timeZone9 = calendar6.getTimeZone();
        java.util.TimeZone timeZone10 = calendar6.getTimeZone();
        java.lang.String str11 = calendar6.getCalendarType();
        java.lang.String str12 = calendar6.getCalendarType();
        java.util.TimeZone timeZone13 = calendar6.getTimeZone();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone13);
        timeZone13.setRawOffset((-99));
        int int17 = timeZone13.getRawOffset();
        java.util.Date date18 = new java.util.Date();
        int int19 = date18.getTimezoneOffset();
        long long20 = date18.getTime();
        date18.setDate((int) (byte) 10);
        int int23 = date18.getMonth();
        date18.setTime(1644485736044L);
        boolean boolean26 = timeZone13.inDaylightTime(date18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar14", (calendar6.compareTo(calendar14) == 0) == calendar6.equals(calendar14));
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test200");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        timeZone1.setRawOffset(40);
        boolean boolean7 = timeZone1.observesDaylightTime();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone1);
        calendar9.setTimeInMillis(1644572214795L);
        calendar9.roll(15, 0);
        calendar9.set(32768, (int) (short) 0, (int) (short) 1);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getTimeZone("\uc911\uad6d\uc5b4");
        java.lang.String str21 = timeZone20.getID();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone23);
        java.lang.StringBuffer stringBuffer26 = null;
        java.lang.StringBuffer stringBuffer27 = fastDateFormat24.format((long) 32772, stringBuffer26);
        java.util.Date date28 = new java.util.Date();
        int int29 = date28.getTimezoneOffset();
        long long30 = date28.getTime();
        int int31 = date28.getMinutes();
        java.lang.String str32 = fastDateFormat24.format(date28);
        java.util.TimeZone timeZone33 = fastDateFormat24.getTimeZone();
        int int35 = timeZone33.getOffset((long) 36);
        boolean boolean36 = timeZone20.hasSameRules(timeZone33);
        java.util.TimeZone.setDefault(timeZone33);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance();
        calendar38.set(12, 10);
        java.util.Calendar.Builder builder42 = new java.util.Calendar.Builder();
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.lang.String str44 = locale43.getLanguage();
        boolean boolean45 = locale43.hasExtensions();
        java.lang.String str46 = locale43.getDisplayCountry();
        java.util.Calendar.Builder builder47 = builder42.setLocale(locale43);
        java.util.Date date49 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder50 = builder47.setInstant(date49);
        boolean boolean51 = calendar38.before((java.lang.Object) date49);
        int int53 = calendar38.getMinimum((int) (short) 10);
        java.util.TimeZone timeZone55 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone55);
        java.lang.String str57 = fastDateFormat56.toString();
        java.lang.String str58 = fastDateFormat56.toString();
        java.util.TimeZone timeZone59 = fastDateFormat56.getTimeZone();
        timeZone59.setRawOffset((int) (short) 100);
        int int62 = timeZone59.getRawOffset();
        java.util.TimeZone.setDefault(timeZone59);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone59);
        calendar38.setTimeZone(timeZone59);
        boolean boolean66 = timeZone33.hasSameRules(timeZone59);
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(timeZone59);
        int int68 = calendar9.compareTo(calendar67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar64", (calendar4.compareTo(calendar64) == 0) == calendar4.equals(calendar64));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test201");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayVariant(locale9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale7);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.lang.String str18 = locale16.getDisplayLanguage();
        java.lang.String str20 = locale16.getUnicodeLocaleType("zh");
        java.lang.String str21 = locale12.getDisplayScript(locale16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone6, locale16);
        int int23 = timeZone6.getRawOffset();
        boolean boolean24 = timeZone6.observesDaylightTime();
        java.lang.String str25 = timeZone6.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar17", (calendar11.compareTo(calendar17) == 0) == calendar11.equals(calendar17));
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test202");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        boolean boolean3 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.Object obj4 = fastDateFormat2.clone();
        java.lang.Object obj5 = fastDateFormat2.clone();
        java.util.TimeZone timeZone7 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone7);
        java.lang.String str9 = fastDateFormat8.toString();
        java.lang.String str10 = fastDateFormat8.toString();
        java.util.TimeZone timeZone11 = fastDateFormat8.getTimeZone();
        java.util.Locale locale12 = fastDateFormat8.getLocale();
        java.util.TimeZone timeZone13 = fastDateFormat8.getTimeZone();
        java.lang.String str15 = fastDateFormat8.format((long) 9);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale19.getDisplayName();
        java.lang.String str21 = locale19.getDisplayCountry();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone17, locale19);
        int int24 = calendar22.getActualMinimum(2);
        int int25 = calendar22.getWeeksInWeekYear();
        java.util.Calendar.Builder builder26 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.lang.String str32 = locale30.getDisplayCountry();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone28, locale30);
        int int35 = calendar33.getActualMinimum(2);
        java.util.TimeZone timeZone36 = calendar33.getTimeZone();
        java.util.TimeZone timeZone37 = calendar33.getTimeZone();
        java.util.Calendar.Builder builder38 = builder26.setTimeZone(timeZone37);
        calendar22.setTimeZone(timeZone37);
        java.util.TimeZone.setDefault(timeZone37);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone37);
        long long42 = calendar41.getTimeInMillis();
        java.lang.String str43 = fastDateFormat8.format(calendar41);
        java.lang.String str44 = fastDateFormat2.format(calendar41);
        boolean boolean46 = fastDateFormat2.equals((java.lang.Object) "\u97d3\u56fd\u8a9e");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar22 and calendar41", (calendar22.compareTo(calendar41) == 0) == calendar22.equals(calendar41));
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test203");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] { languageRange7 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone12, locale14);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale18.getDisplayLanguage(locale19);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale25);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone31);
        java.util.Locale locale34 = fastDateFormat33.getLocale();
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.lang.String str41 = locale36.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone48);
        java.util.Locale locale51 = fastDateFormat50.getLocale();
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone54.hasSameRules(timeZone55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone55);
        java.util.Locale locale58 = fastDateFormat57.getLocale();
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale60 = java.util.Locale.UK;
        java.util.Locale[] localeArray61 = new java.util.Locale[] { locale14, locale18, locale22, locale25, locale27, locale28, locale34, locale35, locale40, locale42, locale43, locale44, locale45, locale51, locale52, locale58, locale59, locale60 };
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.Locale locale64 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList62);
        java.lang.String str65 = locale1.getDisplayName(locale64);
        java.lang.String[] strArray67 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        java.util.stream.Stream<java.lang.String> strStream70 = strList68.stream();
        strList68.clear();
        boolean boolean72 = strList68.isEmpty();
        boolean boolean73 = strList68.isEmpty();
        java.util.ListIterator<java.lang.String> strItor74 = strList68.listIterator();
        java.util.Locale locale75 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone77 = java.util.TimeZone.getDefault();
        boolean boolean78 = timeZone76.hasSameRules(timeZone77);
        java.util.Locale locale79 = java.util.Locale.ROOT;
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(timeZone77, locale79);
        java.lang.String str81 = locale79.getDisplayLanguage();
        java.lang.String str83 = locale79.getUnicodeLocaleType("zh");
        java.lang.String str84 = locale75.getDisplayScript(locale79);
        int int85 = strList68.indexOf((java.lang.Object) locale75);
        java.lang.String str86 = locale75.getCountry();
        java.lang.String str87 = locale64.getDisplayVariant(locale75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar80", (calendar17.compareTo(calendar80) == 0) == calendar17.equals(calendar80));
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test204");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset(1644572072169L);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone6);
        java.lang.String str8 = fastDateFormat7.toString();
        java.lang.String str9 = fastDateFormat7.toString();
        java.util.TimeZone timeZone10 = fastDateFormat7.getTimeZone();
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale11.getDisplayVariant(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone10, locale11);
        boolean boolean16 = calendar15.isWeekDateSupported();
        calendar15.set(7, 4, 0);
        java.util.Date date21 = calendar15.getTime();
        java.lang.String str22 = fastDateFormat4.format(calendar15);
        java.util.TimeZone timeZone23 = fastDateFormat4.getTimeZone();
        java.lang.Object obj24 = null;
        boolean boolean25 = fastDateFormat4.equals(obj24);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int27 = calendar26.getWeeksInWeekYear();
        java.time.Instant instant28 = calendar26.toInstant();
        int int30 = calendar26.getMinimum(4);
        java.lang.String str31 = fastDateFormat4.format(calendar26);
        int int33 = calendar26.getLeastMaximum(3);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.Locale locale37 = java.util.Locale.ROOT;
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone35, locale37);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone41);
        timeZone41.setRawOffset(3);
        java.util.TimeZone timeZone47 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone47);
        java.lang.String str49 = fastDateFormat48.getPattern();
        java.util.TimeZone timeZone50 = fastDateFormat48.getTimeZone();
        boolean boolean51 = timeZone41.hasSameRules(timeZone50);
        boolean boolean52 = timeZone35.hasSameRules(timeZone50);
        timeZone35.setRawOffset(50);
        calendar26.setTimeZone(timeZone35);
        boolean boolean56 = timeZone0.hasSameRules(timeZone35);
        java.util.Locale locale57 = java.util.Locale.UK;
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.lang.String str59 = locale57.getDisplayCountry(locale58);
        java.lang.String str60 = locale57.getISO3Language();
        java.lang.String str62 = locale57.getExtension('x');
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone0, locale57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar38", (calendar26.compareTo(calendar38) == 0) == calendar26.equals(calendar38));
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test205");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category6, locale9);
        java.lang.String str11 = locale9.toLanguageTag();
        java.util.Calendar.Builder builder12 = builder0.setLocale(locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        java.text.ParsePosition parsePosition20 = new java.text.ParsePosition(16);
        int int21 = parsePosition20.getErrorIndex();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        boolean boolean24 = parsePosition20.equals((java.lang.Object) locale22);
        java.lang.String str25 = locale22.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15, locale22);
        int int27 = timeZone15.getRawOffset();
        java.util.Calendar.Builder builder28 = builder12.setTimeZone(timeZone15);
        java.util.Calendar calendar29 = builder12.build();
        java.util.Calendar.Builder builder33 = builder12.setTimeOfDay(0, 59, 58);
        java.util.Calendar.Builder builder35 = builder33.setLenient(false);
        java.util.Calendar.Builder builder39 = builder35.setWeekDate(47, 0, (int) 'a');
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        boolean boolean42 = calendar41.isWeekDateSupported();
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale43.getDisplayVariant(locale45);
        boolean boolean47 = calendar41.before((java.lang.Object) str46);
        int int48 = calendar41.getFirstDayOfWeek();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone49.hasSameRules(timeZone50);
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone49);
        calendar41.setTimeZone(timeZone49);
        java.util.Locale locale55 = new java.util.Locale("");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08", timeZone49, locale55);
        java.util.Calendar.Builder builder57 = builder39.setTimeZone(timeZone49);
        java.util.TimeZone.setDefault(timeZone49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar41", (calendar18.compareTo(calendar41) == 0) == calendar18.equals(calendar41));
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test206");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str2 = locale1.getDisplayName();
        boolean boolean3 = fastDateFormat0.equals((java.lang.Object) str2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getDisplayName();
        java.lang.String str9 = locale7.getDisplayCountry();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone5, locale7);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone5);
        java.lang.String str12 = fastDateFormat0.format((java.lang.Object) calendar11);
        java.lang.Class<?> wildcardClass13 = fastDateFormat0.getClass();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar11", (calendar10.compareTo(calendar11) == 0) == calendar10.equals(calendar11));
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test207");
        java.lang.String[] strArray15 = new java.lang.String[] { "Vereinigtes K\366nigreich", "tedesco (Germania)", "Jan 10, 4630 12:00:00 AM", "Chinese", "", "Tue Jan 11 09:34:31 UTC 2022", "", "Greenwich Mean Time", "Coordinated Universal Time", "", "Greenwich Mean Time", "h:mm:ss a z", "", "coreano", "Greenwich Mean Time" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.stream.Stream<java.lang.String> strStream22 = strList20.stream();
        java.util.ListIterator<java.lang.String> strItor23 = strList20.listIterator();
        int int24 = strList16.lastIndexOf((java.lang.Object) strItor23);
        boolean boolean26 = strList16.add("07-Feb-1970 00:00:00");
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.lang.String str32 = locale30.getDisplayCountry();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone28, locale30);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone28);
        int int35 = strList16.indexOf((java.lang.Object) calendar34);
        boolean boolean37 = strList16.add("java.text.ParsePosition[index=97,errorIndex=0]");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar33 and calendar34", (calendar33.compareTo(calendar34) == 0) == calendar33.equals(calendar34));
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test208");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("FastDateFormat[h:mm:ss a z]");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone3);
        java.lang.StringBuffer stringBuffer6 = null;
        java.lang.StringBuffer stringBuffer7 = fastDateFormat4.format((long) 32772, stringBuffer6);
        java.util.TimeZone timeZone8 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone9 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone10 = fastDateFormat4.getTimeZone();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getLanguage();
        boolean boolean13 = locale11.hasExtensions();
        java.lang.String str14 = locale11.getDisplayScript();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone10, locale11);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone1, locale11);
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleKeys();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone1, locale17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar16", (calendar15.compareTo(calendar16) == 0) == calendar15.equals(calendar16));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test209");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        boolean boolean2 = calendar1.isWeekDateSupported();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale3.getDisplayVariant(locale5);
        boolean boolean7 = calendar1.before((java.lang.Object) str6);
        int int8 = calendar1.getFirstDayOfWeek();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone9);
        calendar1.setTimeZone(timeZone9);
        java.util.Locale locale15 = new java.util.Locale("");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08", timeZone9, locale15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone9);
        timeZone9.setRawOffset(47);
        java.util.Locale locale22 = new java.util.Locale("Deutsch");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u610f\u5927\u5229\u6587", locale22);
        java.lang.String str24 = locale22.getVariant();
        java.util.Locale.setDefault(locale22);
        java.util.Set<java.lang.String> strSet26 = locale22.getUnicodeLocaleKeys();
        java.lang.String str27 = locale22.toLanguageTag();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone9, locale22);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getTimeZone("4-mar-1910 1.00.00");
        boolean boolean31 = timeZone9.hasSameRules(timeZone30);
        java.lang.Object obj32 = timeZone30.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar28", (calendar1.compareTo(calendar28) == 0) == calendar1.equals(calendar28));
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test210");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        calendar0.setLenient(true);
        java.text.FieldPosition fieldPosition5 = new java.text.FieldPosition(2022);
        int int6 = fieldPosition5.getField();
        java.text.Format.Field field7 = fieldPosition5.getFieldAttribute();
        boolean boolean8 = calendar0.after((java.lang.Object) fieldPosition5);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone12, locale14);
        java.text.ParsePosition parsePosition19 = new java.text.ParsePosition(16);
        int int20 = parsePosition19.getErrorIndex();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        boolean boolean25 = parsePosition19.equals((java.lang.Object) fastDateFormat23);
        java.util.Locale locale26 = java.util.Locale.FRANCE;
        boolean boolean27 = parsePosition19.equals((java.lang.Object) locale26);
        java.lang.String str28 = locale14.getDisplayCountry(locale26);
        java.util.Locale.Category category29 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale30 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category29, locale30);
        java.util.Locale locale32 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category29, locale32);
        java.lang.String str34 = locale32.getVariant();
        java.lang.String str35 = locale32.toLanguageTag();
        java.lang.String str36 = locale26.getDisplayName(locale32);
        java.lang.String str37 = locale32.getDisplayScript();
        java.lang.String str38 = locale32.getLanguage();
        java.util.Map<java.lang.String, java.lang.Integer> strMap39 = calendar0.getDisplayNames((int) (byte) 10, (int) (byte) 1, locale32);
        java.util.Locale locale41 = new java.util.Locale("de");
        java.lang.String str42 = locale41.toLanguageTag();
        java.lang.String[] strArray44 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        java.util.stream.Stream<java.lang.String> strStream47 = strList45.stream();
        boolean boolean49 = strList45.add("hi!");
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = locale50.getLanguage();
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str53 = locale50.getDisplayVariant(locale52);
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.lang.String str55 = locale50.getDisplayVariant(locale54);
        boolean boolean56 = strList45.contains((java.lang.Object) locale50);
        java.lang.String str57 = locale41.getDisplayScript(locale50);
        java.util.Set<java.lang.Character> charSet58 = locale41.getExtensionKeys();
        java.util.Locale locale62 = new java.util.Locale("java.text.FieldPosition[field=1,attribute=null,beginIndex=0,endIndex=0]", "\u4e0a\u5348", "h:mm:ss a z");
        java.util.Locale locale63 = java.util.Locale.PRC;
        java.lang.String str64 = locale63.getDisplayLanguage();
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone65.hasSameRules(timeZone66);
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.lang.String str69 = locale68.getDisplayName();
        java.lang.String str70 = locale68.getDisplayCountry();
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone66, locale68);
        java.util.Locale locale72 = java.util.Locale.CHINESE;
        java.util.Locale locale73 = locale72.stripExtensions();
        java.lang.String str74 = locale72.getVariant();
        java.lang.String str75 = locale68.getDisplayScript(locale72);
        java.util.Set<java.lang.String> strSet76 = locale68.getUnicodeLocaleKeys();
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.util.Locale.Category category78 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale79 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category78, locale79);
        java.lang.String str81 = locale79.getScript();
        java.lang.String str82 = locale77.getDisplayCountry(locale79);
        java.lang.String str83 = locale68.getDisplayCountry(locale79);
        java.lang.String str84 = locale63.getDisplayCountry(locale79);
        java.lang.String str85 = locale62.getDisplayScript(locale63);
        java.lang.String str86 = locale41.getDisplayScript(locale62);
        java.lang.String str87 = locale32.getDisplayCountry(locale41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar17", (calendar0.compareTo(calendar17) == 0) == calendar0.equals(calendar17));
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test211");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.lang.String str3 = locale1.getVariant();
        java.lang.String str4 = locale1.getScript();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u30c9\u30a4\u30c4\u8a9e", locale1);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getDisplayName();
        boolean boolean10 = fastDateFormat7.equals((java.lang.Object) str9);
        int int11 = fastDateFormat7.getMaxLengthEstimate();
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition(16);
        int int15 = parsePosition14.getErrorIndex();
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17);
        java.lang.String str19 = fastDateFormat18.getPattern();
        boolean boolean20 = parsePosition14.equals((java.lang.Object) fastDateFormat18);
        int int21 = parsePosition14.getErrorIndex();
        java.lang.Object obj22 = fastDateFormat7.parseObject("ko", parsePosition14);
        java.lang.Object obj23 = fastDateFormat5.parseObject("7-feb-2022 9.35.44", parsePosition14);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone27 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone27);
        java.lang.String str29 = fastDateFormat28.toString();
        java.lang.String str30 = fastDateFormat28.toString();
        java.util.TimeZone timeZone31 = fastDateFormat28.getTimeZone();
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = locale32.getLanguage();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale32.getDisplayVariant(locale34);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone31, locale32);
        boolean boolean37 = calendar36.isWeekDateSupported();
        calendar36.set(7, 4, 0);
        java.util.Date date42 = calendar36.getTime();
        java.lang.String str43 = fastDateFormat25.format(calendar36);
        java.util.TimeZone timeZone44 = fastDateFormat25.getTimeZone();
        java.lang.Object obj45 = null;
        boolean boolean46 = fastDateFormat25.equals(obj45);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance();
        int int48 = calendar47.getWeeksInWeekYear();
        java.time.Instant instant49 = calendar47.toInstant();
        int int51 = calendar47.getMinimum(4);
        java.lang.String str52 = fastDateFormat25.format(calendar47);
        int int54 = calendar47.getLeastMaximum(3);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone55.hasSameRules(timeZone56);
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone56, locale58);
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone62 = java.util.TimeZone.getDefault();
        boolean boolean63 = timeZone61.hasSameRules(timeZone62);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone62);
        timeZone62.setRawOffset(3);
        java.util.TimeZone timeZone68 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone68);
        java.lang.String str70 = fastDateFormat69.getPattern();
        java.util.TimeZone timeZone71 = fastDateFormat69.getTimeZone();
        boolean boolean72 = timeZone62.hasSameRules(timeZone71);
        boolean boolean73 = timeZone56.hasSameRules(timeZone71);
        timeZone56.setRawOffset(50);
        calendar47.setTimeZone(timeZone56);
        int int78 = timeZone56.getOffset(1644572109662L);
        timeZone56.setID("tedesco (Germania)");
        boolean boolean81 = parsePosition14.equals((java.lang.Object) timeZone56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar47 and calendar59", (calendar47.compareTo(calendar59) == 0) == calendar47.equals(calendar59));
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test212");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone3);
        java.lang.String str5 = fastDateFormat4.toString();
        java.lang.String str6 = fastDateFormat4.toString();
        java.util.TimeZone timeZone7 = fastDateFormat4.getTimeZone();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone7, locale8);
        boolean boolean13 = calendar12.isWeekDateSupported();
        calendar12.set(7, 4, 0);
        java.util.Date date18 = calendar12.getTime();
        java.lang.String str19 = fastDateFormat1.format(calendar12);
        java.util.TimeZone timeZone20 = fastDateFormat1.getTimeZone();
        java.lang.Object obj21 = null;
        boolean boolean22 = fastDateFormat1.equals(obj21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        int int24 = calendar23.getWeeksInWeekYear();
        java.time.Instant instant25 = calendar23.toInstant();
        int int27 = calendar23.getMinimum(4);
        java.lang.String str28 = fastDateFormat1.format(calendar23);
        int int30 = calendar23.getLeastMaximum(3);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone32, locale34);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone37.hasSameRules(timeZone38);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone38);
        timeZone38.setRawOffset(3);
        java.util.TimeZone timeZone44 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone44);
        java.lang.String str46 = fastDateFormat45.getPattern();
        java.util.TimeZone timeZone47 = fastDateFormat45.getTimeZone();
        boolean boolean48 = timeZone38.hasSameRules(timeZone47);
        boolean boolean49 = timeZone32.hasSameRules(timeZone47);
        timeZone32.setRawOffset(50);
        calendar23.setTimeZone(timeZone32);
        java.lang.String str53 = timeZone32.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar23 and calendar35", (calendar23.compareTo(calendar35) == 0) == calendar23.equals(calendar35));
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test213");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        calendar6.set(31, (int) (byte) 100, (int) (byte) 10, (int) (short) 100, 9, 8);
        java.util.Date date17 = new java.util.Date((-1), 32772, (int) (short) 10);
        java.lang.String str18 = date17.toLocaleString();
        calendar6.setTime(date17);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone21, locale23);
        calendar6.setTimeZone(timeZone21);
        calendar6.add(9, 1970);
        int int29 = calendar6.getFirstDayOfWeek();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = locale33.getDisplayCountry();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone31, locale33);
        int int38 = calendar36.getActualMinimum(2);
        java.util.TimeZone timeZone39 = calendar36.getTimeZone();
        java.util.TimeZone timeZone40 = calendar36.getTimeZone();
        java.lang.String str41 = calendar36.getCalendarType();
        java.lang.String str42 = calendar36.getCalendarType();
        java.util.TimeZone timeZone43 = calendar36.getTimeZone();
        int int44 = timeZone43.getRawOffset();
        calendar6.setTimeZone(timeZone43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar24 and calendar36", (calendar24.compareTo(calendar36) == 0) == calendar24.equals(calendar36));
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test214");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category6, locale9);
        java.lang.String str11 = locale9.toLanguageTag();
        java.util.Calendar.Builder builder12 = builder0.setLocale(locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        java.text.ParsePosition parsePosition20 = new java.text.ParsePosition(16);
        int int21 = parsePosition20.getErrorIndex();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        boolean boolean24 = parsePosition20.equals((java.lang.Object) locale22);
        java.lang.String str25 = locale22.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15, locale22);
        int int27 = timeZone15.getRawOffset();
        java.util.Calendar.Builder builder28 = builder12.setTimeZone(timeZone15);
        java.util.Calendar calendar29 = builder12.build();
        java.util.Calendar.Builder builder33 = builder12.setTimeOfDay(0, 59, 58);
        java.util.Calendar.Builder builder35 = builder33.setLenient(false);
        java.util.Calendar.Builder builder39 = builder35.setWeekDate(47, 0, (int) 'a');
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        boolean boolean42 = calendar41.isWeekDateSupported();
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale43.getDisplayVariant(locale45);
        boolean boolean47 = calendar41.before((java.lang.Object) str46);
        int int48 = calendar41.getFirstDayOfWeek();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone49.hasSameRules(timeZone50);
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone49);
        calendar41.setTimeZone(timeZone49);
        java.util.Locale locale55 = new java.util.Locale("");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08", timeZone49, locale55);
        java.util.Calendar.Builder builder57 = builder39.setTimeZone(timeZone49);
        timeZone49.setRawOffset(19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar41", (calendar18.compareTo(calendar41) == 0) == calendar18.equals(calendar41));
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test215");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int8 = calendar6.getActualMinimum(2);
        java.util.TimeZone timeZone9 = calendar6.getTimeZone();
        int int10 = calendar6.getWeeksInWeekYear();
        calendar6.setLenient(false);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone14 = fastDateFormat13.getTimeZone();
        int int16 = timeZone14.getOffset(1644572101904L);
        java.lang.String str17 = timeZone14.getID();
        timeZone14.setID("eng");
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        boolean boolean24 = locale22.hasExtensions();
        java.lang.String str25 = locale22.getDisplayScript();
        java.lang.String str26 = locale22.getDisplayScript();
        java.util.Locale.Category category27 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category27, locale28);
        java.util.Locale locale30 = java.util.Locale.getDefault(category27);
        java.lang.String str31 = locale22.getDisplayLanguage(locale30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 1, locale22);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale22);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale22);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone14, locale22);
        calendar6.setTimeZone(timeZone14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar33 and calendar35", (calendar33.compareTo(calendar35) == 0) == calendar33.equals(calendar35));
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test216");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("it");
        java.util.Locale.Builder builder7 = builder2.setExtension('x', "de");
        java.util.Locale.Builder builder9 = builder2.setLanguage("fra");
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.lang.String str14 = fastDateFormat13.toString();
        java.lang.String str15 = fastDateFormat13.toString();
        java.util.TimeZone timeZone16 = fastDateFormat13.getTimeZone();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale17.getDisplayVariant(locale19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone16, locale17);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        java.lang.String str28 = locale26.getDisplayLanguage();
        java.lang.String str30 = locale26.getUnicodeLocaleType("zh");
        java.lang.String str31 = locale22.getDisplayScript(locale26);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone16, locale26);
        java.util.Set<java.lang.Character> charSet33 = locale26.getExtensionKeys();
        java.util.Locale.Builder builder34 = builder2.setLocale(locale26);
        java.util.Locale.Builder builder36 = builder2.setVariant("Chinese");
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder37.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder40 = builder37.clear();
        java.util.Locale locale41 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder42 = builder40.setLocale(locale41);
        java.lang.String str43 = locale41.getISO3Country();
        java.util.Locale locale44 = locale41.stripExtensions();
        java.lang.String str45 = locale44.getISO3Country();
        java.util.Locale.Builder builder46 = builder2.setLocale(locale44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar21 and calendar27", (calendar21.compareTo(calendar27) == 0) == calendar21.equals(calendar27));
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test217");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        boolean boolean3 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale4);
        java.lang.StringBuffer stringBuffer6 = null;
        java.lang.StringBuffer stringBuffer7 = fastDateFormat2.format(calendar5, stringBuffer6);
        calendar5.set(32769, (-1), 5, 0, (int) (byte) 1);
        java.time.Instant instant14 = calendar5.toInstant();
        java.util.Calendar.Builder builder15 = new java.util.Calendar.Builder();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        boolean boolean18 = locale16.hasExtensions();
        java.lang.String str19 = locale16.getDisplayCountry();
        java.util.Calendar.Builder builder20 = builder15.setLocale(locale16);
        java.util.Locale.Category category21 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category21, locale22);
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category21, locale24);
        java.lang.String str26 = locale24.toLanguageTag();
        java.util.Calendar.Builder builder27 = builder15.setLocale(locale24);
        java.util.Calendar.Builder builder29 = builder27.setInstant(1644572138002L);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getTimeZone("5:59:10 AM UTC");
        java.util.Calendar.Builder builder32 = builder27.setTimeZone(timeZone31);
        calendar5.setTimeZone(timeZone31);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        int int36 = timeZone34.getOffset(1644572072169L);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone40);
        java.lang.String str42 = fastDateFormat41.toString();
        java.lang.String str43 = fastDateFormat41.toString();
        java.util.TimeZone timeZone44 = fastDateFormat41.getTimeZone();
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale45.getLanguage();
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.lang.String str48 = locale45.getDisplayVariant(locale47);
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone44, locale45);
        boolean boolean50 = calendar49.isWeekDateSupported();
        calendar49.set(7, 4, 0);
        java.util.Date date55 = calendar49.getTime();
        java.lang.String str56 = fastDateFormat38.format(calendar49);
        java.util.TimeZone timeZone57 = fastDateFormat38.getTimeZone();
        java.lang.Object obj58 = null;
        boolean boolean59 = fastDateFormat38.equals(obj58);
        java.util.Calendar calendar60 = java.util.Calendar.getInstance();
        int int61 = calendar60.getWeeksInWeekYear();
        java.time.Instant instant62 = calendar60.toInstant();
        int int64 = calendar60.getMinimum(4);
        java.lang.String str65 = fastDateFormat38.format(calendar60);
        int int67 = calendar60.getLeastMaximum(3);
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone68.hasSameRules(timeZone69);
        java.util.Locale locale71 = java.util.Locale.ROOT;
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone69, locale71);
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone74.hasSameRules(timeZone75);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat77 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone75);
        timeZone75.setRawOffset(3);
        java.util.TimeZone timeZone81 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat82 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone81);
        java.lang.String str83 = fastDateFormat82.getPattern();
        java.util.TimeZone timeZone84 = fastDateFormat82.getTimeZone();
        boolean boolean85 = timeZone75.hasSameRules(timeZone84);
        boolean boolean86 = timeZone69.hasSameRules(timeZone84);
        timeZone69.setRawOffset(50);
        calendar60.setTimeZone(timeZone69);
        boolean boolean90 = timeZone34.hasSameRules(timeZone69);
        boolean boolean91 = timeZone31.hasSameRules(timeZone69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar60 and calendar72", (calendar60.compareTo(calendar72) == 0) == calendar60.equals(calendar72));
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test218");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.StringBuffer stringBuffer4 = null;
        java.lang.StringBuffer stringBuffer5 = fastDateFormat2.format((long) 32772, stringBuffer4);
        java.lang.StringBuffer stringBuffer7 = null;
        java.lang.StringBuffer stringBuffer8 = fastDateFormat2.format((long) 97, stringBuffer7);
        java.lang.String str9 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone10 = fastDateFormat2.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone14);
        java.lang.String str16 = fastDateFormat15.toString();
        java.lang.String str17 = fastDateFormat15.toString();
        java.util.TimeZone timeZone18 = fastDateFormat15.getTimeZone();
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale19.getDisplayVariant(locale21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone18, locale19);
        boolean boolean24 = calendar23.isWeekDateSupported();
        calendar23.set(7, 4, 0);
        java.util.Date date29 = calendar23.getTime();
        java.lang.String str30 = fastDateFormat12.format(calendar23);
        java.util.TimeZone timeZone31 = fastDateFormat12.getTimeZone();
        java.lang.Object obj32 = null;
        boolean boolean33 = fastDateFormat12.equals(obj32);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance();
        int int35 = calendar34.getWeeksInWeekYear();
        java.time.Instant instant36 = calendar34.toInstant();
        int int38 = calendar34.getMinimum(4);
        java.lang.String str39 = fastDateFormat12.format(calendar34);
        int int41 = calendar34.getLeastMaximum(3);
        java.lang.StringBuffer stringBuffer42 = null;
        java.lang.StringBuffer stringBuffer43 = fastDateFormat2.format(calendar34, stringBuffer42);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone46, locale48);
        java.text.ParsePosition parsePosition51 = new java.text.ParsePosition(16);
        int int52 = parsePosition51.getErrorIndex();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet54 = locale53.getExtensionKeys();
        boolean boolean55 = parsePosition51.equals((java.lang.Object) locale53);
        java.lang.String str56 = locale53.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone46, locale53);
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        boolean boolean60 = timeZone58.hasSameRules(timeZone59);
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone59, locale61);
        long long63 = calendar62.getTimeInMillis();
        java.lang.String str64 = fastDateFormat57.format(calendar62);
        java.util.Date date65 = calendar62.getTime();
        calendar62.setLenient(true);
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone68.hasSameRules(timeZone69);
        java.util.Locale locale71 = java.util.Locale.ROOT;
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone69, locale71);
        java.lang.String str73 = locale71.getDisplayLanguage();
        java.lang.String str75 = locale71.getUnicodeLocaleType("zh");
        java.util.Locale locale76 = locale71.stripExtensions();
        java.util.TimeZone timeZone77 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone78 = java.util.TimeZone.getDefault();
        boolean boolean79 = timeZone77.hasSameRules(timeZone78);
        java.util.Locale locale80 = java.util.Locale.ROOT;
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(timeZone78, locale80);
        java.lang.String str83 = locale80.getExtension('a');
        java.lang.String str84 = locale76.getDisplayName(locale80);
        boolean boolean85 = calendar62.after((java.lang.Object) locale80);
        java.lang.StringBuffer stringBuffer86 = null;
        java.lang.StringBuffer stringBuffer87 = fastDateFormat2.format(calendar62, stringBuffer86);
        calendar62.set(0, 8, 36, 2, 24, 58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar34 and calendar49", (calendar34.compareTo(calendar49) == 0) == calendar34.equals(calendar49));
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test219");
        java.lang.String[] strArray5 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.stream.Stream<java.lang.String> strStream8 = strList6.stream();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        int int10 = strList6.lastIndexOf((java.lang.Object) locale9);
        java.util.stream.Stream<java.lang.String> strStream11 = strList6.stream();
        java.lang.String[] strArray13 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.stream.Stream<java.lang.String> strStream16 = strList14.stream();
        strList14.clear();
        java.util.Spliterator<java.lang.String> strSpliterator18 = strList14.spliterator();
        int int19 = strList6.lastIndexOf((java.lang.Object) strSpliterator18);
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        boolean boolean24 = strList6.contains((java.lang.Object) str23);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone26, locale28);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone32);
        timeZone32.setRawOffset(3);
        java.util.TimeZone timeZone38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone38);
        java.lang.String str40 = fastDateFormat39.getPattern();
        java.util.TimeZone timeZone41 = fastDateFormat39.getTimeZone();
        boolean boolean42 = timeZone32.hasSameRules(timeZone41);
        boolean boolean43 = timeZone26.hasSameRules(timeZone41);
        java.util.TimeZone.setDefault(timeZone41);
        boolean boolean45 = strList6.contains((java.lang.Object) timeZone41);
        java.lang.String str46 = timeZone41.getID();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getTimeZone("9:34:37 AM UTC");
        java.util.TimeZone timeZone50 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229\u6587");
        boolean boolean51 = timeZone48.hasSameRules(timeZone50);
        int int53 = timeZone48.getOffset(10L);
        boolean boolean54 = timeZone41.hasSameRules(timeZone48);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone55.hasSameRules(timeZone56);
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone56, locale58);
        java.lang.String str60 = locale58.getDisplayLanguage();
        java.lang.String str62 = locale58.getUnicodeLocaleType("zh");
        java.util.Locale locale63 = locale58.stripExtensions();
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone65.hasSameRules(timeZone66);
        java.util.Locale locale68 = java.util.Locale.ROOT;
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone66, locale68);
        java.text.ParsePosition parsePosition71 = new java.text.ParsePosition(16);
        int int72 = parsePosition71.getErrorIndex();
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet74 = locale73.getExtensionKeys();
        boolean boolean75 = parsePosition71.equals((java.lang.Object) locale73);
        java.lang.String str76 = locale73.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat77 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone66, locale73);
        int int78 = timeZone66.getRawOffset();
        java.util.Locale locale79 = java.util.Locale.CHINESE;
        java.lang.String str80 = locale79.getLanguage();
        boolean boolean81 = locale79.hasExtensions();
        java.lang.String str82 = locale79.getDisplayScript();
        java.util.Calendar calendar83 = java.util.Calendar.getInstance(locale79);
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(timeZone66, locale79);
        java.lang.String str85 = locale79.getDisplayCountry();
        java.util.Locale locale86 = java.util.Locale.CHINESE;
        java.lang.String str87 = locale86.getLanguage();
        boolean boolean88 = locale86.hasExtensions();
        java.lang.String str89 = locale86.getDisplayCountry();
        java.lang.String str90 = locale79.getDisplayScript(locale86);
        java.lang.String str91 = locale58.getDisplayName(locale86);
        java.util.Locale locale95 = new java.util.Locale("10-Jan-2026 09:35:55", "10 Feb 2022 09:37:18 GMT", "7-feb-2022 9.36.45");
        java.lang.String str96 = locale86.getDisplayVariant(locale95);
        java.util.Calendar calendar97 = java.util.Calendar.getInstance(timeZone41, locale95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar29 and calendar59", (calendar29.compareTo(calendar59) == 0) == calendar29.equals(calendar59));
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test220");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder11 = builder0.setLenient(false);
        java.util.Calendar calendar12 = builder0.build();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13);
        int int18 = calendar16.getActualMaximum(0);
        java.util.TimeZone timeZone19 = calendar16.getTimeZone();
        java.util.Calendar.Builder builder20 = builder0.setTimeZone(timeZone19);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone21);
        timeZone21.setRawOffset(40);
        boolean boolean27 = timeZone21.observesDaylightTime();
        java.util.Calendar.Builder builder28 = builder20.setTimeZone(timeZone21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar16 and calendar24", (calendar16.compareTo(calendar24) == 0) == calendar16.equals(calendar24));
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test221");
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder1.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("it");
        java.util.Locale.Builder builder8 = builder3.setExtension('x', "de");
        java.util.Locale locale9 = builder8.build();
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getLanguage();
        java.lang.String str12 = locale10.getDisplayLanguage();
        java.util.Locale locale13 = locale10.stripExtensions();
        java.util.Locale locale16 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale17 = locale16.stripExtensions();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        java.util.Locale locale19 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale19);
        java.lang.String str21 = locale17.getDisplayName(locale19);
        java.lang.String str22 = locale13.getDisplayName(locale17);
        java.lang.String str23 = locale9.getDisplayScript(locale13);
        java.lang.String str24 = locale13.getVariant();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale13);
        java.util.TimeZone timeZone27 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone27);
        java.lang.String str29 = fastDateFormat28.toString();
        java.lang.String str30 = fastDateFormat28.toString();
        java.util.TimeZone timeZone31 = fastDateFormat28.getTimeZone();
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = locale32.getLanguage();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale32.getDisplayVariant(locale34);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone31, locale32);
        boolean boolean37 = calendar36.isWeekDateSupported();
        calendar36.roll(5, 53);
        java.lang.String str41 = fastDateFormat25.format(calendar36);
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder44 = builder42.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder46 = builder44.setLanguageTag("it");
        java.util.Locale.Builder builder49 = builder44.setExtension('x', "de");
        java.util.Locale.Builder builder51 = builder44.setLanguage("fra");
        java.util.TimeZone timeZone54 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone54);
        java.lang.String str56 = fastDateFormat55.toString();
        java.lang.String str57 = fastDateFormat55.toString();
        java.util.TimeZone timeZone58 = fastDateFormat55.getTimeZone();
        java.util.Locale locale59 = java.util.Locale.CHINESE;
        java.lang.String str60 = locale59.getLanguage();
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.lang.String str62 = locale59.getDisplayVariant(locale61);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone58, locale59);
        java.util.Locale locale64 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone65.hasSameRules(timeZone66);
        java.util.Locale locale68 = java.util.Locale.ROOT;
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone66, locale68);
        java.lang.String str70 = locale68.getDisplayLanguage();
        java.lang.String str72 = locale68.getUnicodeLocaleType("zh");
        java.lang.String str73 = locale64.getDisplayScript(locale68);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone58, locale68);
        java.util.Set<java.lang.Character> charSet75 = locale68.getExtensionKeys();
        java.util.Locale.Builder builder76 = builder44.setLocale(locale68);
        java.util.Locale.Builder builder78 = builder44.setVariant("Chinese");
        boolean boolean79 = calendar36.equals((java.lang.Object) "Chinese");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar63 and calendar69", (calendar63.compareTo(calendar69) == 0) == calendar63.equals(calendar69));
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test222");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        boolean boolean2 = calendar1.isWeekDateSupported();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale3.getDisplayVariant(locale5);
        boolean boolean7 = calendar1.before((java.lang.Object) str6);
        int int8 = calendar1.getFirstDayOfWeek();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone9);
        calendar1.setTimeZone(timeZone9);
        java.util.Locale locale15 = new java.util.Locale("");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08", timeZone9, locale15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone9);
        timeZone9.setRawOffset(47);
        java.util.Locale locale22 = new java.util.Locale("Deutsch");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u610f\u5927\u5229\u6587", locale22);
        java.lang.String str24 = locale22.getVariant();
        java.util.Locale.setDefault(locale22);
        java.util.Set<java.lang.String> strSet26 = locale22.getUnicodeLocaleKeys();
        java.lang.String str27 = locale22.toLanguageTag();
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone9, locale22);
        java.lang.String str29 = timeZone9.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar28", (calendar1.compareTo(calendar28) == 0) == calendar1.equals(calendar28));
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test223");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.lang.String str6 = locale4.getDisplayLanguage();
        java.lang.String str8 = locale4.getUnicodeLocaleType("zh");
        java.lang.String str9 = locale0.getDisplayScript(locale4);
        java.lang.String str10 = locale0.getVariant();
        java.lang.String str11 = locale0.getDisplayCountry();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale12.getDisplayName();
        java.lang.String str14 = locale12.getDisplayCountry();
        java.util.Set<java.lang.String> strSet15 = locale12.getUnicodeLocaleKeys();
        java.lang.String str16 = locale0.getDisplayLanguage(locale12);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale12);
        java.lang.Object obj18 = locale12.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar17", (calendar5.compareTo(calendar17) == 0) == calendar5.equals(calendar17));
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test224");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("gregory", strMap1);
        java.lang.String[] strArray8 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.stream.Stream<java.lang.String> strStream11 = strList9.stream();
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        int int13 = strList9.lastIndexOf((java.lang.Object) locale12);
        java.util.stream.Stream<java.lang.String> strStream14 = strList9.stream();
        java.lang.String[] strArray16 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        java.util.stream.Stream<java.lang.String> strStream19 = strList17.stream();
        strList17.clear();
        java.util.Spliterator<java.lang.String> strSpliterator21 = strList17.spliterator();
        int int22 = strList9.lastIndexOf((java.lang.Object) strSpliterator21);
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        boolean boolean27 = strList9.contains((java.lang.Object) str26);
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strList9);
        boolean boolean29 = strList9.isEmpty();
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder32 = builder30.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder33 = builder30.clear();
        java.util.Locale locale34 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder35 = builder33.setLocale(locale34);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet37 = locale36.getExtensionKeys();
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = locale39.getLanguage();
        java.lang.String str41 = locale38.getDisplayLanguage(locale39);
        java.lang.String str42 = locale36.getDisplayLanguage(locale38);
        java.util.Locale.Builder builder43 = builder33.setLocale(locale38);
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder46 = builder43.setLocale(locale44);
        boolean boolean47 = strList9.contains((java.lang.Object) builder43);
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone49.hasSameRules(timeZone50);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone50, locale52);
        java.lang.String str54 = locale52.getDisplayLanguage();
        java.lang.String str56 = locale52.getUnicodeLocaleType("zh");
        java.lang.String str57 = locale48.getDisplayScript(locale52);
        java.lang.String str58 = locale48.getVariant();
        java.lang.String str59 = locale48.getDisplayCountry();
        java.util.Locale.Builder builder60 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder62 = builder60.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder63 = builder60.clear();
        java.util.Locale locale64 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder65 = builder63.setLocale(locale64);
        java.util.Locale.Builder builder66 = builder65.clearExtensions();
        java.util.Locale.Category category67 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone68.hasSameRules(timeZone69);
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.lang.String str72 = locale71.getDisplayName();
        java.lang.String str73 = locale71.getDisplayCountry();
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(timeZone69, locale71);
        java.util.Locale.setDefault(category67, locale71);
        java.util.Locale locale76 = java.util.Locale.getDefault(category67);
        java.util.Locale.Builder builder77 = builder66.setLocale(locale76);
        java.util.Locale locale78 = builder66.build();
        java.lang.String str79 = locale48.getDisplayName(locale78);
        java.util.Locale.Builder builder80 = builder43.setLocale(locale48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar53 and calendar74", (calendar53.compareTo(calendar74) == 0) == calendar53.equals(calendar74));
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test225");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale8.getDisplayCountry();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale8);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale12.getDisplayLanguage(locale13);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale19);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone25);
        java.util.Locale locale28 = fastDateFormat27.getLocale();
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale30.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.lang.String str35 = locale30.getDisplayVariant(locale34);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone42);
        java.util.Locale locale45 = fastDateFormat44.getLocale();
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone49);
        java.util.Locale locale52 = fastDateFormat51.getLocale();
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale54 = java.util.Locale.UK;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale8, locale12, locale16, locale19, locale21, locale22, locale28, locale29, locale34, locale36, locale37, locale38, locale39, locale45, locale46, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale locale58 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList56);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap59);
        java.lang.String[] strArray62 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        java.util.stream.Stream<java.lang.String> strStream65 = strList63.stream();
        strList63.clear();
        java.lang.String[] strArray68 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.util.stream.Stream<java.lang.String> strStream71 = strList69.stream();
        boolean boolean72 = strList63.containsAll((java.util.Collection<java.lang.String>) strList69);
        java.util.ArrayList[] arrayListArray74 = new java.util.ArrayList[0];
        @SuppressWarnings("unchecked")
        java.util.ArrayList<java.lang.String>[] strListArray75 = (java.util.ArrayList<java.lang.String>[]) arrayListArray74;
        java.util.ArrayList<java.lang.String>[] strListArray76 = strList63.toArray((java.util.ArrayList<java.lang.String>[]) arrayListArray74);
        java.util.ListIterator<java.lang.String> strItor77 = strList63.listIterator();
        java.util.Locale.FilteringMode filteringMode78 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags(languageRangeList60, (java.util.Collection<java.lang.String>) strList63, filteringMode78);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap80 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList81 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList60, strMap80);
        java.util.Locale locale84 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale85 = locale84.stripExtensions();
        java.util.Calendar calendar86 = java.util.Calendar.getInstance(locale85);
        java.util.Locale locale87 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar88 = java.util.Calendar.getInstance(locale87);
        java.lang.String str89 = locale85.getDisplayName(locale87);
        java.lang.String str90 = locale85.getDisplayVariant();
        java.util.Set<java.lang.String> strSet91 = locale85.getUnicodeLocaleKeys();
        java.lang.String str92 = java.util.Locale.lookupTag(languageRangeList60, (java.util.Collection<java.lang.String>) strSet91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar86", (calendar11.compareTo(calendar86) == 0) == calendar11.equals(calendar86));
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test226");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone2);
        java.lang.Object obj5 = fastDateFormat4.clone();
        java.lang.String str6 = fastDateFormat4.getPattern();
        java.util.Date date7 = new java.util.Date();
        int int8 = date7.getTimezoneOffset();
        long long9 = date7.getTime();
        int int10 = date7.getMonth();
        date7.setSeconds(7);
        java.util.Date date13 = new java.util.Date();
        int int14 = date13.getDay();
        java.util.Date date15 = new java.util.Date();
        date15.setMinutes((int) '#');
        boolean boolean18 = date13.before(date15);
        int int19 = date15.getMinutes();
        boolean boolean20 = date7.before(date15);
        java.lang.String str21 = fastDateFormat4.format(date15);
        int int22 = date15.getDay();
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        java.util.Date date27 = new java.util.Date();
        int int28 = date27.getTimezoneOffset();
        long long29 = date27.getTime();
        int int30 = date27.getMonth();
        date27.setSeconds(7);
        date27.setSeconds(1);
        java.util.Date date35 = new java.util.Date();
        int int36 = date35.getTimezoneOffset();
        long long37 = date35.getTime();
        int int38 = date35.getMonth();
        date35.setSeconds(7);
        date35.setSeconds(1);
        boolean boolean43 = date27.before(date35);
        long long44 = date27.getTime();
        java.text.AttributedCharacterIterator attributedCharacterIterator45 = fastDateFormat25.formatToCharacterIterator((java.lang.Object) date27);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone47, locale49);
        calendar50.clear(0);
        calendar50.setFirstDayOfWeek(51);
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone56.hasSameRules(timeZone57);
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone57, locale59);
        java.text.ParsePosition parsePosition62 = new java.text.ParsePosition(16);
        int int63 = parsePosition62.getErrorIndex();
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet65 = locale64.getExtensionKeys();
        boolean boolean66 = parsePosition62.equals((java.lang.Object) locale64);
        java.lang.String str67 = locale64.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat68 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone57, locale64);
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        boolean boolean71 = timeZone69.hasSameRules(timeZone70);
        java.util.Locale locale72 = java.util.Locale.ROOT;
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone70, locale72);
        long long74 = calendar73.getTimeInMillis();
        java.lang.String str75 = fastDateFormat68.format(calendar73);
        java.util.Date date76 = calendar73.getTime();
        calendar50.setTime(date76);
        int int79 = calendar50.getLeastMaximum(0);
        java.lang.String str80 = fastDateFormat25.format(calendar50);
        boolean boolean81 = date15.equals((java.lang.Object) str80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar50 and calendar60", (calendar50.compareTo(calendar60) == 0) == calendar50.equals(calendar60));
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test227");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int8 = calendar6.getActualMinimum(2);
        java.util.TimeZone timeZone9 = calendar6.getTimeZone();
        java.util.TimeZone timeZone10 = calendar6.getTimeZone();
        calendar6.clear();
        calendar6.set(7, 46, 45);
        calendar6.setLenient(false);
        int int18 = calendar6.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone20);
        timeZone20.setRawOffset(40);
        boolean boolean26 = timeZone20.observesDaylightTime();
        int int28 = timeZone20.getOffset(1644572074258L);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08", timeZone20);
        timeZone20.setRawOffset((int) '4');
        calendar6.setTimeZone(timeZone20);
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("\u5e74\u6708\u65e5");
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet39 = locale38.getExtensionKeys();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone35, locale38);
        calendar40.setMinimalDaysInFirstWeek((int) (short) 0);
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        boolean boolean44 = calendar40.after((java.lang.Object) locale43);
        java.lang.String str45 = locale34.getDisplayVariant(locale43);
        java.lang.String str46 = locale34.getVariant();
        java.lang.String str47 = locale34.getScript();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone20, locale34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar23 and calendar40", (calendar23.compareTo(calendar40) == 0) == calendar23.equals(calendar40));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test228");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone4);
        java.lang.String str6 = fastDateFormat5.toString();
        java.lang.String str7 = fastDateFormat5.toString();
        java.util.TimeZone timeZone8 = fastDateFormat5.getTimeZone();
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale9.getDisplayVariant(locale11);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale9);
        boolean boolean14 = calendar13.isWeekDateSupported();
        calendar13.set(7, 4, 0);
        java.util.Date date19 = calendar13.getTime();
        java.lang.String str20 = fastDateFormat2.format(calendar13);
        java.util.TimeZone timeZone21 = fastDateFormat2.getTimeZone();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        boolean boolean24 = locale23.hasExtensions();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale23);
        java.util.Set<java.lang.String> strSet27 = locale23.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 0, timeZone21, locale23);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale32.getDisplayName();
        java.lang.String str34 = locale32.getDisplayCountry();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone30, locale32);
        int int37 = calendar35.getActualMinimum(2);
        java.util.TimeZone timeZone38 = calendar35.getTimeZone();
        java.util.Calendar.Builder builder39 = new java.util.Calendar.Builder();
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.lang.String str41 = locale40.getLanguage();
        boolean boolean42 = locale40.hasExtensions();
        java.lang.String str43 = locale40.getDisplayCountry();
        java.util.Calendar.Builder builder44 = builder39.setLocale(locale40);
        java.util.Calendar.Builder builder48 = builder39.setWeekDate(38, 41, 11);
        java.util.TimeZone timeZone50 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone50);
        java.lang.String str52 = fastDateFormat51.toString();
        java.lang.String str53 = fastDateFormat51.toString();
        java.util.TimeZone timeZone54 = fastDateFormat51.getTimeZone();
        java.util.Calendar.Builder builder55 = builder48.setTimeZone(timeZone54);
        boolean boolean56 = timeZone38.hasSameRules(timeZone54);
        boolean boolean57 = timeZone21.hasSameRules(timeZone54);
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone54);
        int int59 = timeZone54.getDSTSavings();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar35 and calendar58", (calendar35.compareTo(calendar58) == 0) == calendar35.equals(calendar58));
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test229");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        calendar3.add(11, 36);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone7, locale10);
        calendar3.setTimeZone(timeZone7);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15);
        java.lang.String str17 = fastDateFormat16.toString();
        java.lang.String str18 = fastDateFormat16.toString();
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition(100);
        java.lang.String str22 = parsePosition21.toString();
        java.lang.Object obj23 = fastDateFormat16.parseObject("de", parsePosition21);
        int int24 = parsePosition21.getErrorIndex();
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale26);
        java.lang.String str28 = locale26.getLanguage();
        java.lang.String str29 = locale26.getVariant();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale26);
        calendar30.setLenient(false);
        boolean boolean33 = parsePosition21.equals((java.lang.Object) calendar30);
        boolean boolean34 = calendar3.before((java.lang.Object) calendar30);
        calendar3.set(38, 22, (int) '#', (int) (short) -1, 16, 24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar12 and calendar30", (calendar12.compareTo(calendar30) == 0) == calendar12.equals(calendar30));
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test230");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str1 = attribute0.toString();
        java.lang.String str2 = attribute0.toString();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str5 = fastDateFormat3.format((long) 100);
        boolean boolean6 = attribute0.equals((java.lang.Object) str5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        boolean boolean8 = calendar7.isWeekDateSupported();
        calendar7.setLenient(true);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale12.getDisplayName();
        boolean boolean14 = fastDateFormat11.equals((java.lang.Object) str13);
        int int15 = fastDateFormat11.getMaxLengthEstimate();
        java.text.ParsePosition parsePosition18 = new java.text.ParsePosition(16);
        int int19 = parsePosition18.getErrorIndex();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        boolean boolean24 = parsePosition18.equals((java.lang.Object) fastDateFormat22);
        int int25 = parsePosition18.getIndex();
        int int26 = parsePosition18.getIndex();
        java.util.Calendar.Builder builder27 = new java.util.Calendar.Builder();
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.lang.String str29 = locale28.getLanguage();
        boolean boolean30 = locale28.hasExtensions();
        java.lang.String str31 = locale28.getDisplayCountry();
        java.util.Calendar.Builder builder32 = builder27.setLocale(locale28);
        java.util.Calendar.Builder builder36 = builder27.setWeekDate((int) (short) 1, 9, 1);
        int[] intArray39 = new int[] { 14, ' ' };
        java.util.Calendar.Builder builder40 = builder36.setFields(intArray39);
        boolean boolean41 = parsePosition18.equals((java.lang.Object) builder36);
        int int42 = parsePosition18.getErrorIndex();
        parsePosition18.setErrorIndex(22);
        java.lang.Object obj45 = fastDateFormat11.parseObject("\u65e5\u6587", parsePosition18);
        boolean boolean46 = calendar7.after(obj45);
        boolean boolean47 = attribute0.equals((java.lang.Object) calendar7);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = locale48.getDisplayVariant();
        java.lang.String str50 = locale48.getVariant();
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition(16);
        int int53 = parsePosition52.getErrorIndex();
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet55 = locale54.getExtensionKeys();
        boolean boolean56 = parsePosition52.equals((java.lang.Object) locale54);
        java.lang.String str57 = locale54.getDisplayName();
        java.lang.String str58 = locale48.getDisplayVariant(locale54);
        java.util.Locale locale59 = java.util.Locale.PRC;
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(locale59);
        java.lang.String str61 = locale54.getDisplayLanguage(locale59);
        java.util.Set<java.lang.String> strSet62 = locale54.getUnicodeLocaleKeys();
        boolean boolean63 = attribute0.equals((java.lang.Object) locale54);
        java.lang.String str64 = attribute0.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar60", (calendar7.compareTo(calendar60) == 0) == calendar7.equals(calendar60));
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test231");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        long long19 = calendar18.getTimeInMillis();
        java.lang.String str20 = fastDateFormat13.format(calendar18);
        long long21 = calendar18.getTimeInMillis();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229\u6587");
        timeZone23.setID("\u5e74\u6708\u65e5");
        java.lang.String str26 = timeZone23.getID();
        calendar18.setTimeZone(timeZone23);
        boolean boolean28 = timeZone23.useDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar18", (calendar5.compareTo(calendar18) == 0) == calendar5.equals(calendar18));
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test232");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("9:35:23 AM UTC");
        int int3 = timeZone1.getOffset(1644572104526L);
        timeZone1.setID("9:36:54 AM UTC");
        java.util.TimeZone.setDefault(timeZone1);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale10.getDisplayCountry();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale10);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone8);
        timeZone8.setRawOffset(37);
        timeZone8.setID("2022-2-11 9:34:45");
        boolean boolean19 = timeZone1.hasSameRules(timeZone8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar14", (calendar13.compareTo(calendar14) == 0) == calendar13.equals(calendar14));
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test233");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7);
        timeZone7.setRawOffset(3);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        boolean boolean17 = timeZone7.hasSameRules(timeZone16);
        boolean boolean18 = timeZone1.hasSameRules(timeZone16);
        java.util.TimeZone.setDefault(timeZone16);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition(16);
        int int28 = parsePosition27.getErrorIndex();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        boolean boolean31 = parsePosition27.equals((java.lang.Object) locale29);
        java.lang.String str32 = locale29.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22, locale29);
        int int34 = timeZone22.getRawOffset();
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.lang.String str36 = locale35.getLanguage();
        boolean boolean37 = locale35.hasExtensions();
        java.lang.String str38 = locale35.getDisplayScript();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale35);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone22, locale35);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone16, locale35);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone43 = fastDateFormat42.getTimeZone();
        int int45 = timeZone43.getOffset(1644572101904L);
        calendar41.setTimeZone(timeZone43);
        java.util.TimeZone timeZone47 = calendar41.getTimeZone();
        java.util.TimeZone.setDefault(timeZone47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar25", (calendar4.compareTo(calendar25) == 0) == calendar4.equals(calendar25));
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test234");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.stream.Stream<java.lang.String> strStream7 = strList2.stream();
        boolean boolean9 = strList2.add("Tue Jan 11 09:34:31 UTC 2022");
        java.util.ListIterator<java.lang.String> strItor10 = strList2.listIterator();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone11);
        calendar14.add(11, 36);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone18, locale21);
        calendar14.setTimeZone(timeZone18);
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone26);
        java.lang.String str28 = fastDateFormat27.toString();
        java.lang.String str29 = fastDateFormat27.toString();
        java.text.ParsePosition parsePosition32 = new java.text.ParsePosition(100);
        java.lang.String str33 = parsePosition32.toString();
        java.lang.Object obj34 = fastDateFormat27.parseObject("de", parsePosition32);
        int int35 = parsePosition32.getErrorIndex();
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale37);
        java.lang.String str39 = locale37.getLanguage();
        java.lang.String str40 = locale37.getVariant();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale37);
        calendar41.setLenient(false);
        boolean boolean44 = parsePosition32.equals((java.lang.Object) calendar41);
        boolean boolean45 = calendar14.before((java.lang.Object) calendar41);
        boolean boolean46 = strList2.equals((java.lang.Object) calendar14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar23 and calendar41", (calendar23.compareTo(calendar41) == 0) == calendar23.equals(calendar41));
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test235");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        calendar6.setWeekDate(36, (int) (short) 100, (int) (short) 1);
        java.util.TimeZone timeZone11 = calendar6.getTimeZone();
        java.util.Locale locale14 = new java.util.Locale("italiano", "10-gen-4630 0.00.00");
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("\u5e74\u6708\u65e5");
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone17, locale20);
        calendar22.setMinimalDaysInFirstWeek((int) (short) 0);
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        boolean boolean26 = calendar22.after((java.lang.Object) locale25);
        java.lang.String str27 = locale16.getDisplayVariant(locale25);
        java.lang.String str28 = locale14.getDisplayLanguage(locale16);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone11, locale14);
        java.lang.String str30 = timeZone11.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar22 and calendar29", (calendar22.compareTo(calendar29) == 0) == calendar22.equals(calendar29));
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test236");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        int int14 = timeZone2.getRawOffset();
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleKeys();
        java.lang.String str17 = locale15.toLanguageTag();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone2, locale15);
        timeZone2.setID("\u65e5\u6587\u65e5\u672c)");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar18", (calendar5.compareTo(calendar18) == 0) == calendar5.equals(calendar18));
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test237");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.lang.String str1 = attribute0.toString();
        java.lang.String str2 = attribute0.toString();
        java.lang.String[] strArray4 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.util.stream.Stream<java.lang.String> strStream7 = strList5.stream();
        boolean boolean9 = strList5.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor11 = strList5.listIterator(0);
        java.lang.String[] strArray13 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.stream.Stream<java.lang.String> strStream16 = strList14.stream();
        java.util.ListIterator<java.lang.String> strItor17 = strList14.listIterator();
        boolean boolean18 = strList5.removeAll((java.util.Collection<java.lang.String>) strList14);
        int int19 = strList5.size();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone21, locale23);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone27);
        timeZone27.setRawOffset(3);
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone33);
        java.lang.String str35 = fastDateFormat34.getPattern();
        java.util.TimeZone timeZone36 = fastDateFormat34.getTimeZone();
        boolean boolean37 = timeZone27.hasSameRules(timeZone36);
        boolean boolean38 = timeZone21.hasSameRules(timeZone36);
        boolean boolean39 = strList5.contains((java.lang.Object) boolean38);
        java.util.stream.Stream<java.lang.String> strStream40 = strList5.stream();
        java.lang.String[] strArray42 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.util.stream.Stream<java.lang.String> strStream45 = strList43.stream();
        boolean boolean47 = strList43.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor49 = strList43.listIterator(0);
        strList43.clear();
        boolean boolean51 = strList5.retainAll((java.util.Collection<java.lang.String>) strList43);
        boolean boolean52 = attribute0.equals((java.lang.Object) strList5);
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder55 = builder53.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder57 = builder55.setLanguageTag("it");
        java.util.Locale.Builder builder60 = builder55.setExtension('x', "de");
        java.util.Locale.Builder builder62 = builder55.setLanguage("fra");
        java.util.TimeZone timeZone65 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone65);
        java.lang.String str67 = fastDateFormat66.toString();
        java.lang.String str68 = fastDateFormat66.toString();
        java.util.TimeZone timeZone69 = fastDateFormat66.getTimeZone();
        java.util.Locale locale70 = java.util.Locale.CHINESE;
        java.lang.String str71 = locale70.getLanguage();
        java.util.Locale locale72 = java.util.Locale.GERMAN;
        java.lang.String str73 = locale70.getDisplayVariant(locale72);
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(timeZone69, locale70);
        java.util.Locale locale75 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone77 = java.util.TimeZone.getDefault();
        boolean boolean78 = timeZone76.hasSameRules(timeZone77);
        java.util.Locale locale79 = java.util.Locale.ROOT;
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(timeZone77, locale79);
        java.lang.String str81 = locale79.getDisplayLanguage();
        java.lang.String str83 = locale79.getUnicodeLocaleType("zh");
        java.lang.String str84 = locale75.getDisplayScript(locale79);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat85 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone69, locale79);
        java.util.Set<java.lang.Character> charSet86 = locale79.getExtensionKeys();
        java.util.Locale.Builder builder87 = builder55.setLocale(locale79);
        java.util.Locale.Builder builder89 = builder55.setVariant("Chinese");
        boolean boolean90 = strList5.contains((java.lang.Object) builder55);
        java.util.Locale.Builder builder93 = builder55.setExtension('u', "");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar24 and calendar74", (calendar24.compareTo(calendar74) == 0) == calendar24.equals(calendar74));
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test238");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayVariant(locale9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale7);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.lang.String str18 = locale16.getDisplayLanguage();
        java.lang.String str20 = locale16.getUnicodeLocaleType("zh");
        java.lang.String str21 = locale12.getDisplayScript(locale16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone6, locale16);
        int int23 = timeZone6.getRawOffset();
        java.lang.Object obj24 = timeZone6.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar17", (calendar11.compareTo(calendar17) == 0) == calendar11.equals(calendar17));
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test239");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        calendar6.setWeekDate(36, (int) (short) 100, (int) (short) 1);
        java.util.TimeZone timeZone11 = calendar6.getTimeZone();
        java.util.Locale locale14 = new java.util.Locale("italiano", "10-gen-4630 0.00.00");
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("\u5e74\u6708\u65e5");
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone17, locale20);
        calendar22.setMinimalDaysInFirstWeek((int) (short) 0);
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        boolean boolean26 = calendar22.after((java.lang.Object) locale25);
        java.lang.String str27 = locale16.getDisplayVariant(locale25);
        java.lang.String str28 = locale14.getDisplayLanguage(locale16);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone11, locale14);
        int int30 = timeZone11.getDSTSavings();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar22 and calendar29", (calendar22.compareTo(calendar29) == 0) == calendar22.equals(calendar29));
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test240");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        java.lang.String str3 = locale1.getLanguage();
        java.lang.String str4 = locale1.getVariant();
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        boolean boolean7 = locale5.hasExtensions();
        java.lang.String str8 = locale1.getDisplayCountry(locale5);
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category9, locale10);
        java.util.Locale locale12 = java.util.Locale.getDefault(category9);
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String[] strArray19 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.stream.Stream<java.lang.String> strStream22 = strList20.stream();
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        int int24 = strList20.lastIndexOf((java.lang.Object) locale23);
        java.lang.String str25 = locale12.getDisplayVariant(locale23);
        java.lang.String str26 = locale1.getDisplayCountry(locale12);
        java.lang.String str27 = locale1.getDisplayName();
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition(16);
        int int30 = parsePosition29.getErrorIndex();
        java.util.TimeZone timeZone32 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone32);
        java.lang.String str34 = fastDateFormat33.getPattern();
        boolean boolean35 = parsePosition29.equals((java.lang.Object) fastDateFormat33);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        boolean boolean37 = parsePosition29.equals((java.lang.Object) locale36);
        java.lang.String str38 = locale36.getDisplayScript();
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder39.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder42 = builder39.clear();
        java.util.Locale locale43 = builder42.build();
        java.lang.String str44 = locale36.getDisplayVariant(locale43);
        java.lang.String str45 = locale1.getDisplayVariant(locale36);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet50 = locale49.getExtensionKeys();
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone46, locale49);
        java.lang.String str52 = locale49.getCountry();
        java.lang.String str53 = locale1.getDisplayName(locale49);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(locale49);
        boolean boolean55 = calendar54.isWeekDateSupported();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone57.hasSameRules(timeZone58);
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone57);
        timeZone57.setRawOffset(40);
        boolean boolean63 = timeZone57.observesDaylightTime();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone57);
        java.util.Calendar calendar65 = java.util.Calendar.getInstance();
        int int66 = calendar65.getWeeksInWeekYear();
        java.time.Instant instant67 = calendar65.toInstant();
        boolean boolean68 = calendar65.isWeekDateSupported();
        calendar65.setTimeInMillis(1644572085058L);
        boolean boolean71 = calendar65.isWeekDateSupported();
        java.lang.String str72 = calendar65.getCalendarType();
        java.lang.String str73 = fastDateFormat64.format(calendar65);
        int int74 = calendar54.compareTo(calendar65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar51 and calendar60", (calendar51.compareTo(calendar60) == 0) == calendar51.equals(calendar60));
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test241");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        int int2 = calendar1.getWeekYear();
        calendar1.setLenient(true);
        calendar1.set((int) (byte) 0, 56, 100, 2022, (int) '#');
        calendar1.setFirstDayOfWeek(0);
        calendar1.roll(0, 100061);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale19.getDisplayName();
        java.lang.String str21 = locale19.getDisplayCountry();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone17, locale19);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone17);
        int int25 = timeZone17.getOffset(1644572086894L);
        calendar1.setTimeZone(timeZone17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar22 and calendar23", (calendar22.compareTo(calendar23) == 0) == calendar22.equals(calendar23));
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test242");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder7 = builder0.setLenient(false);
        java.util.Date date9 = new java.util.Date("11 Feb 2022 09:37:02 GMT");
        date9.setMinutes(41);
        java.util.Calendar.Builder builder12 = builder7.setInstant(date9);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5e74\u6708\u65e5");
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (byte) 10);
        java.lang.Object obj18 = fastDateFormat14.parseObject("UTC12", parsePosition17);
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone20);
        java.lang.String str22 = fastDateFormat21.toString();
        java.lang.String str23 = fastDateFormat21.toString();
        java.util.TimeZone timeZone24 = fastDateFormat21.getTimeZone();
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = locale25.getLanguage();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.lang.String str28 = locale25.getDisplayVariant(locale27);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone24, locale25);
        boolean boolean30 = calendar29.isWeekDateSupported();
        java.time.Instant instant31 = calendar29.toInstant();
        java.util.Calendar.Builder builder32 = new java.util.Calendar.Builder();
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale33.getLanguage();
        boolean boolean35 = locale33.hasExtensions();
        java.lang.String str36 = locale33.getDisplayCountry();
        java.util.Calendar.Builder builder37 = builder32.setLocale(locale33);
        java.util.Date date39 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder40 = builder37.setInstant(date39);
        java.util.Calendar.Builder builder44 = builder40.setWeekDate((int) (short) -1, (int) '4', 35);
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone46);
        java.lang.String str48 = fastDateFormat47.toString();
        java.lang.String str49 = fastDateFormat47.toString();
        java.util.TimeZone timeZone50 = fastDateFormat47.getTimeZone();
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.lang.String str54 = locale51.getDisplayVariant(locale53);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone50, locale51);
        java.util.Calendar.Builder builder56 = builder44.setTimeZone(timeZone50);
        calendar29.setTimeZone(timeZone50);
        int int58 = calendar29.getWeekYear();
        java.lang.String str59 = fastDateFormat14.format(calendar29);
        java.util.Date date60 = calendar29.getTime();
        java.util.Calendar.Builder builder61 = builder7.setInstant(date60);
        java.util.TimeZone timeZone63 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone63);
        java.lang.StringBuffer stringBuffer66 = null;
        java.lang.StringBuffer stringBuffer67 = fastDateFormat64.format((long) 32772, stringBuffer66);
        java.util.TimeZone timeZone68 = fastDateFormat64.getTimeZone();
        java.util.TimeZone timeZone69 = fastDateFormat64.getTimeZone();
        java.util.TimeZone timeZone70 = fastDateFormat64.getTimeZone();
        java.util.Locale locale71 = java.util.Locale.ROOT;
        java.lang.String str72 = locale71.getLanguage();
        boolean boolean73 = locale71.hasExtensions();
        java.lang.String str74 = locale71.getDisplayScript();
        java.util.Calendar calendar75 = java.util.Calendar.getInstance(timeZone70, locale71);
        java.util.Calendar.Builder builder76 = builder7.setTimeZone(timeZone70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar29 and calendar75", (calendar29.compareTo(calendar75) == 0) == calendar29.equals(calendar75));
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test243");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale4);
        calendar6.setMinimalDaysInFirstWeek((int) (short) 0);
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone11);
        java.lang.String str13 = fastDateFormat12.toString();
        java.lang.String str14 = fastDateFormat12.toString();
        java.util.TimeZone timeZone15 = fastDateFormat12.getTimeZone();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale16.getDisplayVariant(locale18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone15, locale16);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone23, locale25);
        java.lang.String str27 = locale25.getDisplayLanguage();
        java.lang.String str29 = locale25.getUnicodeLocaleType("zh");
        java.lang.String str30 = locale21.getDisplayScript(locale25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone15, locale25);
        int int32 = timeZone15.getRawOffset();
        calendar6.setTimeZone(timeZone15);
        java.util.TimeZone.setDefault(timeZone15);
        java.text.FieldPosition fieldPosition36 = new java.text.FieldPosition((int) '#');
        fieldPosition36.setBeginIndex(46);
        java.util.Locale locale39 = java.util.Locale.UK;
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale39.getDisplayCountry(locale40);
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = locale42.getLanguage();
        boolean boolean44 = locale42.hasExtensions();
        java.lang.String str45 = locale40.getDisplayVariant(locale42);
        boolean boolean46 = fieldPosition36.equals((java.lang.Object) str45);
        fieldPosition36.setBeginIndex(49);
        int int49 = fieldPosition36.getBeginIndex();
        int int50 = fieldPosition36.getBeginIndex();
        java.util.Locale locale54 = new java.util.Locale("", "java.text.ParsePosition[index=0,errorIndex=0]", "\uc911\uad6d\uc5b4");
        java.lang.String str55 = locale54.getScript();
        java.util.Set<java.lang.String> strSet56 = locale54.getUnicodeLocaleAttributes();
        boolean boolean57 = fieldPosition36.equals((java.lang.Object) locale54);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 1, timeZone15, locale54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar20", (calendar6.compareTo(calendar20) == 0) == calendar6.equals(calendar20));
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test244");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("it");
        java.util.Locale.Builder builder7 = builder2.setExtension('x', "de");
        java.util.Locale.Builder builder9 = builder2.setLanguage("fra");
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.lang.String str14 = fastDateFormat13.toString();
        java.lang.String str15 = fastDateFormat13.toString();
        java.util.TimeZone timeZone16 = fastDateFormat13.getTimeZone();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale17.getDisplayVariant(locale19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone16, locale17);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        java.lang.String str28 = locale26.getDisplayLanguage();
        java.lang.String str30 = locale26.getUnicodeLocaleType("zh");
        java.lang.String str31 = locale22.getDisplayScript(locale26);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone16, locale26);
        java.util.Set<java.lang.Character> charSet33 = locale26.getExtensionKeys();
        java.util.Locale.Builder builder34 = builder2.setLocale(locale26);
        java.util.Locale.Builder builder36 = builder2.setVariant("Chinese");
        java.util.Locale.Builder builder37 = builder36.clear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar21 and calendar27", (calendar21.compareTo(calendar27) == 0) == calendar21.equals(calendar27));
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test245");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("java.util.GregorianCalendar[time=1644572139189,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=-1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=35,SECOND=39,MILLISECOND=188,ZONE_OFFSET=-1,DST_OFFSET=0]");
        java.lang.String str2 = locale1.getDisplayScript();
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale1);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        int int6 = timeZone4.getOffset(1644572072169L);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone10);
        java.lang.String str12 = fastDateFormat11.toString();
        java.lang.String str13 = fastDateFormat11.toString();
        java.util.TimeZone timeZone14 = fastDateFormat11.getTimeZone();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone14, locale15);
        boolean boolean20 = calendar19.isWeekDateSupported();
        calendar19.set(7, 4, 0);
        java.util.Date date25 = calendar19.getTime();
        java.lang.String str26 = fastDateFormat8.format(calendar19);
        java.util.TimeZone timeZone27 = fastDateFormat8.getTimeZone();
        java.lang.Object obj28 = null;
        boolean boolean29 = fastDateFormat8.equals(obj28);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance();
        int int31 = calendar30.getWeeksInWeekYear();
        java.time.Instant instant32 = calendar30.toInstant();
        int int34 = calendar30.getMinimum(4);
        java.lang.String str35 = fastDateFormat8.format(calendar30);
        int int37 = calendar30.getLeastMaximum(3);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone39, locale41);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone44.hasSameRules(timeZone45);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone45);
        timeZone45.setRawOffset(3);
        java.util.TimeZone timeZone51 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone51);
        java.lang.String str53 = fastDateFormat52.getPattern();
        java.util.TimeZone timeZone54 = fastDateFormat52.getTimeZone();
        boolean boolean55 = timeZone45.hasSameRules(timeZone54);
        boolean boolean56 = timeZone39.hasSameRules(timeZone54);
        timeZone39.setRawOffset(50);
        calendar30.setTimeZone(timeZone39);
        boolean boolean60 = timeZone4.hasSameRules(timeZone39);
        boolean boolean61 = calendar3.after((java.lang.Object) timeZone4);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar30 and calendar42", (calendar30.compareTo(calendar42) == 0) == calendar30.equals(calendar42));
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test246");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        boolean boolean2 = calendar1.isWeekDateSupported();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale3.getDisplayVariant(locale5);
        boolean boolean7 = calendar1.before((java.lang.Object) str6);
        int int8 = calendar1.getFirstDayOfWeek();
        java.util.TimeZone timeZone9 = calendar1.getTimeZone();
        java.util.TimeZone timeZone10 = null;
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.lang.String str15 = fastDateFormat14.toString();
        java.lang.String str16 = fastDateFormat14.toString();
        java.util.TimeZone timeZone17 = fastDateFormat14.getTimeZone();
        java.util.Locale locale18 = fastDateFormat14.getLocale();
        java.util.TimeZone timeZone19 = fastDateFormat14.getTimeZone();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone19);
        boolean boolean21 = timeZone9.hasSameRules(timeZone19);
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder22.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder25 = builder22.clear();
        java.util.Locale.Builder builder27 = builder22.addUnicodeLocaleAttribute("Deutsch");
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("04.02.1919 02:07:00");
        java.util.Locale.Builder builder30 = builder27.setLocale(locale29);
        java.util.Locale locale33 = new java.util.Locale("java.text.ParsePosition[index=100,errorIndex=-1]", "Jan 10, 4630 12:00:00 AM");
        java.lang.String str34 = locale33.toLanguageTag();
        java.lang.String str35 = locale29.getDisplayName(locale33);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone19, locale29);
        java.lang.String str37 = locale29.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar20", (calendar1.compareTo(calendar20) == 0) == calendar1.equals(calendar20));
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test247");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Date date7 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder8 = builder5.setInstant(date7);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate((int) (short) -1, (int) '4', 35);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone14);
        java.lang.String str16 = fastDateFormat15.toString();
        java.lang.String str17 = fastDateFormat15.toString();
        java.util.TimeZone timeZone18 = fastDateFormat15.getTimeZone();
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale19.getDisplayVariant(locale21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone18, locale19);
        java.util.Calendar.Builder builder24 = builder12.setTimeZone(timeZone18);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone("und");
        java.util.Calendar.Builder builder27 = new java.util.Calendar.Builder();
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.lang.String str29 = locale28.getLanguage();
        boolean boolean30 = locale28.hasExtensions();
        java.lang.String str31 = locale28.getDisplayCountry();
        java.util.Calendar.Builder builder32 = builder27.setLocale(locale28);
        java.util.Calendar.Builder builder36 = builder27.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder38 = builder27.setLenient(false);
        java.util.Calendar.Builder builder42 = builder27.setTimeOfDay(15, 0, 32770);
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("04.02.1919 02:07:00");
        java.lang.String str45 = locale44.getDisplayName();
        java.util.Calendar.Builder builder46 = builder42.setLocale(locale44);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone26, locale44);
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone26);
        java.util.Calendar.Builder builder49 = builder12.setTimeZone(timeZone26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar23 and calendar47", (calendar23.compareTo(calendar47) == 0) == calendar23.equals(calendar47));
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test248");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        strList2.clear();
        java.lang.String[] strArray7 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.stream.Stream<java.lang.String> strStream10 = strList8.stream();
        boolean boolean11 = strList2.containsAll((java.util.Collection<java.lang.String>) strList8);
        java.lang.Object obj12 = null;
        int int13 = strList8.lastIndexOf(obj12);
        java.lang.String[] strArray15 = java.util.TimeZone.getAvailableIDs(7);
        java.lang.Comparable<java.lang.String>[] strComparableArray16 = strList8.toArray((java.lang.Comparable<java.lang.String>[]) strArray15);
        java.lang.Object obj17 = null;
        boolean boolean18 = strList8.remove(obj17);
        strList8.clear();
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale21);
        boolean boolean23 = fastDateFormat22.getTimeZoneOverridesCalendar();
        java.lang.Object obj24 = fastDateFormat22.clone();
        java.util.Date date25 = new java.util.Date();
        int int26 = date25.getTimezoneOffset();
        long long27 = date25.getTime();
        int int28 = date25.getMonth();
        date25.setSeconds(7);
        date25.setSeconds(1);
        java.util.Date date33 = new java.util.Date();
        int int34 = date33.getTimezoneOffset();
        long long35 = date33.getTime();
        int int36 = date33.getMonth();
        date33.setSeconds(7);
        date33.setSeconds(1);
        boolean boolean41 = date25.before(date33);
        java.text.AttributedCharacterIterator attributedCharacterIterator42 = fastDateFormat22.formatToCharacterIterator((java.lang.Object) date25);
        java.lang.String str43 = fastDateFormat22.toString();
        int int44 = strList8.indexOf((java.lang.Object) str43);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone46, locale48);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone52);
        timeZone52.setRawOffset(3);
        java.util.TimeZone timeZone58 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone58);
        java.lang.String str60 = fastDateFormat59.getPattern();
        java.util.TimeZone timeZone61 = fastDateFormat59.getTimeZone();
        boolean boolean62 = timeZone52.hasSameRules(timeZone61);
        boolean boolean63 = timeZone46.hasSameRules(timeZone61);
        timeZone46.setRawOffset(50);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone46);
        boolean boolean67 = strList8.remove((java.lang.Object) timeZone46);
        int int68 = timeZone46.getDSTSavings();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar49 and calendar66", (calendar49.compareTo(calendar66) == 0) == calendar49.equals(calendar66));
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test249");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] { languageRange3 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale10.getDisplayCountry();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale10);
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = locale14.getDisplayLanguage(locale15);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale21);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone27);
        java.util.Locale locale30 = fastDateFormat29.getLocale();
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = locale32.getLanguage();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale32.getDisplayVariant(locale34);
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale32.getDisplayVariant(locale36);
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone44);
        java.util.Locale locale47 = fastDateFormat46.getLocale();
        java.util.Locale locale48 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone51);
        java.util.Locale locale54 = fastDateFormat53.getLocale();
        java.util.Locale locale55 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale56 = java.util.Locale.UK;
        java.util.Locale[] localeArray57 = new java.util.Locale[] { locale10, locale14, locale18, locale21, locale23, locale24, locale30, locale31, locale36, locale38, locale39, locale40, locale41, locale47, locale48, locale54, locale55, locale56 };
        java.util.ArrayList<java.util.Locale> localeList58 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList58, localeArray57);
        java.util.Locale locale60 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.util.Locale>) localeList58);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap61 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList62 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strMap61);
        java.lang.String[] strArray68 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022", "FastDateFormat[h:mm:ss a z]", "zh", "java.text.ParsePosition[index=16,errorIndex=-1]", "de" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.lang.Object[] objArray71 = strList69.toArray();
        strList69.clear();
        java.lang.String[] strArray74 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        java.util.stream.Stream<java.lang.String> strStream77 = strList75.stream();
        strList75.clear();
        java.util.Spliterator<java.lang.String> strSpliterator79 = strList75.spliterator();
        boolean boolean80 = strList69.containsAll((java.util.Collection<java.lang.String>) strList75);
        java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList75);
        java.lang.String[] strArray83 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        java.util.stream.Stream<java.lang.String> strStream86 = strList84.stream();
        boolean boolean88 = strList84.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor90 = strList84.listIterator(0);
        java.util.Locale.FilteringMode filteringMode91 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList92 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList84, filteringMode91);
        java.util.Locale.FilteringMode filteringMode93 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList94 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strList92, filteringMode93);
        java.util.Locale locale95 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar96 = java.util.Calendar.getInstance(locale95);
        java.util.Set<java.lang.String> strSet97 = locale95.getUnicodeLocaleKeys();
        boolean boolean98 = strList94.removeAll((java.util.Collection<java.lang.String>) strSet97);
        strList94.clear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar96", (calendar13.compareTo(calendar96) == 0) == calendar13.equals(calendar96));
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test250");
        java.util.Locale locale3 = new java.util.Locale("it", "", "United States");
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7, locale9);
        java.lang.String str11 = locale9.getDisplayLanguage();
        java.lang.String str13 = locale9.getUnicodeLocaleType("zh");
        java.lang.String str14 = locale5.getDisplayScript(locale9);
        java.lang.String str15 = locale5.getVariant();
        java.lang.String str16 = locale5.getISO3Country();
        java.lang.String str17 = locale3.getDisplayCountry(locale5);
        java.lang.String str18 = locale3.getISO3Country();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone21);
        java.lang.String str23 = fastDateFormat22.toString();
        java.lang.String str24 = fastDateFormat22.toString();
        java.util.TimeZone timeZone25 = fastDateFormat22.getTimeZone();
        java.util.Locale locale26 = fastDateFormat22.getLocale();
        java.util.TimeZone timeZone27 = fastDateFormat22.getTimeZone();
        java.util.Locale locale30 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale31 = locale30.stripExtensions();
        java.lang.String[] strArray33 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        java.util.stream.Stream<java.lang.String> strStream36 = strList34.stream();
        boolean boolean38 = strList34.add("hi!");
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = locale39.getLanguage();
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale39.getDisplayVariant(locale41);
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.lang.String str44 = locale39.getDisplayVariant(locale43);
        boolean boolean45 = strList34.contains((java.lang.Object) locale39);
        java.lang.String str46 = locale39.getVariant();
        boolean boolean47 = locale39.hasExtensions();
        java.lang.String str48 = locale31.getDisplayCountry(locale39);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getInstance("d. MMMM yyyy", timeZone27, locale31);
        java.util.TimeZone timeZone52 = java.util.TimeZone.getTimeZone("9:34:37 AM UTC");
        java.util.TimeZone timeZone54 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229\u6587");
        boolean boolean55 = timeZone52.hasSameRules(timeZone54);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone52);
        java.util.Locale locale57 = fastDateFormat56.getLocale();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone27, locale57);
        java.lang.String str59 = locale57.getDisplayCountry();
        java.lang.String str60 = locale57.toLanguageTag();
        java.lang.String str61 = locale3.getDisplayVariant(locale57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar58", (calendar10.compareTo(calendar58) == 0) == calendar10.equals(calendar58));
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test251");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, 3);
        fieldPosition2.setEndIndex(12);
        int int5 = fieldPosition2.getBeginIndex();
        fieldPosition2.setBeginIndex(53);
        boolean boolean9 = fieldPosition2.equals((java.lang.Object) "10 Feb 2022 09:37:41 GMT");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5e74\u6708\u65e5");
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13, locale15);
        long long17 = calendar16.getTimeInMillis();
        calendar16.set(2022, (int) 'a', 8);
        int int23 = calendar16.getGreatestMinimum(5);
        java.lang.String str24 = fastDateFormat11.format(calendar16);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        java.text.ParsePosition parsePosition32 = new java.text.ParsePosition(16);
        int int33 = parsePosition32.getErrorIndex();
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet35 = locale34.getExtensionKeys();
        boolean boolean36 = parsePosition32.equals((java.lang.Object) locale34);
        java.lang.String str37 = locale34.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone27, locale34);
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = locale39.getLanguage();
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale39.getDisplayVariant(locale41);
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.lang.String str44 = locale39.getDisplayVariant(locale43);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone27, locale43);
        java.lang.String str46 = fastDateFormat11.format(calendar45);
        boolean boolean47 = fieldPosition2.equals((java.lang.Object) fastDateFormat11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar30 and calendar45", (calendar30.compareTo(calendar45) == 0) == calendar30.equals(calendar45));
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test252");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        boolean boolean2 = calendar1.isWeekDateSupported();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale3.getDisplayVariant(locale5);
        boolean boolean7 = calendar1.before((java.lang.Object) str6);
        long long8 = calendar1.getTimeInMillis();
        int int9 = calendar1.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        int int11 = timeZone10.getRawOffset();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5e74\u6708\u65e5");
        int int14 = fastDateFormat13.getMaxLengthEstimate();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.Locale locale17 = java.util.Locale.PRC;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone16, locale17);
        boolean boolean19 = fastDateFormat13.equals((java.lang.Object) locale17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("11.02.1916 09:34:55", timeZone10, locale17);
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder21.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder25 = builder23.setLanguageTag("it");
        java.util.Locale.Builder builder28 = builder23.setExtension('x', "de");
        java.util.Locale.Builder builder30 = builder23.setVariant("tedesco");
        java.util.Locale.Builder builder32 = builder23.setVariant("");
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale.Builder builder34 = builder23.setLocale(locale33);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale33);
        java.util.Locale.setDefault(locale33);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone10, locale33);
        java.lang.String str38 = locale33.getScript();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar35", (calendar1.compareTo(calendar35) == 0) == calendar1.equals(calendar35));
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test253");
        java.lang.String[] strArray5 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.stream.Stream<java.lang.String> strStream8 = strList6.stream();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        int int10 = strList6.lastIndexOf((java.lang.Object) locale9);
        java.util.stream.Stream<java.lang.String> strStream11 = strList6.stream();
        java.lang.String[] strArray13 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.stream.Stream<java.lang.String> strStream16 = strList14.stream();
        strList14.clear();
        java.util.Spliterator<java.lang.String> strSpliterator18 = strList14.spliterator();
        int int19 = strList6.lastIndexOf((java.lang.Object) strSpliterator18);
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        boolean boolean24 = strList6.contains((java.lang.Object) str23);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone26, locale28);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone32);
        timeZone32.setRawOffset(3);
        java.util.TimeZone timeZone38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone38);
        java.lang.String str40 = fastDateFormat39.getPattern();
        java.util.TimeZone timeZone41 = fastDateFormat39.getTimeZone();
        boolean boolean42 = timeZone32.hasSameRules(timeZone41);
        boolean boolean43 = timeZone26.hasSameRules(timeZone41);
        java.util.TimeZone.setDefault(timeZone41);
        boolean boolean45 = strList6.contains((java.lang.Object) timeZone41);
        java.lang.String str46 = timeZone41.getID();
        java.util.Locale locale47 = java.util.Locale.PRC;
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(locale47);
        java.time.Instant instant49 = calendar48.toInstant();
        java.util.Date date50 = java.util.Date.from(instant49);
        boolean boolean51 = timeZone41.inDaylightTime(date50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar29 and calendar48", (calendar29.compareTo(calendar48) == 0) == calendar29.equals(calendar48));
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test254");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        int int9 = calendar7.getActualMinimum(2);
        java.util.TimeZone timeZone10 = calendar7.getTimeZone();
        java.util.TimeZone timeZone11 = calendar7.getTimeZone();
        java.lang.String str12 = calendar7.getCalendarType();
        java.lang.String str13 = calendar7.getCalendarType();
        java.util.TimeZone timeZone14 = calendar7.getTimeZone();
        timeZone14.setID("deu");
        boolean boolean17 = timeZone14.observesDaylightTime();
        int int19 = timeZone14.getOffset(1644572163398L);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder20.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder23 = builder20.clear();
        java.util.Locale locale24 = builder23.build();
        java.util.Locale locale25 = builder23.build();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone14, locale25);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14);
        java.lang.String str28 = timeZone14.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar27", (calendar7.compareTo(calendar27) == 0) == calendar7.equals(calendar27));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test255");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        int int4 = timeZone1.getOffset(1644572071852L);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone1);
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.util.Locale locale9 = new java.util.Locale("de");
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(locale9);
        java.lang.String str11 = locale6.getDisplayVariant(locale9);
        java.lang.String str12 = locale9.getDisplayName();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder13.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder16 = builder13.clear();
        java.util.Locale locale17 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder18 = builder16.setLocale(locale17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = locale21.getDisplayLanguage(locale22);
        java.lang.String str25 = locale19.getDisplayLanguage(locale21);
        java.util.Locale.Builder builder26 = builder16.setLocale(locale21);
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder29 = builder26.setLocale(locale27);
        java.util.Locale locale30 = builder26.build();
        java.lang.String str31 = locale9.getDisplayScript(locale30);
        java.util.Locale locale35 = new java.util.Locale("coreano", "Fri Feb 11 09:34:34 UTC 2022", "de");
        boolean boolean36 = locale35.hasExtensions();
        java.util.Set<java.lang.Character> charSet37 = locale35.getExtensionKeys();
        java.util.Locale locale41 = new java.util.Locale("java.text.ParsePosition[index=100,errorIndex=-1]", "2022-2-11 9:34:44", "it");
        java.lang.String str42 = locale35.getDisplayLanguage(locale41);
        java.util.Locale.Category category43 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale44 = java.util.Locale.getDefault(category43);
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category43, locale45);
        java.lang.String str47 = locale41.getDisplayName(locale45);
        java.text.ParsePosition parsePosition49 = new java.text.ParsePosition(16);
        java.util.Date date50 = new java.util.Date();
        int int51 = date50.getDay();
        java.util.Date date52 = new java.util.Date();
        date52.setMinutes((int) '#');
        boolean boolean55 = date50.before(date52);
        boolean boolean56 = parsePosition49.equals((java.lang.Object) boolean55);
        parsePosition49.setErrorIndex((int) (short) 10);
        int int59 = parsePosition49.getIndex();
        java.util.Locale locale60 = java.util.Locale.CHINESE;
        java.lang.String str61 = locale60.getLanguage();
        boolean boolean62 = locale60.hasExtensions();
        java.lang.String str63 = locale60.getDisplayScript();
        java.lang.String str64 = locale60.getDisplayScript();
        boolean boolean65 = parsePosition49.equals((java.lang.Object) locale60);
        java.util.Locale.setDefault(locale60);
        java.lang.String str67 = locale41.getDisplayCountry(locale60);
        java.lang.String str68 = locale9.getDisplayName(locale60);
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone1, locale9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar10", (calendar5.compareTo(calendar10) == 0) == calendar5.equals(calendar10));
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test256");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2);
        timeZone2.setRawOffset(40);
        boolean boolean8 = timeZone2.observesDaylightTime();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone2);
        boolean boolean11 = calendar0.before((java.lang.Object) timeZone2);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone14);
        timeZone14.setRawOffset(3);
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone20);
        java.lang.String str22 = fastDateFormat21.getPattern();
        java.util.TimeZone timeZone23 = fastDateFormat21.getTimeZone();
        boolean boolean24 = timeZone14.hasSameRules(timeZone23);
        boolean boolean25 = timeZone23.observesDaylightTime();
        boolean boolean26 = timeZone2.hasSameRules(timeZone23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar5", (calendar0.compareTo(calendar5) == 0) == calendar0.equals(calendar5));
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test257");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        timeZone1.setRawOffset(40);
        boolean boolean7 = timeZone1.observesDaylightTime();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.Locale locale11 = java.util.Locale.PRC;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone10, locale11);
        java.util.Date date13 = new java.util.Date();
        int int14 = date13.getTimezoneOffset();
        date13.setMonth(0);
        int int17 = date13.getSeconds();
        int int18 = date13.getDay();
        java.text.AttributedCharacterIterator attributedCharacterIterator19 = fastDateFormat12.formatToCharacterIterator((java.lang.Object) date13);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone21, locale23);
        long long25 = calendar24.getTimeInMillis();
        calendar24.set(2022, (int) 'a', 8);
        int int31 = calendar24.getGreatestMinimum(5);
        java.time.Instant instant32 = calendar24.toInstant();
        calendar24.setLenient(false);
        java.lang.StringBuffer stringBuffer35 = null;
        java.lang.StringBuffer stringBuffer36 = fastDateFormat12.format(calendar24, stringBuffer35);
        java.lang.String str37 = fastDateFormat8.format(calendar24);
        java.util.Locale.Category category38 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category38, locale39);
        java.util.Locale locale41 = java.util.Locale.getDefault(category38);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone43, locale45);
        java.lang.String str47 = locale45.getDisplayLanguage();
        java.lang.String str48 = locale41.getDisplayCountry(locale45);
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale45);
        boolean boolean51 = calendar49.after((java.lang.Object) "Feb 7, 2022 9:35:47 AM");
        java.lang.String str52 = calendar49.getCalendarType();
        java.lang.String str53 = fastDateFormat8.format(calendar49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar46", (calendar4.compareTo(calendar46) == 0) == calendar4.equals(calendar46));
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test258");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        int int9 = calendar7.getActualMinimum(2);
        java.util.TimeZone timeZone10 = calendar7.getTimeZone();
        boolean boolean11 = timeZone10.observesDaylightTime();
        java.util.Locale locale13 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale13);
        java.lang.String str15 = locale13.getLanguage();
        java.lang.String str16 = locale13.getVariant();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        boolean boolean19 = locale17.hasExtensions();
        java.lang.String str20 = locale13.getDisplayCountry(locale17);
        java.util.Locale.Category category21 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category21, locale22);
        java.util.Locale locale24 = java.util.Locale.getDefault(category21);
        boolean boolean25 = locale24.hasExtensions();
        java.lang.String[] strArray31 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.stream.Stream<java.lang.String> strStream34 = strList32.stream();
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        int int36 = strList32.lastIndexOf((java.lang.Object) locale35);
        java.lang.String str37 = locale24.getDisplayVariant(locale35);
        java.lang.String str38 = locale13.getDisplayCountry(locale24);
        java.lang.String str39 = locale13.getDisplayName();
        java.text.ParsePosition parsePosition41 = new java.text.ParsePosition(16);
        int int42 = parsePosition41.getErrorIndex();
        java.util.TimeZone timeZone44 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone44);
        java.lang.String str46 = fastDateFormat45.getPattern();
        boolean boolean47 = parsePosition41.equals((java.lang.Object) fastDateFormat45);
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        boolean boolean49 = parsePosition41.equals((java.lang.Object) locale48);
        java.lang.String str50 = locale48.getDisplayScript();
        java.util.Locale.Builder builder51 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder53 = builder51.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder54 = builder51.clear();
        java.util.Locale locale55 = builder54.build();
        java.lang.String str56 = locale48.getDisplayVariant(locale55);
        java.lang.String str57 = locale13.getDisplayVariant(locale48);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getInstance("DE", timeZone10, locale48);
        timeZone10.setRawOffset(100);
        java.lang.String[] strArray62 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        java.util.stream.Stream<java.lang.String> strStream65 = strList63.stream();
        strList63.clear();
        boolean boolean67 = strList63.isEmpty();
        boolean boolean68 = strList63.isEmpty();
        java.util.ListIterator<java.lang.String> strItor69 = strList63.listIterator();
        java.util.Locale locale70 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        boolean boolean73 = timeZone71.hasSameRules(timeZone72);
        java.util.Locale locale74 = java.util.Locale.ROOT;
        java.util.Calendar calendar75 = java.util.Calendar.getInstance(timeZone72, locale74);
        java.lang.String str76 = locale74.getDisplayLanguage();
        java.lang.String str78 = locale74.getUnicodeLocaleType("zh");
        java.lang.String str79 = locale70.getDisplayScript(locale74);
        int int80 = strList63.indexOf((java.lang.Object) locale70);
        java.lang.String str81 = locale70.getLanguage();
        java.lang.String str82 = locale70.getVariant();
        java.lang.String str83 = timeZone10.getDisplayName(locale70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar75", (calendar7.compareTo(calendar75) == 0) == calendar7.equals(calendar75));
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test259");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("FR");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        int int3 = calendar2.getWeeksInWeekYear();
        java.time.Instant instant4 = calendar2.toInstant();
        int int6 = calendar2.getMinimum(4);
        calendar2.setFirstDayOfWeek(13);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        boolean boolean15 = strList11.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor17 = strList11.listIterator(0);
        java.lang.String[] strArray19 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.stream.Stream<java.lang.String> strStream22 = strList20.stream();
        java.util.ListIterator<java.lang.String> strItor23 = strList20.listIterator();
        boolean boolean24 = strList11.removeAll((java.util.Collection<java.lang.String>) strList20);
        java.util.Iterator<java.lang.String> strItor25 = strList11.iterator();
        java.util.ListIterator<java.lang.String> strItor26 = strList11.listIterator();
        boolean boolean27 = calendar2.before((java.lang.Object) strList11);
        strList11.clear();
        java.util.Locale.FilteringMode filteringMode29 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strList11, filteringMode29);
        java.util.stream.Stream<java.lang.String> strStream31 = strList11.parallelStream();
        int int32 = strList11.size();
        java.lang.String[] strArray34 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.util.stream.Stream<java.lang.String> strStream37 = strList35.stream();
        boolean boolean39 = strList35.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor41 = strList35.listIterator(0);
        java.lang.String[] strArray43 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.util.stream.Stream<java.lang.String> strStream46 = strList44.stream();
        java.util.ListIterator<java.lang.String> strItor47 = strList44.listIterator();
        boolean boolean48 = strList35.removeAll((java.util.Collection<java.lang.String>) strList44);
        int int49 = strList35.size();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51, locale53);
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone56.hasSameRules(timeZone57);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone57);
        timeZone57.setRawOffset(3);
        java.util.TimeZone timeZone63 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone63);
        java.lang.String str65 = fastDateFormat64.getPattern();
        java.util.TimeZone timeZone66 = fastDateFormat64.getTimeZone();
        boolean boolean67 = timeZone57.hasSameRules(timeZone66);
        boolean boolean68 = timeZone51.hasSameRules(timeZone66);
        boolean boolean69 = strList35.contains((java.lang.Object) boolean68);
        java.util.stream.Stream<java.lang.String> strStream70 = strList35.stream();
        java.lang.String[] strArray72 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        java.util.stream.Stream<java.lang.String> strStream75 = strList73.stream();
        boolean boolean77 = strList73.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor79 = strList73.listIterator(0);
        strList73.clear();
        boolean boolean81 = strList35.retainAll((java.util.Collection<java.lang.String>) strList73);
        boolean boolean83 = strList73.add("gmt+00:009 (h:mm:ss a z)_2022-2-11 9:36:30");
        boolean boolean84 = strList11.contains((java.lang.Object) boolean83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar2 and calendar54", (calendar2.compareTo(calendar54) == 0) == calendar2.equals(calendar54));
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test260");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale3);
        calendar5.setMinimalDaysInFirstWeek((int) (short) 0);
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone10);
        java.lang.String str12 = fastDateFormat11.toString();
        java.lang.String str13 = fastDateFormat11.toString();
        java.util.TimeZone timeZone14 = fastDateFormat11.getTimeZone();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone14, locale15);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        java.lang.String str26 = locale24.getDisplayLanguage();
        java.lang.String str28 = locale24.getUnicodeLocaleType("zh");
        java.lang.String str29 = locale20.getDisplayScript(locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone14, locale24);
        int int31 = timeZone14.getRawOffset();
        calendar5.setTimeZone(timeZone14);
        int int33 = calendar5.getWeeksInWeekYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar25", (calendar19.compareTo(calendar25) == 0) == calendar19.equals(calendar25));
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test261");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("de");
        double double2 = languageRange1.getWeight();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] { languageRange7 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone12, locale14);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale18.getDisplayLanguage(locale19);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale25);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone31);
        java.util.Locale locale34 = fastDateFormat33.getLocale();
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.lang.String str41 = locale36.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone48);
        java.util.Locale locale51 = fastDateFormat50.getLocale();
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone54.hasSameRules(timeZone55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone55);
        java.util.Locale locale58 = fastDateFormat57.getLocale();
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale60 = java.util.Locale.UK;
        java.util.Locale[] localeArray61 = new java.util.Locale[] { locale14, locale18, locale22, locale25, locale27, locale28, locale34, locale35, locale40, locale42, locale43, locale44, locale45, locale51, locale52, locale58, locale59, locale60 };
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.Locale locale64 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList62);
        java.util.Locale locale65 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList62);
        java.text.FieldPosition fieldPosition67 = new java.text.FieldPosition(2022);
        fieldPosition67.setEndIndex(47);
        java.util.Locale.Category category70 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale71 = java.util.Locale.getDefault(category70);
        boolean boolean72 = fieldPosition67.equals((java.lang.Object) category70);
        java.util.Locale locale73 = java.util.Locale.CHINESE;
        java.util.Locale locale74 = locale73.stripExtensions();
        java.lang.String str75 = locale73.getISO3Country();
        java.util.Locale.setDefault(category70, locale73);
        java.util.Locale locale77 = java.util.Locale.getDefault(category70);
        java.util.Calendar calendar78 = java.util.Calendar.getInstance(locale77);
        java.lang.String str79 = locale65.getDisplayVariant(locale77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar78", (calendar17.compareTo(calendar78) == 0) == calendar17.equals(calendar78));
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test262");
        java.util.Locale locale1 = new java.util.Locale("de");
        java.lang.String str2 = locale1.toLanguageTag();
        java.lang.String[] strArray4 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.util.stream.Stream<java.lang.String> strStream7 = strList5.stream();
        boolean boolean9 = strList5.add("hi!");
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getLanguage();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale10.getDisplayVariant(locale12);
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale10.getDisplayVariant(locale14);
        boolean boolean16 = strList5.contains((java.lang.Object) locale10);
        java.lang.String str17 = locale1.getDisplayScript(locale10);
        java.util.Locale locale21 = new java.util.Locale("java.text.ParsePosition[index=16,errorIndex=-1]", "tedesco (Germania)", "Jan 10, 4630 12:00:00 AM");
        java.lang.String str22 = locale1.getDisplayName(locale21);
        java.util.Locale locale23 = locale1.stripExtensions();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.lang.String str28 = locale27.getDisplayName();
        java.lang.String str29 = locale27.getDisplayCountry();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone25, locale27);
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.util.Locale locale32 = locale31.stripExtensions();
        java.lang.String str33 = locale31.getVariant();
        java.lang.String str34 = locale27.getDisplayScript(locale31);
        java.lang.String str35 = locale27.getISO3Language();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(locale36);
        java.lang.String str38 = locale27.getDisplayVariant(locale36);
        java.lang.String str39 = locale1.getDisplayCountry(locale27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar30 and calendar37", (calendar30.compareTo(calendar37) == 0) == calendar30.equals(calendar37));
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test263");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone2);
        java.util.Locale locale5 = fastDateFormat4.getLocale();
        java.lang.String str6 = fastDateFormat4.toString();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        int int8 = calendar7.getWeeksInWeekYear();
        java.lang.String str9 = fastDateFormat4.format(calendar7);
        java.lang.String str11 = fastDateFormat4.format((long) (byte) 100);
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition(43);
        java.lang.Object obj15 = fastDateFormat4.parseObject("hi!", parsePosition14);
        int int16 = parsePosition14.getIndex();
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone18);
        boolean boolean20 = fastDateFormat19.getTimeZoneOverridesCalendar();
        java.lang.String str21 = fastDateFormat19.getPattern();
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition(9);
        parsePosition24.setIndex((int) 'a');
        java.lang.Object obj27 = fastDateFormat19.parseObject("UTC9", parsePosition24);
        java.lang.Object obj28 = fastDateFormat19.clone();
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition(100);
        java.lang.String str32 = parsePosition31.toString();
        parsePosition31.setIndex(1);
        java.util.Locale locale37 = new java.util.Locale("9:34:37 AM UTC", "Fri Feb 11 09:34:34 UTC 2022");
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition(16);
        int int40 = parsePosition39.getErrorIndex();
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        boolean boolean45 = parsePosition39.equals((java.lang.Object) fastDateFormat43);
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        boolean boolean47 = parsePosition39.equals((java.lang.Object) locale46);
        java.lang.String str48 = locale46.getDisplayScript();
        java.lang.String str49 = locale37.getDisplayLanguage(locale46);
        boolean boolean50 = parsePosition31.equals((java.lang.Object) str49);
        java.lang.Object obj51 = fastDateFormat19.parseObject("30 April 0007", parsePosition31);
        java.util.TimeZone timeZone53 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone53);
        java.lang.String str55 = fastDateFormat54.toString();
        java.lang.String str56 = fastDateFormat54.toString();
        java.util.TimeZone timeZone57 = fastDateFormat54.getTimeZone();
        timeZone57.setRawOffset((int) (short) 100);
        int int60 = timeZone57.getRawOffset();
        java.text.Format.Field field61 = null;
        java.text.FieldPosition fieldPosition63 = new java.text.FieldPosition(field61, 3);
        fieldPosition63.setEndIndex(49);
        boolean boolean67 = fieldPosition63.equals((java.lang.Object) 8);
        java.util.TimeZone timeZone70 = java.util.TimeZone.getTimeZone("9:34:37 AM UTC");
        java.util.TimeZone timeZone72 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229\u6587");
        boolean boolean73 = timeZone70.hasSameRules(timeZone72);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone70);
        boolean boolean75 = fieldPosition63.equals((java.lang.Object) timeZone70);
        boolean boolean76 = timeZone57.hasSameRules(timeZone70);
        boolean boolean77 = parsePosition31.equals((java.lang.Object) timeZone57);
        java.util.Calendar calendar78 = java.util.Calendar.getInstance(timeZone57);
        boolean boolean79 = parsePosition14.equals((java.lang.Object) calendar78);
        int int80 = parsePosition14.getIndex();
        parsePosition14.setIndex((-1969));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar78", (calendar7.compareTo(calendar78) == 0) == calendar7.equals(calendar78));
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test264");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayVariant(locale9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale7);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.lang.String str18 = locale16.getDisplayLanguage();
        java.lang.String str20 = locale16.getUnicodeLocaleType("zh");
        java.lang.String str21 = locale12.getDisplayScript(locale16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone6, locale16);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        boolean boolean27 = timeZone23.hasSameRules(timeZone25);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        java.text.ParsePosition parsePosition35 = new java.text.ParsePosition(16);
        int int36 = parsePosition35.getErrorIndex();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        boolean boolean39 = parsePosition35.equals((java.lang.Object) locale37);
        java.lang.String str40 = locale37.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone30, locale37);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        timeZone42.setRawOffset((-1));
        boolean boolean45 = timeZone30.hasSameRules(timeZone42);
        java.util.TimeZone timeZone46 = null;
        boolean boolean47 = timeZone42.hasSameRules(timeZone46);
        int int48 = timeZone42.getRawOffset();
        boolean boolean49 = timeZone23.hasSameRules(timeZone42);
        boolean boolean50 = timeZone6.hasSameRules(timeZone23);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone6);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar17", (calendar11.compareTo(calendar17) == 0) == calendar11.equals(calendar17));
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test265");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone2);
        java.util.Locale locale5 = fastDateFormat4.getLocale();
        java.lang.String str6 = fastDateFormat4.toString();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        int int8 = calendar7.getWeeksInWeekYear();
        java.lang.String str9 = fastDateFormat4.format(calendar7);
        calendar7.set((int) (byte) 0, 0, (int) (byte) -1, 16, 32770, 8);
        java.util.TimeZone timeZone17 = calendar7.getTimeZone();
        boolean boolean18 = timeZone17.observesDaylightTime();
        java.lang.String str19 = timeZone17.getID();
        timeZone17.setRawOffset(28);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone17);
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone24);
        java.util.Date date26 = new java.util.Date();
        int int27 = date26.getTimezoneOffset();
        int int28 = date26.getSeconds();
        java.lang.StringBuffer stringBuffer29 = null;
        java.text.Format.Field field30 = null;
        java.text.FieldPosition fieldPosition32 = new java.text.FieldPosition(field30, 1);
        fieldPosition32.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer35 = fastDateFormat25.format((java.lang.Object) date26, stringBuffer29, fieldPosition32);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance();
        boolean boolean37 = calendar36.isWeekDateSupported();
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.lang.String str39 = locale38.getLanguage();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale38.getDisplayVariant(locale40);
        boolean boolean42 = calendar36.before((java.lang.Object) str41);
        long long43 = calendar36.getTimeInMillis();
        int int44 = calendar36.getMinimalDaysInFirstWeek();
        java.lang.StringBuffer stringBuffer45 = null;
        java.text.Format.Field field46 = null;
        java.text.FieldPosition fieldPosition48 = new java.text.FieldPosition(field46, 3);
        fieldPosition48.setEndIndex(12);
        java.lang.StringBuffer stringBuffer51 = fastDateFormat25.format((java.lang.Object) calendar36, stringBuffer45, fieldPosition48);
        java.lang.Object obj52 = fastDateFormat25.clone();
        java.util.TimeZone timeZone53 = fastDateFormat25.getTimeZone();
        java.util.TimeZone timeZone54 = fastDateFormat25.getTimeZone();
        java.lang.String str55 = timeZone54.getID();
        boolean boolean56 = timeZone17.hasSameRules(timeZone54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar22 and calendar36", (calendar22.compareTo(calendar36) == 0) == calendar22.equals(calendar36));
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test266");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = locale14.getDisplayVariant(locale18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone2, locale18);
        int int21 = calendar20.getWeekYear();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone24);
        timeZone24.setRawOffset(3);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        java.util.TimeZone timeZone33 = fastDateFormat31.getTimeZone();
        boolean boolean34 = timeZone24.hasSameRules(timeZone33);
        java.util.TimeZone.setDefault(timeZone24);
        calendar20.setTimeZone(timeZone24);
        int int38 = timeZone24.getOffset(1644485964623L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar20", (calendar5.compareTo(calendar20) == 0) == calendar5.equals(calendar20));
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test267");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getDay();
        int int2 = date0.getTimezoneOffset();
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        long long5 = date3.getTime();
        date3.setDate((int) (byte) 10);
        long long8 = date3.getTime();
        date3.setHours(32769);
        java.util.Date date11 = new java.util.Date();
        int int12 = date11.getTimezoneOffset();
        date11.setMonth(0);
        boolean boolean15 = date3.before(date11);
        date11.setHours(53);
        boolean boolean18 = date0.before(date11);
        java.lang.String str19 = date0.toLocaleString();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone21);
        java.lang.String str23 = fastDateFormat22.toString();
        java.lang.String str24 = fastDateFormat22.toString();
        java.util.TimeZone timeZone25 = fastDateFormat22.getTimeZone();
        java.util.Locale locale26 = fastDateFormat22.getLocale();
        java.util.TimeZone timeZone27 = fastDateFormat22.getTimeZone();
        java.lang.String str29 = fastDateFormat22.format((long) 9);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = locale33.getDisplayCountry();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone31, locale33);
        int int38 = calendar36.getActualMinimum(2);
        int int39 = calendar36.getWeeksInWeekYear();
        java.util.Calendar.Builder builder40 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale44.getDisplayName();
        java.lang.String str46 = locale44.getDisplayCountry();
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone42, locale44);
        int int49 = calendar47.getActualMinimum(2);
        java.util.TimeZone timeZone50 = calendar47.getTimeZone();
        java.util.TimeZone timeZone51 = calendar47.getTimeZone();
        java.util.Calendar.Builder builder52 = builder40.setTimeZone(timeZone51);
        calendar36.setTimeZone(timeZone51);
        java.util.TimeZone.setDefault(timeZone51);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone51);
        long long56 = calendar55.getTimeInMillis();
        java.lang.String str57 = fastDateFormat22.format(calendar55);
        int int58 = calendar55.getMinimalDaysInFirstWeek();
        java.util.Date date59 = calendar55.getTime();
        int int60 = date0.compareTo(date59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar36 and calendar55", (calendar36.compareTo(calendar55) == 0) == calendar36.equals(calendar55));
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test268");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str1 = attribute0.toString();
        java.util.Date date2 = new java.util.Date();
        int int3 = date2.getTimezoneOffset();
        long long4 = date2.getTime();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getSeconds();
        long long7 = date5.getTime();
        date5.setTime((long) ' ');
        int int10 = date5.getTimezoneOffset();
        boolean boolean11 = date2.before(date5);
        boolean boolean12 = attribute0.equals((java.lang.Object) date2);
        int int13 = date2.getMinutes();
        date2.setHours(8);
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale16);
        int int18 = calendar17.getMinimalDaysInFirstWeek();
        java.util.Date date19 = calendar17.getTime();
        boolean boolean20 = date2.before(date19);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone21);
        java.lang.String str25 = calendar24.getCalendarType();
        boolean boolean26 = date2.equals((java.lang.Object) str25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar24", (calendar17.compareTo(calendar24) == 0) == calendar17.equals(calendar24));
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test269");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getTimezoneOffset();
        long long6 = date4.getTime();
        int int7 = date4.getMonth();
        date4.setSeconds(7);
        date4.setSeconds(1);
        java.util.Date date12 = new java.util.Date();
        int int13 = date12.getTimezoneOffset();
        long long14 = date12.getTime();
        int int15 = date12.getMonth();
        date12.setSeconds(7);
        date12.setSeconds(1);
        boolean boolean20 = date4.before(date12);
        long long21 = date4.getTime();
        java.text.AttributedCharacterIterator attributedCharacterIterator22 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) date4);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        calendar27.clear(0);
        calendar27.setFirstDayOfWeek(51);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34, locale36);
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition(16);
        int int40 = parsePosition39.getErrorIndex();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        boolean boolean43 = parsePosition39.equals((java.lang.Object) locale41);
        java.lang.String str44 = locale41.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone34, locale41);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone47, locale49);
        long long51 = calendar50.getTimeInMillis();
        java.lang.String str52 = fastDateFormat45.format(calendar50);
        java.util.Date date53 = calendar50.getTime();
        calendar27.setTime(date53);
        int int56 = calendar27.getLeastMaximum(0);
        java.lang.String str57 = fastDateFormat2.format(calendar27);
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        boolean boolean60 = timeZone58.hasSameRules(timeZone59);
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.lang.String str62 = locale61.getDisplayName();
        java.lang.String str63 = locale61.getDisplayCountry();
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone59, locale61);
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(timeZone59);
        int int66 = calendar65.getMinimalDaysInFirstWeek();
        java.util.Date date67 = new java.util.Date();
        int int68 = date67.getTimezoneOffset();
        date67.setMonth(0);
        int int71 = date67.getSeconds();
        date67.setMinutes(32770);
        date67.setYear(0);
        calendar65.setTime(date67);
        java.lang.String str77 = fastDateFormat2.format(calendar65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar27 and calendar37", (calendar27.compareTo(calendar37) == 0) == calendar27.equals(calendar37));
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test270");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] { languageRange7 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone12, locale14);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale18.getDisplayLanguage(locale19);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale25);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone31);
        java.util.Locale locale34 = fastDateFormat33.getLocale();
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.lang.String str41 = locale36.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone48);
        java.util.Locale locale51 = fastDateFormat50.getLocale();
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone54.hasSameRules(timeZone55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone55);
        java.util.Locale locale58 = fastDateFormat57.getLocale();
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale60 = java.util.Locale.UK;
        java.util.Locale[] localeArray61 = new java.util.Locale[] { locale14, locale18, locale22, locale25, locale27, locale28, locale34, locale35, locale40, locale42, locale43, locale44, locale45, locale51, locale52, locale58, locale59, locale60 };
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.Locale locale64 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList62);
        java.lang.String str65 = locale1.getDisplayName(locale64);
        java.lang.String str66 = locale1.getDisplayName();
        java.lang.String str67 = locale1.getDisplayLanguage();
        java.util.Locale.Category category68 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale69 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category68, locale69);
        java.util.Locale locale71 = java.util.Locale.getDefault(category68);
        java.util.Locale locale72 = java.util.Locale.getDefault(category68);
        java.util.Locale locale73 = java.util.Locale.getDefault(category68);
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone75 = java.util.TimeZone.getDefault();
        boolean boolean76 = timeZone74.hasSameRules(timeZone75);
        java.util.Locale locale77 = java.util.Locale.ROOT;
        java.util.Calendar calendar78 = java.util.Calendar.getInstance(timeZone75, locale77);
        java.lang.String str79 = locale77.getDisplayLanguage();
        java.util.Locale.setDefault(category68, locale77);
        java.lang.String str81 = locale1.getDisplayLanguage(locale77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar78", (calendar17.compareTo(calendar78) == 0) == calendar17.equals(calendar78));
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test271");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale11);
        java.util.Locale.setDefault(category7, locale11);
        java.util.Locale locale16 = java.util.Locale.getDefault(category7);
        java.util.Locale.Builder builder17 = builder6.setLocale(locale16);
        java.util.Locale.Builder builder18 = builder6.clearExtensions();
        java.util.Locale.Builder builder19 = builder18.clear();
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category20, locale21);
        java.util.Locale locale23 = java.util.Locale.getDefault(category20);
        java.util.Locale locale24 = java.util.Locale.getDefault(category20);
        java.util.Locale locale25 = java.util.Locale.getDefault(category20);
        java.util.Locale locale26 = java.util.Locale.getDefault(category20);
        java.util.Locale locale27 = locale26.stripExtensions();
        java.util.Locale.Builder builder28 = builder19.setLocale(locale26);
        java.lang.String str29 = locale26.getDisplayName();
        java.text.AttributedCharacterIterator.Attribute attribute30 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str31 = attribute30.toString();
        java.util.Date date32 = new java.util.Date();
        int int33 = date32.getTimezoneOffset();
        long long34 = date32.getTime();
        java.util.Date date35 = new java.util.Date();
        int int36 = date35.getSeconds();
        long long37 = date35.getTime();
        date35.setTime((long) ' ');
        int int40 = date35.getTimezoneOffset();
        boolean boolean41 = date32.before(date35);
        boolean boolean42 = attribute30.equals((java.lang.Object) date32);
        java.util.Locale.Category category43 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale44 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category43, locale44);
        java.util.Locale locale46 = java.util.Locale.getDefault(category43);
        boolean boolean47 = locale46.hasExtensions();
        java.lang.String[] strArray53 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        java.util.stream.Stream<java.lang.String> strStream56 = strList54.stream();
        java.util.Locale locale57 = java.util.Locale.JAPANESE;
        int int58 = strList54.lastIndexOf((java.lang.Object) locale57);
        java.lang.String str59 = locale46.getDisplayVariant(locale57);
        java.util.Locale locale60 = java.util.Locale.CHINESE;
        java.lang.String str61 = locale60.getLanguage();
        java.lang.String str62 = locale46.getDisplayVariant(locale60);
        java.util.Locale locale63 = java.util.Locale.CHINESE;
        java.lang.String str64 = locale63.getLanguage();
        boolean boolean65 = locale63.hasExtensions();
        java.lang.String str66 = locale63.getDisplayScript();
        java.lang.String str67 = locale60.getDisplayCountry(locale63);
        boolean boolean68 = attribute30.equals((java.lang.Object) locale60);
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        boolean boolean72 = timeZone70.hasSameRules(timeZone71);
        java.util.Locale locale73 = java.util.Locale.ROOT;
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(timeZone71, locale73);
        java.text.ParsePosition parsePosition76 = new java.text.ParsePosition(16);
        int int77 = parsePosition76.getErrorIndex();
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet79 = locale78.getExtensionKeys();
        boolean boolean80 = parsePosition76.equals((java.lang.Object) locale78);
        java.lang.String str81 = locale78.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat82 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone71, locale78);
        int int83 = timeZone71.getRawOffset();
        java.util.Locale locale84 = java.util.Locale.CHINESE;
        java.lang.String str85 = locale84.getLanguage();
        boolean boolean86 = locale84.hasExtensions();
        java.lang.String str87 = locale84.getDisplayScript();
        java.util.Calendar calendar88 = java.util.Calendar.getInstance(locale84);
        java.util.Calendar calendar89 = java.util.Calendar.getInstance(timeZone71, locale84);
        java.lang.String str90 = locale84.getDisplayCountry();
        java.util.Locale locale91 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str92 = locale84.getDisplayScript(locale91);
        java.lang.String str93 = locale60.getDisplayLanguage(locale84);
        java.lang.String str94 = locale26.getDisplayName(locale60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar74", (calendar14.compareTo(calendar74) == 0) == calendar14.equals(calendar74));
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test272");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int8 = calendar6.getActualMinimum(2);
        java.util.TimeZone timeZone9 = calendar6.getTimeZone();
        java.util.TimeZone timeZone10 = calendar6.getTimeZone();
        java.lang.String str11 = calendar6.getCalendarType();
        java.lang.String str12 = calendar6.getCalendarType();
        java.util.TimeZone timeZone13 = calendar6.getTimeZone();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone13);
        timeZone13.setRawOffset((-99));
        int int17 = timeZone13.getRawOffset();
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder18.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder21 = builder18.clear();
        java.util.Locale locale22 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder23 = builder21.setLocale(locale22);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.lang.String str28 = locale27.getLanguage();
        java.lang.String str29 = locale26.getDisplayLanguage(locale27);
        java.lang.String str30 = locale24.getDisplayLanguage(locale26);
        java.util.Locale.Builder builder31 = builder21.setLocale(locale26);
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder34 = builder31.setLocale(locale32);
        java.util.Locale locale37 = new java.util.Locale("und", "\uc911\uad6d\uc5b4");
        java.lang.String str38 = locale32.getDisplayScript(locale37);
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder39.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale locale42 = builder39.build();
        java.util.Locale locale44 = new java.util.Locale("de");
        java.lang.String str45 = locale44.toLanguageTag();
        java.lang.String str46 = locale44.getCountry();
        java.lang.String str47 = locale44.getDisplayCountry();
        java.util.Locale.setDefault(locale44);
        java.lang.String str49 = locale42.getDisplayVariant(locale44);
        java.lang.String str50 = locale32.getDisplayVariant(locale42);
        java.lang.String str51 = timeZone13.getDisplayName(locale42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar14", (calendar6.compareTo(calendar14) == 0) == calendar6.equals(calendar14));
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test273");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int8 = calendar6.getActualMinimum(2);
        java.util.TimeZone timeZone9 = calendar6.getTimeZone();
        java.util.TimeZone timeZone10 = calendar6.getTimeZone();
        java.lang.String str11 = calendar6.getCalendarType();
        java.lang.String str12 = calendar6.getCalendarType();
        java.util.TimeZone timeZone13 = calendar6.getTimeZone();
        int int14 = timeZone13.getRawOffset();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        java.text.ParsePosition parsePosition22 = new java.text.ParsePosition(16);
        int int23 = parsePosition22.getErrorIndex();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        boolean boolean26 = parsePosition22.equals((java.lang.Object) locale24);
        java.lang.String str27 = locale24.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17, locale24);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        long long34 = calendar33.getTimeInMillis();
        java.lang.String str35 = fastDateFormat28.format(calendar33);
        long long36 = calendar33.getTimeInMillis();
        java.util.Date date42 = new java.util.Date(9, (int) 'x', (int) '#', 2, 7);
        int int43 = date42.getTimezoneOffset();
        date42.setYear(1970);
        calendar33.setTime(date42);
        java.util.Locale locale51 = new java.util.Locale("coreano", "Fri Feb 11 09:34:34 UTC 2022", "de");
        boolean boolean52 = locale51.hasExtensions();
        java.lang.String str53 = locale51.getDisplayVariant();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", locale51);
        java.lang.StringBuffer stringBuffer56 = null;
        java.lang.StringBuffer stringBuffer57 = fastDateFormat54.format((-2170453192000L), stringBuffer56);
        java.util.Locale locale58 = fastDateFormat54.getLocale();
        boolean boolean59 = calendar33.before((java.lang.Object) fastDateFormat54);
        long long60 = calendar33.getTimeInMillis();
        calendar33.set(23, 13, 24);
        java.util.Date date65 = calendar33.getTime();
        boolean boolean66 = timeZone13.inDaylightTime(date65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar20", (calendar6.compareTo(calendar20) == 0) == calendar6.equals(calendar20));
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test274");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        boolean boolean2 = calendar1.isWeekDateSupported();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale3.getDisplayVariant(locale5);
        boolean boolean7 = calendar1.before((java.lang.Object) str6);
        long long8 = calendar1.getTimeInMillis();
        int int9 = calendar1.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        int int11 = timeZone10.getRawOffset();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5e74\u6708\u65e5");
        int int14 = fastDateFormat13.getMaxLengthEstimate();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.Locale locale17 = java.util.Locale.PRC;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone16, locale17);
        boolean boolean19 = fastDateFormat13.equals((java.lang.Object) locale17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("11.02.1916 09:34:55", timeZone10, locale17);
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder21.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder25 = builder23.setLanguageTag("it");
        java.util.Locale.Builder builder28 = builder23.setExtension('x', "de");
        java.util.Locale.Builder builder30 = builder23.setVariant("tedesco");
        java.util.Locale.Builder builder32 = builder23.setVariant("");
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale.Builder builder34 = builder23.setLocale(locale33);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale33);
        java.util.Locale.setDefault(locale33);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone10, locale33);
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone39);
        java.util.Date date41 = new java.util.Date();
        int int42 = date41.getTimezoneOffset();
        int int43 = date41.getSeconds();
        java.lang.StringBuffer stringBuffer44 = null;
        java.text.Format.Field field45 = null;
        java.text.FieldPosition fieldPosition47 = new java.text.FieldPosition(field45, 1);
        fieldPosition47.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer50 = fastDateFormat40.format((java.lang.Object) date41, stringBuffer44, fieldPosition47);
        int int51 = date41.getYear();
        date41.setTime(1644572124860L);
        boolean boolean54 = timeZone10.inDaylightTime(date41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar35", (calendar1.compareTo(calendar35) == 0) == calendar1.equals(calendar35));
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test275");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor8 = strList2.listIterator(0);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        boolean boolean15 = strList11.add("hi!");
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale16.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale16.getDisplayVariant(locale20);
        boolean boolean22 = strList11.contains((java.lang.Object) locale16);
        boolean boolean23 = strList2.removeAll((java.util.Collection<java.lang.String>) strList11);
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone25);
        java.lang.String str27 = fastDateFormat26.getPattern();
        java.util.TimeZone timeZone28 = fastDateFormat26.getTimeZone();
        java.util.Date date29 = new java.util.Date();
        int int30 = date29.getTimezoneOffset();
        long long31 = date29.getTime();
        date29.setDate((int) (byte) 10);
        long long34 = date29.getTime();
        date29.setHours(32769);
        java.lang.String str37 = fastDateFormat26.format(date29);
        boolean boolean38 = strList2.equals((java.lang.Object) date29);
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone41, locale43);
        java.lang.String str45 = locale43.getDisplayLanguage();
        java.lang.String str47 = locale43.getUnicodeLocaleType("zh");
        java.lang.String str48 = locale39.getDisplayScript(locale43);
        java.lang.String str49 = locale39.getVariant();
        java.lang.String str50 = locale39.getDisplayCountry();
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.lang.String str52 = locale51.getDisplayName();
        java.lang.String str53 = locale51.getDisplayCountry();
        java.util.Set<java.lang.String> strSet54 = locale51.getUnicodeLocaleKeys();
        java.lang.String str55 = locale39.getDisplayLanguage(locale51);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(locale51);
        boolean boolean57 = strList2.equals((java.lang.Object) calendar56);
        strList2.clear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar44 and calendar56", (calendar44.compareTo(calendar56) == 0) == calendar44.equals(calendar56));
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test276");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone(zoneId3);
        boolean boolean5 = timeZone4.observesDaylightTime();
        boolean boolean6 = timeZone4.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone4);
        java.text.AttributedCharacterIterator.Attribute attribute8 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.lang.String str9 = attribute8.toString();
        java.lang.String str10 = attribute8.toString();
        java.util.Calendar.Builder builder11 = new java.util.Calendar.Builder();
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = locale12.getLanguage();
        boolean boolean14 = locale12.hasExtensions();
        java.lang.String str15 = locale12.getDisplayCountry();
        java.util.Calendar.Builder builder16 = builder11.setLocale(locale12);
        boolean boolean17 = attribute8.equals((java.lang.Object) builder16);
        java.util.Calendar.Builder builder20 = builder16.set((int) (byte) 10, 59);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        boolean boolean27 = timeZone23.hasSameRules(timeZone25);
        boolean boolean28 = timeZone25.observesDaylightTime();
        int int30 = timeZone25.getOffset(1644572072169L);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 0, timeZone25);
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone33);
        java.lang.StringBuffer stringBuffer36 = null;
        java.lang.StringBuffer stringBuffer37 = fastDateFormat34.format((long) 32772, stringBuffer36);
        java.util.TimeZone timeZone38 = fastDateFormat34.getTimeZone();
        int int39 = timeZone38.getRawOffset();
        boolean boolean40 = timeZone25.hasSameRules(timeZone38);
        java.util.Locale locale41 = java.util.Locale.ROOT;
        java.lang.String str42 = locale41.getLanguage();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet47 = locale46.getExtensionKeys();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone43, locale46);
        java.lang.String str49 = locale46.getCountry();
        java.lang.String str50 = locale41.getDisplayLanguage(locale46);
        java.lang.String str51 = locale41.getISO3Country();
        java.util.Set<java.lang.String> strSet52 = locale41.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet53 = locale41.getExtensionKeys();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08", timeZone25, locale41);
        java.lang.String str55 = locale41.getCountry();
        java.util.Calendar.Builder builder56 = builder16.setLocale(locale41);
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone4, locale41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar2 and calendar48", (calendar2.compareTo(calendar48) == 0) == calendar2.equals(calendar48));
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test277");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale4);
        java.lang.String str6 = locale4.getLanguage();
        java.lang.String str7 = locale4.getVariant();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale4);
        calendar8.setFirstDayOfWeek(100);
        java.lang.String str11 = fastDateFormat2.format(calendar8);
        java.lang.String str13 = fastDateFormat2.format(1644572160791L);
        java.util.Calendar.Builder builder14 = new java.util.Calendar.Builder();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        boolean boolean17 = locale15.hasExtensions();
        java.lang.String str18 = locale15.getDisplayCountry();
        java.util.Calendar.Builder builder19 = builder14.setLocale(locale15);
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category20, locale21);
        java.util.Locale locale23 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category20, locale23);
        java.lang.String str25 = locale23.toLanguageTag();
        java.util.Calendar.Builder builder26 = builder14.setLocale(locale23);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone28.hasSameRules(timeZone29);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone29, locale31);
        java.text.ParsePosition parsePosition34 = new java.text.ParsePosition(16);
        int int35 = parsePosition34.getErrorIndex();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet37 = locale36.getExtensionKeys();
        boolean boolean38 = parsePosition34.equals((java.lang.Object) locale36);
        java.lang.String str39 = locale36.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone29, locale36);
        int int41 = timeZone29.getRawOffset();
        java.util.Calendar.Builder builder42 = builder26.setTimeZone(timeZone29);
        java.util.Calendar calendar43 = builder26.build();
        java.util.Date date47 = new java.util.Date((-1), 32772, (int) (short) 10);
        java.lang.String str48 = date47.toLocaleString();
        date47.setHours(122);
        long long51 = date47.getTime();
        java.util.Calendar.Builder builder52 = builder26.setInstant(date47);
        java.time.Instant instant53 = date47.toInstant();
        java.util.Date date54 = new java.util.Date();
        int int55 = date54.getTimezoneOffset();
        int int56 = date54.getSeconds();
        date54.setDate(7);
        java.time.Instant instant59 = date54.toInstant();
        java.util.Date date60 = java.util.Date.from(instant59);
        java.lang.String str61 = date60.toLocaleString();
        java.util.Date date62 = new java.util.Date();
        int int63 = date62.getTimezoneOffset();
        int int64 = date62.getSeconds();
        date62.setDate(7);
        java.time.Instant instant67 = date62.toInstant();
        boolean boolean68 = date60.before(date62);
        int int69 = date62.getDate();
        boolean boolean70 = date47.before(date62);
        java.lang.StringBuffer stringBuffer71 = null;
        java.lang.StringBuffer stringBuffer72 = fastDateFormat2.format(date47, stringBuffer71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar32", (calendar8.compareTo(calendar32) == 0) == calendar8.equals(calendar32));
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test278");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        boolean boolean5 = timeZone1.hasSameRules(timeZone3);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("\uc911\uad6d\uc5b4");
        boolean boolean8 = timeZone1.hasSameRules(timeZone7);
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category9, locale10);
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category9, locale12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(locale14);
        java.util.Locale.setDefault(category9, locale14);
        java.util.Locale locale17 = java.util.Locale.getDefault(category9);
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(category9, locale18);
        java.text.AttributedCharacterIterator.Attribute attribute20 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str21 = attribute20.toString();
        java.util.Date date22 = new java.util.Date();
        int int23 = date22.getTimezoneOffset();
        long long24 = date22.getTime();
        java.util.Date date25 = new java.util.Date();
        int int26 = date25.getSeconds();
        long long27 = date25.getTime();
        date25.setTime((long) ' ');
        int int30 = date25.getTimezoneOffset();
        boolean boolean31 = date22.before(date25);
        boolean boolean32 = attribute20.equals((java.lang.Object) date22);
        java.util.Locale.Category category33 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category33, locale34);
        java.util.Locale locale36 = java.util.Locale.getDefault(category33);
        boolean boolean37 = locale36.hasExtensions();
        java.lang.String[] strArray43 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.util.stream.Stream<java.lang.String> strStream46 = strList44.stream();
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        int int48 = strList44.lastIndexOf((java.lang.Object) locale47);
        java.lang.String str49 = locale36.getDisplayVariant(locale47);
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = locale50.getLanguage();
        java.lang.String str52 = locale36.getDisplayVariant(locale50);
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.lang.String str54 = locale53.getLanguage();
        boolean boolean55 = locale53.hasExtensions();
        java.lang.String str56 = locale53.getDisplayScript();
        java.lang.String str57 = locale50.getDisplayCountry(locale53);
        boolean boolean58 = attribute20.equals((java.lang.Object) locale50);
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.util.Locale.Category category60 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale61 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category60, locale61);
        java.lang.String str63 = locale61.getScript();
        java.lang.String str64 = locale59.getDisplayCountry(locale61);
        java.lang.String str65 = locale59.getISO3Country();
        java.lang.String str66 = locale50.getDisplayVariant(locale59);
        java.util.Locale.setDefault(category9, locale50);
        java.util.Locale locale68 = java.util.Locale.FRANCE;
        java.util.Locale.setDefault(category9, locale68);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat70 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-2-7 9:38:03", timeZone7, locale68);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone7);
        java.util.TimeZone.setDefault(timeZone7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar71", (calendar15.compareTo(calendar71) == 0) == calendar15.equals(calendar71));
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test279");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category6, locale9);
        java.lang.String str11 = locale9.toLanguageTag();
        java.util.Calendar.Builder builder12 = builder0.setLocale(locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        java.text.ParsePosition parsePosition20 = new java.text.ParsePosition(16);
        int int21 = parsePosition20.getErrorIndex();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        boolean boolean24 = parsePosition20.equals((java.lang.Object) locale22);
        java.lang.String str25 = locale22.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15, locale22);
        int int27 = timeZone15.getRawOffset();
        java.util.Calendar.Builder builder28 = builder12.setTimeZone(timeZone15);
        java.util.Calendar calendar29 = builder12.build();
        java.util.Calendar.Builder builder33 = builder12.setTimeOfDay(0, 59, 58);
        java.util.Calendar.Builder builder35 = builder33.setLenient(false);
        java.util.Calendar.Builder builder39 = builder35.setTimeOfDay(1, 0, 18);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance();
        int int41 = calendar40.getWeeksInWeekYear();
        java.time.Instant instant42 = calendar40.toInstant();
        int int44 = calendar40.getActualMinimum((int) (byte) 10);
        calendar40.setMinimalDaysInFirstWeek((int) (byte) -1);
        java.util.Locale locale50 = new java.util.Locale("java.text.ParsePosition[index=16,errorIndex=-1]", "tedesco (Germania)", "Jan 10, 4630 12:00:00 AM");
        boolean boolean51 = calendar40.before((java.lang.Object) locale50);
        java.util.Calendar.Builder builder52 = builder39.setLocale(locale50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar40", (calendar18.compareTo(calendar40) == 0) == calendar18.equals(calendar40));
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test280");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        int int9 = calendar7.getActualMinimum(2);
        java.util.TimeZone timeZone10 = calendar7.getTimeZone();
        java.util.TimeZone timeZone11 = calendar7.getTimeZone();
        java.lang.String str12 = calendar7.getCalendarType();
        java.lang.String str13 = calendar7.getCalendarType();
        java.util.TimeZone timeZone14 = calendar7.getTimeZone();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone14);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        int int18 = calendar17.getWeeksInWeekYear();
        java.time.Instant instant19 = calendar17.toInstant();
        int int21 = calendar17.getMinimum(4);
        calendar17.setFirstDayOfWeek(13);
        calendar17.clear();
        calendar17.set((int) (byte) 100, 34, 8, 1, 4);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.Locale locale33 = java.util.Locale.PRC;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone32, locale33);
        calendar17.setTimeZone(timeZone32);
        java.util.Calendar.Builder builder36 = new java.util.Calendar.Builder();
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = locale37.getLanguage();
        boolean boolean39 = locale37.hasExtensions();
        java.lang.String str40 = locale37.getDisplayCountry();
        java.util.Calendar.Builder builder41 = builder36.setLocale(locale37);
        java.util.Locale.Category category42 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category42, locale43);
        java.util.Locale locale45 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category42, locale45);
        java.lang.String str47 = locale45.toLanguageTag();
        java.util.Calendar.Builder builder48 = builder36.setLocale(locale45);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", timeZone32, locale45);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone14, locale45);
        java.util.Calendar.Builder builder51 = new java.util.Calendar.Builder();
        java.util.Date date52 = new java.util.Date();
        int int53 = date52.getTimezoneOffset();
        date52.setYear(32769);
        int int56 = date52.getYear();
        java.util.Calendar.Builder builder57 = builder51.setInstant(date52);
        java.util.Calendar calendar58 = builder57.build();
        java.util.Calendar.Builder builder60 = builder57.setInstant((long) 13);
        java.util.Locale locale61 = java.util.Locale.ITALIAN;
        java.util.Locale locale62 = java.util.Locale.CHINESE;
        java.lang.String str63 = locale62.getLanguage();
        java.lang.String str64 = locale61.getDisplayLanguage(locale62);
        java.util.Calendar.Builder builder65 = builder60.setLocale(locale62);
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        boolean boolean69 = timeZone67.hasSameRules(timeZone68);
        boolean boolean70 = timeZone66.hasSameRules(timeZone68);
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        boolean boolean74 = timeZone72.hasSameRules(timeZone73);
        java.util.Locale locale75 = java.util.Locale.ROOT;
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(timeZone73, locale75);
        java.text.ParsePosition parsePosition78 = new java.text.ParsePosition(16);
        int int79 = parsePosition78.getErrorIndex();
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet81 = locale80.getExtensionKeys();
        boolean boolean82 = parsePosition78.equals((java.lang.Object) locale80);
        java.lang.String str83 = locale80.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat84 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone73, locale80);
        java.util.TimeZone timeZone85 = java.util.TimeZone.getDefault();
        timeZone85.setRawOffset((-1));
        boolean boolean88 = timeZone73.hasSameRules(timeZone85);
        java.util.TimeZone timeZone89 = null;
        boolean boolean90 = timeZone85.hasSameRules(timeZone89);
        int int91 = timeZone85.getRawOffset();
        boolean boolean92 = timeZone66.hasSameRules(timeZone85);
        int int94 = timeZone85.getOffset(1644572205839L);
        java.util.Calendar.Builder builder95 = builder60.setTimeZone(timeZone85);
        boolean boolean96 = timeZone14.hasSameRules(timeZone85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar76", (calendar7.compareTo(calendar76) == 0) == calendar7.equals(calendar76));
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test281");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        boolean boolean4 = timeZone0.hasSameRules(timeZone2);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7, locale9);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition(16);
        int int13 = parsePosition12.getErrorIndex();
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        boolean boolean16 = parsePosition12.equals((java.lang.Object) locale14);
        java.lang.String str17 = locale14.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone7, locale14);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        timeZone19.setRawOffset((-1));
        boolean boolean22 = timeZone7.hasSameRules(timeZone19);
        java.util.TimeZone timeZone23 = null;
        boolean boolean24 = timeZone19.hasSameRules(timeZone23);
        int int25 = timeZone19.getRawOffset();
        boolean boolean26 = timeZone0.hasSameRules(timeZone19);
        java.lang.String str27 = timeZone19.getID();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone30);
        timeZone30.setRawOffset(3);
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        java.util.TimeZone timeZone39 = fastDateFormat37.getTimeZone();
        boolean boolean40 = timeZone30.hasSameRules(timeZone39);
        java.util.TimeZone.setDefault(timeZone30);
        boolean boolean42 = timeZone19.hasSameRules(timeZone30);
        timeZone30.setRawOffset(27);
        java.util.Calendar.Builder builder45 = new java.util.Calendar.Builder();
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.lang.String str47 = locale46.getLanguage();
        boolean boolean48 = locale46.hasExtensions();
        java.lang.String str49 = locale46.getDisplayCountry();
        java.util.Calendar.Builder builder50 = builder45.setLocale(locale46);
        java.util.Calendar.Builder builder54 = builder45.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder56 = builder45.setLenient(false);
        java.util.Calendar.Builder builder60 = builder45.setTimeOfDay(15, 0, 32770);
        java.util.Locale locale61 = java.util.Locale.UK;
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.lang.String str63 = locale61.getDisplayCountry(locale62);
        java.lang.String str64 = locale61.getISO3Language();
        java.lang.String str66 = locale61.getExtension('x');
        java.lang.String str67 = locale61.getLanguage();
        java.lang.String str68 = locale61.getLanguage();
        java.util.Calendar.Builder builder69 = builder45.setLocale(locale61);
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        boolean boolean72 = timeZone70.hasSameRules(timeZone71);
        java.util.Locale locale73 = java.util.Locale.GERMAN;
        java.lang.String str74 = locale73.getDisplayName();
        java.lang.String str75 = locale73.getDisplayCountry();
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(timeZone71, locale73);
        int int78 = calendar76.getActualMinimum(2);
        java.util.TimeZone timeZone79 = calendar76.getTimeZone();
        java.util.Calendar.Builder builder80 = new java.util.Calendar.Builder();
        java.util.Locale locale81 = java.util.Locale.CHINESE;
        java.lang.String str82 = locale81.getLanguage();
        boolean boolean83 = locale81.hasExtensions();
        java.lang.String str84 = locale81.getDisplayCountry();
        java.util.Calendar.Builder builder85 = builder80.setLocale(locale81);
        java.util.Calendar.Builder builder89 = builder80.setWeekDate(38, 41, 11);
        java.util.TimeZone timeZone91 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat92 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone91);
        java.lang.String str93 = fastDateFormat92.toString();
        java.lang.String str94 = fastDateFormat92.toString();
        java.util.TimeZone timeZone95 = fastDateFormat92.getTimeZone();
        java.util.Calendar.Builder builder96 = builder89.setTimeZone(timeZone95);
        boolean boolean97 = timeZone79.hasSameRules(timeZone95);
        java.util.Calendar.Builder builder98 = builder69.setTimeZone(timeZone95);
        boolean boolean99 = timeZone30.hasSameRules(timeZone95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar76", (calendar10.compareTo(calendar76) == 0) == calendar10.equals(calendar76));
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test282");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str2 = locale1.getDisplayName();
        boolean boolean3 = fastDateFormat0.equals((java.lang.Object) str2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getDisplayName();
        java.lang.String str9 = locale7.getDisplayCountry();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone5, locale7);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone5);
        java.lang.String str12 = fastDateFormat0.format((java.lang.Object) calendar11);
        int int13 = fastDateFormat0.getMaxLengthEstimate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar11", (calendar10.compareTo(calendar11) == 0) == calendar10.equals(calendar11));
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test283");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        timeZone0.setRawOffset(40);
        timeZone0.setRawOffset(43);
        int int8 = timeZone0.getRawOffset();
        java.util.TimeZone.setDefault(timeZone0);
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        boolean boolean13 = locale11.hasExtensions();
        java.lang.String str14 = locale11.getDisplayCountry();
        java.util.Calendar.Builder builder15 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder19 = builder10.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale21 = new java.util.Locale("de");
        java.lang.String str22 = locale21.toLanguageTag();
        java.lang.String str23 = locale21.getCountry();
        java.util.Calendar.Builder builder24 = builder10.setLocale(locale21);
        java.util.Calendar calendar25 = builder24.build();
        calendar25.set(0, 36, 55);
        java.util.TimeZone timeZone30 = calendar25.getTimeZone();
        java.util.Locale locale34 = new java.util.Locale("zh", "10 Feb 2022 09:36:07 GMT", "java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone30, locale34);
        java.lang.String str36 = timeZone0.getDisplayName(locale34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar35", (calendar3.compareTo(calendar35) == 0) == calendar3.equals(calendar35));
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test284");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone2);
        timeZone2.setRawOffset(3);
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.TimeZone timeZone11 = fastDateFormat9.getTimeZone();
        boolean boolean12 = timeZone2.hasSameRules(timeZone11);
        boolean boolean13 = timeZone11.observesDaylightTime();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        int int15 = calendar14.getWeeksInWeekYear();
        java.time.Instant instant16 = calendar14.toInstant();
        boolean boolean17 = calendar14.isWeekDateSupported();
        int int18 = calendar14.getWeekYear();
        int int19 = calendar14.getWeekYear();
        calendar14.setFirstDayOfWeek(27);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition(16);
        int int30 = parsePosition29.getErrorIndex();
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet32 = locale31.getExtensionKeys();
        boolean boolean33 = parsePosition29.equals((java.lang.Object) locale31);
        java.lang.String str34 = locale31.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone24, locale31);
        timeZone24.setRawOffset(22);
        int int39 = timeZone24.getOffset(3922746524000L);
        calendar14.setTimeZone(timeZone24);
        boolean boolean41 = timeZone11.hasSameRules(timeZone24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar27", (calendar14.compareTo(calendar27) == 0) == calendar14.equals(calendar27));
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test285");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale7 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale7);
        java.lang.String str9 = locale7.getLanguage();
        java.lang.String str10 = locale7.getVariant();
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        boolean boolean13 = locale11.hasExtensions();
        java.lang.String str14 = locale7.getDisplayCountry(locale11);
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category15, locale16);
        java.util.Locale locale18 = java.util.Locale.getDefault(category15);
        boolean boolean19 = locale18.hasExtensions();
        java.lang.String[] strArray25 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        java.util.stream.Stream<java.lang.String> strStream28 = strList26.stream();
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        int int30 = strList26.lastIndexOf((java.lang.Object) locale29);
        java.lang.String str31 = locale18.getDisplayVariant(locale29);
        java.lang.String str32 = locale7.getDisplayCountry(locale18);
        java.lang.String str33 = locale7.getDisplayName();
        java.text.ParsePosition parsePosition35 = new java.text.ParsePosition(16);
        int int36 = parsePosition35.getErrorIndex();
        java.util.TimeZone timeZone38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone38);
        java.lang.String str40 = fastDateFormat39.getPattern();
        boolean boolean41 = parsePosition35.equals((java.lang.Object) fastDateFormat39);
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        boolean boolean43 = parsePosition35.equals((java.lang.Object) locale42);
        java.lang.String str44 = locale42.getDisplayScript();
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder47 = builder45.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder48 = builder45.clear();
        java.util.Locale locale49 = builder48.build();
        java.lang.String str50 = locale42.getDisplayVariant(locale49);
        java.lang.String str51 = locale7.getDisplayVariant(locale42);
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone52.hasSameRules(timeZone53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet56 = locale55.getExtensionKeys();
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone52, locale55);
        java.lang.String str58 = locale55.getCountry();
        java.lang.String str59 = locale7.getDisplayName(locale55);
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(locale55);
        java.lang.String str61 = locale55.getDisplayVariant();
        java.util.Locale.setDefault(category0, locale55);
        java.util.Locale locale63 = java.util.Locale.getDefault(category0);
        java.util.Locale locale67 = new java.util.Locale("java.text.FieldPosition[field=1,attribute=null,beginIndex=0,endIndex=0]", "\u4e0a\u5348", "h:mm:ss a z");
        java.util.Locale locale68 = java.util.Locale.PRC;
        java.lang.String str69 = locale68.getDisplayLanguage();
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        boolean boolean72 = timeZone70.hasSameRules(timeZone71);
        java.util.Locale locale73 = java.util.Locale.GERMAN;
        java.lang.String str74 = locale73.getDisplayName();
        java.lang.String str75 = locale73.getDisplayCountry();
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(timeZone71, locale73);
        java.util.Locale locale77 = java.util.Locale.CHINESE;
        java.util.Locale locale78 = locale77.stripExtensions();
        java.lang.String str79 = locale77.getVariant();
        java.lang.String str80 = locale73.getDisplayScript(locale77);
        java.util.Set<java.lang.String> strSet81 = locale73.getUnicodeLocaleKeys();
        java.util.Locale locale82 = java.util.Locale.GERMAN;
        java.util.Locale.Category category83 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale84 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category83, locale84);
        java.lang.String str86 = locale84.getScript();
        java.lang.String str87 = locale82.getDisplayCountry(locale84);
        java.lang.String str88 = locale73.getDisplayCountry(locale84);
        java.lang.String str89 = locale68.getDisplayCountry(locale84);
        java.lang.String str90 = locale67.getDisplayScript(locale68);
        java.util.Locale.setDefault(locale68);
        java.util.Locale.setDefault(category0, locale68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar57 and calendar76", (calendar57.compareTo(calendar76) == 0) == calendar57.equals(calendar76));
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test286");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        boolean boolean3 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale4);
        java.lang.StringBuffer stringBuffer6 = null;
        java.lang.StringBuffer stringBuffer7 = fastDateFormat2.format(calendar5, stringBuffer6);
        java.lang.Object obj8 = fastDateFormat2.clone();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone9);
        calendar12.add(11, 36);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone16, locale19);
        calendar12.setTimeZone(timeZone16);
        boolean boolean23 = fastDateFormat2.equals((java.lang.Object) calendar12);
        java.lang.Object obj24 = fastDateFormat2.clone();
        java.util.Date date30 = new java.util.Date(6, 0, 0, 42, 292278994);
        java.lang.String str31 = fastDateFormat2.format(date30);
        java.lang.String str32 = fastDateFormat2.toString();
        java.util.TimeZone timeZone34 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone34);
        java.lang.String str36 = fastDateFormat35.getPattern();
        java.util.Date date37 = new java.util.Date();
        int int38 = date37.getTimezoneOffset();
        long long39 = date37.getTime();
        int int40 = date37.getMonth();
        date37.setSeconds(7);
        date37.setSeconds(1);
        java.util.Date date45 = new java.util.Date();
        int int46 = date45.getTimezoneOffset();
        long long47 = date45.getTime();
        int int48 = date45.getMonth();
        date45.setSeconds(7);
        date45.setSeconds(1);
        boolean boolean53 = date37.before(date45);
        long long54 = date37.getTime();
        java.text.AttributedCharacterIterator attributedCharacterIterator55 = fastDateFormat35.formatToCharacterIterator((java.lang.Object) date37);
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone56.hasSameRules(timeZone57);
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone57, locale59);
        calendar60.clear(0);
        calendar60.setFirstDayOfWeek(51);
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        boolean boolean68 = timeZone66.hasSameRules(timeZone67);
        java.util.Locale locale69 = java.util.Locale.ROOT;
        java.util.Calendar calendar70 = java.util.Calendar.getInstance(timeZone67, locale69);
        java.text.ParsePosition parsePosition72 = new java.text.ParsePosition(16);
        int int73 = parsePosition72.getErrorIndex();
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet75 = locale74.getExtensionKeys();
        boolean boolean76 = parsePosition72.equals((java.lang.Object) locale74);
        java.lang.String str77 = locale74.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat78 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone67, locale74);
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone80 = java.util.TimeZone.getDefault();
        boolean boolean81 = timeZone79.hasSameRules(timeZone80);
        java.util.Locale locale82 = java.util.Locale.ROOT;
        java.util.Calendar calendar83 = java.util.Calendar.getInstance(timeZone80, locale82);
        long long84 = calendar83.getTimeInMillis();
        java.lang.String str85 = fastDateFormat78.format(calendar83);
        java.util.Date date86 = calendar83.getTime();
        calendar60.setTime(date86);
        int int89 = calendar60.getLeastMaximum(0);
        java.lang.String str90 = fastDateFormat35.format(calendar60);
        java.util.Date date91 = calendar60.getTime();
        java.lang.String str92 = fastDateFormat2.format(date91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar60", (calendar5.compareTo(calendar60) == 0) == calendar5.equals(calendar60));
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test287");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        long long19 = calendar18.getTimeInMillis();
        java.lang.String str20 = fastDateFormat13.format(calendar18);
        java.util.Date date21 = calendar18.getTime();
        calendar18.setLenient(true);
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone25, locale27);
        java.lang.String str29 = locale27.getDisplayLanguage();
        java.lang.String str31 = locale27.getUnicodeLocaleType("zh");
        java.util.Locale locale32 = locale27.stripExtensions();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34, locale36);
        java.lang.String str39 = locale36.getExtension('a');
        java.lang.String str40 = locale32.getDisplayName(locale36);
        boolean boolean41 = calendar18.after((java.lang.Object) locale36);
        java.lang.String str42 = locale36.getDisplayScript();
        java.util.Locale.Category category43 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone44.hasSameRules(timeZone45);
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.lang.String str48 = locale47.getDisplayName();
        java.lang.String str49 = locale47.getDisplayCountry();
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone45, locale47);
        java.util.Locale.setDefault(category43, locale47);
        java.util.Locale locale55 = new java.util.Locale("09:34 Uhr GMT+00:00", "java.text.ParsePosition[index=1,errorIndex=-1]", "9:34:49 AM UTC");
        java.lang.String str56 = locale47.getDisplayLanguage(locale55);
        java.lang.String str57 = locale36.getDisplayLanguage(locale55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar50", (calendar5.compareTo(calendar50) == 0) == calendar5.equals(calendar50));
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test288");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7);
        timeZone7.setRawOffset(3);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        boolean boolean17 = timeZone7.hasSameRules(timeZone16);
        boolean boolean18 = timeZone1.hasSameRules(timeZone16);
        java.util.TimeZone.setDefault(timeZone16);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition(16);
        int int28 = parsePosition27.getErrorIndex();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        boolean boolean31 = parsePosition27.equals((java.lang.Object) locale29);
        java.lang.String str32 = locale29.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22, locale29);
        int int34 = timeZone22.getRawOffset();
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.lang.String str36 = locale35.getLanguage();
        boolean boolean37 = locale35.hasExtensions();
        java.lang.String str38 = locale35.getDisplayScript();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale35);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone22, locale35);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone16, locale35);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone43 = fastDateFormat42.getTimeZone();
        int int45 = timeZone43.getOffset(1644572101904L);
        calendar41.setTimeZone(timeZone43);
        calendar41.clear();
        java.util.Calendar calendar49 = java.util.Calendar.getInstance();
        boolean boolean50 = calendar49.isWeekDateSupported();
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.lang.String str54 = locale51.getDisplayVariant(locale53);
        boolean boolean55 = calendar49.before((java.lang.Object) str54);
        int int56 = calendar49.getFirstDayOfWeek();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone57.hasSameRules(timeZone58);
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone57);
        calendar49.setTimeZone(timeZone57);
        java.util.Locale locale63 = new java.util.Locale("");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08", timeZone57, locale63);
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(timeZone57);
        timeZone57.setID("9:36:04 AM UTC");
        boolean boolean68 = calendar41.after((java.lang.Object) timeZone57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar49", (calendar4.compareTo(calendar49) == 0) == calendar4.equals(calendar49));
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test289");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        timeZone14.setRawOffset((-1));
        boolean boolean17 = timeZone2.hasSameRules(timeZone14);
        java.lang.String[] strArray19 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.stream.Stream<java.lang.String> strStream22 = strList20.stream();
        strList20.clear();
        boolean boolean24 = strList20.isEmpty();
        boolean boolean25 = strList20.isEmpty();
        java.util.ListIterator<java.lang.String> strItor26 = strList20.listIterator();
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone28.hasSameRules(timeZone29);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone29, locale31);
        java.lang.String str33 = locale31.getDisplayLanguage();
        java.lang.String str35 = locale31.getUnicodeLocaleType("zh");
        java.lang.String str36 = locale27.getDisplayScript(locale31);
        int int37 = strList20.indexOf((java.lang.Object) locale27);
        java.lang.String str38 = locale27.getDisplayScript();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone2, locale27);
        java.util.Set<java.lang.String> strSet40 = locale27.getUnicodeLocaleKeys();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar39", (calendar5.compareTo(calendar39) == 0) == calendar5.equals(calendar39));
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test290");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.lang.String str6 = locale4.getDisplayLanguage();
        java.lang.String str8 = locale4.getUnicodeLocaleType("zh");
        java.lang.String str9 = locale0.getDisplayScript(locale4);
        java.lang.String str10 = locale0.getVariant();
        java.lang.String str11 = locale0.getDisplayCountry();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale12.getDisplayName();
        java.lang.String str14 = locale12.getDisplayCountry();
        java.util.Set<java.lang.String> strSet15 = locale12.getUnicodeLocaleKeys();
        java.lang.String str16 = locale0.getDisplayLanguage(locale12);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale12);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone19.hasSameRules(timeZone20);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone20);
        java.util.Locale locale23 = fastDateFormat22.getLocale();
        java.lang.String str24 = fastDateFormat22.toString();
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition(16);
        int int28 = parsePosition27.getErrorIndex();
        java.lang.Object obj29 = fastDateFormat22.parseObject("Vereinigtes K\366nigreich", parsePosition27);
        java.util.Locale locale30 = fastDateFormat22.getLocale();
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        java.util.stream.Stream<java.lang.String> strStream32 = strSet31.parallelStream();
        boolean boolean33 = calendar17.after((java.lang.Object) strStream32);
        java.util.Calendar.Builder builder34 = new java.util.Calendar.Builder();
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.lang.String str36 = locale35.getLanguage();
        boolean boolean37 = locale35.hasExtensions();
        java.lang.String str38 = locale35.getDisplayCountry();
        java.util.Calendar.Builder builder39 = builder34.setLocale(locale35);
        java.util.Locale.Category category40 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category40, locale41);
        java.util.Locale locale43 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category40, locale43);
        java.lang.String str45 = locale43.toLanguageTag();
        java.util.Calendar.Builder builder46 = builder34.setLocale(locale43);
        java.util.Calendar.Builder builder50 = builder46.setWeekDate(97, 0, 37);
        java.util.Calendar.Builder builder52 = builder46.setLenient(true);
        java.lang.String[] strArray54 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        java.util.stream.Stream<java.lang.String> strStream57 = strList55.stream();
        boolean boolean59 = strList55.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor61 = strList55.listIterator(0);
        java.lang.String[] strArray63 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        java.util.stream.Stream<java.lang.String> strStream66 = strList64.stream();
        boolean boolean68 = strList64.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor70 = strList64.listIterator(0);
        java.lang.String[] strArray72 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        java.util.stream.Stream<java.lang.String> strStream75 = strList73.stream();
        java.util.ListIterator<java.lang.String> strItor76 = strList73.listIterator();
        boolean boolean77 = strList64.removeAll((java.util.Collection<java.lang.String>) strList73);
        boolean boolean78 = strList55.containsAll((java.util.Collection<java.lang.String>) strList64);
        java.util.TimeZone timeZone80 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat81 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone80);
        java.lang.String str82 = fastDateFormat81.toString();
        java.lang.String str83 = fastDateFormat81.toString();
        java.util.TimeZone timeZone84 = fastDateFormat81.getTimeZone();
        timeZone84.setRawOffset((int) (short) 100);
        int int87 = timeZone84.getRawOffset();
        java.util.TimeZone.setDefault(timeZone84);
        int int89 = strList55.indexOf((java.lang.Object) timeZone84);
        java.util.Calendar.Builder builder90 = builder46.setTimeZone(timeZone84);
        timeZone84.setRawOffset(32772);
        java.util.Locale locale94 = java.util.Locale.forLanguageTag("GMT+00:00");
        java.lang.String str95 = locale94.getVariant();
        java.lang.String str96 = locale94.getDisplayScript();
        java.lang.String str97 = locale94.getDisplayName();
        java.util.Calendar calendar98 = java.util.Calendar.getInstance(timeZone84, locale94);
        calendar17.setTimeZone(timeZone84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar98", (calendar5.compareTo(calendar98) == 0) == calendar5.equals(calendar98));
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test291");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("it-x-de");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone4);
        java.util.Locale locale7 = fastDateFormat6.getLocale();
        java.lang.String str8 = fastDateFormat6.toString();
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition(16);
        int int12 = parsePosition11.getErrorIndex();
        java.lang.Object obj13 = fastDateFormat6.parseObject("Vereinigtes K\366nigreich", parsePosition11);
        java.lang.String[] strArray15 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.stream.Stream<java.lang.String> strStream18 = strList16.stream();
        boolean boolean20 = strList16.add("hi!");
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.lang.String str22 = locale21.getLanguage();
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale21.getDisplayVariant(locale23);
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.lang.String str26 = locale21.getDisplayVariant(locale25);
        boolean boolean27 = strList16.contains((java.lang.Object) locale21);
        boolean boolean28 = parsePosition11.equals((java.lang.Object) strList16);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        int int34 = timeZone30.getRawOffset();
        boolean boolean35 = strList16.equals((java.lang.Object) int34);
        java.util.ListIterator<java.lang.String> strItor37 = strList16.listIterator((int) (short) 0);
        strList16.add((int) (byte) 1, "2022-2-7 9:40:58");
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strList16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap42 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList43 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap42);
        java.util.Calendar.Builder builder45 = new java.util.Calendar.Builder();
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.lang.String str47 = locale46.getLanguage();
        boolean boolean48 = locale46.hasExtensions();
        java.lang.String str49 = locale46.getDisplayCountry();
        java.util.Calendar.Builder builder50 = builder45.setLocale(locale46);
        java.util.Calendar.Builder builder54 = builder45.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale56 = new java.util.Locale("de");
        java.lang.String str57 = locale56.toLanguageTag();
        java.lang.String str58 = locale56.getCountry();
        java.util.Calendar.Builder builder59 = builder45.setLocale(locale56);
        java.util.Locale locale60 = java.util.Locale.CHINESE;
        java.lang.String str61 = locale60.getLanguage();
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.lang.String str63 = locale60.getDisplayVariant(locale62);
        java.util.Locale locale64 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleKeys();
        java.lang.String str66 = locale62.getDisplayCountry(locale64);
        java.lang.String str67 = locale64.getISO3Country();
        java.util.Locale locale70 = new java.util.Locale("9:34:37 AM UTC", "Fri Feb 11 09:34:34 UTC 2022");
        java.text.ParsePosition parsePosition72 = new java.text.ParsePosition(16);
        int int73 = parsePosition72.getErrorIndex();
        java.util.TimeZone timeZone75 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat76 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone75);
        java.lang.String str77 = fastDateFormat76.getPattern();
        boolean boolean78 = parsePosition72.equals((java.lang.Object) fastDateFormat76);
        java.util.Locale locale79 = java.util.Locale.FRANCE;
        boolean boolean80 = parsePosition72.equals((java.lang.Object) locale79);
        java.lang.String str81 = locale79.getDisplayScript();
        java.lang.String str82 = locale70.getDisplayLanguage(locale79);
        java.lang.String str83 = locale64.getDisplayVariant(locale79);
        java.lang.String str84 = locale56.getDisplayCountry(locale79);
        boolean boolean85 = locale79.hasExtensions();
        java.util.Calendar calendar86 = java.util.Calendar.getInstance(locale79);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat87 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, locale79);
        java.util.Set<java.lang.String> strSet88 = locale79.getUnicodeLocaleKeys();
        java.lang.String str89 = java.util.Locale.lookupTag(languageRangeList43, (java.util.Collection<java.lang.String>) strSet88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar33 and calendar86", (calendar33.compareTo(calendar86) == 0) == calendar33.equals(calendar86));
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test292");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7);
        timeZone7.setRawOffset(3);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        boolean boolean17 = timeZone7.hasSameRules(timeZone16);
        boolean boolean18 = timeZone1.hasSameRules(timeZone16);
        java.util.TimeZone.setDefault(timeZone16);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition(16);
        int int28 = parsePosition27.getErrorIndex();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        boolean boolean31 = parsePosition27.equals((java.lang.Object) locale29);
        java.lang.String str32 = locale29.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22, locale29);
        int int34 = timeZone22.getRawOffset();
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.lang.String str36 = locale35.getLanguage();
        boolean boolean37 = locale35.hasExtensions();
        java.lang.String str38 = locale35.getDisplayScript();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale35);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone22, locale35);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone16, locale35);
        java.util.TimeZone.setDefault(timeZone16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar25", (calendar4.compareTo(calendar25) == 0) == calendar4.equals(calendar25));
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test293");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayVariant(locale9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale7);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.lang.String str18 = locale16.getDisplayLanguage();
        java.lang.String str20 = locale16.getUnicodeLocaleType("zh");
        java.lang.String str21 = locale12.getDisplayScript(locale16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone6, locale16);
        java.lang.String str23 = timeZone6.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar17", (calendar11.compareTo(calendar17) == 0) == calendar11.equals(calendar17));
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test294");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayVariant(locale9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale7);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.lang.String str18 = locale16.getDisplayLanguage();
        java.lang.String str20 = locale16.getUnicodeLocaleType("zh");
        java.lang.String str21 = locale12.getDisplayScript(locale16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone6, locale16);
        java.lang.String str23 = timeZone6.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar17", (calendar11.compareTo(calendar17) == 0) == calendar11.equals(calendar17));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test295");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone2);
        int int10 = timeZone2.getOffset(1644572086894L);
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.lang.String str14 = fastDateFormat13.toString();
        java.lang.String str15 = fastDateFormat13.toString();
        java.util.TimeZone timeZone16 = fastDateFormat13.getTimeZone();
        java.util.Locale locale17 = fastDateFormat13.getLocale();
        java.lang.String str18 = locale17.getLanguage();
        java.lang.String str19 = locale17.getDisplayName();
        java.util.Locale locale23 = new java.util.Locale("10 Feb 2022 09:37:22 GMT", "German (Germany)", "9:37:51 AM UTC");
        java.lang.String str24 = locale17.getDisplayName(locale23);
        java.util.Locale locale25 = locale17.stripExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone2, locale17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar8", (calendar7.compareTo(calendar8) == 0) == calendar7.equals(calendar8));
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test296");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.set(12, 10);
        java.util.Calendar.Builder builder4 = new java.util.Calendar.Builder();
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        boolean boolean7 = locale5.hasExtensions();
        java.lang.String str8 = locale5.getDisplayCountry();
        java.util.Calendar.Builder builder9 = builder4.setLocale(locale5);
        java.util.Date date11 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder12 = builder9.setInstant(date11);
        boolean boolean13 = calendar0.before((java.lang.Object) date11);
        int int15 = calendar0.getMinimum((int) (short) 10);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17);
        java.lang.String str19 = fastDateFormat18.toString();
        java.lang.String str20 = fastDateFormat18.toString();
        java.util.TimeZone timeZone21 = fastDateFormat18.getTimeZone();
        timeZone21.setRawOffset((int) (short) 100);
        int int24 = timeZone21.getRawOffset();
        java.util.TimeZone.setDefault(timeZone21);
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone21);
        calendar0.setTimeZone(timeZone21);
        java.util.Locale locale30 = new java.util.Locale("java.text.AttributedCharacterIterator$Attribute(input_method_segment)", "cinese");
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale31);
        java.util.Set<java.lang.String> strSet33 = locale31.getUnicodeLocaleKeys();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale31);
        java.lang.String str35 = locale30.getDisplayVariant(locale31);
        java.lang.String str36 = locale30.getVariant();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone21, locale30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar32", (calendar26.compareTo(calendar32) == 0) == calendar26.equals(calendar32));
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test297");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone2);
        java.lang.Object obj5 = fastDateFormat4.clone();
        int int6 = fastDateFormat4.getMaxLengthEstimate();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone8);
        boolean boolean10 = fastDateFormat9.getTimeZoneOverridesCalendar();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        int int12 = calendar11.getWeeksInWeekYear();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        boolean boolean17 = timeZone13.hasSameRules(timeZone15);
        calendar11.setTimeZone(timeZone13);
        calendar11.set((int) (byte) 100, (int) (byte) 1, 0, 6, (-1));
        java.lang.String str25 = fastDateFormat9.format(calendar11);
        calendar11.add(14, 14);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet33 = locale32.getExtensionKeys();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone29, locale32);
        int int36 = timeZone29.getOffset((long) 2);
        java.util.Locale.Category category37 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category37, locale38);
        java.util.Locale locale40 = java.util.Locale.getDefault(category37);
        java.util.Locale locale41 = java.util.Locale.getDefault(category37);
        java.util.Locale locale42 = null;
        java.lang.String str43 = locale41.getDisplayCountry(locale42);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone29, locale41);
        boolean boolean45 = calendar11.before((java.lang.Object) calendar44);
        java.lang.String str46 = calendar44.getCalendarType();
        java.lang.String str47 = fastDateFormat4.format(calendar44);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone52 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone52);
        java.lang.String str54 = fastDateFormat53.toString();
        java.lang.String str55 = fastDateFormat53.toString();
        java.util.TimeZone timeZone56 = fastDateFormat53.getTimeZone();
        java.util.Locale locale57 = java.util.Locale.CHINESE;
        java.lang.String str58 = locale57.getLanguage();
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.lang.String str60 = locale57.getDisplayVariant(locale59);
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(timeZone56, locale57);
        boolean boolean62 = calendar61.isWeekDateSupported();
        calendar61.set(7, 4, 0);
        java.util.Date date67 = calendar61.getTime();
        java.lang.String str68 = fastDateFormat50.format(calendar61);
        java.util.TimeZone timeZone69 = fastDateFormat50.getTimeZone();
        java.lang.Object obj70 = null;
        boolean boolean71 = fastDateFormat50.equals(obj70);
        java.text.ParsePosition parsePosition74 = new java.text.ParsePosition(16);
        int int75 = parsePosition74.getErrorIndex();
        int int76 = parsePosition74.getErrorIndex();
        java.lang.Object obj77 = fastDateFormat50.parseObject("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", parsePosition74);
        parsePosition74.setIndex(0);
        int int80 = parsePosition74.getErrorIndex();
        parsePosition74.setIndex(53);
        java.lang.Object obj83 = fastDateFormat4.parseObject("", parsePosition74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar34 and calendar44", (calendar34.compareTo(calendar44) == 0) == calendar34.equals(calendar44));
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test298");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet5 = locale4.getExtensionKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale4);
        int int8 = timeZone1.getOffset((long) 2);
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category9, locale10);
        java.util.Locale locale12 = java.util.Locale.getDefault(category9);
        java.util.Locale locale13 = java.util.Locale.getDefault(category9);
        java.util.Locale locale14 = null;
        java.lang.String str15 = locale13.getDisplayCountry(locale14);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone1, locale13);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar16", (calendar6.compareTo(calendar16) == 0) == calendar6.equals(calendar16));
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test299");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone2);
        java.util.Locale locale5 = fastDateFormat4.getLocale();
        java.lang.String str6 = fastDateFormat4.toString();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition(16);
        int int10 = parsePosition9.getErrorIndex();
        java.lang.Object obj11 = fastDateFormat4.parseObject("Vereinigtes K\366nigreich", parsePosition9);
        java.lang.String str12 = parsePosition9.toString();
        parsePosition9.setErrorIndex((-1));
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone16);
        java.util.Date date18 = new java.util.Date();
        int int19 = date18.getTimezoneOffset();
        int int20 = date18.getSeconds();
        java.lang.StringBuffer stringBuffer21 = null;
        java.text.Format.Field field22 = null;
        java.text.FieldPosition fieldPosition24 = new java.text.FieldPosition(field22, 1);
        fieldPosition24.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer27 = fastDateFormat17.format((java.lang.Object) date18, stringBuffer21, fieldPosition24);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance();
        boolean boolean29 = calendar28.isWeekDateSupported();
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale30.getDisplayVariant(locale32);
        boolean boolean34 = calendar28.before((java.lang.Object) str33);
        long long35 = calendar28.getTimeInMillis();
        int int36 = calendar28.getMinimalDaysInFirstWeek();
        java.lang.StringBuffer stringBuffer37 = null;
        java.text.Format.Field field38 = null;
        java.text.FieldPosition fieldPosition40 = new java.text.FieldPosition(field38, 3);
        fieldPosition40.setEndIndex(12);
        java.lang.StringBuffer stringBuffer43 = fastDateFormat17.format((java.lang.Object) calendar28, stringBuffer37, fieldPosition40);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(locale44);
        java.time.Instant instant46 = calendar45.toInstant();
        java.time.Instant instant47 = calendar45.toInstant();
        java.text.AttributedCharacterIterator attributedCharacterIterator48 = fastDateFormat17.formatToCharacterIterator((java.lang.Object) calendar45);
        int int49 = calendar45.getMinimalDaysInFirstWeek();
        java.time.Instant instant50 = calendar45.toInstant();
        boolean boolean51 = parsePosition9.equals((java.lang.Object) instant50);
        java.lang.String str52 = parsePosition9.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar28 and calendar45", (calendar28.compareTo(calendar45) == 0) == calendar28.equals(calendar45));
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test300");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition(16);
        int int9 = parsePosition8.getErrorIndex();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        boolean boolean12 = parsePosition8.equals((java.lang.Object) locale10);
        java.lang.String str13 = locale10.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone3, locale10);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        timeZone15.setRawOffset((-1));
        boolean boolean18 = timeZone3.hasSameRules(timeZone15);
        java.util.TimeZone timeZone19 = null;
        boolean boolean20 = timeZone15.hasSameRules(timeZone19);
        int int21 = timeZone15.getRawOffset();
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition(16);
        int int25 = parsePosition24.getErrorIndex();
        java.util.TimeZone timeZone27 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone27);
        java.lang.String str29 = fastDateFormat28.getPattern();
        boolean boolean30 = parsePosition24.equals((java.lang.Object) fastDateFormat28);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        boolean boolean32 = parsePosition24.equals((java.lang.Object) locale31);
        java.lang.String str33 = locale31.toLanguageTag();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15, locale31);
        java.util.TimeZone timeZone36 = fastDateFormat35.getTimeZone();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone36);
        boolean boolean38 = timeZone36.useDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar37", (calendar6.compareTo(calendar37) == 0) == calendar6.equals(calendar37));
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test301");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str1 = attribute0.toString();
        java.lang.String str2 = attribute0.toString();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str5 = fastDateFormat3.format((long) 100);
        boolean boolean6 = attribute0.equals((java.lang.Object) str5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        int int8 = calendar7.getWeeksInWeekYear();
        java.time.Instant instant9 = calendar7.toInstant();
        int int11 = calendar7.getMinimum(4);
        calendar7.setFirstDayOfWeek(13);
        boolean boolean14 = attribute0.equals((java.lang.Object) 13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        int int16 = calendar15.getWeeksInWeekYear();
        java.time.Instant instant17 = calendar15.toInstant();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int19 = calendar15.getWeekYear();
        int int20 = calendar15.getWeekYear();
        calendar15.roll(45, 0);
        java.util.Date date24 = calendar15.getTime();
        boolean boolean25 = attribute0.equals((java.lang.Object) calendar15);
        java.lang.String str26 = attribute0.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar15", (calendar7.compareTo(calendar15) == 0) == calendar7.equals(calendar15));
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test302");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.StringBuffer stringBuffer4 = null;
        java.lang.StringBuffer stringBuffer5 = fastDateFormat2.format((long) 32772, stringBuffer4);
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getTimezoneOffset();
        long long8 = date6.getTime();
        int int9 = date6.getMinutes();
        java.lang.String str10 = fastDateFormat2.format(date6);
        boolean boolean11 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str12 = fastDateFormat2.getPattern();
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale14);
        boolean boolean16 = fastDateFormat15.getTimeZoneOverridesCalendar();
        java.lang.String str17 = fastDateFormat15.toString();
        java.util.TimeZone timeZone19 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone19);
        java.util.Date date21 = new java.util.Date();
        int int22 = date21.getTimezoneOffset();
        int int23 = date21.getSeconds();
        java.lang.StringBuffer stringBuffer24 = null;
        java.text.Format.Field field25 = null;
        java.text.FieldPosition fieldPosition27 = new java.text.FieldPosition(field25, 1);
        fieldPosition27.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer30 = fastDateFormat20.format((java.lang.Object) date21, stringBuffer24, fieldPosition27);
        java.lang.String str31 = fastDateFormat15.format(date21);
        java.lang.StringBuffer stringBuffer32 = null;
        java.text.Format.Field field33 = null;
        java.text.FieldPosition fieldPosition35 = new java.text.FieldPosition(field33, 1);
        int int36 = fieldPosition35.getEndIndex();
        java.text.Format.Field field37 = fieldPosition35.getFieldAttribute();
        int int38 = fieldPosition35.getField();
        java.lang.StringBuffer stringBuffer39 = fastDateFormat2.format((java.lang.Object) date21, stringBuffer32, fieldPosition35);
        java.lang.StringBuffer stringBuffer41 = null;
        java.lang.StringBuffer stringBuffer42 = fastDateFormat2.format(1644572178820L, stringBuffer41);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getTimeZone("9:34:37 AM UTC");
        java.util.TimeZone timeZone46 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229\u6587");
        boolean boolean47 = timeZone44.hasSameRules(timeZone46);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.util.Locale locale49 = locale48.stripExtensions();
        java.util.Locale locale50 = locale48.stripExtensions();
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone44, locale50);
        java.lang.StringBuffer stringBuffer52 = null;
        java.text.Format.Field field53 = null;
        java.text.FieldPosition fieldPosition55 = new java.text.FieldPosition(field53, 1);
        int int56 = fieldPosition55.getBeginIndex();
        java.util.TimeZone timeZone58 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone58);
        java.lang.String str60 = fastDateFormat59.toString();
        java.lang.String str61 = fastDateFormat59.toString();
        java.util.TimeZone timeZone62 = fastDateFormat59.getTimeZone();
        java.util.Locale locale63 = fastDateFormat59.getLocale();
        java.util.TimeZone timeZone64 = fastDateFormat59.getTimeZone();
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(timeZone64);
        java.lang.Object obj66 = timeZone64.clone();
        boolean boolean67 = fieldPosition55.equals((java.lang.Object) timeZone64);
        int int68 = fieldPosition55.getBeginIndex();
        int int69 = fieldPosition55.getBeginIndex();
        int int70 = fieldPosition55.getField();
        java.lang.StringBuffer stringBuffer71 = fastDateFormat2.format((java.lang.Object) calendar51, stringBuffer52, fieldPosition55);
        java.util.Locale locale72 = fastDateFormat2.getLocale();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar51 and calendar65", (calendar51.compareTo(calendar65) == 0) == calendar51.equals(calendar65));
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test303");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.lang.String str3 = locale2.getLanguage();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale2.getDisplayVariant(locale4);
        boolean boolean6 = calendar0.before((java.lang.Object) str5);
        int int7 = calendar0.getFirstDayOfWeek();
        java.util.TimeZone timeZone8 = calendar0.getTimeZone();
        java.util.TimeZone timeZone9 = null;
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.lang.String str14 = fastDateFormat13.toString();
        java.lang.String str15 = fastDateFormat13.toString();
        java.util.TimeZone timeZone16 = fastDateFormat13.getTimeZone();
        java.util.Locale locale17 = fastDateFormat13.getLocale();
        java.util.TimeZone timeZone18 = fastDateFormat13.getTimeZone();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone18);
        boolean boolean20 = timeZone8.hasSameRules(timeZone18);
        timeZone18.setID("11 Feb 2022 09:36:13 GMT");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar19", (calendar0.compareTo(calendar19) == 0) == calendar0.equals(calendar19));
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test304");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone4 = fastDateFormat2.getTimeZone();
        java.lang.String[] strArray10 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        int int15 = strList11.lastIndexOf((java.lang.Object) locale14);
        java.util.stream.Stream<java.lang.String> strStream16 = strList11.stream();
        java.lang.String[] strArray18 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.util.stream.Stream<java.lang.String> strStream21 = strList19.stream();
        strList19.clear();
        java.util.Spliterator<java.lang.String> strSpliterator23 = strList19.spliterator();
        int int24 = strList11.lastIndexOf((java.lang.Object) strSpliterator23);
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone26);
        java.lang.String str28 = fastDateFormat27.getPattern();
        boolean boolean29 = strList11.contains((java.lang.Object) str28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone31, locale33);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone37);
        timeZone37.setRawOffset(3);
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone43);
        java.lang.String str45 = fastDateFormat44.getPattern();
        java.util.TimeZone timeZone46 = fastDateFormat44.getTimeZone();
        boolean boolean47 = timeZone37.hasSameRules(timeZone46);
        boolean boolean48 = timeZone31.hasSameRules(timeZone46);
        java.util.TimeZone.setDefault(timeZone46);
        boolean boolean50 = strList11.contains((java.lang.Object) timeZone46);
        boolean boolean51 = fastDateFormat2.equals((java.lang.Object) strList11);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0);
        java.util.Locale locale54 = fastDateFormat53.getLocale();
        java.util.Locale locale57 = new java.util.Locale("Tue Jan 11 09:34:31 UTC 2022", "java.text.ParsePosition[index=100,errorIndex=-1]");
        java.util.Locale.setDefault(locale57);
        java.lang.String str59 = locale57.getDisplayCountry();
        boolean boolean60 = fastDateFormat53.equals((java.lang.Object) locale57);
        java.lang.Object obj61 = null;
        boolean boolean62 = fastDateFormat53.equals(obj61);
        int int63 = fastDateFormat53.getMaxLengthEstimate();
        java.util.Calendar calendar64 = java.util.Calendar.getInstance();
        boolean boolean65 = calendar64.isWeekDateSupported();
        java.util.Locale locale66 = java.util.Locale.CHINESE;
        java.lang.String str67 = locale66.getLanguage();
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.lang.String str69 = locale66.getDisplayVariant(locale68);
        boolean boolean70 = calendar64.before((java.lang.Object) str69);
        int int71 = calendar64.getFirstDayOfWeek();
        int int72 = calendar64.getWeekYear();
        int int73 = calendar64.getWeekYear();
        java.util.Date date74 = calendar64.getTime();
        java.time.Instant instant75 = date74.toInstant();
        java.util.Date date76 = java.util.Date.from(instant75);
        java.util.Date date77 = java.util.Date.from(instant75);
        date77.setSeconds(34);
        java.lang.String str80 = fastDateFormat53.format(date77);
        boolean boolean81 = strList11.equals((java.lang.Object) fastDateFormat53);
        java.lang.String str83 = fastDateFormat53.format(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar34 and calendar64", (calendar34.compareTo(calendar64) == 0) == calendar34.equals(calendar64));
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test305");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Date date8 = new java.util.Date(9, 11, (int) '4', 35, 40, 100);
        boolean boolean9 = calendar1.after((java.lang.Object) 35);
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone11);
        java.lang.String str13 = fastDateFormat12.toString();
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition(16);
        java.util.Date date17 = new java.util.Date();
        int int18 = date17.getDay();
        java.util.Date date19 = new java.util.Date();
        date19.setMinutes((int) '#');
        boolean boolean22 = date17.before(date19);
        boolean boolean23 = parsePosition16.equals((java.lang.Object) boolean22);
        parsePosition16.setErrorIndex(0);
        java.lang.Object obj26 = fastDateFormat12.parseObject("tedesco", parsePosition16);
        boolean boolean27 = calendar1.after((java.lang.Object) "tedesco");
        java.time.Instant instant28 = calendar1.toInstant();
        java.util.TimeZone timeZone29 = calendar1.getTimeZone();
        java.util.TimeZone timeZone30 = calendar1.getTimeZone();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale31.getDisplayName();
        java.lang.String str33 = locale31.getDisplayCountry();
        java.util.Set<java.lang.String> strSet34 = locale31.getUnicodeLocaleKeys();
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        java.util.Locale locale40 = new java.util.Locale("de");
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale40);
        java.lang.String str42 = locale37.getDisplayVariant(locale40);
        java.lang.String str43 = locale36.getDisplayCountry(locale37);
        java.lang.String str44 = locale31.getDisplayLanguage(locale37);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(locale37);
        java.lang.String str46 = timeZone30.getDisplayName(locale37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar41 and calendar45", (calendar41.compareTo(calendar45) == 0) == calendar41.equals(calendar45));
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test306");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = locale6.getLanguage();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale6.getDisplayVariant(locale8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone5, locale6);
        java.time.Instant instant11 = calendar10.toInstant();
        boolean boolean12 = calendar10.isWeekDateSupported();
        java.util.Locale locale14 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale14);
        java.lang.String str16 = locale14.getLanguage();
        java.lang.String str17 = locale14.getVariant();
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.lang.String str19 = locale18.getLanguage();
        boolean boolean20 = locale18.hasExtensions();
        java.lang.String str21 = locale14.getDisplayCountry(locale18);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category22, locale23);
        java.util.Locale locale25 = java.util.Locale.getDefault(category22);
        boolean boolean26 = locale25.hasExtensions();
        java.lang.String[] strArray32 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.util.stream.Stream<java.lang.String> strStream35 = strList33.stream();
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        int int37 = strList33.lastIndexOf((java.lang.Object) locale36);
        java.lang.String str38 = locale25.getDisplayVariant(locale36);
        java.lang.String str39 = locale14.getDisplayCountry(locale25);
        java.lang.String str40 = locale14.getDisplayName();
        java.text.ParsePosition parsePosition42 = new java.text.ParsePosition(16);
        int int43 = parsePosition42.getErrorIndex();
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone45);
        java.lang.String str47 = fastDateFormat46.getPattern();
        boolean boolean48 = parsePosition42.equals((java.lang.Object) fastDateFormat46);
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        boolean boolean50 = parsePosition42.equals((java.lang.Object) locale49);
        java.lang.String str51 = locale49.getDisplayScript();
        java.util.Locale.Builder builder52 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder54 = builder52.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder55 = builder52.clear();
        java.util.Locale locale56 = builder55.build();
        java.lang.String str57 = locale49.getDisplayVariant(locale56);
        java.lang.String str58 = locale14.getDisplayVariant(locale49);
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(locale14);
        int int61 = calendar59.getLeastMaximum(0);
        int int63 = calendar59.getLeastMaximum(9);
        int int64 = calendar59.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        boolean boolean67 = timeZone65.hasSameRules(timeZone66);
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.lang.String str69 = locale68.getDisplayName();
        java.lang.String str70 = locale68.getDisplayCountry();
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone66, locale68);
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone66);
        calendar59.setTimeZone(timeZone66);
        int int74 = calendar10.compareTo(calendar59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar71 and calendar72", (calendar71.compareTo(calendar72) == 0) == calendar71.equals(calendar72));
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test307");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder7 = builder0.setLenient(false);
        java.util.Date date9 = new java.util.Date("11 Feb 2022 09:37:02 GMT");
        date9.setMinutes(41);
        java.util.Calendar.Builder builder12 = builder7.setInstant(date9);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5e74\u6708\u65e5");
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition((int) (byte) 10);
        java.lang.Object obj18 = fastDateFormat14.parseObject("UTC12", parsePosition17);
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone20);
        java.lang.String str22 = fastDateFormat21.toString();
        java.lang.String str23 = fastDateFormat21.toString();
        java.util.TimeZone timeZone24 = fastDateFormat21.getTimeZone();
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = locale25.getLanguage();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.lang.String str28 = locale25.getDisplayVariant(locale27);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone24, locale25);
        boolean boolean30 = calendar29.isWeekDateSupported();
        java.time.Instant instant31 = calendar29.toInstant();
        java.util.Calendar.Builder builder32 = new java.util.Calendar.Builder();
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale33.getLanguage();
        boolean boolean35 = locale33.hasExtensions();
        java.lang.String str36 = locale33.getDisplayCountry();
        java.util.Calendar.Builder builder37 = builder32.setLocale(locale33);
        java.util.Date date39 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder40 = builder37.setInstant(date39);
        java.util.Calendar.Builder builder44 = builder40.setWeekDate((int) (short) -1, (int) '4', 35);
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone46);
        java.lang.String str48 = fastDateFormat47.toString();
        java.lang.String str49 = fastDateFormat47.toString();
        java.util.TimeZone timeZone50 = fastDateFormat47.getTimeZone();
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.lang.String str52 = locale51.getLanguage();
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.lang.String str54 = locale51.getDisplayVariant(locale53);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone50, locale51);
        java.util.Calendar.Builder builder56 = builder44.setTimeZone(timeZone50);
        calendar29.setTimeZone(timeZone50);
        int int58 = calendar29.getWeekYear();
        java.lang.String str59 = fastDateFormat14.format(calendar29);
        java.util.Date date60 = calendar29.getTime();
        java.util.Calendar.Builder builder61 = builder7.setInstant(date60);
        java.util.Calendar.Builder builder63 = builder61.setLenient(false);
        java.util.Calendar.Builder builder64 = new java.util.Calendar.Builder();
        java.util.Locale locale65 = java.util.Locale.CHINESE;
        java.lang.String str66 = locale65.getLanguage();
        boolean boolean67 = locale65.hasExtensions();
        java.lang.String str68 = locale65.getDisplayCountry();
        java.util.Calendar.Builder builder69 = builder64.setLocale(locale65);
        java.util.Locale.Category category70 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale71 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category70, locale71);
        java.util.Locale locale73 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category70, locale73);
        java.lang.String str75 = locale73.toLanguageTag();
        java.util.Calendar.Builder builder76 = builder64.setLocale(locale73);
        java.util.TimeZone timeZone78 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        boolean boolean80 = timeZone78.hasSameRules(timeZone79);
        java.util.Locale locale81 = java.util.Locale.ROOT;
        java.util.Calendar calendar82 = java.util.Calendar.getInstance(timeZone79, locale81);
        java.text.ParsePosition parsePosition84 = new java.text.ParsePosition(16);
        int int85 = parsePosition84.getErrorIndex();
        java.util.Locale locale86 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet87 = locale86.getExtensionKeys();
        boolean boolean88 = parsePosition84.equals((java.lang.Object) locale86);
        java.lang.String str89 = locale86.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat90 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone79, locale86);
        int int91 = timeZone79.getRawOffset();
        java.util.Calendar.Builder builder92 = builder76.setTimeZone(timeZone79);
        java.util.Calendar.Builder builder93 = builder61.setTimeZone(timeZone79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar29 and calendar82", (calendar29.compareTo(calendar82) == 0) == calendar29.equals(calendar82));
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test308");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.lang.String str3 = locale2.getLanguage();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale2.getDisplayVariant(locale4);
        boolean boolean6 = calendar0.before((java.lang.Object) str5);
        int int7 = calendar0.getFirstDayOfWeek();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale11);
        int int16 = calendar14.getActualMinimum(2);
        java.util.TimeZone timeZone17 = calendar14.getTimeZone();
        boolean boolean18 = calendar0.before((java.lang.Object) timeZone17);
        calendar0.clear();
        calendar0.setTimeInMillis(1644226689893L);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08");
        java.lang.Object obj24 = fastDateFormat23.clone();
        java.lang.String str25 = fastDateFormat23.getPattern();
        java.lang.Object obj26 = fastDateFormat23.clone();
        java.util.TimeZone timeZone27 = fastDateFormat23.getTimeZone();
        java.util.Locale locale29 = new java.util.Locale("Giappone");
        java.lang.String str30 = locale29.getCountry();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone27, locale29);
        calendar0.setTimeZone(timeZone27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar31", (calendar14.compareTo(calendar31) == 0) == calendar14.equals(calendar31));
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test309");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition(16);
        int int10 = parsePosition9.getErrorIndex();
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        boolean boolean15 = parsePosition9.equals((java.lang.Object) fastDateFormat13);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        boolean boolean17 = parsePosition9.equals((java.lang.Object) locale16);
        java.lang.String str18 = locale4.getDisplayCountry(locale16);
        java.util.Locale.Category category19 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category19, locale20);
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category19, locale22);
        java.lang.String str24 = locale22.getVariant();
        java.lang.String str25 = locale22.toLanguageTag();
        java.lang.String str26 = locale16.getDisplayName(locale22);
        java.lang.String str27 = locale22.getDisplayScript();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale22);
        java.lang.String str30 = fastDateFormat28.format(1644226536904L);
        java.util.TimeZone timeZone31 = fastDateFormat28.getTimeZone();
        java.util.TimeZone.setDefault(timeZone31);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone33);
        calendar36.add(11, 36);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet44 = locale43.getExtensionKeys();
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone40, locale43);
        calendar36.setTimeZone(timeZone40);
        boolean boolean47 = timeZone31.hasSameRules(timeZone40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar45", (calendar7.compareTo(calendar45) == 0) == calendar7.equals(calendar45));
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test310");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        boolean boolean2 = calendar1.isWeekDateSupported();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale3.getDisplayVariant(locale5);
        boolean boolean7 = calendar1.before((java.lang.Object) str6);
        long long8 = calendar1.getTimeInMillis();
        int int9 = calendar1.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone10 = calendar1.getTimeZone();
        int int11 = timeZone10.getRawOffset();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5e74\u6708\u65e5");
        int int14 = fastDateFormat13.getMaxLengthEstimate();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.Locale locale17 = java.util.Locale.PRC;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone16, locale17);
        boolean boolean19 = fastDateFormat13.equals((java.lang.Object) locale17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("11.02.1916 09:34:55", timeZone10, locale17);
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder21.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder25 = builder23.setLanguageTag("it");
        java.util.Locale.Builder builder28 = builder23.setExtension('x', "de");
        java.util.Locale.Builder builder30 = builder23.setVariant("tedesco");
        java.util.Locale.Builder builder32 = builder23.setVariant("");
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale.Builder builder34 = builder23.setLocale(locale33);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale33);
        java.util.Locale.setDefault(locale33);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone10, locale33);
        java.lang.Object obj38 = calendar37.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar35", (calendar1.compareTo(calendar35) == 0) == calendar1.equals(calendar35));
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test311");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category6, locale9);
        java.lang.String str11 = locale9.toLanguageTag();
        java.util.Calendar.Builder builder12 = builder0.setLocale(locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        java.text.ParsePosition parsePosition20 = new java.text.ParsePosition(16);
        int int21 = parsePosition20.getErrorIndex();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        boolean boolean24 = parsePosition20.equals((java.lang.Object) locale22);
        java.lang.String str25 = locale22.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15, locale22);
        int int27 = timeZone15.getRawOffset();
        java.util.Calendar.Builder builder28 = builder12.setTimeZone(timeZone15);
        java.util.Calendar calendar29 = builder12.build();
        int int31 = calendar29.getLeastMaximum(4);
        java.util.TimeZone timeZone34 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone34);
        java.lang.String str36 = fastDateFormat35.toString();
        java.lang.String str37 = fastDateFormat35.toString();
        java.util.TimeZone timeZone38 = fastDateFormat35.getTimeZone();
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = locale39.getLanguage();
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale39.getDisplayVariant(locale41);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone38, locale39);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone46, locale48);
        java.lang.String str50 = locale48.getDisplayLanguage();
        java.lang.String str52 = locale48.getUnicodeLocaleType("zh");
        java.lang.String str53 = locale44.getDisplayScript(locale48);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone38, locale48);
        calendar29.setTimeZone(timeZone38);
        java.util.Date date56 = calendar29.getTime();
        java.lang.String str57 = calendar29.getCalendarType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar43", (calendar18.compareTo(calendar43) == 0) == calendar18.equals(calendar43));
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test312");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        long long19 = calendar18.getTimeInMillis();
        java.lang.String str20 = fastDateFormat13.format(calendar18);
        long long21 = calendar18.getTimeInMillis();
        java.util.Date date27 = new java.util.Date(9, (int) 'x', (int) '#', 2, 7);
        int int28 = date27.getTimezoneOffset();
        date27.setYear(1970);
        calendar18.setTime(date27);
        java.util.Locale locale36 = new java.util.Locale("coreano", "Fri Feb 11 09:34:34 UTC 2022", "de");
        boolean boolean37 = locale36.hasExtensions();
        java.lang.String str38 = locale36.getDisplayVariant();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", locale36);
        java.lang.StringBuffer stringBuffer41 = null;
        java.lang.StringBuffer stringBuffer42 = fastDateFormat39.format((-2170453192000L), stringBuffer41);
        java.util.Locale locale43 = fastDateFormat39.getLocale();
        boolean boolean44 = calendar18.before((java.lang.Object) fastDateFormat39);
        long long45 = calendar18.getTimeInMillis();
        calendar18.set(23, 13, 24);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.lang.String str54 = locale53.getDisplayName();
        java.lang.String str55 = locale53.getDisplayCountry();
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone51, locale53);
        int int58 = calendar56.getActualMinimum(2);
        java.util.TimeZone timeZone59 = calendar56.getTimeZone();
        java.util.TimeZone timeZone60 = calendar56.getTimeZone();
        java.lang.String str61 = calendar56.getCalendarType();
        java.lang.String str62 = calendar56.getCalendarType();
        java.util.TimeZone timeZone63 = calendar56.getTimeZone();
        timeZone63.setID("deu");
        boolean boolean66 = timeZone63.observesDaylightTime();
        calendar18.setTimeZone(timeZone63);
        timeZone63.setID("Wed Dec 31 23:58:59 GMT 1969");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar56", (calendar5.compareTo(calendar56) == 0) == calendar5.equals(calendar56));
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test313");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.lang.String str7 = fastDateFormat6.toString();
        java.lang.String str8 = fastDateFormat6.toString();
        java.util.TimeZone timeZone9 = fastDateFormat6.getTimeZone();
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getLanguage();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale10.getDisplayVariant(locale12);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale10);
        boolean boolean15 = calendar14.isWeekDateSupported();
        calendar14.set(7, 4, 0);
        java.util.Date date20 = calendar14.getTime();
        java.lang.String str21 = fastDateFormat3.format(calendar14);
        java.util.TimeZone timeZone22 = fastDateFormat3.getTimeZone();
        java.lang.Object obj23 = null;
        boolean boolean24 = fastDateFormat3.equals(obj23);
        java.util.Calendar calendar25 = java.util.Calendar.getInstance();
        int int26 = calendar25.getWeeksInWeekYear();
        java.time.Instant instant27 = calendar25.toInstant();
        int int29 = calendar25.getMinimum(4);
        java.lang.String str30 = fastDateFormat3.format(calendar25);
        int int32 = calendar25.getLeastMaximum(3);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34, locale36);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone40);
        timeZone40.setRawOffset(3);
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone46);
        java.lang.String str48 = fastDateFormat47.getPattern();
        java.util.TimeZone timeZone49 = fastDateFormat47.getTimeZone();
        boolean boolean50 = timeZone40.hasSameRules(timeZone49);
        boolean boolean51 = timeZone34.hasSameRules(timeZone49);
        timeZone34.setRawOffset(50);
        calendar25.setTimeZone(timeZone34);
        int int56 = timeZone34.getOffset(1644572109662L);
        boolean boolean57 = calendar1.after((java.lang.Object) 1644572109662L);
        calendar1.set(0, 12, 44, (int) (byte) 100, 16, 58);
        int int65 = calendar1.getWeekYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar25 and calendar37", (calendar25.compareTo(calendar37) == 0) == calendar25.equals(calendar37));
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test314");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.time.Instant instant2 = calendar1.toInstant();
        java.util.TimeZone timeZone3 = calendar1.getTimeZone();
        java.util.Calendar.Builder builder5 = new java.util.Calendar.Builder();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = locale6.getLanguage();
        boolean boolean8 = locale6.hasExtensions();
        java.lang.String str9 = locale6.getDisplayCountry();
        java.util.Calendar.Builder builder10 = builder5.setLocale(locale6);
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category11, locale12);
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category11, locale14);
        java.lang.String str16 = locale14.toLanguageTag();
        java.util.Calendar.Builder builder17 = builder5.setLocale(locale14);
        java.util.Calendar.Builder builder21 = builder17.setDate((int) (byte) 100, 53, 45);
        java.util.Calendar.Builder builder25 = builder21.setWeekDate(52, (int) '#', 27);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        boolean boolean30 = timeZone26.hasSameRules(timeZone28);
        java.util.Calendar.Builder builder31 = builder21.setTimeZone(timeZone26);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone35);
        java.lang.String str37 = fastDateFormat36.toString();
        java.lang.String str38 = fastDateFormat36.toString();
        java.util.TimeZone timeZone39 = fastDateFormat36.getTimeZone();
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.lang.String str41 = locale40.getLanguage();
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.lang.String str43 = locale40.getDisplayVariant(locale42);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone39, locale40);
        boolean boolean45 = calendar44.isWeekDateSupported();
        calendar44.set(7, 4, 0);
        java.util.Date date50 = calendar44.getTime();
        java.lang.String str51 = fastDateFormat33.format(calendar44);
        java.util.TimeZone timeZone52 = fastDateFormat33.getTimeZone();
        java.lang.Object obj53 = null;
        boolean boolean54 = fastDateFormat33.equals(obj53);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance();
        int int56 = calendar55.getWeeksInWeekYear();
        java.time.Instant instant57 = calendar55.toInstant();
        int int59 = calendar55.getMinimum(4);
        java.lang.String str60 = fastDateFormat33.format(calendar55);
        java.util.Date date67 = new java.util.Date(45, (int) (byte) 100, (int) '#', 50, 100, 36);
        calendar55.setTime(date67);
        java.util.Locale locale69 = java.util.Locale.FRENCH;
        java.util.Calendar calendar70 = java.util.Calendar.getInstance(locale69);
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.util.Locale.Category category72 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale73 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category72, locale73);
        java.lang.String str75 = locale73.getScript();
        java.lang.String str76 = locale71.getDisplayCountry(locale73);
        boolean boolean77 = calendar70.after((java.lang.Object) locale71);
        java.util.Locale.setDefault(locale71);
        java.lang.String str79 = locale71.getLanguage();
        boolean boolean80 = calendar55.after((java.lang.Object) locale71);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat81 = org.apache.commons.lang3.time.FastDateFormat.getInstance("10250-6-11 9:35:43", timeZone26, locale71);
        boolean boolean82 = timeZone3.hasSameRules(timeZone26);
        java.util.TimeZone.setDefault(timeZone26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar70", (calendar1.compareTo(calendar70) == 0) == calendar1.equals(calendar70));
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test315");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("it");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone5);
        java.lang.StringBuffer stringBuffer8 = null;
        java.lang.StringBuffer stringBuffer9 = fastDateFormat6.format((long) 32772, stringBuffer8);
        java.util.Date date10 = new java.util.Date();
        int int11 = date10.getTimezoneOffset();
        long long12 = date10.getTime();
        int int13 = date10.getMinutes();
        java.lang.String str14 = fastDateFormat6.format(date10);
        boolean boolean15 = fastDateFormat6.getTimeZoneOverridesCalendar();
        java.lang.String str16 = fastDateFormat6.getPattern();
        java.util.Locale locale18 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale18);
        boolean boolean20 = fastDateFormat19.getTimeZoneOverridesCalendar();
        java.lang.String str21 = fastDateFormat19.toString();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone23);
        java.util.Date date25 = new java.util.Date();
        int int26 = date25.getTimezoneOffset();
        int int27 = date25.getSeconds();
        java.lang.StringBuffer stringBuffer28 = null;
        java.text.Format.Field field29 = null;
        java.text.FieldPosition fieldPosition31 = new java.text.FieldPosition(field29, 1);
        fieldPosition31.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer34 = fastDateFormat24.format((java.lang.Object) date25, stringBuffer28, fieldPosition31);
        java.lang.String str35 = fastDateFormat19.format(date25);
        java.lang.StringBuffer stringBuffer36 = null;
        java.text.Format.Field field37 = null;
        java.text.FieldPosition fieldPosition39 = new java.text.FieldPosition(field37, 1);
        int int40 = fieldPosition39.getEndIndex();
        java.text.Format.Field field41 = fieldPosition39.getFieldAttribute();
        int int42 = fieldPosition39.getField();
        java.lang.StringBuffer stringBuffer43 = fastDateFormat6.format((java.lang.Object) date25, stringBuffer36, fieldPosition39);
        java.lang.StringBuffer stringBuffer45 = null;
        java.lang.StringBuffer stringBuffer46 = fastDateFormat6.format(1644572178820L, stringBuffer45);
        java.util.TimeZone timeZone48 = java.util.TimeZone.getTimeZone("9:34:37 AM UTC");
        java.util.TimeZone timeZone50 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229\u6587");
        boolean boolean51 = timeZone48.hasSameRules(timeZone50);
        java.util.Locale locale52 = java.util.Locale.CHINESE;
        java.util.Locale locale53 = locale52.stripExtensions();
        java.util.Locale locale54 = locale52.stripExtensions();
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone48, locale54);
        java.lang.StringBuffer stringBuffer56 = null;
        java.text.Format.Field field57 = null;
        java.text.FieldPosition fieldPosition59 = new java.text.FieldPosition(field57, 1);
        int int60 = fieldPosition59.getBeginIndex();
        java.util.TimeZone timeZone62 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone62);
        java.lang.String str64 = fastDateFormat63.toString();
        java.lang.String str65 = fastDateFormat63.toString();
        java.util.TimeZone timeZone66 = fastDateFormat63.getTimeZone();
        java.util.Locale locale67 = fastDateFormat63.getLocale();
        java.util.TimeZone timeZone68 = fastDateFormat63.getTimeZone();
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone68);
        java.lang.Object obj70 = timeZone68.clone();
        boolean boolean71 = fieldPosition59.equals((java.lang.Object) timeZone68);
        int int72 = fieldPosition59.getBeginIndex();
        int int73 = fieldPosition59.getBeginIndex();
        int int74 = fieldPosition59.getField();
        java.lang.StringBuffer stringBuffer75 = fastDateFormat6.format((java.lang.Object) calendar55, stringBuffer56, fieldPosition59);
        boolean boolean76 = languageRange1.equals((java.lang.Object) stringBuffer56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar55 and calendar69", (calendar55.compareTo(calendar69) == 0) == calendar55.equals(calendar69));
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test316");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale11);
        java.util.Locale.setDefault(category7, locale11);
        java.util.Locale locale16 = java.util.Locale.getDefault(category7);
        java.util.Locale.Builder builder17 = builder6.setLocale(locale16);
        java.util.Locale.Builder builder18 = builder6.clearExtensions();
        java.util.Locale locale19 = builder18.build();
        java.util.Locale locale20 = locale19.stripExtensions();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale20);
        java.util.Locale locale22 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleKeys();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(locale22);
        java.util.Locale locale26 = locale22.stripExtensions();
        java.lang.String str27 = locale26.getCountry();
        java.lang.String str28 = locale20.getDisplayCountry(locale26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar23", (calendar14.compareTo(calendar23) == 0) == calendar14.equals(calendar23));
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test317");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getWeeksInWeekYear();
        java.time.Instant instant2 = calendar0.toInstant();
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.setTimeInMillis(1644572085058L);
        boolean boolean6 = calendar0.isWeekDateSupported();
        java.util.Date date7 = calendar0.getTime();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition(16);
        int int10 = parsePosition9.getErrorIndex();
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        boolean boolean15 = parsePosition9.equals((java.lang.Object) fastDateFormat13);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        boolean boolean17 = parsePosition9.equals((java.lang.Object) locale16);
        java.lang.String str18 = locale16.getDisplayScript();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder22 = builder19.clear();
        java.util.Locale locale23 = builder22.build();
        java.lang.String str24 = locale16.getDisplayVariant(locale23);
        boolean boolean25 = calendar0.after((java.lang.Object) locale23);
        int int26 = calendar0.getWeeksInWeekYear();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone31);
        java.lang.String str33 = fastDateFormat32.toString();
        java.lang.String str34 = fastDateFormat32.toString();
        java.util.TimeZone timeZone35 = fastDateFormat32.getTimeZone();
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone35, locale36);
        boolean boolean41 = calendar40.isWeekDateSupported();
        calendar40.set(7, 4, 0);
        java.util.Date date46 = calendar40.getTime();
        java.lang.String str47 = fastDateFormat29.format(calendar40);
        java.util.TimeZone timeZone48 = fastDateFormat29.getTimeZone();
        java.util.Locale locale50 = java.util.Locale.ROOT;
        boolean boolean51 = locale50.hasExtensions();
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale50);
        java.util.Set<java.lang.String> strSet54 = locale50.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 0, timeZone48, locale50);
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone56.hasSameRules(timeZone57);
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.lang.String str60 = locale59.getDisplayName();
        java.lang.String str61 = locale59.getDisplayCountry();
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone57, locale59);
        int int64 = calendar62.getActualMinimum(2);
        java.util.TimeZone timeZone65 = calendar62.getTimeZone();
        java.util.Calendar.Builder builder66 = new java.util.Calendar.Builder();
        java.util.Locale locale67 = java.util.Locale.CHINESE;
        java.lang.String str68 = locale67.getLanguage();
        boolean boolean69 = locale67.hasExtensions();
        java.lang.String str70 = locale67.getDisplayCountry();
        java.util.Calendar.Builder builder71 = builder66.setLocale(locale67);
        java.util.Calendar.Builder builder75 = builder66.setWeekDate(38, 41, 11);
        java.util.TimeZone timeZone77 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat78 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone77);
        java.lang.String str79 = fastDateFormat78.toString();
        java.lang.String str80 = fastDateFormat78.toString();
        java.util.TimeZone timeZone81 = fastDateFormat78.getTimeZone();
        java.util.Calendar.Builder builder82 = builder75.setTimeZone(timeZone81);
        boolean boolean83 = timeZone65.hasSameRules(timeZone81);
        boolean boolean84 = timeZone48.hasSameRules(timeZone81);
        java.util.Calendar calendar85 = java.util.Calendar.getInstance(timeZone81);
        calendar0.setTimeZone(timeZone81);
        timeZone81.setID("6:35:03 AM GMT+00:00");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar62 and calendar85", (calendar62.compareTo(calendar85) == 0) == calendar62.equals(calendar85));
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test318");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        int int5 = date3.getSeconds();
        java.lang.StringBuffer stringBuffer6 = null;
        java.text.Format.Field field7 = null;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition(field7, 1);
        fieldPosition9.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer12 = fastDateFormat2.format((java.lang.Object) date3, stringBuffer6, fieldPosition9);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        boolean boolean14 = calendar13.isWeekDateSupported();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        boolean boolean19 = calendar13.before((java.lang.Object) str18);
        long long20 = calendar13.getTimeInMillis();
        int int21 = calendar13.getMinimalDaysInFirstWeek();
        java.lang.StringBuffer stringBuffer22 = null;
        java.text.Format.Field field23 = null;
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition(field23, 3);
        fieldPosition25.setEndIndex(12);
        java.lang.StringBuffer stringBuffer28 = fastDateFormat2.format((java.lang.Object) calendar13, stringBuffer22, fieldPosition25);
        java.lang.Object obj29 = fastDateFormat2.clone();
        java.util.TimeZone timeZone30 = fastDateFormat2.getTimeZone();
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("UTC12");
        java.util.Locale.setDefault(locale32);
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder34.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder37 = builder34.clear();
        java.util.Locale.Builder builder39 = builder34.addUnicodeLocaleAttribute("Deutsch");
        java.util.Locale locale41 = java.util.Locale.forLanguageTag("04.02.1919 02:07:00");
        java.util.Locale.Builder builder42 = builder39.setLocale(locale41);
        java.lang.String str43 = locale32.getDisplayLanguage(locale41);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone30, locale41);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar44", (calendar13.compareTo(calendar44) == 0) == calendar13.equals(calendar44));
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test319");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        boolean boolean2 = calendar1.isWeekDateSupported();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale3.getDisplayVariant(locale5);
        boolean boolean7 = calendar1.before((java.lang.Object) str6);
        int int8 = calendar1.getFirstDayOfWeek();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone9);
        calendar1.setTimeZone(timeZone9);
        java.util.Locale locale15 = new java.util.Locale("");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08", timeZone9, locale15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone9);
        timeZone9.setID("9:36:04 AM UTC");
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale.Category category21 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category21, locale22);
        java.lang.String str24 = locale22.getScript();
        java.lang.String str25 = locale20.getDisplayCountry(locale22);
        java.lang.String str26 = locale20.getISO3Country();
        java.lang.String str27 = locale20.getCountry();
        java.util.Locale.setDefault(locale20);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone9, locale20);
        calendar29.setFirstDayOfWeek(40);
        java.util.Calendar.Builder builder32 = new java.util.Calendar.Builder();
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale33.getLanguage();
        boolean boolean35 = locale33.hasExtensions();
        java.lang.String str36 = locale33.getDisplayCountry();
        java.util.Calendar.Builder builder37 = builder32.setLocale(locale33);
        java.util.Calendar.Builder builder41 = builder32.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale43 = new java.util.Locale("de");
        java.lang.String str44 = locale43.toLanguageTag();
        java.lang.String str45 = locale43.getCountry();
        java.util.Calendar.Builder builder46 = builder32.setLocale(locale43);
        java.util.Calendar calendar47 = builder46.build();
        calendar47.set(100, 2, 44, (int) (byte) 100, 45, (int) (short) 1);
        boolean boolean55 = calendar47.isWeekDateSupported();
        java.util.Date date56 = new java.util.Date();
        int int57 = date56.getTimezoneOffset();
        long long58 = date56.getTime();
        java.util.Date date59 = new java.util.Date();
        int int60 = date59.getSeconds();
        long long61 = date59.getTime();
        date59.setTime((long) ' ');
        int int64 = date59.getTimezoneOffset();
        boolean boolean65 = date56.before(date59);
        java.util.Date date69 = new java.util.Date(11, 11, 3);
        boolean boolean70 = date56.before(date69);
        java.util.Date date71 = new java.util.Date();
        int int72 = date71.getDay();
        java.util.Date date73 = new java.util.Date();
        date73.setMinutes((int) '#');
        boolean boolean76 = date71.before(date73);
        int int77 = date73.getHours();
        boolean boolean78 = date56.before(date73);
        int int79 = date56.getDate();
        java.util.Date date85 = new java.util.Date(9, (int) 'x', (int) '#', 2, 7);
        java.lang.String str86 = date85.toLocaleString();
        boolean boolean87 = date56.before(date85);
        calendar47.setTime(date56);
        java.util.TimeZone timeZone89 = calendar47.getTimeZone();
        calendar29.setTimeZone(timeZone89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar47", (calendar1.compareTo(calendar47) == 0) == calendar1.equals(calendar47));
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test320");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        timeZone14.setRawOffset((-1));
        boolean boolean17 = timeZone2.hasSameRules(timeZone14);
        java.util.TimeZone timeZone18 = null;
        boolean boolean19 = timeZone14.hasSameRules(timeZone18);
        int int20 = timeZone14.getRawOffset();
        java.util.Calendar.Builder builder21 = new java.util.Calendar.Builder();
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        boolean boolean24 = locale22.hasExtensions();
        java.lang.String str25 = locale22.getDisplayCountry();
        java.util.Calendar.Builder builder26 = builder21.setLocale(locale22);
        java.util.Calendar.Builder builder30 = builder21.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder32 = builder21.setLenient(false);
        java.util.Calendar.Builder builder36 = builder21.setTimeOfDay(15, 0, 32770);
        java.util.Calendar.Builder builder39 = builder36.setWeekDefinition(7, 7);
        java.util.Calendar.Builder builder41 = builder36.setLenient(true);
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone43);
        java.lang.String str45 = fastDateFormat44.toString();
        java.lang.String str46 = fastDateFormat44.toString();
        java.util.TimeZone timeZone47 = fastDateFormat44.getTimeZone();
        java.util.Locale locale48 = fastDateFormat44.getLocale();
        boolean boolean49 = fastDateFormat44.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone50 = fastDateFormat44.getTimeZone();
        timeZone50.setID("Chinesisch");
        java.util.Calendar.Builder builder53 = builder36.setTimeZone(timeZone50);
        int int54 = timeZone50.getRawOffset();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone55.hasSameRules(timeZone56);
        java.util.Locale locale58 = java.util.Locale.ROOT;
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone56, locale58);
        int int60 = timeZone56.getRawOffset();
        java.util.TimeZone.setDefault(timeZone56);
        boolean boolean62 = timeZone50.hasSameRules(timeZone56);
        int int63 = timeZone56.getRawOffset();
        int int65 = timeZone56.getOffset((long) (short) 100);
        java.util.TimeZone timeZone68 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone68);
        java.lang.String str70 = fastDateFormat69.toString();
        java.lang.String str71 = fastDateFormat69.toString();
        java.util.TimeZone timeZone72 = fastDateFormat69.getTimeZone();
        java.util.Locale locale73 = java.util.Locale.CHINESE;
        java.lang.String str74 = locale73.getLanguage();
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.lang.String str76 = locale73.getDisplayVariant(locale75);
        java.util.Calendar calendar77 = java.util.Calendar.getInstance(timeZone72, locale73);
        java.util.Locale locale78 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone80 = java.util.TimeZone.getDefault();
        boolean boolean81 = timeZone79.hasSameRules(timeZone80);
        java.util.Locale locale82 = java.util.Locale.ROOT;
        java.util.Calendar calendar83 = java.util.Calendar.getInstance(timeZone80, locale82);
        java.lang.String str84 = locale82.getDisplayLanguage();
        java.lang.String str86 = locale82.getUnicodeLocaleType("zh");
        java.lang.String str87 = locale78.getDisplayScript(locale82);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat88 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone72, locale82);
        int int89 = timeZone72.getRawOffset();
        boolean boolean90 = timeZone72.observesDaylightTime();
        boolean boolean91 = timeZone56.hasSameRules(timeZone72);
        boolean boolean92 = timeZone14.hasSameRules(timeZone56);
        java.lang.String str93 = timeZone14.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar77", (calendar5.compareTo(calendar77) == 0) == calendar5.equals(calendar77));
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test321");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        timeZone2.setID("coreano");
        boolean boolean16 = timeZone2.observesDaylightTime();
        boolean boolean17 = timeZone2.observesDaylightTime();
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder18.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale locale21 = builder18.build();
        java.util.Locale locale22 = builder18.build();
        java.util.Locale.Category category23 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category23, locale24);
        java.util.Locale locale26 = java.util.Locale.getDefault(category23);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone28, locale30);
        java.lang.String str32 = locale30.getDisplayLanguage();
        java.lang.String str33 = locale26.getDisplayCountry(locale30);
        java.lang.String str34 = locale30.getLanguage();
        java.util.Locale.Category category35 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale36 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category35, locale36);
        java.util.Locale locale38 = java.util.Locale.getDefault(category35);
        boolean boolean39 = locale38.hasExtensions();
        java.lang.String[] strArray45 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        java.util.stream.Stream<java.lang.String> strStream48 = strList46.stream();
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        int int50 = strList46.lastIndexOf((java.lang.Object) locale49);
        java.lang.String str51 = locale38.getDisplayVariant(locale49);
        java.util.Locale locale52 = java.util.Locale.CHINESE;
        java.lang.String str53 = locale52.getLanguage();
        java.lang.String str54 = locale38.getDisplayVariant(locale52);
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.lang.String str56 = locale55.getLanguage();
        boolean boolean57 = locale55.hasExtensions();
        java.lang.String str58 = locale55.getDisplayScript();
        java.lang.String str59 = locale52.getDisplayCountry(locale55);
        java.lang.String str60 = locale30.getDisplayVariant(locale52);
        java.util.Set<java.lang.String> strSet61 = locale52.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder62 = builder18.setLocale(locale52);
        java.util.Locale locale63 = locale52.stripExtensions();
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone2, locale52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar31", (calendar5.compareTo(calendar31) == 0) == calendar5.equals(calendar31));
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test322");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = fastDateFormat2.getLocale();
        java.util.TimeZone timeZone7 = fastDateFormat2.getTimeZone();
        java.lang.String str9 = fastDateFormat2.format((long) 9);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale13.getDisplayName();
        java.lang.String str15 = locale13.getDisplayCountry();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone11, locale13);
        int int18 = calendar16.getActualMinimum(2);
        int int19 = calendar16.getWeeksInWeekYear();
        java.util.Calendar.Builder builder20 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = locale24.getDisplayName();
        java.lang.String str26 = locale24.getDisplayCountry();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone22, locale24);
        int int29 = calendar27.getActualMinimum(2);
        java.util.TimeZone timeZone30 = calendar27.getTimeZone();
        java.util.TimeZone timeZone31 = calendar27.getTimeZone();
        java.util.Calendar.Builder builder32 = builder20.setTimeZone(timeZone31);
        calendar16.setTimeZone(timeZone31);
        java.util.TimeZone.setDefault(timeZone31);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone31);
        long long36 = calendar35.getTimeInMillis();
        java.lang.String str37 = fastDateFormat2.format(calendar35);
        java.time.Instant instant38 = calendar35.toInstant();
        java.util.Date date39 = java.util.Date.from(instant38);
        long long40 = date39.getTime();
        int int41 = date39.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar16 and calendar35", (calendar16.compareTo(calendar35) == 0) == calendar16.equals(calendar35));
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test323");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        timeZone1.setID("9:36:17 AM UTC");
        int int10 = timeZone1.getOffset(1L);
        java.util.Locale locale13 = new java.util.Locale("\u4e0a\u5348", "9:34:38 am utc");
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone1, locale13);
        boolean boolean15 = timeZone1.useDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar14", (calendar6.compareTo(calendar14) == 0) == calendar6.equals(calendar14));
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test324");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale11 = new java.util.Locale("de");
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale11.getCountry();
        java.util.Calendar.Builder builder14 = builder0.setLocale(locale11);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay((int) 'u', 6, 0, 8);
        java.util.Calendar.Builder builder23 = builder19.setTimeOfDay((int) (byte) 100, 51, 100);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1);
        java.text.ParsePosition parsePosition28 = new java.text.ParsePosition(1);
        java.lang.String str29 = parsePosition28.toString();
        java.lang.Object obj30 = fastDateFormat25.parseObject("GMT+00:009", parsePosition28);
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        int int35 = timeZone32.getOffset(1644572071852L);
        boolean boolean36 = parsePosition28.equals((java.lang.Object) timeZone32);
        timeZone32.setRawOffset(27);
        boolean boolean39 = timeZone32.observesDaylightTime();
        java.util.Calendar.Builder builder40 = builder19.setTimeZone(timeZone32);
        java.util.Locale.Category category41 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category41, locale42);
        java.util.Locale locale44 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category41, locale44);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(locale46);
        java.util.Locale.setDefault(category41, locale46);
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = locale50.getLanguage();
        java.util.Locale locale52 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str53 = locale50.getDisplayScript(locale52);
        java.util.Locale locale57 = new java.util.Locale("DEU", "java.util.GregorianCalendar[time=1644572075684,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=15,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=684,ZONE_OFFSET=0,DST_OFFSET=0]", "\u65e5\u6587");
        java.lang.String str58 = locale50.getDisplayVariant(locale57);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getInstance("4630-1-10 0:00:00", locale57);
        java.util.Locale locale60 = fastDateFormat59.getLocale();
        java.lang.String str61 = locale46.getDisplayName(locale60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone32, locale46);
        java.lang.Object obj63 = timeZone32.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar47 and calendar62", (calendar47.compareTo(calendar62) == 0) == calendar47.equals(calendar62));
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test325");
        java.util.Locale locale3 = new java.util.Locale("11 Feb 2022 09:36:26 GMT", "\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00", "francese (Canada)");
        java.lang.String str4 = locale3.getDisplayVariant();
        java.util.Locale locale5 = locale3.stripExtensions();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale9);
        int int13 = timeZone6.getOffset((long) 2);
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category14, locale15);
        java.util.Locale locale17 = java.util.Locale.getDefault(category14);
        java.util.Locale locale18 = java.util.Locale.getDefault(category14);
        java.util.Locale locale19 = null;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone6, locale18);
        java.lang.String str22 = calendar21.getCalendarType();
        java.util.Date date23 = calendar21.getTime();
        boolean boolean24 = locale5.equals((java.lang.Object) date23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar21", (calendar11.compareTo(calendar21) == 0) == calendar11.equals(calendar21));
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test326");
        java.util.Locale locale4 = new java.util.Locale("java.text.FieldPosition[field=1,attribute=null,beginIndex=0,endIndex=0]", "\u4e0a\u5348", "h:mm:ss a z");
        java.util.Locale locale5 = java.util.Locale.PRC;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale10.getDisplayCountry();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale10);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale14.getVariant();
        java.lang.String str17 = locale10.getDisplayScript(locale14);
        java.util.Set<java.lang.String> strSet18 = locale10.getUnicodeLocaleKeys();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category20, locale21);
        java.lang.String str23 = locale21.getScript();
        java.lang.String str24 = locale19.getDisplayCountry(locale21);
        java.lang.String str25 = locale10.getDisplayCountry(locale21);
        java.lang.String str26 = locale5.getDisplayCountry(locale21);
        java.lang.String str27 = locale4.getDisplayScript(locale5);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, locale4);
        java.util.Date date35 = new java.util.Date(5, (int) '4', 31, 17, (int) (short) 100, 8);
        java.lang.String str36 = date35.toGMTString();
        date35.setMonth(12);
        long long39 = date35.getTime();
        java.lang.String str40 = fastDateFormat28.format(date35);
        java.util.Locale locale41 = fastDateFormat28.getLocale();
        java.lang.Object obj42 = fastDateFormat28.clone();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.lang.String str47 = locale46.getDisplayName();
        java.lang.String str48 = locale46.getDisplayCountry();
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone44, locale46);
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.util.Locale locale51 = locale50.stripExtensions();
        java.lang.String str52 = locale50.getVariant();
        java.lang.String str53 = locale46.getDisplayScript(locale50);
        java.util.Set<java.lang.String> strSet54 = locale46.getUnicodeLocaleKeys();
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale.Category category56 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale57 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category56, locale57);
        java.lang.String str59 = locale57.getScript();
        java.lang.String str60 = locale55.getDisplayCountry(locale57);
        java.lang.String str61 = locale46.getDisplayCountry(locale57);
        boolean boolean62 = fastDateFormat28.equals((java.lang.Object) str61);
        java.util.TimeZone timeZone65 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone65);
        java.lang.String str67 = fastDateFormat66.toString();
        java.lang.String str68 = fastDateFormat66.toString();
        java.util.TimeZone timeZone69 = fastDateFormat66.getTimeZone();
        java.util.Locale locale70 = java.util.Locale.CHINESE;
        java.lang.String str71 = locale70.getLanguage();
        java.util.Locale locale72 = java.util.Locale.GERMAN;
        java.lang.String str73 = locale70.getDisplayVariant(locale72);
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(timeZone69, locale70);
        java.util.Locale locale75 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone77 = java.util.TimeZone.getDefault();
        boolean boolean78 = timeZone76.hasSameRules(timeZone77);
        java.util.Locale locale79 = java.util.Locale.ROOT;
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(timeZone77, locale79);
        java.lang.String str81 = locale79.getDisplayLanguage();
        java.lang.String str83 = locale79.getUnicodeLocaleType("zh");
        java.lang.String str84 = locale75.getDisplayScript(locale79);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat85 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone69, locale79);
        java.util.TimeZone timeZone86 = fastDateFormat85.getTimeZone();
        java.util.Calendar calendar87 = java.util.Calendar.getInstance(timeZone86);
        java.lang.String str88 = fastDateFormat28.format((java.lang.Object) calendar87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar74", (calendar13.compareTo(calendar74) == 0) == calendar13.equals(calendar74));
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test327");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone2);
        java.util.Locale locale5 = fastDateFormat4.getLocale();
        java.lang.String str6 = fastDateFormat4.toString();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        int int8 = calendar7.getWeeksInWeekYear();
        java.lang.String str9 = fastDateFormat4.format(calendar7);
        java.lang.String str11 = fastDateFormat4.format((long) (byte) 100);
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition(43);
        java.lang.Object obj15 = fastDateFormat4.parseObject("hi!", parsePosition14);
        int int16 = parsePosition14.getIndex();
        java.util.TimeZone timeZone18 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone18);
        boolean boolean20 = fastDateFormat19.getTimeZoneOverridesCalendar();
        java.lang.String str21 = fastDateFormat19.getPattern();
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition(9);
        parsePosition24.setIndex((int) 'a');
        java.lang.Object obj27 = fastDateFormat19.parseObject("UTC9", parsePosition24);
        java.lang.Object obj28 = fastDateFormat19.clone();
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition(100);
        java.lang.String str32 = parsePosition31.toString();
        parsePosition31.setIndex(1);
        java.util.Locale locale37 = new java.util.Locale("9:34:37 AM UTC", "Fri Feb 11 09:34:34 UTC 2022");
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition(16);
        int int40 = parsePosition39.getErrorIndex();
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone42);
        java.lang.String str44 = fastDateFormat43.getPattern();
        boolean boolean45 = parsePosition39.equals((java.lang.Object) fastDateFormat43);
        java.util.Locale locale46 = java.util.Locale.FRANCE;
        boolean boolean47 = parsePosition39.equals((java.lang.Object) locale46);
        java.lang.String str48 = locale46.getDisplayScript();
        java.lang.String str49 = locale37.getDisplayLanguage(locale46);
        boolean boolean50 = parsePosition31.equals((java.lang.Object) str49);
        java.lang.Object obj51 = fastDateFormat19.parseObject("30 April 0007", parsePosition31);
        java.util.TimeZone timeZone53 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone53);
        java.lang.String str55 = fastDateFormat54.toString();
        java.lang.String str56 = fastDateFormat54.toString();
        java.util.TimeZone timeZone57 = fastDateFormat54.getTimeZone();
        timeZone57.setRawOffset((int) (short) 100);
        int int60 = timeZone57.getRawOffset();
        java.text.Format.Field field61 = null;
        java.text.FieldPosition fieldPosition63 = new java.text.FieldPosition(field61, 3);
        fieldPosition63.setEndIndex(49);
        boolean boolean67 = fieldPosition63.equals((java.lang.Object) 8);
        java.util.TimeZone timeZone70 = java.util.TimeZone.getTimeZone("9:34:37 AM UTC");
        java.util.TimeZone timeZone72 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229\u6587");
        boolean boolean73 = timeZone70.hasSameRules(timeZone72);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone70);
        boolean boolean75 = fieldPosition63.equals((java.lang.Object) timeZone70);
        boolean boolean76 = timeZone57.hasSameRules(timeZone70);
        boolean boolean77 = parsePosition31.equals((java.lang.Object) timeZone57);
        java.util.Calendar calendar78 = java.util.Calendar.getInstance(timeZone57);
        boolean boolean79 = parsePosition14.equals((java.lang.Object) calendar78);
        java.lang.String str80 = parsePosition14.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar78", (calendar7.compareTo(calendar78) == 0) == calendar7.equals(calendar78));
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test328");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        java.util.Calendar.Builder builder3 = new java.util.Calendar.Builder();
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.lang.String str5 = locale4.getLanguage();
        boolean boolean6 = locale4.hasExtensions();
        java.lang.String str7 = locale4.getDisplayCountry();
        java.util.Calendar.Builder builder8 = builder3.setLocale(locale4);
        java.util.Calendar.Builder builder12 = builder3.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale14 = new java.util.Locale("de");
        java.lang.String str15 = locale14.toLanguageTag();
        java.lang.String str16 = locale14.getCountry();
        java.util.Calendar.Builder builder17 = builder3.setLocale(locale14);
        java.util.Calendar calendar18 = builder17.build();
        calendar18.set(100, 2, 44, (int) (byte) 100, 45, (int) (short) 1);
        java.lang.String str26 = fastDateFormat2.format(calendar18);
        calendar18.set(14, 32769, (int) 'a');
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale34.getDisplayName();
        java.lang.String str36 = locale34.getDisplayCountry();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone32, locale34);
        java.util.Set<java.lang.String> strSet38 = locale34.getUnicodeLocaleAttributes();
        boolean boolean39 = calendar18.before((java.lang.Object) locale34);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getDisplayName();
        java.lang.String str45 = locale43.getDisplayCountry();
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone41, locale43);
        calendar46.set(31, (int) (byte) 100, (int) (byte) 10, (int) (short) 100, 9, 8);
        java.util.Date date57 = new java.util.Date((-1), 32772, (int) (short) 10);
        java.lang.String str58 = date57.toLocaleString();
        calendar46.setTime(date57);
        int int61 = calendar46.getActualMinimum((int) (short) 10);
        java.util.TimeZone timeZone63 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        boolean boolean65 = timeZone63.hasSameRules(timeZone64);
        java.util.Locale locale66 = java.util.Locale.ROOT;
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(timeZone64, locale66);
        java.text.ParsePosition parsePosition69 = new java.text.ParsePosition(16);
        int int70 = parsePosition69.getErrorIndex();
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet72 = locale71.getExtensionKeys();
        boolean boolean73 = parsePosition69.equals((java.lang.Object) locale71);
        java.lang.String str74 = locale71.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat75 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone64, locale71);
        int int76 = timeZone64.getRawOffset();
        java.util.Locale locale77 = java.util.Locale.CHINESE;
        java.lang.String str78 = locale77.getLanguage();
        boolean boolean79 = locale77.hasExtensions();
        java.lang.String str80 = locale77.getDisplayScript();
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(locale77);
        java.util.Calendar calendar82 = java.util.Calendar.getInstance(timeZone64, locale77);
        boolean boolean83 = calendar46.after((java.lang.Object) calendar82);
        calendar46.setMinimalDaysInFirstWeek(17);
        int int86 = calendar18.compareTo(calendar46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar37 and calendar67", (calendar37.compareTo(calendar67) == 0) == calendar37.equals(calendar67));
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test329");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("9:34:37 AM UTC");
        java.util.Locale locale3 = new java.util.Locale("de");
        java.lang.String str4 = locale3.toLanguageTag();
        java.lang.String[] strArray6 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.util.stream.Stream<java.lang.String> strStream9 = strList7.stream();
        boolean boolean11 = strList7.add("hi!");
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = locale12.getLanguage();
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale12.getDisplayVariant(locale14);
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.lang.String str17 = locale12.getDisplayVariant(locale16);
        boolean boolean18 = strList7.contains((java.lang.Object) locale12);
        java.lang.String str19 = locale3.getDisplayScript(locale12);
        java.util.Set<java.lang.Character> charSet20 = locale3.getExtensionKeys();
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category22, locale23);
        java.util.Locale locale25 = java.util.Locale.getDefault(category22);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        java.lang.String str31 = locale29.getDisplayLanguage();
        java.lang.String str32 = locale25.getDisplayCountry(locale29);
        java.lang.String str33 = locale29.getLanguage();
        java.util.Locale.Category category34 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale35 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category34, locale35);
        java.util.Locale locale37 = java.util.Locale.getDefault(category34);
        boolean boolean38 = locale37.hasExtensions();
        java.lang.String[] strArray44 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        java.util.stream.Stream<java.lang.String> strStream47 = strList45.stream();
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        int int49 = strList45.lastIndexOf((java.lang.Object) locale48);
        java.lang.String str50 = locale37.getDisplayVariant(locale48);
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.lang.String str52 = locale51.getLanguage();
        java.lang.String str53 = locale37.getDisplayVariant(locale51);
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = locale54.getLanguage();
        boolean boolean56 = locale54.hasExtensions();
        java.lang.String str57 = locale54.getDisplayScript();
        java.lang.String str58 = locale51.getDisplayCountry(locale54);
        java.lang.String str59 = locale29.getDisplayVariant(locale51);
        java.lang.String str60 = timeZone1.getDisplayName(locale51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar21 and calendar30", (calendar21.compareTo(calendar30) == 0) == calendar21.equals(calendar30));
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test330");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Deutsch");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("FR");
        java.util.Calendar calendar6 = java.util.Calendar.getInstance();
        int int7 = calendar6.getWeeksInWeekYear();
        java.time.Instant instant8 = calendar6.toInstant();
        int int10 = calendar6.getMinimum(4);
        calendar6.setFirstDayOfWeek(13);
        java.lang.String[] strArray14 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.stream.Stream<java.lang.String> strStream17 = strList15.stream();
        boolean boolean19 = strList15.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor21 = strList15.listIterator(0);
        java.lang.String[] strArray23 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.util.stream.Stream<java.lang.String> strStream26 = strList24.stream();
        java.util.ListIterator<java.lang.String> strItor27 = strList24.listIterator();
        boolean boolean28 = strList15.removeAll((java.util.Collection<java.lang.String>) strList24);
        java.util.Iterator<java.lang.String> strItor29 = strList15.iterator();
        java.util.ListIterator<java.lang.String> strItor30 = strList15.listIterator();
        boolean boolean31 = calendar6.before((java.lang.Object) strList15);
        strList15.clear();
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags(languageRangeList5, (java.util.Collection<java.lang.String>) strList15, filteringMode33);
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags(languageRangeList3, (java.util.Collection<java.lang.String>) strList34);
        java.lang.String[] strArray37 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.stream.Stream<java.lang.String> strStream40 = strList38.stream();
        boolean boolean42 = strList38.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor44 = strList38.listIterator(0);
        java.lang.String[] strArray46 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        java.util.stream.Stream<java.lang.String> strStream49 = strList47.stream();
        java.util.ListIterator<java.lang.String> strItor50 = strList47.listIterator();
        boolean boolean51 = strList38.removeAll((java.util.Collection<java.lang.String>) strList47);
        int int52 = strList38.size();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone53.hasSameRules(timeZone54);
        java.util.Locale locale56 = java.util.Locale.ROOT;
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone54, locale56);
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        boolean boolean61 = timeZone59.hasSameRules(timeZone60);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone60);
        timeZone60.setRawOffset(3);
        java.util.TimeZone timeZone66 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone66);
        java.lang.String str68 = fastDateFormat67.getPattern();
        java.util.TimeZone timeZone69 = fastDateFormat67.getTimeZone();
        boolean boolean70 = timeZone60.hasSameRules(timeZone69);
        boolean boolean71 = timeZone54.hasSameRules(timeZone69);
        boolean boolean72 = strList38.contains((java.lang.Object) boolean71);
        java.util.stream.Stream<java.lang.String> strStream73 = strList38.stream();
        java.lang.String[] strArray75 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList76 = new java.util.ArrayList<java.lang.String>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList76, strArray75);
        java.util.stream.Stream<java.lang.String> strStream78 = strList76.stream();
        boolean boolean80 = strList76.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor82 = strList76.listIterator(0);
        strList76.clear();
        boolean boolean84 = strList38.retainAll((java.util.Collection<java.lang.String>) strList76);
        boolean boolean85 = strList76.isEmpty();
        strList76.add(0, "java.util.GregorianCalendar[time=1644572159256,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=100,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=35,SECOND=59,MILLISECOND=356,ZONE_OFFSET=100,DST_OFFSET=0]");
        java.lang.String str89 = java.util.Locale.lookupTag(languageRangeList3, (java.util.Collection<java.lang.String>) strList76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar57", (calendar6.compareTo(calendar57) == 0) == calendar6.equals(calendar57));
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test331");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder11 = builder0.setLenient(false);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay(15, 0, 32770);
        java.util.Calendar.Builder builder18 = builder15.setWeekDefinition(7, 7);
        java.util.Calendar.Builder builder20 = builder15.setLenient(true);
        java.util.Calendar.Builder builder24 = builder20.setWeekDate(0, 53, 31);
        java.util.Calendar.Builder builder29 = builder24.setTimeOfDay(31, (-1), 39, 52);
        java.util.Calendar.Builder builder32 = builder29.set(0, 59);
        java.util.Calendar.Builder builder36 = builder32.setTimeOfDay(1, (int) (short) 100, 50);
        java.util.Calendar.Builder builder41 = builder32.setTimeOfDay(47, 100, 22, (int) 'u');
        java.util.Calendar.Builder builder45 = builder41.setTimeOfDay(35, 6, (-1893));
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("\u5e74\u6708\u65e5");
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet52 = locale51.getExtensionKeys();
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone48, locale51);
        calendar53.setMinimalDaysInFirstWeek((int) (short) 0);
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        boolean boolean57 = calendar53.after((java.lang.Object) locale56);
        java.lang.String str58 = locale47.getDisplayVariant(locale56);
        java.util.Calendar.Builder builder59 = builder41.setLocale(locale56);
        java.util.TimeZone timeZone61 = java.util.TimeZone.getTimeZone("5:59:10 AM UTC");
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone61);
        java.util.Calendar calendar63 = java.util.Calendar.getInstance(timeZone61);
        java.util.Calendar.Builder builder64 = builder59.setTimeZone(timeZone61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar53 and calendar62", (calendar53.compareTo(calendar62) == 0) == calendar53.equals(calendar62));
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test332");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale9 = java.util.Locale.getDefault(category0);
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale locale12 = java.util.Locale.getDefault(category0);
        java.util.Locale locale15 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale16 = locale15.stripExtensions();
        java.lang.String[] strArray18 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.util.stream.Stream<java.lang.String> strStream21 = strList19.stream();
        boolean boolean23 = strList19.add("hi!");
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = locale24.getLanguage();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale24.getDisplayVariant(locale26);
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.lang.String str29 = locale24.getDisplayVariant(locale28);
        boolean boolean30 = strList19.contains((java.lang.Object) locale24);
        java.lang.String str31 = locale24.getVariant();
        boolean boolean32 = locale24.hasExtensions();
        java.lang.String str33 = locale16.getDisplayCountry(locale24);
        java.util.Locale.setDefault(category0, locale24);
        java.util.Locale locale35 = java.util.Locale.getDefault(category0);
        java.util.Locale locale36 = java.util.Locale.getDefault(category0);
        java.util.Locale locale37 = java.util.Locale.getDefault(category0);
        java.util.TimeZone timeZone39 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone39);
        java.lang.StringBuffer stringBuffer42 = null;
        java.lang.StringBuffer stringBuffer43 = fastDateFormat40.format((long) 32772, stringBuffer42);
        java.lang.StringBuffer stringBuffer45 = null;
        java.lang.StringBuffer stringBuffer46 = fastDateFormat40.format(1644572128302L, stringBuffer45);
        java.util.Date date53 = new java.util.Date(45, (int) (byte) 100, (int) '#', 50, 100, 36);
        date53.setMinutes((int) '4');
        java.lang.String str56 = fastDateFormat40.format(date53);
        java.util.Calendar calendar57 = java.util.Calendar.getInstance();
        calendar57.setMinimalDaysInFirstWeek(15);
        java.util.Date date60 = calendar57.getTime();
        calendar57.roll(0, 44);
        java.lang.String str64 = fastDateFormat40.format(calendar57);
        java.text.ParsePosition parsePosition67 = new java.text.ParsePosition(16);
        int int68 = parsePosition67.getErrorIndex();
        java.lang.String str69 = parsePosition67.toString();
        int int70 = parsePosition67.getErrorIndex();
        parsePosition67.setIndex(97);
        java.lang.Object obj73 = null;
        boolean boolean74 = parsePosition67.equals(obj73);
        java.lang.Object obj75 = fastDateFormat40.parseObject("\uc624\uc804\uc2dc\ubd84\ucd08", parsePosition67);
        java.util.Locale locale76 = fastDateFormat40.getLocale();
        java.util.Locale.setDefault(category0, locale76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar57", (calendar7.compareTo(calendar57) == 0) == calendar7.equals(calendar57));
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test333");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        int int5 = date3.getSeconds();
        java.lang.StringBuffer stringBuffer6 = null;
        java.text.Format.Field field7 = null;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition(field7, 1);
        fieldPosition9.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer12 = fastDateFormat2.format((java.lang.Object) date3, stringBuffer6, fieldPosition9);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        boolean boolean14 = calendar13.isWeekDateSupported();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        boolean boolean19 = calendar13.before((java.lang.Object) str18);
        long long20 = calendar13.getTimeInMillis();
        int int21 = calendar13.getMinimalDaysInFirstWeek();
        java.lang.StringBuffer stringBuffer22 = null;
        java.text.Format.Field field23 = null;
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition(field23, 3);
        fieldPosition25.setEndIndex(12);
        java.lang.StringBuffer stringBuffer28 = fastDateFormat2.format((java.lang.Object) calendar13, stringBuffer22, fieldPosition25);
        int int29 = fastDateFormat2.getMaxLengthEstimate();
        java.lang.String str31 = fastDateFormat2.format(1644572212307L);
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone33);
        java.lang.String str35 = fastDateFormat34.toString();
        java.lang.String str36 = fastDateFormat34.toString();
        java.util.TimeZone timeZone37 = fastDateFormat34.getTimeZone();
        java.util.Locale locale38 = fastDateFormat34.getLocale();
        boolean boolean39 = fastDateFormat34.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone40 = fastDateFormat34.getTimeZone();
        boolean boolean41 = timeZone40.observesDaylightTime();
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder44 = builder42.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder45 = builder42.clear();
        java.util.Locale.Builder builder46 = builder45.clear();
        java.util.Locale.Builder builder49 = builder46.setExtension('x', "GMT4");
        java.util.Locale.Builder builder50 = builder46.clear();
        java.util.Locale locale51 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder52 = builder46.setLocale(locale51);
        java.util.Locale.Builder builder54 = builder52.addUnicodeLocaleAttribute("und");
        java.util.Locale locale55 = builder54.build();
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.util.Locale locale57 = locale56.stripExtensions();
        java.lang.String str58 = locale57.toLanguageTag();
        java.util.Locale.setDefault(locale57);
        java.lang.String str60 = locale55.getDisplayLanguage(locale57);
        java.util.Calendar calendar61 = java.util.Calendar.getInstance();
        int int62 = calendar61.getWeeksInWeekYear();
        java.time.Instant instant63 = calendar61.toInstant();
        int int65 = calendar61.getActualMinimum((int) (byte) 10);
        calendar61.setMinimalDaysInFirstWeek((int) (byte) -1);
        java.util.Locale locale71 = new java.util.Locale("java.text.ParsePosition[index=16,errorIndex=-1]", "tedesco (Germania)", "Jan 10, 4630 12:00:00 AM");
        boolean boolean72 = calendar61.before((java.lang.Object) locale71);
        java.lang.String str73 = locale55.getDisplayCountry(locale71);
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(timeZone40, locale55);
        java.lang.StringBuffer stringBuffer75 = null;
        java.lang.StringBuffer stringBuffer76 = fastDateFormat2.format(calendar74, stringBuffer75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar13 and calendar61", (calendar13.compareTo(calendar61) == 0) == calendar13.equals(calendar61));
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test334");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set(14, 2022);
        int int5 = calendar1.getFirstDayOfWeek();
        calendar1.roll((int) (byte) 0, 14);
        java.util.Date date9 = new java.util.Date();
        int int10 = date9.getTimezoneOffset();
        long long11 = date9.getTime();
        int int12 = date9.getMinutes();
        int int13 = date9.getDay();
        calendar1.setTime(date9);
        calendar1.setTimeInMillis(1644485683287L);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone18);
        java.time.ZoneId zoneId20 = timeZone18.toZoneId();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone(zoneId20);
        boolean boolean22 = timeZone21.observesDaylightTime();
        calendar1.setTimeZone(timeZone21);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getDisplayName();
        java.lang.String str30 = locale28.getDisplayCountry();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone26, locale28);
        int int33 = calendar31.getActualMinimum(2);
        int int34 = calendar31.getWeeksInWeekYear();
        java.util.Calendar.Builder builder35 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale39.getDisplayName();
        java.lang.String str41 = locale39.getDisplayCountry();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone37, locale39);
        int int44 = calendar42.getActualMinimum(2);
        java.util.TimeZone timeZone45 = calendar42.getTimeZone();
        java.util.TimeZone timeZone46 = calendar42.getTimeZone();
        java.util.Calendar.Builder builder47 = builder35.setTimeZone(timeZone46);
        calendar31.setTimeZone(timeZone46);
        java.util.TimeZone.setDefault(timeZone46);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone46);
        java.util.Date date57 = new java.util.Date(5, (int) '4', 31, 17, (int) (short) 100, 8);
        date57.setHours((int) 'x');
        java.lang.StringBuffer stringBuffer60 = null;
        java.lang.StringBuffer stringBuffer61 = fastDateFormat50.format(date57, stringBuffer60);
        boolean boolean62 = timeZone21.inDaylightTime(date57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar31", (calendar19.compareTo(calendar31) == 0) == calendar19.equals(calendar31));
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test335");
        java.util.Locale locale4 = new java.util.Locale("java.util.GregorianCalendar[time=1644572085058,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=43,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=45,MILLISECOND=101,ZONE_OFFSET=43,DST_OFFSET=0]", "2/7/70 12:00 AM", "deu");
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        boolean boolean7 = locale5.hasExtensions();
        java.lang.String str8 = locale5.getDisplayScript();
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale10);
        java.lang.String str12 = locale10.getLanguage();
        java.lang.String str13 = locale10.getVariant();
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        boolean boolean16 = locale14.hasExtensions();
        java.lang.String str17 = locale10.getDisplayCountry(locale14);
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category18, locale19);
        java.util.Locale locale21 = java.util.Locale.getDefault(category18);
        boolean boolean22 = locale21.hasExtensions();
        java.lang.String[] strArray28 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList29 = new java.util.ArrayList<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList29, strArray28);
        java.util.stream.Stream<java.lang.String> strStream31 = strList29.stream();
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        int int33 = strList29.lastIndexOf((java.lang.Object) locale32);
        java.lang.String str34 = locale21.getDisplayVariant(locale32);
        java.lang.String str35 = locale10.getDisplayCountry(locale21);
        java.lang.String str36 = locale10.getDisplayName();
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition(16);
        int int39 = parsePosition38.getErrorIndex();
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        boolean boolean44 = parsePosition38.equals((java.lang.Object) fastDateFormat42);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        boolean boolean46 = parsePosition38.equals((java.lang.Object) locale45);
        java.lang.String str47 = locale45.getDisplayScript();
        java.util.Locale.Builder builder48 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder50 = builder48.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder51 = builder48.clear();
        java.util.Locale locale52 = builder51.build();
        java.lang.String str53 = locale45.getDisplayVariant(locale52);
        java.lang.String str54 = locale10.getDisplayVariant(locale45);
        java.lang.String str55 = locale45.getScript();
        java.lang.String str56 = locale5.getDisplayVariant(locale45);
        java.lang.String str57 = locale4.getDisplayName(locale45);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getInstance("10.02.2022 09:35:09", locale4);
        java.util.Locale.Builder builder59 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder61 = builder59.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder63 = builder61.setLanguageTag("it");
        java.util.Locale.Builder builder66 = builder61.setExtension('x', "de");
        java.util.Locale.Builder builder68 = builder61.setLanguage("fra");
        java.util.TimeZone timeZone71 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone71);
        java.lang.String str73 = fastDateFormat72.toString();
        java.lang.String str74 = fastDateFormat72.toString();
        java.util.TimeZone timeZone75 = fastDateFormat72.getTimeZone();
        java.util.Locale locale76 = java.util.Locale.CHINESE;
        java.lang.String str77 = locale76.getLanguage();
        java.util.Locale locale78 = java.util.Locale.GERMAN;
        java.lang.String str79 = locale76.getDisplayVariant(locale78);
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(timeZone75, locale76);
        java.util.Locale locale81 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone82 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone83 = java.util.TimeZone.getDefault();
        boolean boolean84 = timeZone82.hasSameRules(timeZone83);
        java.util.Locale locale85 = java.util.Locale.ROOT;
        java.util.Calendar calendar86 = java.util.Calendar.getInstance(timeZone83, locale85);
        java.lang.String str87 = locale85.getDisplayLanguage();
        java.lang.String str89 = locale85.getUnicodeLocaleType("zh");
        java.lang.String str90 = locale81.getDisplayScript(locale85);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat91 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone75, locale85);
        java.util.Set<java.lang.Character> charSet92 = locale85.getExtensionKeys();
        java.util.Locale.Builder builder93 = builder61.setLocale(locale85);
        java.util.Locale.Builder builder95 = builder61.setVariant("Chinese");
        boolean boolean96 = fastDateFormat58.equals((java.lang.Object) "Chinese");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar80 and calendar86", (calendar80.compareTo(calendar86) == 0) == calendar80.equals(calendar86));
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test336");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getTimezoneOffset();
        long long6 = date4.getTime();
        int int7 = date4.getMonth();
        date4.setSeconds(7);
        date4.setSeconds(1);
        java.util.Date date12 = new java.util.Date();
        int int13 = date12.getTimezoneOffset();
        long long14 = date12.getTime();
        int int15 = date12.getMonth();
        date12.setSeconds(7);
        date12.setSeconds(1);
        boolean boolean20 = date4.before(date12);
        long long21 = date4.getTime();
        java.text.AttributedCharacterIterator attributedCharacterIterator22 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) date4);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        calendar27.clear(0);
        calendar27.setFirstDayOfWeek(51);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone34, locale36);
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition(16);
        int int40 = parsePosition39.getErrorIndex();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet42 = locale41.getExtensionKeys();
        boolean boolean43 = parsePosition39.equals((java.lang.Object) locale41);
        java.lang.String str44 = locale41.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat45 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone34, locale41);
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone47, locale49);
        long long51 = calendar50.getTimeInMillis();
        java.lang.String str52 = fastDateFormat45.format(calendar50);
        java.util.Date date53 = calendar50.getTime();
        calendar27.setTime(date53);
        int int56 = calendar27.getLeastMaximum(0);
        java.lang.String str57 = fastDateFormat2.format(calendar27);
        java.util.TimeZone timeZone61 = java.util.TimeZone.getTimeZone("31 May 2022 09:35:03 GMT");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(0, 0, timeZone61);
        calendar27.setTimeZone(timeZone61);
        java.lang.String str64 = timeZone61.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar27 and calendar37", (calendar27.compareTo(calendar37) == 0) == calendar27.equals(calendar37));
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test337");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str2 = locale1.getDisplayName();
        boolean boolean3 = fastDateFormat0.equals((java.lang.Object) str2);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getDisplayName();
        java.lang.String str9 = locale7.getDisplayCountry();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone5, locale7);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone5);
        java.lang.String str12 = fastDateFormat0.format((java.lang.Object) calendar11);
        java.lang.String str13 = fastDateFormat0.toString();
        java.util.TimeZone timeZone14 = fastDateFormat0.getTimeZone();
        java.util.Date date18 = new java.util.Date((-1), 32772, (int) (short) 10);
        java.util.Date date19 = new java.util.Date();
        int int20 = date19.getTimezoneOffset();
        long long21 = date19.getTime();
        boolean boolean22 = date18.before(date19);
        java.lang.String str23 = fastDateFormat0.format(date18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar11", (calendar10.compareTo(calendar11) == 0) == calendar10.equals(calendar11));
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test338");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category6, locale9);
        java.lang.String str11 = locale9.toLanguageTag();
        java.util.Calendar.Builder builder12 = builder0.setLocale(locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        java.text.ParsePosition parsePosition20 = new java.text.ParsePosition(16);
        int int21 = parsePosition20.getErrorIndex();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        boolean boolean24 = parsePosition20.equals((java.lang.Object) locale22);
        java.lang.String str25 = locale22.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15, locale22);
        int int27 = timeZone15.getRawOffset();
        java.util.Calendar.Builder builder28 = builder12.setTimeZone(timeZone15);
        java.util.Calendar calendar29 = builder12.build();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance();
        boolean boolean32 = calendar31.isWeekDateSupported();
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale33.getLanguage();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale33.getDisplayVariant(locale35);
        boolean boolean37 = calendar31.before((java.lang.Object) str36);
        int int38 = calendar31.getFirstDayOfWeek();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone39);
        calendar31.setTimeZone(timeZone39);
        java.util.Locale locale45 = new java.util.Locale("");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08", timeZone39, locale45);
        java.util.Locale locale47 = locale45.stripExtensions();
        java.util.Calendar.Builder builder48 = builder12.setLocale(locale45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar18 and calendar31", (calendar18.compareTo(calendar31) == 0) == calendar18.equals(calendar31));
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test339");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition(16);
        int int9 = parsePosition8.getErrorIndex();
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        boolean boolean14 = parsePosition8.equals((java.lang.Object) fastDateFormat12);
        java.util.Locale locale15 = java.util.Locale.FRANCE;
        boolean boolean16 = parsePosition8.equals((java.lang.Object) locale15);
        java.lang.String str17 = locale3.getDisplayCountry(locale15);
        java.lang.String str18 = locale3.toLanguageTag();
        java.lang.String str19 = locale3.getDisplayVariant();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale locale21 = builder20.build();
        java.util.Locale locale22 = builder20.build();
        java.lang.String str23 = locale3.getDisplayVariant(locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleKeys();
        java.util.Locale.Category category25 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale26 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category25, locale26);
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category25, locale28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(locale30);
        java.util.Locale.setDefault(category25, locale30);
        java.util.Locale locale33 = java.util.Locale.getDefault(category25);
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(category25, locale34);
        java.text.AttributedCharacterIterator.Attribute attribute36 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str37 = attribute36.toString();
        java.util.Date date38 = new java.util.Date();
        int int39 = date38.getTimezoneOffset();
        long long40 = date38.getTime();
        java.util.Date date41 = new java.util.Date();
        int int42 = date41.getSeconds();
        long long43 = date41.getTime();
        date41.setTime((long) ' ');
        int int46 = date41.getTimezoneOffset();
        boolean boolean47 = date38.before(date41);
        boolean boolean48 = attribute36.equals((java.lang.Object) date38);
        java.util.Locale.Category category49 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale50 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category49, locale50);
        java.util.Locale locale52 = java.util.Locale.getDefault(category49);
        boolean boolean53 = locale52.hasExtensions();
        java.lang.String[] strArray59 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        java.util.stream.Stream<java.lang.String> strStream62 = strList60.stream();
        java.util.Locale locale63 = java.util.Locale.JAPANESE;
        int int64 = strList60.lastIndexOf((java.lang.Object) locale63);
        java.lang.String str65 = locale52.getDisplayVariant(locale63);
        java.util.Locale locale66 = java.util.Locale.CHINESE;
        java.lang.String str67 = locale66.getLanguage();
        java.lang.String str68 = locale52.getDisplayVariant(locale66);
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        java.lang.String str70 = locale69.getLanguage();
        boolean boolean71 = locale69.hasExtensions();
        java.lang.String str72 = locale69.getDisplayScript();
        java.lang.String str73 = locale66.getDisplayCountry(locale69);
        boolean boolean74 = attribute36.equals((java.lang.Object) locale66);
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.util.Locale.Category category76 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale77 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category76, locale77);
        java.lang.String str79 = locale77.getScript();
        java.lang.String str80 = locale75.getDisplayCountry(locale77);
        java.lang.String str81 = locale75.getISO3Country();
        java.lang.String str82 = locale66.getDisplayVariant(locale75);
        java.util.Locale.setDefault(category25, locale66);
        java.util.Locale locale84 = java.util.Locale.ROOT;
        java.lang.String str85 = locale84.getLanguage();
        java.util.TimeZone timeZone86 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone87 = java.util.TimeZone.getDefault();
        boolean boolean88 = timeZone86.hasSameRules(timeZone87);
        java.util.Locale locale89 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet90 = locale89.getExtensionKeys();
        java.util.Calendar calendar91 = java.util.Calendar.getInstance(timeZone86, locale89);
        java.lang.String str92 = locale89.getCountry();
        java.lang.String str93 = locale84.getDisplayLanguage(locale89);
        java.lang.String str94 = locale84.getISO3Country();
        java.util.Set<java.lang.String> strSet95 = locale84.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale84);
        java.lang.String str97 = locale66.getDisplayLanguage(locale84);
        java.lang.String str98 = locale84.getDisplayLanguage();
        java.lang.String str99 = locale22.getDisplayCountry(locale84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar31", (calendar6.compareTo(calendar31) == 0) == calendar6.equals(calendar31));
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test340");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("it");
        java.util.Locale.Builder builder7 = builder2.setExtension('x', "de");
        java.util.Locale.Builder builder9 = builder2.setLanguage("fra");
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.lang.String str14 = fastDateFormat13.toString();
        java.lang.String str15 = fastDateFormat13.toString();
        java.util.TimeZone timeZone16 = fastDateFormat13.getTimeZone();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale17.getDisplayVariant(locale19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone16, locale17);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        java.lang.String str28 = locale26.getDisplayLanguage();
        java.lang.String str30 = locale26.getUnicodeLocaleType("zh");
        java.lang.String str31 = locale22.getDisplayScript(locale26);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone16, locale26);
        java.util.Set<java.lang.Character> charSet33 = locale26.getExtensionKeys();
        java.util.Locale.Builder builder34 = builder2.setLocale(locale26);
        java.util.Locale.Builder builder36 = builder2.setVariant("Chinese");
        java.util.Calendar.Builder builder37 = new java.util.Calendar.Builder();
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.lang.String str39 = locale38.getLanguage();
        boolean boolean40 = locale38.hasExtensions();
        java.lang.String str41 = locale38.getDisplayCountry();
        java.util.Calendar.Builder builder42 = builder37.setLocale(locale38);
        java.util.Calendar.Builder builder46 = builder37.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder48 = builder37.setLenient(false);
        java.util.Calendar.Builder builder52 = builder37.setTimeOfDay(15, 0, 32770);
        java.util.Locale locale53 = java.util.Locale.UK;
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.lang.String str55 = locale53.getDisplayCountry(locale54);
        java.lang.String str56 = locale53.getISO3Language();
        java.lang.String str58 = locale53.getExtension('x');
        java.lang.String str59 = locale53.getLanguage();
        java.lang.String str60 = locale53.getLanguage();
        java.util.Calendar.Builder builder61 = builder37.setLocale(locale53);
        java.util.Locale.Builder builder62 = builder2.setLocale(locale53);
        java.util.Locale.Builder builder63 = builder62.clearExtensions();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar21 and calendar27", (calendar21.compareTo(calendar27) == 0) == calendar21.equals(calendar27));
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test341");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5, locale7);
        java.lang.String str9 = locale7.getDisplayLanguage();
        java.lang.String str10 = locale3.getDisplayCountry(locale7);
        java.lang.String str11 = locale7.getLanguage();
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category12, locale13);
        java.util.Locale locale15 = java.util.Locale.getDefault(category12);
        boolean boolean16 = locale15.hasExtensions();
        java.lang.String[] strArray22 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.util.stream.Stream<java.lang.String> strStream25 = strList23.stream();
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        int int27 = strList23.lastIndexOf((java.lang.Object) locale26);
        java.lang.String str28 = locale15.getDisplayVariant(locale26);
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.lang.String str30 = locale29.getLanguage();
        java.lang.String str31 = locale15.getDisplayVariant(locale29);
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = locale32.getLanguage();
        boolean boolean34 = locale32.hasExtensions();
        java.lang.String str35 = locale32.getDisplayScript();
        java.lang.String str36 = locale29.getDisplayCountry(locale32);
        java.lang.String str37 = locale7.getDisplayVariant(locale29);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale29);
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale29);
        java.util.Locale locale40 = locale29.stripExtensions();
        java.lang.String str41 = locale40.getISO3Country();
        java.lang.String str42 = locale40.getDisplayCountry();
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale45 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet46 = locale45.getExtensionKeys();
        java.util.Locale locale48 = new java.util.Locale("de");
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale48);
        java.lang.String str50 = locale45.getDisplayVariant(locale48);
        java.lang.String str51 = locale44.getDisplayCountry(locale45);
        java.util.Locale locale52 = locale44.stripExtensions();
        java.lang.String str53 = locale40.getDisplayName(locale44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar49", (calendar8.compareTo(calendar49) == 0) == calendar8.equals(calendar49));
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test342");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("9:34:38 AM UTC");
        java.util.Locale locale2 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(locale2);
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleKeys();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale2);
        java.lang.String str6 = locale2.getDisplayScript();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone1, locale2);
        java.lang.String str8 = timeZone1.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar3 and calendar7", (calendar3.compareTo(calendar7) == 0) == calendar3.equals(calendar7));
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test343");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] { languageRange7 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone12, locale14);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale18.getDisplayLanguage(locale19);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale25);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone31);
        java.util.Locale locale34 = fastDateFormat33.getLocale();
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.lang.String str41 = locale36.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone48);
        java.util.Locale locale51 = fastDateFormat50.getLocale();
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone54.hasSameRules(timeZone55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone55);
        java.util.Locale locale58 = fastDateFormat57.getLocale();
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale60 = java.util.Locale.UK;
        java.util.Locale[] localeArray61 = new java.util.Locale[] { locale14, locale18, locale22, locale25, locale27, locale28, locale34, locale35, locale40, locale42, locale43, locale44, locale45, locale51, locale52, locale58, locale59, locale60 };
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.Locale locale64 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList62);
        java.lang.String str65 = locale1.getDisplayName(locale64);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(locale1);
        java.util.Date date67 = calendar66.getTime();
        date67.setHours(54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar17 and calendar66", (calendar17.compareTo(calendar66) == 0) == calendar17.equals(calendar66));
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test344");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone4 = fastDateFormat2.getTimeZone();
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale5);
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone4, locale5);
        boolean boolean9 = timeZone4.useDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar8", (calendar6.compareTo(calendar8) == 0) == calendar6.equals(calendar8));
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test345");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        long long19 = calendar18.getTimeInMillis();
        java.lang.String str20 = fastDateFormat13.format(calendar18);
        long long21 = calendar18.getTimeInMillis();
        java.util.Date date27 = new java.util.Date(9, (int) 'x', (int) '#', 2, 7);
        int int28 = date27.getTimezoneOffset();
        date27.setYear(1970);
        calendar18.setTime(date27);
        java.util.Locale locale36 = new java.util.Locale("coreano", "Fri Feb 11 09:34:34 UTC 2022", "de");
        boolean boolean37 = locale36.hasExtensions();
        java.lang.String str38 = locale36.getDisplayVariant();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", locale36);
        java.lang.StringBuffer stringBuffer41 = null;
        java.lang.StringBuffer stringBuffer42 = fastDateFormat39.format((-2170453192000L), stringBuffer41);
        java.util.Locale locale43 = fastDateFormat39.getLocale();
        boolean boolean44 = calendar18.before((java.lang.Object) fastDateFormat39);
        long long45 = calendar18.getTimeInMillis();
        calendar18.set(23, 13, 24);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.lang.String str54 = locale53.getDisplayName();
        java.lang.String str55 = locale53.getDisplayCountry();
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone51, locale53);
        int int58 = calendar56.getActualMinimum(2);
        java.util.TimeZone timeZone59 = calendar56.getTimeZone();
        java.util.TimeZone timeZone60 = calendar56.getTimeZone();
        java.lang.String str61 = calendar56.getCalendarType();
        java.lang.String str62 = calendar56.getCalendarType();
        java.util.TimeZone timeZone63 = calendar56.getTimeZone();
        timeZone63.setID("deu");
        boolean boolean66 = timeZone63.observesDaylightTime();
        calendar18.setTimeZone(timeZone63);
        java.util.Date date68 = calendar18.getTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar56", (calendar5.compareTo(calendar56) == 0) == calendar5.equals(calendar56));
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test346");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        boolean boolean7 = strList2.isEmpty();
        java.lang.Object[] objArray8 = strList2.toArray();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        int int10 = calendar9.getWeeksInWeekYear();
        java.time.Instant instant11 = calendar9.toInstant();
        boolean boolean12 = strList2.equals((java.lang.Object) instant11);
        java.lang.String[] strArray19 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.stream.Stream<java.lang.String> strStream22 = strList20.stream();
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        int int24 = strList20.lastIndexOf((java.lang.Object) locale23);
        java.util.stream.Stream<java.lang.String> strStream25 = strList20.stream();
        java.lang.String[] strArray27 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.stream.Stream<java.lang.String> strStream30 = strList28.stream();
        strList28.clear();
        java.util.Spliterator<java.lang.String> strSpliterator32 = strList28.spliterator();
        int int33 = strList20.lastIndexOf((java.lang.Object) strSpliterator32);
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone35);
        java.lang.String str37 = fastDateFormat36.getPattern();
        boolean boolean38 = strList20.contains((java.lang.Object) str37);
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        boolean boolean41 = timeZone39.hasSameRules(timeZone40);
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone40, locale42);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone46);
        timeZone46.setRawOffset(3);
        java.util.TimeZone timeZone52 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone52);
        java.lang.String str54 = fastDateFormat53.getPattern();
        java.util.TimeZone timeZone55 = fastDateFormat53.getTimeZone();
        boolean boolean56 = timeZone46.hasSameRules(timeZone55);
        boolean boolean57 = timeZone40.hasSameRules(timeZone55);
        java.util.TimeZone.setDefault(timeZone55);
        boolean boolean59 = strList20.contains((java.lang.Object) timeZone55);
        java.util.ListIterator<java.lang.String> strItor60 = strList20.listIterator();
        java.lang.String[] strArray62 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        java.util.stream.Stream<java.lang.String> strStream65 = strList63.stream();
        boolean boolean67 = strList63.equals((java.lang.Object) (-1.0d));
        boolean boolean68 = strList63.isEmpty();
        java.lang.String str70 = strList63.get(0);
        boolean boolean71 = strList20.retainAll((java.util.Collection<java.lang.String>) strList63);
        java.util.ListIterator<java.lang.String> strItor72 = strList20.listIterator();
        java.util.stream.Stream<java.lang.String> strStream73 = strList20.stream();
        boolean boolean74 = strList2.addAll((int) (short) 1, (java.util.Collection<java.lang.String>) strList20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar43", (calendar9.compareTo(calendar43) == 0) == calendar9.equals(calendar43));
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test347");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone8);
        timeZone8.setRawOffset(3);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        java.util.TimeZone timeZone17 = fastDateFormat15.getTimeZone();
        boolean boolean18 = timeZone8.hasSameRules(timeZone17);
        boolean boolean19 = timeZone2.hasSameRules(timeZone17);
        timeZone2.setRawOffset(50);
        timeZone2.setRawOffset(52);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("11.02.2022 09:37:48", timeZone2);
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone26);
        java.util.Date date28 = new java.util.Date();
        int int29 = date28.getTimezoneOffset();
        int int30 = date28.getSeconds();
        date28.setDate(7);
        java.time.Instant instant33 = date28.toInstant();
        java.util.Date date34 = java.util.Date.from(instant33);
        java.lang.String str35 = date34.toLocaleString();
        java.lang.StringBuffer stringBuffer36 = null;
        java.lang.StringBuffer stringBuffer37 = fastDateFormat27.format(date34, stringBuffer36);
        java.util.Date date38 = new java.util.Date();
        int int39 = date38.getTimezoneOffset();
        long long40 = date38.getTime();
        int int41 = date38.getMonth();
        date38.setSeconds(7);
        date38.setSeconds(1);
        java.util.Date date46 = new java.util.Date();
        int int47 = date46.getTimezoneOffset();
        long long48 = date46.getTime();
        int int49 = date46.getMonth();
        date46.setSeconds(7);
        date46.setSeconds(1);
        boolean boolean54 = date38.before(date46);
        java.lang.String str55 = fastDateFormat27.format(date38);
        java.lang.StringBuffer stringBuffer57 = null;
        java.lang.StringBuffer stringBuffer58 = fastDateFormat27.format(1644572166595L, stringBuffer57);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(locale59);
        calendar60.set(14, 2022);
        int int64 = calendar60.getFirstDayOfWeek();
        calendar60.roll((int) (byte) 0, 14);
        java.util.Date date68 = new java.util.Date();
        int int69 = date68.getTimezoneOffset();
        long long70 = date68.getTime();
        int int71 = date68.getMinutes();
        int int72 = date68.getDay();
        calendar60.setTime(date68);
        boolean boolean74 = fastDateFormat27.equals((java.lang.Object) date68);
        int int75 = date68.getTimezoneOffset();
        int int76 = date68.getYear();
        boolean boolean77 = timeZone2.inDaylightTime(date68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar60", (calendar5.compareTo(calendar60) == 0) == calendar5.equals(calendar60));
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test348");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = locale6.getLanguage();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale6.getDisplayVariant(locale8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone5, locale6);
        int int12 = calendar10.getActualMinimum(0);
        boolean boolean13 = calendar10.isWeekDateSupported();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone16);
        boolean boolean18 = fastDateFormat17.getTimeZoneOverridesCalendar();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance();
        int int20 = calendar19.getWeeksInWeekYear();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        boolean boolean25 = timeZone21.hasSameRules(timeZone23);
        calendar19.setTimeZone(timeZone21);
        calendar19.set((int) (byte) 100, (int) (byte) 1, 0, 6, (-1));
        java.lang.String str33 = fastDateFormat17.format(calendar19);
        java.util.TimeZone timeZone34 = fastDateFormat17.getTimeZone();
        java.lang.String[] strArray36 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.util.stream.Stream<java.lang.String> strStream39 = strList37.stream();
        strList37.clear();
        boolean boolean41 = strList37.isEmpty();
        boolean boolean42 = strList37.isEmpty();
        java.util.ListIterator<java.lang.String> strItor43 = strList37.listIterator();
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone46, locale48);
        java.lang.String str50 = locale48.getDisplayLanguage();
        java.lang.String str52 = locale48.getUnicodeLocaleType("zh");
        java.lang.String str53 = locale44.getDisplayScript(locale48);
        int int54 = strList37.indexOf((java.lang.Object) locale44);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone34, locale44);
        boolean boolean56 = calendar10.after((java.lang.Object) timeZone34);
        java.util.TimeZone.setDefault(timeZone34);
        timeZone34.setID("10-feb-2022 19.36.26");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar49", (calendar10.compareTo(calendar49) == 0) == calendar10.equals(calendar49));
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test349");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = fastDateFormat2.getLocale();
        boolean boolean7 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone8 = fastDateFormat2.getTimeZone();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        int int10 = calendar9.getWeeksInWeekYear();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        boolean boolean15 = timeZone11.hasSameRules(timeZone13);
        calendar9.setTimeZone(timeZone11);
        calendar9.set((int) (byte) 100, (int) (byte) 1, 0, 6, (-1));
        java.util.Date date23 = new java.util.Date();
        int int24 = date23.getTimezoneOffset();
        long long25 = date23.getTime();
        java.util.Date date26 = new java.util.Date();
        int int27 = date26.getSeconds();
        long long28 = date26.getTime();
        date26.setTime((long) ' ');
        int int31 = date26.getTimezoneOffset();
        boolean boolean32 = date23.before(date26);
        calendar9.setTime(date23);
        java.text.AttributedCharacterIterator attributedCharacterIterator34 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) date23);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone36, locale38);
        long long40 = calendar39.getTimeInMillis();
        calendar39.set(2022, (int) 'a', 8);
        int int46 = calendar39.getGreatestMinimum(5);
        java.time.Instant instant47 = calendar39.toInstant();
        java.lang.String str48 = fastDateFormat2.format(calendar39);
        java.lang.String str50 = fastDateFormat2.format(0L);
        java.lang.String[] strArray52 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        java.util.stream.Stream<java.lang.String> strStream55 = strList53.stream();
        strList53.clear();
        boolean boolean57 = strList53.isEmpty();
        boolean boolean58 = strList53.isEmpty();
        java.util.ListIterator<java.lang.String> strItor59 = strList53.listIterator();
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone62 = java.util.TimeZone.getDefault();
        boolean boolean63 = timeZone61.hasSameRules(timeZone62);
        java.util.Locale locale64 = java.util.Locale.ROOT;
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(timeZone62, locale64);
        java.lang.String str66 = locale64.getDisplayLanguage();
        java.lang.String str68 = locale64.getUnicodeLocaleType("zh");
        java.lang.String str69 = locale60.getDisplayScript(locale64);
        int int70 = strList53.indexOf((java.lang.Object) locale60);
        java.lang.String str71 = locale60.getDisplayScript();
        boolean boolean72 = fastDateFormat2.equals((java.lang.Object) str71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar65", (calendar9.compareTo(calendar65) == 0) == calendar9.equals(calendar65));
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test350");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        long long5 = calendar4.getTimeInMillis();
        calendar4.set(2022, (int) 'a', 8);
        boolean boolean11 = calendar4.after((java.lang.Object) "9:34:49 AM UTC");
        calendar4.clear();
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone14);
        java.lang.StringBuffer stringBuffer17 = null;
        java.lang.StringBuffer stringBuffer18 = fastDateFormat15.format((long) 32772, stringBuffer17);
        java.util.TimeZone timeZone19 = fastDateFormat15.getTimeZone();
        int int20 = timeZone19.getRawOffset();
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22);
        java.lang.String str24 = fastDateFormat23.toString();
        java.lang.String str25 = fastDateFormat23.toString();
        java.util.TimeZone timeZone26 = fastDateFormat23.getTimeZone();
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.lang.String str28 = locale27.getLanguage();
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale27.getDisplayVariant(locale29);
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone26, locale27);
        boolean boolean32 = timeZone19.hasSameRules(timeZone26);
        java.util.TimeZone.setDefault(timeZone26);
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone36, locale38);
        java.text.ParsePosition parsePosition41 = new java.text.ParsePosition(16);
        int int42 = parsePosition41.getErrorIndex();
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet44 = locale43.getExtensionKeys();
        boolean boolean45 = parsePosition41.equals((java.lang.Object) locale43);
        java.lang.String str46 = locale43.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone36, locale43);
        boolean boolean48 = timeZone26.hasSameRules(timeZone36);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51, locale53);
        java.text.ParsePosition parsePosition56 = new java.text.ParsePosition(16);
        int int57 = parsePosition56.getErrorIndex();
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet59 = locale58.getExtensionKeys();
        boolean boolean60 = parsePosition56.equals((java.lang.Object) locale58);
        java.lang.String str61 = locale58.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone51, locale58);
        java.util.TimeZone timeZone63 = java.util.TimeZone.getDefault();
        timeZone63.setRawOffset((-1));
        boolean boolean66 = timeZone51.hasSameRules(timeZone63);
        java.util.TimeZone timeZone67 = null;
        boolean boolean68 = timeZone63.hasSameRules(timeZone67);
        int int69 = timeZone63.getRawOffset();
        java.util.Calendar.Builder builder70 = new java.util.Calendar.Builder();
        java.util.Calendar calendar71 = builder70.build();
        int int72 = calendar71.getWeekYear();
        calendar71.setLenient(true);
        calendar71.set((int) (byte) 0, 56, 100, 2022, (int) '#');
        calendar71.setFirstDayOfWeek(44);
        calendar71.setFirstDayOfWeek((int) (byte) 100);
        java.util.TimeZone timeZone85 = calendar71.getTimeZone();
        boolean boolean86 = timeZone63.hasSameRules(timeZone85);
        boolean boolean87 = timeZone36.hasSameRules(timeZone63);
        java.util.Calendar calendar88 = java.util.Calendar.getInstance(timeZone63);
        calendar4.setTimeZone(timeZone63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar31 and calendar88", (calendar31.compareTo(calendar88) == 0) == calendar31.equals(calendar88));
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test351");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str1 = attribute0.toString();
        java.lang.String str2 = attribute0.toString();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str5 = fastDateFormat3.format((long) 100);
        boolean boolean6 = attribute0.equals((java.lang.Object) str5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        int int8 = calendar7.getWeeksInWeekYear();
        java.time.Instant instant9 = calendar7.toInstant();
        int int11 = calendar7.getMinimum(4);
        calendar7.setFirstDayOfWeek(13);
        boolean boolean14 = attribute0.equals((java.lang.Object) 13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        int int16 = calendar15.getWeeksInWeekYear();
        java.time.Instant instant17 = calendar15.toInstant();
        boolean boolean18 = calendar15.isWeekDateSupported();
        int int19 = calendar15.getWeekYear();
        int int20 = calendar15.getWeekYear();
        calendar15.roll(45, 0);
        java.util.Date date24 = calendar15.getTime();
        boolean boolean25 = attribute0.equals((java.lang.Object) calendar15);
        java.lang.String[] strArray27 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.stream.Stream<java.lang.String> strStream30 = strList28.stream();
        boolean boolean32 = strList28.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor34 = strList28.listIterator(0);
        java.lang.String[] strArray36 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.util.stream.Stream<java.lang.String> strStream39 = strList37.stream();
        boolean boolean41 = strList37.add("hi!");
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = locale42.getLanguage();
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale42.getDisplayVariant(locale44);
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        java.lang.String str47 = locale42.getDisplayVariant(locale46);
        boolean boolean48 = strList37.contains((java.lang.Object) locale42);
        boolean boolean49 = strList28.removeAll((java.util.Collection<java.lang.String>) strList37);
        java.util.TimeZone timeZone51 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone51);
        java.util.Date date53 = new java.util.Date();
        int int54 = date53.getTimezoneOffset();
        int int55 = date53.getSeconds();
        java.lang.StringBuffer stringBuffer56 = null;
        java.text.Format.Field field57 = null;
        java.text.FieldPosition fieldPosition59 = new java.text.FieldPosition(field57, 1);
        fieldPosition59.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer62 = fastDateFormat52.format((java.lang.Object) date53, stringBuffer56, fieldPosition59);
        int int63 = strList28.lastIndexOf((java.lang.Object) fieldPosition59);
        java.util.Date date64 = new java.util.Date();
        int int65 = date64.getDay();
        java.util.Date date66 = new java.util.Date();
        date66.setMinutes((int) '#');
        boolean boolean69 = date64.before(date66);
        boolean boolean70 = fieldPosition59.equals((java.lang.Object) date66);
        int int71 = date66.getMinutes();
        int int72 = date66.getMinutes();
        date66.setYear(32772);
        boolean boolean75 = attribute0.equals((java.lang.Object) 32772);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar15", (calendar7.compareTo(calendar15) == 0) == calendar7.equals(calendar15));
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test352");
        java.util.Calendar.Builder builder1 = new java.util.Calendar.Builder();
        java.util.Calendar calendar2 = builder1.build();
        int int4 = calendar2.getGreatestMinimum(4);
        int int5 = calendar2.getWeekYear();
        calendar2.set(47, (int) (byte) 0, (-1969), 0, 57);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone14);
        java.lang.String str16 = fastDateFormat15.toString();
        java.lang.String str17 = fastDateFormat15.toString();
        java.util.TimeZone timeZone18 = fastDateFormat15.getTimeZone();
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale19.getDisplayVariant(locale21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone18, locale19);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone26, locale28);
        java.lang.String str30 = locale28.getDisplayLanguage();
        java.lang.String str32 = locale28.getUnicodeLocaleType("zh");
        java.lang.String str33 = locale24.getDisplayScript(locale28);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone18, locale28);
        int int35 = timeZone18.getRawOffset();
        calendar2.setTimeZone(timeZone18);
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder39 = builder37.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder40 = builder37.clear();
        java.util.Locale locale41 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder42 = builder40.setLocale(locale41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet44 = locale43.getExtensionKeys();
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.lang.String str47 = locale46.getLanguage();
        java.lang.String str48 = locale45.getDisplayLanguage(locale46);
        java.lang.String str49 = locale43.getDisplayLanguage(locale45);
        java.util.Locale.Builder builder50 = builder40.setLocale(locale45);
        boolean boolean51 = locale45.hasExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone18, locale45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar23 and calendar29", (calendar23.compareTo(calendar29) == 0) == calendar23.equals(calendar29));
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test353");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("FastDateFormat[h:mm:ss a z]");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone3);
        java.lang.StringBuffer stringBuffer6 = null;
        java.lang.StringBuffer stringBuffer7 = fastDateFormat4.format((long) 32772, stringBuffer6);
        java.util.TimeZone timeZone8 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone9 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone10 = fastDateFormat4.getTimeZone();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getLanguage();
        boolean boolean13 = locale11.hasExtensions();
        java.lang.String str14 = locale11.getDisplayScript();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone10, locale11);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone1, locale11);
        java.lang.String str17 = locale11.getScript();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar16", (calendar15.compareTo(calendar16) == 0) == calendar15.equals(calendar16));
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test354");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("9:34:37 AM UTC");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229\u6587");
        boolean boolean4 = timeZone1.hasSameRules(timeZone3);
        java.util.Locale locale6 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale6);
        java.lang.String str8 = locale6.getLanguage();
        java.lang.String str9 = locale6.getVariant();
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getLanguage();
        boolean boolean12 = locale10.hasExtensions();
        java.lang.String str13 = locale6.getDisplayCountry(locale10);
        java.util.Locale.Category category14 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category14, locale15);
        java.util.Locale locale17 = java.util.Locale.getDefault(category14);
        boolean boolean18 = locale17.hasExtensions();
        java.lang.String[] strArray24 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.stream.Stream<java.lang.String> strStream27 = strList25.stream();
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        int int29 = strList25.lastIndexOf((java.lang.Object) locale28);
        java.lang.String str30 = locale17.getDisplayVariant(locale28);
        java.lang.String str31 = locale6.getDisplayCountry(locale17);
        java.lang.String str32 = locale6.getDisplayName();
        java.text.ParsePosition parsePosition34 = new java.text.ParsePosition(16);
        int int35 = parsePosition34.getErrorIndex();
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone37);
        java.lang.String str39 = fastDateFormat38.getPattern();
        boolean boolean40 = parsePosition34.equals((java.lang.Object) fastDateFormat38);
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        boolean boolean42 = parsePosition34.equals((java.lang.Object) locale41);
        java.lang.String str43 = locale41.getDisplayScript();
        java.util.Locale.Builder builder44 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder44.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder47 = builder44.clear();
        java.util.Locale locale48 = builder47.build();
        java.lang.String str49 = locale41.getDisplayVariant(locale48);
        java.lang.String str50 = locale6.getDisplayVariant(locale41);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet55 = locale54.getExtensionKeys();
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone51, locale54);
        java.lang.String str57 = locale54.getCountry();
        java.lang.String str58 = locale6.getDisplayName(locale54);
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(locale54);
        java.lang.String str60 = locale54.getISO3Country();
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(timeZone1, locale54);
        java.lang.String str62 = locale54.getVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar56 and calendar61", (calendar56.compareTo(calendar61) == 0) == calendar56.equals(calendar61));
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test355");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        int int4 = timeZone1.getOffset(1644572071852L);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone1);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone9);
        java.util.Locale locale12 = fastDateFormat11.getLocale();
        java.lang.String str13 = fastDateFormat11.toString();
        java.util.Locale locale14 = fastDateFormat11.getLocale();
        java.lang.String str15 = locale14.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", locale14);
        java.lang.String str17 = locale14.toLanguageTag();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone1, locale14);
        java.lang.String str19 = timeZone1.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar18", (calendar5.compareTo(calendar18) == 0) == calendar5.equals(calendar18));
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test356");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        int int9 = calendar7.getActualMinimum(2);
        java.util.TimeZone timeZone10 = calendar7.getTimeZone();
        java.util.TimeZone timeZone11 = calendar7.getTimeZone();
        java.lang.String str12 = calendar7.getCalendarType();
        java.lang.String str13 = calendar7.getCalendarType();
        java.util.TimeZone timeZone14 = calendar7.getTimeZone();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone14);
        timeZone14.setRawOffset((-99));
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-2-11 9:41:42", timeZone14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar15", (calendar7.compareTo(calendar15) == 0) == calendar7.equals(calendar15));
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test357");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(16);
        int int2 = parsePosition1.getErrorIndex();
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        boolean boolean7 = parsePosition1.equals((java.lang.Object) fastDateFormat5);
        int int8 = parsePosition1.getIndex();
        int int9 = parsePosition1.getIndex();
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        boolean boolean13 = locale11.hasExtensions();
        java.lang.String str14 = locale11.getDisplayCountry();
        java.util.Calendar.Builder builder15 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder19 = builder10.setWeekDate((int) (short) 1, 9, 1);
        int[] intArray22 = new int[] { 14, ' ' };
        java.util.Calendar.Builder builder23 = builder19.setFields(intArray22);
        boolean boolean24 = parsePosition1.equals((java.lang.Object) builder19);
        java.util.Locale locale28 = new java.util.Locale("", "java.text.ParsePosition[index=0,errorIndex=0]", "\uc911\uad6d\uc5b4");
        java.lang.String str29 = locale28.getScript();
        java.util.Set<java.lang.String> strSet30 = locale28.getUnicodeLocaleAttributes();
        java.util.Calendar.Builder builder31 = builder19.setLocale(locale28);
        java.util.Calendar.Builder builder35 = builder31.setDate(1200000, 56, (int) (byte) 1);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        int int38 = timeZone36.getOffset(1644572072169L);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone42);
        java.lang.String str44 = fastDateFormat43.toString();
        java.lang.String str45 = fastDateFormat43.toString();
        java.util.TimeZone timeZone46 = fastDateFormat43.getTimeZone();
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        java.lang.String str48 = locale47.getLanguage();
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.lang.String str50 = locale47.getDisplayVariant(locale49);
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone46, locale47);
        boolean boolean52 = calendar51.isWeekDateSupported();
        calendar51.set(7, 4, 0);
        java.util.Date date57 = calendar51.getTime();
        java.lang.String str58 = fastDateFormat40.format(calendar51);
        java.util.TimeZone timeZone59 = fastDateFormat40.getTimeZone();
        java.lang.Object obj60 = null;
        boolean boolean61 = fastDateFormat40.equals(obj60);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance();
        int int63 = calendar62.getWeeksInWeekYear();
        java.time.Instant instant64 = calendar62.toInstant();
        int int66 = calendar62.getMinimum(4);
        java.lang.String str67 = fastDateFormat40.format(calendar62);
        int int69 = calendar62.getLeastMaximum(3);
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        boolean boolean72 = timeZone70.hasSameRules(timeZone71);
        java.util.Locale locale73 = java.util.Locale.ROOT;
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(timeZone71, locale73);
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone77 = java.util.TimeZone.getDefault();
        boolean boolean78 = timeZone76.hasSameRules(timeZone77);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat79 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone77);
        timeZone77.setRawOffset(3);
        java.util.TimeZone timeZone83 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat84 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone83);
        java.lang.String str85 = fastDateFormat84.getPattern();
        java.util.TimeZone timeZone86 = fastDateFormat84.getTimeZone();
        boolean boolean87 = timeZone77.hasSameRules(timeZone86);
        boolean boolean88 = timeZone71.hasSameRules(timeZone86);
        timeZone71.setRawOffset(50);
        calendar62.setTimeZone(timeZone71);
        boolean boolean92 = timeZone36.hasSameRules(timeZone71);
        java.util.Calendar.Builder builder93 = builder35.setTimeZone(timeZone36);
        int int95 = timeZone36.getOffset((-62165540991264L));
        java.util.TimeZone.setDefault(timeZone36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar62 and calendar74", (calendar62.compareTo(calendar74) == 0) == calendar62.equals(calendar74));
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test358");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        java.util.TimeZone timeZone3 = fastDateFormat2.getTimeZone();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone4, locale7);
        java.lang.String str10 = locale7.getCountry();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone3, locale7);
        timeZone3.setRawOffset(24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar9 and calendar11", (calendar9.compareTo(calendar11) == 0) == calendar9.equals(calendar11));
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test359");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("FR");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        int int3 = calendar2.getWeeksInWeekYear();
        java.time.Instant instant4 = calendar2.toInstant();
        int int6 = calendar2.getMinimum(4);
        calendar2.setFirstDayOfWeek(13);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        boolean boolean15 = strList11.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor17 = strList11.listIterator(0);
        java.lang.String[] strArray19 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.stream.Stream<java.lang.String> strStream22 = strList20.stream();
        java.util.ListIterator<java.lang.String> strItor23 = strList20.listIterator();
        boolean boolean24 = strList11.removeAll((java.util.Collection<java.lang.String>) strList20);
        java.util.Iterator<java.lang.String> strItor25 = strList11.iterator();
        java.util.ListIterator<java.lang.String> strItor26 = strList11.listIterator();
        boolean boolean27 = calendar2.before((java.lang.Object) strList11);
        strList11.clear();
        java.util.Locale.FilteringMode filteringMode29 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strList11, filteringMode29);
        java.lang.Object[] objArray31 = strList11.toArray();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone33, locale35);
        java.lang.String str37 = locale35.getDisplayLanguage();
        java.lang.String str39 = locale35.getUnicodeLocaleType("zh");
        java.util.Locale locale40 = locale35.stripExtensions();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone42, locale44);
        java.lang.String str47 = locale44.getExtension('a');
        java.lang.String str48 = locale40.getDisplayName(locale44);
        java.util.Set<java.lang.String> strSet49 = locale44.getUnicodeLocaleKeys();
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(locale44);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(locale51);
        calendar52.set(120, 7, 0);
        java.util.Date date58 = new java.util.Date(1644572094734L);
        calendar52.setTime(date58);
        calendar50.setTime(date58);
        boolean boolean61 = strList11.remove((java.lang.Object) calendar50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar2 and calendar36", (calendar2.compareTo(calendar36) == 0) == calendar2.equals(calendar36));
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test360");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("chinese");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.parse("JP", strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.parse("eng", strMap6);
        java.util.Locale.LanguageRange languageRange9 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] { languageRange9 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale16.getDisplayName();
        java.lang.String str18 = locale16.getDisplayCountry();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale20.getDisplayLanguage(locale21);
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        java.util.Locale locale27 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale27);
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone33);
        java.util.Locale locale36 = fastDateFormat35.getLocale();
        java.util.Locale locale37 = java.util.Locale.FRANCE;
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.lang.String str39 = locale38.getLanguage();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = locale38.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        java.lang.String str43 = locale38.getDisplayVariant(locale42);
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.util.Locale locale46 = java.util.Locale.ENGLISH;
        java.util.Locale locale47 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone49.hasSameRules(timeZone50);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone50);
        java.util.Locale locale53 = fastDateFormat52.getLocale();
        java.util.Locale locale54 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone56.hasSameRules(timeZone57);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone57);
        java.util.Locale locale60 = fastDateFormat59.getLocale();
        java.util.Locale locale61 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale62 = java.util.Locale.UK;
        java.util.Locale[] localeArray63 = new java.util.Locale[] { locale16, locale20, locale24, locale27, locale29, locale30, locale36, locale37, locale42, locale44, locale45, locale46, locale47, locale53, locale54, locale60, locale61, locale62 };
        java.util.ArrayList<java.util.Locale> localeList64 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList64, localeArray63);
        java.util.Locale locale66 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList64);
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter(languageRangeList7, (java.util.Collection<java.util.Locale>) localeList64);
        java.util.List<java.util.Locale> localeList68 = java.util.Locale.filter(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList67);
        java.lang.String[] strArray70 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        java.util.stream.Stream<java.lang.String> strStream73 = strList71.stream();
        strList71.clear();
        boolean boolean75 = strList71.isEmpty();
        boolean boolean76 = strList71.isEmpty();
        java.util.ListIterator<java.lang.String> strItor77 = strList71.listIterator();
        java.util.Locale locale78 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone80 = java.util.TimeZone.getDefault();
        boolean boolean81 = timeZone79.hasSameRules(timeZone80);
        java.util.Locale locale82 = java.util.Locale.ROOT;
        java.util.Calendar calendar83 = java.util.Calendar.getInstance(timeZone80, locale82);
        java.lang.String str84 = locale82.getDisplayLanguage();
        java.lang.String str86 = locale82.getUnicodeLocaleType("zh");
        java.lang.String str87 = locale78.getDisplayScript(locale82);
        int int88 = strList71.indexOf((java.lang.Object) locale78);
        int int89 = strList71.size();
        java.util.Locale.FilteringMode filteringMode90 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        boolean boolean91 = strList71.remove((java.lang.Object) filteringMode90);
        java.util.List<java.util.Locale> localeList92 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList67, filteringMode90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar83", (calendar19.compareTo(calendar83) == 0) == calendar19.equals(calendar83));
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test361");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale3);
        calendar5.setMinimalDaysInFirstWeek((int) (short) 0);
        java.util.TimeZone timeZone10 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone10);
        java.lang.String str12 = fastDateFormat11.toString();
        java.lang.String str13 = fastDateFormat11.toString();
        java.util.TimeZone timeZone14 = fastDateFormat11.getTimeZone();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone14, locale15);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        java.lang.String str26 = locale24.getDisplayLanguage();
        java.lang.String str28 = locale24.getUnicodeLocaleType("zh");
        java.lang.String str29 = locale20.getDisplayScript(locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone14, locale24);
        int int31 = timeZone14.getRawOffset();
        calendar5.setTimeZone(timeZone14);
        int int34 = timeZone14.getOffset(1644572211173L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar19", (calendar5.compareTo(calendar19) == 0) == calendar5.equals(calendar19));
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test362");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        strList2.clear();
        java.lang.String[] strArray7 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.stream.Stream<java.lang.String> strStream10 = strList8.stream();
        boolean boolean11 = strList2.containsAll((java.util.Collection<java.lang.String>) strList8);
        java.lang.Object obj12 = null;
        int int13 = strList8.lastIndexOf(obj12);
        java.lang.String[] strArray15 = java.util.TimeZone.getAvailableIDs(7);
        java.lang.Comparable<java.lang.String>[] strComparableArray16 = strList8.toArray((java.lang.Comparable<java.lang.String>[]) strArray15);
        java.lang.Object obj17 = null;
        boolean boolean18 = strList8.remove(obj17);
        strList8.clear();
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale21);
        boolean boolean23 = fastDateFormat22.getTimeZoneOverridesCalendar();
        java.lang.Object obj24 = fastDateFormat22.clone();
        java.util.Date date25 = new java.util.Date();
        int int26 = date25.getTimezoneOffset();
        long long27 = date25.getTime();
        int int28 = date25.getMonth();
        date25.setSeconds(7);
        date25.setSeconds(1);
        java.util.Date date33 = new java.util.Date();
        int int34 = date33.getTimezoneOffset();
        long long35 = date33.getTime();
        int int36 = date33.getMonth();
        date33.setSeconds(7);
        date33.setSeconds(1);
        boolean boolean41 = date25.before(date33);
        java.text.AttributedCharacterIterator attributedCharacterIterator42 = fastDateFormat22.formatToCharacterIterator((java.lang.Object) date25);
        java.lang.String str43 = fastDateFormat22.toString();
        int int44 = strList8.indexOf((java.lang.Object) str43);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone46, locale48);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone52);
        timeZone52.setRawOffset(3);
        java.util.TimeZone timeZone58 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone58);
        java.lang.String str60 = fastDateFormat59.getPattern();
        java.util.TimeZone timeZone61 = fastDateFormat59.getTimeZone();
        boolean boolean62 = timeZone52.hasSameRules(timeZone61);
        boolean boolean63 = timeZone46.hasSameRules(timeZone61);
        timeZone46.setRawOffset(50);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone46);
        boolean boolean67 = strList8.remove((java.lang.Object) timeZone46);
        boolean boolean68 = timeZone46.observesDaylightTime();
        java.util.TimeZone timeZone70 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat71 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone70);
        java.util.Date date72 = new java.util.Date();
        int int73 = date72.getTimezoneOffset();
        int int74 = date72.getSeconds();
        date72.setDate(7);
        java.time.Instant instant77 = date72.toInstant();
        java.util.Date date78 = java.util.Date.from(instant77);
        java.lang.String str79 = date78.toLocaleString();
        java.lang.StringBuffer stringBuffer80 = null;
        java.lang.StringBuffer stringBuffer81 = fastDateFormat71.format(date78, stringBuffer80);
        int int82 = fastDateFormat71.getMaxLengthEstimate();
        int int83 = fastDateFormat71.getMaxLengthEstimate();
        java.text.ParsePosition parsePosition86 = new java.text.ParsePosition(16);
        int int87 = parsePosition86.getErrorIndex();
        java.lang.String str88 = parsePosition86.toString();
        java.lang.String str89 = parsePosition86.toString();
        java.lang.Object obj90 = fastDateFormat71.parseObject("English", parsePosition86);
        java.util.TimeZone timeZone91 = fastDateFormat71.getTimeZone();
        boolean boolean92 = timeZone46.hasSameRules(timeZone91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar49 and calendar66", (calendar49.compareTo(calendar66) == 0) == calendar49.equals(calendar66));
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test363");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Date date7 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder8 = builder5.setInstant(date7);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate(17, (int) (byte) -1, 49);
        java.util.Calendar.Builder builder15 = builder8.set(4, 59);
        java.util.Calendar.Builder builder19 = builder15.setWeekDate(58, 50, 7200000);
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone21);
        java.lang.StringBuffer stringBuffer24 = null;
        java.lang.StringBuffer stringBuffer25 = fastDateFormat22.format((long) 32772, stringBuffer24);
        java.util.TimeZone timeZone26 = fastDateFormat22.getTimeZone();
        int int27 = timeZone26.getRawOffset();
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone29);
        java.lang.String str31 = fastDateFormat30.toString();
        java.lang.String str32 = fastDateFormat30.toString();
        java.util.TimeZone timeZone33 = fastDateFormat30.getTimeZone();
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.lang.String str35 = locale34.getLanguage();
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale34.getDisplayVariant(locale36);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone33, locale34);
        boolean boolean39 = timeZone26.hasSameRules(timeZone33);
        java.util.Calendar.Builder builder40 = builder15.setTimeZone(timeZone33);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale44.getDisplayName();
        java.lang.String str46 = locale44.getDisplayCountry();
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone42, locale44);
        int int49 = calendar47.getActualMinimum(2);
        int int50 = calendar47.getWeeksInWeekYear();
        java.util.Calendar.Builder builder51 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone52.hasSameRules(timeZone53);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.lang.String str56 = locale55.getDisplayName();
        java.lang.String str57 = locale55.getDisplayCountry();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone53, locale55);
        int int60 = calendar58.getActualMinimum(2);
        java.util.TimeZone timeZone61 = calendar58.getTimeZone();
        java.util.TimeZone timeZone62 = calendar58.getTimeZone();
        java.util.Calendar.Builder builder63 = builder51.setTimeZone(timeZone62);
        calendar47.setTimeZone(timeZone62);
        java.util.Calendar.Builder builder65 = builder40.setTimeZone(timeZone62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar38 and calendar47", (calendar38.compareTo(calendar47) == 0) == calendar38.equals(calendar47));
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test364");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        int int9 = calendar7.getActualMinimum(2);
        java.util.TimeZone timeZone10 = calendar7.getTimeZone();
        java.util.TimeZone timeZone11 = calendar7.getTimeZone();
        java.lang.String str12 = calendar7.getCalendarType();
        java.lang.String str13 = calendar7.getCalendarType();
        java.util.TimeZone timeZone14 = calendar7.getTimeZone();
        timeZone14.setID("deu");
        boolean boolean17 = timeZone14.observesDaylightTime();
        int int19 = timeZone14.getOffset(1644572163398L);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder20.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder23 = builder20.clear();
        java.util.Locale locale24 = builder23.build();
        java.util.Locale locale25 = builder23.build();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone14, locale25);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone14);
        int int28 = timeZone14.getRawOffset();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar27", (calendar7.compareTo(calendar27) == 0) == calendar7.equals(calendar27));
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test365");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        boolean boolean6 = timeZone2.hasSameRules(timeZone4);
        boolean boolean7 = timeZone4.observesDaylightTime();
        int int9 = timeZone4.getOffset(1644572072169L);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 0, timeZone4);
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone12);
        java.lang.StringBuffer stringBuffer15 = null;
        java.lang.StringBuffer stringBuffer16 = fastDateFormat13.format((long) 32772, stringBuffer15);
        java.util.TimeZone timeZone17 = fastDateFormat13.getTimeZone();
        int int18 = timeZone17.getRawOffset();
        boolean boolean19 = timeZone4.hasSameRules(timeZone17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.lang.String str21 = locale20.getLanguage();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone22, locale25);
        java.lang.String str28 = locale25.getCountry();
        java.lang.String str29 = locale20.getDisplayLanguage(locale25);
        java.lang.String str30 = locale20.getISO3Country();
        java.util.Set<java.lang.String> strSet31 = locale20.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet32 = locale20.getExtensionKeys();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08", timeZone4, locale20);
        java.util.Locale locale37 = new java.util.Locale("java.text.FieldPosition[field=1,attribute=null,beginIndex=0,endIndex=0]", "\u4e0a\u5348", "h:mm:ss a z");
        java.util.Locale locale38 = java.util.Locale.PRC;
        java.lang.String str39 = locale38.getDisplayLanguage();
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getDisplayName();
        java.lang.String str45 = locale43.getDisplayCountry();
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone41, locale43);
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        java.util.Locale locale48 = locale47.stripExtensions();
        java.lang.String str49 = locale47.getVariant();
        java.lang.String str50 = locale43.getDisplayScript(locale47);
        java.util.Set<java.lang.String> strSet51 = locale43.getUnicodeLocaleKeys();
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale.Category category53 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale54 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category53, locale54);
        java.lang.String str56 = locale54.getScript();
        java.lang.String str57 = locale52.getDisplayCountry(locale54);
        java.lang.String str58 = locale43.getDisplayCountry(locale54);
        java.lang.String str59 = locale38.getDisplayCountry(locale54);
        java.lang.String str60 = locale37.getDisplayScript(locale38);
        java.util.Locale.setDefault(locale38);
        java.util.Locale locale62 = locale38.stripExtensions();
        java.lang.String str63 = locale38.toLanguageTag();
        java.util.Set<java.lang.Character> charSet64 = locale38.getExtensionKeys();
        java.lang.String str65 = locale20.getDisplayName(locale38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar27 and calendar46", (calendar27.compareTo(calendar46) == 0) == calendar27.equals(calendar46));
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test366");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category6, locale9);
        java.lang.String str11 = locale9.toLanguageTag();
        java.util.Calendar.Builder builder12 = builder0.setLocale(locale9);
        java.util.Calendar.Builder builder16 = builder12.setWeekDate(97, 0, 37);
        java.util.Calendar.Builder builder18 = builder12.setLenient(true);
        java.lang.String[] strArray20 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.stream.Stream<java.lang.String> strStream23 = strList21.stream();
        boolean boolean25 = strList21.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor27 = strList21.listIterator(0);
        java.lang.String[] strArray29 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.util.stream.Stream<java.lang.String> strStream32 = strList30.stream();
        boolean boolean34 = strList30.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor36 = strList30.listIterator(0);
        java.lang.String[] strArray38 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.stream.Stream<java.lang.String> strStream41 = strList39.stream();
        java.util.ListIterator<java.lang.String> strItor42 = strList39.listIterator();
        boolean boolean43 = strList30.removeAll((java.util.Collection<java.lang.String>) strList39);
        boolean boolean44 = strList21.containsAll((java.util.Collection<java.lang.String>) strList30);
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone46);
        java.lang.String str48 = fastDateFormat47.toString();
        java.lang.String str49 = fastDateFormat47.toString();
        java.util.TimeZone timeZone50 = fastDateFormat47.getTimeZone();
        timeZone50.setRawOffset((int) (short) 100);
        int int53 = timeZone50.getRawOffset();
        java.util.TimeZone.setDefault(timeZone50);
        int int55 = strList21.indexOf((java.lang.Object) timeZone50);
        java.util.Calendar.Builder builder56 = builder12.setTimeZone(timeZone50);
        timeZone50.setRawOffset(32772);
        java.util.Locale locale60 = java.util.Locale.forLanguageTag("GMT+00:00");
        java.lang.String str61 = locale60.getVariant();
        java.lang.String str62 = locale60.getDisplayScript();
        java.lang.String str63 = locale60.getDisplayName();
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone50, locale60);
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(timeZone50);
        java.lang.String str66 = timeZone50.getID();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar64 and calendar65", (calendar64.compareTo(calendar65) == 0) == calendar64.equals(calendar65));
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test367");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int8 = calendar6.getActualMinimum(2);
        java.util.TimeZone timeZone9 = calendar6.getTimeZone();
        java.util.TimeZone timeZone10 = calendar6.getTimeZone();
        calendar6.setLenient(false);
        calendar6.set(15, 15);
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17);
        java.lang.String str19 = fastDateFormat18.toString();
        java.lang.String str20 = fastDateFormat18.toString();
        java.util.TimeZone timeZone21 = fastDateFormat18.getTimeZone();
        java.util.Locale locale22 = fastDateFormat18.getLocale();
        java.util.TimeZone timeZone23 = fastDateFormat18.getTimeZone();
        int int24 = timeZone23.getRawOffset();
        timeZone23.setRawOffset(43);
        java.util.TimeZone.setDefault(timeZone23);
        boolean boolean28 = timeZone23.observesDaylightTime();
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("");
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone23, locale30);
        calendar6.setTimeZone(timeZone23);
        boolean boolean33 = timeZone23.observesDaylightTime();
        java.util.Locale locale34 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet35 = locale34.getExtensionKeys();
        java.util.Locale locale37 = new java.util.Locale("de");
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale37);
        java.lang.String str39 = locale34.getDisplayVariant(locale37);
        java.lang.String str40 = locale37.getDisplayName();
        java.util.Locale locale41 = locale37.stripExtensions();
        java.lang.String[] strArray43 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.util.stream.Stream<java.lang.String> strStream46 = strList44.stream();
        boolean boolean48 = strList44.add("hi!");
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.lang.String str50 = locale49.getLanguage();
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.lang.String str52 = locale49.getDisplayVariant(locale51);
        java.util.Locale locale53 = java.util.Locale.GERMANY;
        java.lang.String str54 = locale49.getDisplayVariant(locale53);
        boolean boolean55 = strList44.contains((java.lang.Object) locale49);
        java.lang.String str56 = locale49.getVariant();
        boolean boolean57 = locale49.hasExtensions();
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleKeys();
        java.lang.String str60 = locale49.getDisplayLanguage(locale58);
        java.lang.String str61 = locale49.getCountry();
        java.lang.String str62 = locale37.getDisplayVariant(locale49);
        java.lang.String str63 = locale49.getDisplayLanguage();
        java.lang.String str64 = timeZone23.getDisplayName(locale49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar31 and calendar38", (calendar31.compareTo(calendar38) == 0) == calendar31.equals(calendar38));
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test368");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = fastDateFormat2.getLocale();
        boolean boolean7 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone8 = fastDateFormat2.getTimeZone();
        boolean boolean9 = timeZone8.observesDaylightTime();
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder13 = builder10.clear();
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale.Builder builder17 = builder14.setExtension('x', "GMT4");
        java.util.Locale.Builder builder18 = builder14.clear();
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder20 = builder14.setLocale(locale19);
        java.util.Locale.Builder builder22 = builder20.addUnicodeLocaleAttribute("und");
        java.util.Locale locale23 = builder22.build();
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.util.Locale locale25 = locale24.stripExtensions();
        java.lang.String str26 = locale25.toLanguageTag();
        java.util.Locale.setDefault(locale25);
        java.lang.String str28 = locale23.getDisplayLanguage(locale25);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance();
        int int30 = calendar29.getWeeksInWeekYear();
        java.time.Instant instant31 = calendar29.toInstant();
        int int33 = calendar29.getActualMinimum((int) (byte) 10);
        calendar29.setMinimalDaysInFirstWeek((int) (byte) -1);
        java.util.Locale locale39 = new java.util.Locale("java.text.ParsePosition[index=16,errorIndex=-1]", "tedesco (Germania)", "Jan 10, 4630 12:00:00 AM");
        boolean boolean40 = calendar29.before((java.lang.Object) locale39);
        java.lang.String str41 = locale23.getDisplayCountry(locale39);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone8, locale23);
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale45 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet46 = locale45.getExtensionKeys();
        java.util.Locale locale48 = new java.util.Locale("de");
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale48);
        java.lang.String str50 = locale45.getDisplayVariant(locale48);
        java.lang.String str51 = locale44.getDisplayCountry(locale45);
        java.util.Set<java.lang.String> strSet52 = locale45.getUnicodeLocaleKeys();
        java.lang.String str53 = locale23.getDisplayLanguage(locale45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar29 and calendar42", (calendar29.compareTo(calendar42) == 0) == calendar29.equals(calendar42));
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test369");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Calendar calendar3 = java.util.Calendar.getInstance(timeZone0);
        calendar3.add(11, 36);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone7, locale10);
        calendar3.setTimeZone(timeZone7);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15);
        java.lang.String str17 = fastDateFormat16.toString();
        java.lang.String str18 = fastDateFormat16.toString();
        java.text.ParsePosition parsePosition21 = new java.text.ParsePosition(100);
        java.lang.String str22 = parsePosition21.toString();
        java.lang.Object obj23 = fastDateFormat16.parseObject("de", parsePosition21);
        int int24 = parsePosition21.getErrorIndex();
        java.util.Locale locale26 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale26);
        java.lang.String str28 = locale26.getLanguage();
        java.lang.String str29 = locale26.getVariant();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(locale26);
        calendar30.setLenient(false);
        boolean boolean33 = parsePosition21.equals((java.lang.Object) calendar30);
        boolean boolean34 = calendar3.before((java.lang.Object) calendar30);
        long long35 = calendar3.getTimeInMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar12 and calendar30", (calendar12.compareTo(calendar30) == 0) == calendar12.equals(calendar30));
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test370");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale6.getDisplayName();
        java.lang.String str8 = locale6.getDisplayCountry();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone4, locale6);
        java.text.ParsePosition parsePosition11 = new java.text.ParsePosition(16);
        int int12 = parsePosition11.getErrorIndex();
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone14);
        java.lang.String str16 = fastDateFormat15.getPattern();
        boolean boolean17 = parsePosition11.equals((java.lang.Object) fastDateFormat15);
        java.util.Locale locale18 = java.util.Locale.FRANCE;
        boolean boolean19 = parsePosition11.equals((java.lang.Object) locale18);
        java.lang.String str20 = locale6.getDisplayCountry(locale18);
        java.lang.String str21 = locale6.toLanguageTag();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-2-7 9:39:38", locale6);
        java.lang.String str23 = locale0.getDisplayCountry(locale6);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar9", (calendar1.compareTo(calendar9) == 0) == calendar1.equals(calendar9));
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test371");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        int int5 = date3.getSeconds();
        java.lang.StringBuffer stringBuffer6 = null;
        java.text.Format.Field field7 = null;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition(field7, 1);
        fieldPosition9.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer12 = fastDateFormat2.format((java.lang.Object) date3, stringBuffer6, fieldPosition9);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        long long18 = calendar17.getTimeInMillis();
        calendar17.set(2022, (int) 'a', 8);
        java.lang.String str23 = fastDateFormat2.format(calendar17);
        java.util.TimeZone timeZone24 = fastDateFormat2.getTimeZone();
        int int25 = fastDateFormat2.getMaxLengthEstimate();
        java.util.Calendar calendar26 = java.util.Calendar.getInstance();
        int int27 = calendar26.getWeeksInWeekYear();
        java.time.Instant instant28 = calendar26.toInstant();
        int int30 = calendar26.getActualMinimum((int) (byte) 10);
        java.lang.String str31 = calendar26.getCalendarType();
        java.util.Date date32 = new java.util.Date();
        int int33 = date32.getTimezoneOffset();
        int int34 = date32.getMinutes();
        calendar26.setTime(date32);
        calendar26.setLenient(true);
        java.util.TimeZone timeZone38 = calendar26.getTimeZone();
        int int39 = timeZone38.getRawOffset();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone38);
        java.lang.StringBuffer stringBuffer41 = null;
        java.text.FieldPosition fieldPosition43 = new java.text.FieldPosition(5);
        fieldPosition43.setEndIndex((int) (byte) 100);
        fieldPosition43.setBeginIndex(45);
        int int48 = fieldPosition43.getEndIndex();
        java.lang.StringBuffer stringBuffer49 = fastDateFormat2.format((java.lang.Object) calendar40, stringBuffer41, fieldPosition43);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        java.util.Locale locale54 = java.util.Locale.ROOT;
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone52, locale54);
        java.text.ParsePosition parsePosition57 = new java.text.ParsePosition(16);
        int int58 = parsePosition57.getErrorIndex();
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet60 = locale59.getExtensionKeys();
        boolean boolean61 = parsePosition57.equals((java.lang.Object) locale59);
        java.lang.String str62 = locale59.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone52, locale59);
        timeZone52.setID("coreano");
        boolean boolean66 = timeZone52.observesDaylightTime();
        boolean boolean67 = timeZone52.observesDaylightTime();
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone52);
        calendar68.setTimeInMillis(1644572172322L);
        java.lang.String str71 = fastDateFormat2.format(calendar68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar26 and calendar55", (calendar26.compareTo(calendar55) == 0) == calendar26.equals(calendar55));
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test372");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        long long5 = calendar4.getTimeInMillis();
        int int6 = calendar4.getWeekYear();
        java.util.Locale.LanguageRange languageRange10 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] { languageRange10 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale17.getDisplayName();
        java.lang.String str19 = locale17.getDisplayCountry();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone15, locale17);
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        java.lang.String str24 = locale21.getDisplayLanguage(locale22);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale28);
        java.util.Locale locale30 = java.util.Locale.FRANCE;
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone34);
        java.util.Locale locale37 = fastDateFormat36.getLocale();
        java.util.Locale locale38 = java.util.Locale.FRANCE;
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = locale39.getLanguage();
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale39.getDisplayVariant(locale41);
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.lang.String str44 = locale39.getDisplayVariant(locale43);
        java.util.Locale locale45 = java.util.Locale.ENGLISH;
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.util.Locale locale48 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone51);
        java.util.Locale locale54 = fastDateFormat53.getLocale();
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone57.hasSameRules(timeZone58);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone58);
        java.util.Locale locale61 = fastDateFormat60.getLocale();
        java.util.Locale locale62 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale63 = java.util.Locale.UK;
        java.util.Locale[] localeArray64 = new java.util.Locale[] { locale17, locale21, locale25, locale28, locale30, locale31, locale37, locale38, locale43, locale45, locale46, locale47, locale48, locale54, locale55, locale61, locale62, locale63 };
        java.util.ArrayList<java.util.Locale> localeList65 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList65, localeArray64);
        java.util.Locale locale67 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList65);
        java.util.Map<java.lang.String, java.lang.Integer> strMap68 = calendar4.getDisplayNames(5, 1, locale67);
        java.util.Set<java.lang.String> strSet69 = locale67.getUnicodeLocaleKeys();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar20", (calendar4.compareTo(calendar20) == 0) == calendar4.equals(calendar20));
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test373");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale3);
        int int7 = timeZone0.getOffset((long) 2);
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale locale11 = java.util.Locale.getDefault(category8);
        java.util.Locale locale12 = java.util.Locale.getDefault(category8);
        java.util.Locale locale13 = null;
        java.lang.String str14 = locale12.getDisplayCountry(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone0, locale12);
        int int16 = timeZone0.getRawOffset();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar15", (calendar5.compareTo(calendar15) == 0) == calendar5.equals(calendar15));
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test374");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayVariant(locale9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale7);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.lang.String str18 = locale16.getDisplayLanguage();
        java.lang.String str20 = locale16.getUnicodeLocaleType("zh");
        java.lang.String str21 = locale12.getDisplayScript(locale16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone6, locale16);
        int int23 = timeZone6.getRawOffset();
        int int25 = timeZone6.getOffset(1644572222366L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar17", (calendar11.compareTo(calendar17) == 0) == calendar11.equals(calendar17));
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test375");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale11);
        java.util.Locale.setDefault(category7, locale11);
        java.util.Locale locale16 = java.util.Locale.getDefault(category7);
        java.util.Locale.Builder builder17 = builder6.setLocale(locale16);
        java.util.Locale.Builder builder18 = builder6.clearExtensions();
        java.util.Locale.Builder builder19 = builder18.clear();
        java.util.Locale.Builder builder22 = builder18.setExtension('x', "zho");
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition(16);
        int int25 = parsePosition24.getErrorIndex();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet27 = locale26.getExtensionKeys();
        boolean boolean28 = parsePosition24.equals((java.lang.Object) locale26);
        java.lang.String str29 = locale26.getDisplayName();
        java.lang.String str30 = locale26.getDisplayLanguage();
        java.util.Locale.Builder builder31 = builder22.setLocale(locale26);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        boolean boolean35 = timeZone33.hasSameRules(timeZone34);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone33);
        timeZone33.setRawOffset(40);
        timeZone33.setID("francese (Francia)");
        java.lang.String str41 = timeZone33.getID();
        java.util.Locale.Builder builder42 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder44 = builder42.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder46 = builder44.setLanguageTag("it");
        java.util.Locale.Builder builder49 = builder44.setExtension('x', "de");
        java.util.Locale locale50 = builder44.build();
        java.util.Locale locale51 = java.util.Locale.UK;
        java.lang.String str52 = locale51.toLanguageTag();
        java.util.Locale.Builder builder53 = builder44.setLocale(locale51);
        java.util.Locale locale55 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale55);
        java.lang.String str57 = locale55.getLanguage();
        java.lang.String str58 = locale55.getVariant();
        java.util.Locale locale59 = java.util.Locale.CHINESE;
        java.lang.String str60 = locale59.getLanguage();
        boolean boolean61 = locale59.hasExtensions();
        java.lang.String str62 = locale55.getDisplayCountry(locale59);
        java.util.Locale.Category category63 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category63, locale64);
        java.util.Locale locale66 = java.util.Locale.getDefault(category63);
        boolean boolean67 = locale66.hasExtensions();
        java.lang.String[] strArray73 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.util.stream.Stream<java.lang.String> strStream76 = strList74.stream();
        java.util.Locale locale77 = java.util.Locale.JAPANESE;
        int int78 = strList74.lastIndexOf((java.lang.Object) locale77);
        java.lang.String str79 = locale66.getDisplayVariant(locale77);
        java.lang.String str80 = locale55.getDisplayCountry(locale66);
        java.lang.String str81 = locale51.getDisplayName(locale55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat82 = org.apache.commons.lang3.time.FastDateFormat.getInstance("10.02.2022 19:37:42", timeZone33, locale55);
        java.lang.String str83 = locale26.getDisplayName(locale55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar36", (calendar14.compareTo(calendar36) == 0) == calendar14.equals(calendar36));
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test376");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(16);
        int int2 = parsePosition1.getErrorIndex();
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone4);
        java.lang.String str6 = fastDateFormat5.getPattern();
        boolean boolean7 = parsePosition1.equals((java.lang.Object) fastDateFormat5);
        int int8 = parsePosition1.getIndex();
        int int9 = parsePosition1.getIndex();
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        boolean boolean13 = locale11.hasExtensions();
        java.lang.String str14 = locale11.getDisplayCountry();
        java.util.Calendar.Builder builder15 = builder10.setLocale(locale11);
        java.util.Calendar.Builder builder19 = builder10.setWeekDate((int) (short) 1, 9, 1);
        int[] intArray22 = new int[] { 14, ' ' };
        java.util.Calendar.Builder builder23 = builder19.setFields(intArray22);
        boolean boolean24 = parsePosition1.equals((java.lang.Object) builder19);
        java.util.Calendar.Builder builder28 = builder19.setTimeOfDay(32770, 50, 38);
        java.util.Calendar.Builder builder33 = builder19.setTimeOfDay(8, 6, 54, 29);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str38 = locale37.getDisplayName();
        java.lang.String str39 = locale37.getDisplayCountry();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone35, locale37);
        int int42 = calendar40.getActualMinimum(2);
        java.util.TimeZone timeZone43 = calendar40.getTimeZone();
        java.util.TimeZone timeZone44 = calendar40.getTimeZone();
        java.util.Calendar.Builder builder45 = builder33.setTimeZone(timeZone44);
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone44);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar40 and calendar46", (calendar40.compareTo(calendar46) == 0) == calendar40.equals(calendar46));
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test377");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone.setDefault(timeZone1);
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.lang.String str5 = locale4.getLanguage();
        boolean boolean6 = locale4.hasExtensions();
        java.lang.String str7 = locale4.getDisplayScript();
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale9);
        java.lang.String str11 = locale9.getLanguage();
        java.lang.String str12 = locale9.getVariant();
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        boolean boolean15 = locale13.hasExtensions();
        java.lang.String str16 = locale9.getDisplayCountry(locale13);
        java.util.Locale.Category category17 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category17, locale18);
        java.util.Locale locale20 = java.util.Locale.getDefault(category17);
        boolean boolean21 = locale20.hasExtensions();
        java.lang.String[] strArray27 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.stream.Stream<java.lang.String> strStream30 = strList28.stream();
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        int int32 = strList28.lastIndexOf((java.lang.Object) locale31);
        java.lang.String str33 = locale20.getDisplayVariant(locale31);
        java.lang.String str34 = locale9.getDisplayCountry(locale20);
        java.lang.String str35 = locale9.getDisplayName();
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition(16);
        int int38 = parsePosition37.getErrorIndex();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        boolean boolean43 = parsePosition37.equals((java.lang.Object) fastDateFormat41);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        boolean boolean45 = parsePosition37.equals((java.lang.Object) locale44);
        java.lang.String str46 = locale44.getDisplayScript();
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder49 = builder47.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder50 = builder47.clear();
        java.util.Locale locale51 = builder50.build();
        java.lang.String str52 = locale44.getDisplayVariant(locale51);
        java.lang.String str53 = locale9.getDisplayVariant(locale44);
        java.lang.String str54 = locale44.getScript();
        java.lang.String str55 = locale4.getDisplayVariant(locale44);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone1, locale4);
        boolean boolean57 = calendar56.isWeekDateSupported();
        int int59 = calendar56.getActualMaximum((int) (short) 10);
        java.util.TimeZone timeZone60 = calendar56.getTimeZone();
        java.util.Locale locale61 = java.util.Locale.CHINESE;
        java.lang.String str62 = locale61.getLanguage();
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.lang.String str64 = locale61.getDisplayVariant(locale63);
        java.util.Locale locale65 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleKeys();
        java.lang.String str67 = locale63.getDisplayCountry(locale65);
        java.lang.String str68 = locale65.toLanguageTag();
        java.lang.String str69 = locale65.toLanguageTag();
        java.util.Calendar calendar70 = java.util.Calendar.getInstance(timeZone60, locale65);
        java.util.Locale.Builder builder71 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder73 = builder71.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder74 = builder71.clear();
        java.util.Locale locale75 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder76 = builder74.setLocale(locale75);
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet78 = locale77.getExtensionKeys();
        java.util.Locale locale79 = java.util.Locale.ITALIAN;
        java.util.Locale locale80 = java.util.Locale.CHINESE;
        java.lang.String str81 = locale80.getLanguage();
        java.lang.String str82 = locale79.getDisplayLanguage(locale80);
        java.lang.String str83 = locale77.getDisplayLanguage(locale79);
        java.util.Locale.Builder builder84 = builder74.setLocale(locale79);
        java.util.Locale locale85 = builder74.build();
        java.util.Locale locale86 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str87 = locale85.getDisplayVariant(locale86);
        java.lang.String str88 = locale85.getDisplayVariant();
        java.lang.String str89 = locale85.getDisplayScript();
        java.lang.String str90 = locale65.getDisplayName(locale85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar56 and calendar70", (calendar56.compareTo(calendar70) == 0) == calendar56.equals(calendar70));
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test378");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone4);
        java.lang.String str6 = fastDateFormat5.toString();
        java.lang.String str7 = fastDateFormat5.toString();
        java.util.TimeZone timeZone8 = fastDateFormat5.getTimeZone();
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale9.getDisplayVariant(locale11);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale9);
        boolean boolean14 = calendar13.isWeekDateSupported();
        calendar13.set(7, 4, 0);
        java.util.Date date19 = calendar13.getTime();
        java.lang.String str20 = fastDateFormat2.format(calendar13);
        java.util.TimeZone timeZone21 = fastDateFormat2.getTimeZone();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        boolean boolean24 = locale23.hasExtensions();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale23);
        java.util.Set<java.lang.String> strSet27 = locale23.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 0, timeZone21, locale23);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale32.getDisplayName();
        java.lang.String str34 = locale32.getDisplayCountry();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone30, locale32);
        int int37 = calendar35.getActualMinimum(2);
        java.util.TimeZone timeZone38 = calendar35.getTimeZone();
        java.util.Calendar.Builder builder39 = new java.util.Calendar.Builder();
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.lang.String str41 = locale40.getLanguage();
        boolean boolean42 = locale40.hasExtensions();
        java.lang.String str43 = locale40.getDisplayCountry();
        java.util.Calendar.Builder builder44 = builder39.setLocale(locale40);
        java.util.Calendar.Builder builder48 = builder39.setWeekDate(38, 41, 11);
        java.util.TimeZone timeZone50 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone50);
        java.lang.String str52 = fastDateFormat51.toString();
        java.lang.String str53 = fastDateFormat51.toString();
        java.util.TimeZone timeZone54 = fastDateFormat51.getTimeZone();
        java.util.Calendar.Builder builder55 = builder48.setTimeZone(timeZone54);
        boolean boolean56 = timeZone38.hasSameRules(timeZone54);
        boolean boolean57 = timeZone21.hasSameRules(timeZone54);
        timeZone21.setRawOffset(2);
        java.util.Locale.Category category60 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale61 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category60, locale61);
        java.util.Locale locale63 = java.util.Locale.getDefault(category60);
        java.util.TimeZone timeZone64 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone65 = java.util.TimeZone.getDefault();
        boolean boolean66 = timeZone64.hasSameRules(timeZone65);
        java.util.Locale locale67 = java.util.Locale.ROOT;
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(timeZone65, locale67);
        java.lang.String str69 = locale67.getDisplayLanguage();
        java.lang.String str70 = locale63.getDisplayCountry(locale67);
        java.lang.String str71 = timeZone21.getDisplayName(locale63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar35 and calendar68", (calendar35.compareTo(calendar68) == 0) == calendar35.equals(calendar68));
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test379");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("GMT+00:00");
        boolean boolean2 = locale1.hasExtensions();
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getDisplayName();
        java.lang.String str9 = locale7.getDisplayCountry();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone5, locale7);
        java.util.Locale.setDefault(category3, locale7);
        java.util.Locale locale12 = java.util.Locale.getDefault(category3);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("");
        java.util.TimeZone timeZone15 = fastDateFormat14.getTimeZone();
        java.util.Locale locale17 = new java.util.Locale("de");
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale17);
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone15, locale17);
        java.lang.String str20 = locale12.getDisplayLanguage(locale17);
        java.lang.String str21 = locale1.getDisplayVariant(locale12);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(locale1);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar10 and calendar22", (calendar10.compareTo(calendar22) == 0) == calendar10.equals(calendar22));
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test380");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2);
        timeZone2.setRawOffset(40);
        boolean boolean8 = timeZone2.observesDaylightTime();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone2);
        boolean boolean11 = calendar0.before((java.lang.Object) timeZone2);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone2);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar5", (calendar0.compareTo(calendar5) == 0) == calendar0.equals(calendar5));
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test381");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getWeeksInWeekYear();
        java.time.Instant instant2 = calendar0.toInstant();
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.setTimeInMillis(1644572085058L);
        boolean boolean6 = calendar0.isWeekDateSupported();
        java.util.Date date7 = calendar0.getTime();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition(16);
        int int10 = parsePosition9.getErrorIndex();
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        boolean boolean15 = parsePosition9.equals((java.lang.Object) fastDateFormat13);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        boolean boolean17 = parsePosition9.equals((java.lang.Object) locale16);
        java.lang.String str18 = locale16.getDisplayScript();
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder22 = builder19.clear();
        java.util.Locale locale23 = builder22.build();
        java.lang.String str24 = locale16.getDisplayVariant(locale23);
        boolean boolean25 = calendar0.after((java.lang.Object) locale23);
        int int26 = calendar0.getWeeksInWeekYear();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone31);
        java.lang.String str33 = fastDateFormat32.toString();
        java.lang.String str34 = fastDateFormat32.toString();
        java.util.TimeZone timeZone35 = fastDateFormat32.getTimeZone();
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone35, locale36);
        boolean boolean41 = calendar40.isWeekDateSupported();
        calendar40.set(7, 4, 0);
        java.util.Date date46 = calendar40.getTime();
        java.lang.String str47 = fastDateFormat29.format(calendar40);
        java.util.TimeZone timeZone48 = fastDateFormat29.getTimeZone();
        java.util.Locale locale50 = java.util.Locale.ROOT;
        boolean boolean51 = locale50.hasExtensions();
        java.util.Set<java.lang.String> strSet52 = locale50.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale50);
        java.util.Set<java.lang.String> strSet54 = locale50.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 0, timeZone48, locale50);
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        boolean boolean58 = timeZone56.hasSameRules(timeZone57);
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.lang.String str60 = locale59.getDisplayName();
        java.lang.String str61 = locale59.getDisplayCountry();
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone57, locale59);
        int int64 = calendar62.getActualMinimum(2);
        java.util.TimeZone timeZone65 = calendar62.getTimeZone();
        java.util.Calendar.Builder builder66 = new java.util.Calendar.Builder();
        java.util.Locale locale67 = java.util.Locale.CHINESE;
        java.lang.String str68 = locale67.getLanguage();
        boolean boolean69 = locale67.hasExtensions();
        java.lang.String str70 = locale67.getDisplayCountry();
        java.util.Calendar.Builder builder71 = builder66.setLocale(locale67);
        java.util.Calendar.Builder builder75 = builder66.setWeekDate(38, 41, 11);
        java.util.TimeZone timeZone77 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat78 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone77);
        java.lang.String str79 = fastDateFormat78.toString();
        java.lang.String str80 = fastDateFormat78.toString();
        java.util.TimeZone timeZone81 = fastDateFormat78.getTimeZone();
        java.util.Calendar.Builder builder82 = builder75.setTimeZone(timeZone81);
        boolean boolean83 = timeZone65.hasSameRules(timeZone81);
        boolean boolean84 = timeZone48.hasSameRules(timeZone81);
        java.util.Calendar calendar85 = java.util.Calendar.getInstance(timeZone81);
        calendar0.setTimeZone(timeZone81);
        java.util.Locale locale88 = new java.util.Locale("English (United States)");
        java.util.Calendar calendar89 = java.util.Calendar.getInstance(timeZone81, locale88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar62 and calendar85", (calendar62.compareTo(calendar85) == 0) == calendar62.equals(calendar85));
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test382");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayVariant(locale9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale7);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.lang.String str18 = locale16.getDisplayLanguage();
        java.lang.String str20 = locale16.getUnicodeLocaleType("zh");
        java.lang.String str21 = locale12.getDisplayScript(locale16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone6, locale16);
        java.util.TimeZone timeZone23 = fastDateFormat22.getTimeZone();
        java.lang.String[] strArray29 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.util.stream.Stream<java.lang.String> strStream32 = strList30.stream();
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        int int34 = strList30.lastIndexOf((java.lang.Object) locale33);
        java.util.stream.Stream<java.lang.String> strStream35 = strList30.stream();
        java.lang.String[] strArray37 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.stream.Stream<java.lang.String> strStream40 = strList38.stream();
        strList38.clear();
        java.util.Spliterator<java.lang.String> strSpliterator42 = strList38.spliterator();
        int int43 = strList30.lastIndexOf((java.lang.Object) strSpliterator42);
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone45);
        java.lang.String str47 = fastDateFormat46.getPattern();
        boolean boolean48 = strList30.contains((java.lang.Object) str47);
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone49.hasSameRules(timeZone50);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone50, locale52);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone55.hasSameRules(timeZone56);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone56);
        timeZone56.setRawOffset(3);
        java.util.TimeZone timeZone62 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone62);
        java.lang.String str64 = fastDateFormat63.getPattern();
        java.util.TimeZone timeZone65 = fastDateFormat63.getTimeZone();
        boolean boolean66 = timeZone56.hasSameRules(timeZone65);
        boolean boolean67 = timeZone50.hasSameRules(timeZone65);
        java.util.TimeZone.setDefault(timeZone65);
        boolean boolean69 = strList30.contains((java.lang.Object) timeZone65);
        int int71 = timeZone65.getOffset(1644485708862L);
        boolean boolean72 = fastDateFormat22.equals((java.lang.Object) 1644485708862L);
        java.text.ParsePosition parsePosition75 = new java.text.ParsePosition(16);
        int int76 = parsePosition75.getErrorIndex();
        java.util.TimeZone timeZone78 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat79 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone78);
        java.lang.String str80 = fastDateFormat79.getPattern();
        boolean boolean81 = parsePosition75.equals((java.lang.Object) fastDateFormat79);
        int int82 = parsePosition75.getErrorIndex();
        java.lang.Object obj83 = fastDateFormat22.parseObject("9:34:55 AM UTC", parsePosition75);
        java.util.TimeZone timeZone86 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat87 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone86);
        boolean boolean88 = fastDateFormat87.getTimeZoneOverridesCalendar();
        java.lang.String str89 = fastDateFormat87.getPattern();
        java.text.ParsePosition parsePosition92 = new java.text.ParsePosition(9);
        parsePosition92.setIndex((int) 'a');
        java.lang.Object obj95 = fastDateFormat87.parseObject("UTC9", parsePosition92);
        parsePosition92.setIndex(44);
        java.lang.Object obj98 = fastDateFormat22.parseObject("\uc624\uc804\uc2dc\ubd84\ucd08", parsePosition92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar17", (calendar11.compareTo(calendar17) == 0) == calendar11.equals(calendar17));
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test383");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        long long19 = calendar18.getTimeInMillis();
        java.lang.String str20 = fastDateFormat13.format(calendar18);
        long long21 = calendar18.getTimeInMillis();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229\u6587");
        timeZone23.setID("\u5e74\u6708\u65e5");
        java.lang.String str26 = timeZone23.getID();
        calendar18.setTimeZone(timeZone23);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar18", (calendar5.compareTo(calendar18) == 0) == calendar5.equals(calendar18));
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test384");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.lang.String str1 = attribute0.toString();
        java.lang.String str2 = attribute0.toString();
        java.lang.String[] strArray4 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.util.stream.Stream<java.lang.String> strStream7 = strList5.stream();
        boolean boolean9 = strList5.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor11 = strList5.listIterator(0);
        java.lang.String[] strArray13 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.stream.Stream<java.lang.String> strStream16 = strList14.stream();
        java.util.ListIterator<java.lang.String> strItor17 = strList14.listIterator();
        boolean boolean18 = strList5.removeAll((java.util.Collection<java.lang.String>) strList14);
        int int19 = strList5.size();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone21, locale23);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone27);
        timeZone27.setRawOffset(3);
        java.util.TimeZone timeZone33 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone33);
        java.lang.String str35 = fastDateFormat34.getPattern();
        java.util.TimeZone timeZone36 = fastDateFormat34.getTimeZone();
        boolean boolean37 = timeZone27.hasSameRules(timeZone36);
        boolean boolean38 = timeZone21.hasSameRules(timeZone36);
        boolean boolean39 = strList5.contains((java.lang.Object) boolean38);
        java.util.stream.Stream<java.lang.String> strStream40 = strList5.stream();
        java.lang.String[] strArray42 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.util.stream.Stream<java.lang.String> strStream45 = strList43.stream();
        boolean boolean47 = strList43.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor49 = strList43.listIterator(0);
        strList43.clear();
        boolean boolean51 = strList5.retainAll((java.util.Collection<java.lang.String>) strList43);
        boolean boolean52 = attribute0.equals((java.lang.Object) strList5);
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder55 = builder53.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder57 = builder55.setLanguageTag("it");
        java.util.Locale.Builder builder60 = builder55.setExtension('x', "de");
        java.util.Locale.Builder builder62 = builder55.setLanguage("fra");
        java.util.TimeZone timeZone65 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone65);
        java.lang.String str67 = fastDateFormat66.toString();
        java.lang.String str68 = fastDateFormat66.toString();
        java.util.TimeZone timeZone69 = fastDateFormat66.getTimeZone();
        java.util.Locale locale70 = java.util.Locale.CHINESE;
        java.lang.String str71 = locale70.getLanguage();
        java.util.Locale locale72 = java.util.Locale.GERMAN;
        java.lang.String str73 = locale70.getDisplayVariant(locale72);
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(timeZone69, locale70);
        java.util.Locale locale75 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone76 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone77 = java.util.TimeZone.getDefault();
        boolean boolean78 = timeZone76.hasSameRules(timeZone77);
        java.util.Locale locale79 = java.util.Locale.ROOT;
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(timeZone77, locale79);
        java.lang.String str81 = locale79.getDisplayLanguage();
        java.lang.String str83 = locale79.getUnicodeLocaleType("zh");
        java.lang.String str84 = locale75.getDisplayScript(locale79);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat85 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone69, locale79);
        java.util.Set<java.lang.Character> charSet86 = locale79.getExtensionKeys();
        java.util.Locale.Builder builder87 = builder55.setLocale(locale79);
        java.util.Locale.Builder builder89 = builder55.setVariant("Chinese");
        boolean boolean90 = strList5.contains((java.lang.Object) builder55);
        int int91 = strList5.size();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar24 and calendar74", (calendar24.compareTo(calendar74) == 0) == calendar24.equals(calendar74));
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test385");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7);
        timeZone7.setRawOffset(3);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        boolean boolean17 = timeZone7.hasSameRules(timeZone16);
        boolean boolean18 = timeZone1.hasSameRules(timeZone16);
        java.util.TimeZone.setDefault(timeZone16);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition(16);
        int int28 = parsePosition27.getErrorIndex();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        boolean boolean31 = parsePosition27.equals((java.lang.Object) locale29);
        java.lang.String str32 = locale29.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22, locale29);
        int int34 = timeZone22.getRawOffset();
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.lang.String str36 = locale35.getLanguage();
        boolean boolean37 = locale35.hasExtensions();
        java.lang.String str38 = locale35.getDisplayScript();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale35);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone22, locale35);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone16, locale35);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone43 = fastDateFormat42.getTimeZone();
        int int45 = timeZone43.getOffset(1644572101904L);
        calendar41.setTimeZone(timeZone43);
        java.lang.String str47 = timeZone43.getID();
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(locale48);
        java.util.Date date56 = new java.util.Date(9, 11, (int) '4', 35, 40, 100);
        boolean boolean57 = calendar49.after((java.lang.Object) 35);
        java.util.TimeZone timeZone59 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat60 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone59);
        java.lang.String str61 = fastDateFormat60.toString();
        java.text.ParsePosition parsePosition64 = new java.text.ParsePosition(16);
        java.util.Date date65 = new java.util.Date();
        int int66 = date65.getDay();
        java.util.Date date67 = new java.util.Date();
        date67.setMinutes((int) '#');
        boolean boolean70 = date65.before(date67);
        boolean boolean71 = parsePosition64.equals((java.lang.Object) boolean70);
        parsePosition64.setErrorIndex(0);
        java.lang.Object obj74 = fastDateFormat60.parseObject("tedesco", parsePosition64);
        boolean boolean75 = calendar49.after((java.lang.Object) "tedesco");
        java.time.Instant instant76 = calendar49.toInstant();
        calendar49.clear();
        java.util.Calendar calendar78 = java.util.Calendar.getInstance();
        int int79 = calendar78.getWeeksInWeekYear();
        java.time.Instant instant80 = calendar78.toInstant();
        java.util.Date date81 = java.util.Date.from(instant80);
        date81.setYear(16);
        calendar49.setTime(date81);
        java.lang.String str85 = date81.toLocaleString();
        boolean boolean86 = timeZone43.inDaylightTime(date81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar25", (calendar4.compareTo(calendar25) == 0) == calendar4.equals(calendar25));
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test386");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category6, locale9);
        java.lang.String str11 = locale9.toLanguageTag();
        java.util.Calendar.Builder builder12 = builder0.setLocale(locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        java.text.ParsePosition parsePosition20 = new java.text.ParsePosition(16);
        int int21 = parsePosition20.getErrorIndex();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        boolean boolean24 = parsePosition20.equals((java.lang.Object) locale22);
        java.lang.String str25 = locale22.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15, locale22);
        int int27 = timeZone15.getRawOffset();
        java.util.Calendar.Builder builder28 = builder12.setTimeZone(timeZone15);
        java.util.Calendar calendar29 = builder12.build();
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale30.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.lang.String str35 = locale30.getDisplayVariant(locale34);
        java.util.Locale locale36 = java.util.Locale.PRC;
        java.lang.String str37 = locale34.getDisplayScript(locale36);
        java.util.Locale locale38 = locale34.stripExtensions();
        boolean boolean39 = calendar29.before((java.lang.Object) locale34);
        boolean boolean40 = locale34.hasExtensions();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        java.util.Locale locale44 = java.util.Locale.ROOT;
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone42, locale44);
        java.lang.String str46 = locale44.getDisplayLanguage();
        java.lang.String str48 = locale44.getUnicodeLocaleType("zh");
        java.util.Locale locale49 = locale44.stripExtensions();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(timeZone51, locale53);
        java.lang.String str56 = locale53.getExtension('a');
        java.lang.String str57 = locale49.getDisplayName(locale53);
        java.util.Locale locale58 = locale49.stripExtensions();
        java.lang.String str59 = locale34.getDisplayVariant(locale49);
        java.lang.String str60 = locale34.getDisplayScript();
        java.util.Locale locale61 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet62 = locale61.getExtensionKeys();
        java.util.Locale locale64 = new java.util.Locale("de");
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale64);
        java.lang.String str66 = locale61.getDisplayVariant(locale64);
        java.lang.String str67 = locale64.getDisplayName();
        java.lang.String str68 = locale64.toLanguageTag();
        java.lang.String str69 = locale34.getDisplayCountry(locale64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar45 and calendar65", (calendar45.compareTo(calendar65) == 0) == calendar45.equals(calendar65));
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test387");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        java.lang.String str3 = timeZone1.getID();
        boolean boolean4 = timeZone1.observesDaylightTime();
        java.util.Calendar.Builder builder5 = new java.util.Calendar.Builder();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = locale6.getLanguage();
        boolean boolean8 = locale6.hasExtensions();
        java.lang.String str9 = locale6.getDisplayCountry();
        java.util.Calendar.Builder builder10 = builder5.setLocale(locale6);
        java.util.Calendar.Builder builder14 = builder5.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder16 = builder5.setLenient(false);
        java.util.Calendar.Builder builder20 = builder5.setTimeOfDay(15, 0, 32770);
        java.util.Calendar.Builder builder23 = builder20.setWeekDefinition(7, 7);
        java.util.Calendar.Builder builder25 = builder20.setLenient(true);
        java.util.Calendar.Builder builder29 = builder25.setWeekDate(0, 53, 31);
        java.util.Calendar.Builder builder34 = builder29.setTimeOfDay(31, (-1), 39, 52);
        java.util.Calendar.Builder builder37 = builder34.set(0, 59);
        java.util.Calendar.Builder builder41 = builder37.setTimeOfDay(1, (int) (short) 100, 50);
        java.util.Calendar.Builder builder46 = builder37.setTimeOfDay(47, 100, 22, (int) 'u');
        java.util.Calendar.Builder builder50 = builder46.setTimeOfDay(35, 6, (-1893));
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("\u5e74\u6708\u65e5");
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone53.hasSameRules(timeZone54);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet57 = locale56.getExtensionKeys();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone53, locale56);
        calendar58.setMinimalDaysInFirstWeek((int) (short) 0);
        java.util.Locale locale61 = java.util.Locale.CHINESE;
        boolean boolean62 = calendar58.after((java.lang.Object) locale61);
        java.lang.String str63 = locale52.getDisplayVariant(locale61);
        java.util.Calendar.Builder builder64 = builder46.setLocale(locale61);
        java.util.Calendar.Builder builder68 = builder64.setDate((int) 'x', 292278994, (int) (short) -1);
        java.util.Locale locale72 = new java.util.Locale("\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "2022-2-7 9:35:28", "11 Feb 2022 09:41:02 GMT");
        java.util.Set<java.lang.String> strSet73 = locale72.getUnicodeLocaleAttributes();
        java.util.Calendar.Builder builder74 = builder64.setLocale(locale72);
        java.util.Locale locale78 = new java.util.Locale("it", "", "United States");
        java.lang.String str80 = locale78.getExtension('a');
        java.lang.String str81 = locale72.getDisplayCountry(locale78);
        java.lang.String str82 = timeZone1.getDisplayName(locale72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar2 and calendar58", (calendar2.compareTo(calendar58) == 0) == calendar2.equals(calendar58));
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test388");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = locale14.getDisplayVariant(locale18);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone2, locale18);
        java.util.Locale locale22 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale22);
        boolean boolean24 = fastDateFormat23.getTimeZoneOverridesCalendar();
        java.lang.String str26 = fastDateFormat23.format(1644485690024L);
        java.lang.Object obj27 = null;
        boolean boolean28 = fastDateFormat23.equals(obj27);
        java.util.Locale locale29 = fastDateFormat23.getLocale();
        java.lang.String str30 = fastDateFormat23.toString();
        java.lang.String str31 = fastDateFormat23.toString();
        java.lang.String str32 = fastDateFormat23.getPattern();
        java.util.Locale locale33 = fastDateFormat23.getLocale();
        java.lang.String str34 = locale18.getDisplayName(locale33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar5 and calendar20", (calendar5.compareTo(calendar20) == 0) == calendar5.equals(calendar20));
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test389");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder11 = builder0.setLenient(false);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay(15, 0, 32770);
        java.util.Calendar.Builder builder18 = builder15.setWeekDefinition(7, 7);
        java.util.Calendar.Builder builder20 = builder15.setLenient(true);
        java.util.Calendar.Builder builder24 = builder20.setWeekDate(0, 53, 31);
        java.util.Calendar.Builder builder29 = builder24.setTimeOfDay(31, (-1), 39, 52);
        java.util.Calendar.Builder builder33 = builder24.setWeekDate((int) (byte) -1, 3, 55);
        java.util.Locale.Category category34 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale38.getDisplayName();
        java.lang.String str40 = locale38.getDisplayCountry();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone36, locale38);
        java.util.Locale.setDefault(category34, locale38);
        java.util.Locale locale43 = java.util.Locale.getDefault(category34);
        java.util.Locale locale44 = java.util.Locale.ITALY;
        java.util.Locale.setDefault(category34, locale44);
        java.util.Calendar.Builder builder46 = builder33.setLocale(locale44);
        java.util.Calendar.Builder builder50 = builder46.setDate(51, 30, (int) (short) 100);
        java.util.TimeZone timeZone52 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone52);
        java.lang.StringBuffer stringBuffer55 = null;
        java.lang.StringBuffer stringBuffer56 = fastDateFormat53.format((long) 32772, stringBuffer55);
        java.lang.StringBuffer stringBuffer58 = null;
        java.lang.StringBuffer stringBuffer59 = fastDateFormat53.format(1644572128302L, stringBuffer58);
        java.util.Date date66 = new java.util.Date(45, (int) (byte) 100, (int) '#', 50, 100, 36);
        date66.setMinutes((int) '4');
        java.lang.String str69 = fastDateFormat53.format(date66);
        java.util.Calendar calendar70 = java.util.Calendar.getInstance();
        calendar70.setMinimalDaysInFirstWeek(15);
        java.util.Date date73 = calendar70.getTime();
        calendar70.roll(0, 44);
        java.lang.String str77 = fastDateFormat53.format(calendar70);
        int int78 = calendar70.getWeekYear();
        calendar70.add(59, 0);
        int int82 = calendar70.getWeeksInWeekYear();
        java.util.TimeZone timeZone83 = calendar70.getTimeZone();
        java.util.Calendar.Builder builder84 = builder46.setTimeZone(timeZone83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar41 and calendar70", (calendar41.compareTo(calendar70) == 0) == calendar41.equals(calendar70));
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test390");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("it");
        java.util.Locale.Builder builder7 = builder2.setExtension('x', "de");
        java.util.Locale.Builder builder9 = builder2.setLanguage("fra");
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.lang.String str14 = fastDateFormat13.toString();
        java.lang.String str15 = fastDateFormat13.toString();
        java.util.TimeZone timeZone16 = fastDateFormat13.getTimeZone();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale17.getDisplayVariant(locale19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone16, locale17);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        java.lang.String str28 = locale26.getDisplayLanguage();
        java.lang.String str30 = locale26.getUnicodeLocaleType("zh");
        java.lang.String str31 = locale22.getDisplayScript(locale26);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone16, locale26);
        java.util.Set<java.lang.Character> charSet33 = locale26.getExtensionKeys();
        java.util.Locale.Builder builder34 = builder2.setLocale(locale26);
        java.util.Locale.Builder builder35 = builder2.clearExtensions();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar21 and calendar27", (calendar21.compareTo(calendar27) == 0) == calendar21.equals(calendar27));
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test391");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayVariant(locale9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale7);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.lang.String str18 = locale16.getDisplayLanguage();
        java.lang.String str20 = locale16.getUnicodeLocaleType("zh");
        java.lang.String str21 = locale12.getDisplayScript(locale16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone6, locale16);
        java.util.TimeZone timeZone23 = fastDateFormat22.getTimeZone();
        boolean boolean24 = timeZone23.useDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar17", (calendar11.compareTo(calendar17) == 0) == calendar11.equals(calendar17));
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test392");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5e74\u6708\u65e5");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        long long7 = calendar6.getTimeInMillis();
        calendar6.set(2022, (int) 'a', 8);
        int int13 = calendar6.getGreatestMinimum(5);
        java.lang.String str14 = fastDateFormat1.format(calendar6);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        java.text.ParsePosition parsePosition22 = new java.text.ParsePosition(16);
        int int23 = parsePosition22.getErrorIndex();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        boolean boolean26 = parsePosition22.equals((java.lang.Object) locale24);
        java.lang.String str27 = locale24.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17, locale24);
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.lang.String str30 = locale29.getLanguage();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale29.getDisplayVariant(locale31);
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.lang.String str34 = locale29.getDisplayVariant(locale33);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone17, locale33);
        java.lang.String str36 = fastDateFormat1.format(calendar35);
        boolean boolean37 = fastDateFormat1.getTimeZoneOverridesCalendar();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar20 and calendar35", (calendar20.compareTo(calendar35) == 0) == calendar20.equals(calendar35));
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test393");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale11 = new java.util.Locale("de");
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale11.getCountry();
        java.util.Calendar.Builder builder14 = builder0.setLocale(locale11);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay((int) 'u', 6, 0, 8);
        java.util.Calendar.Builder builder23 = builder19.setTimeOfDay((int) (byte) 100, 51, 100);
        java.util.Calendar.Builder builder27 = builder19.setTimeOfDay((int) (byte) -1, (int) (short) 10, 50);
        java.util.Calendar.Builder builder31 = builder27.setWeekDate(30, 25, (int) '4');
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale35.getDisplayName();
        java.lang.String str37 = locale35.getDisplayCountry();
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone33, locale35);
        int int40 = calendar38.getActualMinimum(2);
        java.util.TimeZone timeZone41 = calendar38.getTimeZone();
        java.util.Calendar.Builder builder42 = new java.util.Calendar.Builder();
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.lang.String str44 = locale43.getLanguage();
        boolean boolean45 = locale43.hasExtensions();
        java.lang.String str46 = locale43.getDisplayCountry();
        java.util.Calendar.Builder builder47 = builder42.setLocale(locale43);
        java.util.Calendar.Builder builder51 = builder42.setWeekDate(38, 41, 11);
        java.util.TimeZone timeZone53 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone53);
        java.lang.String str55 = fastDateFormat54.toString();
        java.lang.String str56 = fastDateFormat54.toString();
        java.util.TimeZone timeZone57 = fastDateFormat54.getTimeZone();
        java.util.Calendar.Builder builder58 = builder51.setTimeZone(timeZone57);
        boolean boolean59 = timeZone41.hasSameRules(timeZone57);
        java.lang.String str60 = timeZone57.getID();
        java.util.Calendar.Builder builder61 = builder31.setTimeZone(timeZone57);
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone57);
        java.lang.String str63 = timeZone57.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar38 and calendar62", (calendar38.compareTo(calendar62) == 0) == calendar38.equals(calendar62));
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test394");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone4, locale6);
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition(16);
        int int10 = parsePosition9.getErrorIndex();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        boolean boolean13 = parsePosition9.equals((java.lang.Object) locale11);
        java.lang.String str14 = locale11.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone4, locale11);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        long long21 = calendar20.getTimeInMillis();
        java.lang.String str22 = fastDateFormat15.format(calendar20);
        java.util.Date date23 = calendar20.getTime();
        calendar20.setLenient(true);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27, locale29);
        java.lang.String str31 = locale29.getDisplayLanguage();
        java.lang.String str33 = locale29.getUnicodeLocaleType("zh");
        java.util.Locale locale34 = locale29.stripExtensions();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        java.util.Locale locale38 = java.util.Locale.ROOT;
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(timeZone36, locale38);
        java.lang.String str41 = locale38.getExtension('a');
        java.lang.String str42 = locale34.getDisplayName(locale38);
        boolean boolean43 = calendar20.after((java.lang.Object) locale38);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getInstance("10.01.4630 00:00:00", locale38);
        java.lang.String str46 = fastDateFormat44.format((java.lang.Object) 1644485758028L);
        java.util.TimeZone timeZone47 = fastDateFormat44.getTimeZone();
        java.util.TimeZone.setDefault(timeZone47);
        java.text.FieldPosition fieldPosition50 = new java.text.FieldPosition(2022);
        fieldPosition50.setEndIndex(47);
        java.util.Locale.Category category53 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale54 = java.util.Locale.getDefault(category53);
        boolean boolean55 = fieldPosition50.equals((java.lang.Object) category53);
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.util.Locale locale57 = locale56.stripExtensions();
        java.lang.String str58 = locale56.getISO3Country();
        java.util.Locale.setDefault(category53, locale56);
        java.util.TimeZone timeZone61 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone61);
        java.lang.String str63 = fastDateFormat62.getPattern();
        java.util.Locale.Category category64 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale65 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category64, locale65);
        java.util.Locale locale67 = java.util.Locale.getDefault(category64);
        boolean boolean68 = fastDateFormat62.equals((java.lang.Object) locale67);
        java.lang.String str69 = locale67.getISO3Language();
        java.util.Locale.setDefault(category53, locale67);
        java.util.Locale locale74 = new java.util.Locale("java.text.FieldPosition[field=1,attribute=null,beginIndex=0,endIndex=0]", "\u4e0a\u5348", "h:mm:ss a z");
        java.util.Locale locale75 = java.util.Locale.PRC;
        java.lang.String str76 = locale75.getDisplayLanguage();
        java.util.TimeZone timeZone77 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone78 = java.util.TimeZone.getDefault();
        boolean boolean79 = timeZone77.hasSameRules(timeZone78);
        java.util.Locale locale80 = java.util.Locale.GERMAN;
        java.lang.String str81 = locale80.getDisplayName();
        java.lang.String str82 = locale80.getDisplayCountry();
        java.util.Calendar calendar83 = java.util.Calendar.getInstance(timeZone78, locale80);
        java.util.Locale locale84 = java.util.Locale.CHINESE;
        java.util.Locale locale85 = locale84.stripExtensions();
        java.lang.String str86 = locale84.getVariant();
        java.lang.String str87 = locale80.getDisplayScript(locale84);
        java.util.Set<java.lang.String> strSet88 = locale80.getUnicodeLocaleKeys();
        java.util.Locale locale89 = java.util.Locale.GERMAN;
        java.util.Locale.Category category90 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale91 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category90, locale91);
        java.lang.String str93 = locale91.getScript();
        java.lang.String str94 = locale89.getDisplayCountry(locale91);
        java.lang.String str95 = locale80.getDisplayCountry(locale91);
        java.lang.String str96 = locale75.getDisplayCountry(locale91);
        java.lang.String str97 = locale74.getDisplayScript(locale75);
        java.util.Locale.setDefault(category53, locale75);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat99 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone47, locale75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar83", (calendar7.compareTo(calendar83) == 0) == calendar7.equals(calendar83));
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test395");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale11 = new java.util.Locale("de");
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale11.getCountry();
        java.util.Calendar.Builder builder14 = builder0.setLocale(locale11);
        java.util.Calendar calendar15 = builder14.build();
        calendar15.set(100, 2, 44, (int) (byte) 100, 45, (int) (short) 1);
        boolean boolean23 = calendar15.isWeekDateSupported();
        java.util.Date date24 = new java.util.Date();
        int int25 = date24.getTimezoneOffset();
        long long26 = date24.getTime();
        java.util.Date date27 = new java.util.Date();
        int int28 = date27.getSeconds();
        long long29 = date27.getTime();
        date27.setTime((long) ' ');
        int int32 = date27.getTimezoneOffset();
        boolean boolean33 = date24.before(date27);
        java.util.Date date37 = new java.util.Date(11, 11, 3);
        boolean boolean38 = date24.before(date37);
        java.util.Date date39 = new java.util.Date();
        int int40 = date39.getDay();
        java.util.Date date41 = new java.util.Date();
        date41.setMinutes((int) '#');
        boolean boolean44 = date39.before(date41);
        int int45 = date41.getHours();
        boolean boolean46 = date24.before(date41);
        int int47 = date24.getDate();
        java.util.Date date53 = new java.util.Date(9, (int) 'x', (int) '#', 2, 7);
        java.lang.String str54 = date53.toLocaleString();
        boolean boolean55 = date24.before(date53);
        calendar15.setTime(date24);
        java.util.TimeZone timeZone57 = calendar15.getTimeZone();
        int int58 = timeZone57.getRawOffset();
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone57);
        int int60 = timeZone57.getDSTSavings();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar59", (calendar15.compareTo(calendar59) == 0) == calendar15.equals(calendar59));
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test396");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("");
        java.util.TimeZone timeZone8 = fastDateFormat7.getTimeZone();
        java.util.Locale locale11 = new java.util.Locale("h:mm:ss a z", "coreano");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone8, locale11);
        int int14 = timeZone8.getOffset((-1767951822000L));
        boolean boolean15 = timeZone2.hasSameRules(timeZone8);
        java.lang.String str16 = timeZone8.getID();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18);
        timeZone18.setRawOffset(40);
        timeZone18.setID("francese (Francia)");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone18);
        boolean boolean27 = timeZone18.observesDaylightTime();
        boolean boolean28 = timeZone8.hasSameRules(timeZone18);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getInstance("");
        java.util.TimeZone timeZone31 = fastDateFormat30.getTimeZone();
        boolean boolean32 = timeZone8.hasSameRules(timeZone31);
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone35);
        java.lang.String str37 = fastDateFormat36.toString();
        java.lang.String str38 = fastDateFormat36.toString();
        java.util.TimeZone timeZone39 = fastDateFormat36.getTimeZone();
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.lang.String str41 = locale40.getLanguage();
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.lang.String str43 = locale40.getDisplayVariant(locale42);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone39, locale40);
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        java.util.Locale locale49 = java.util.Locale.ROOT;
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone47, locale49);
        java.lang.String str51 = locale49.getDisplayLanguage();
        java.lang.String str53 = locale49.getUnicodeLocaleType("zh");
        java.lang.String str54 = locale45.getDisplayScript(locale49);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone39, locale49);
        java.util.TimeZone timeZone56 = fastDateFormat55.getTimeZone();
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone56);
        boolean boolean58 = timeZone8.hasSameRules(timeZone56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar21 and calendar44", (calendar21.compareTo(calendar44) == 0) == calendar21.equals(calendar44));
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test397");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder8 = builder5.clear();
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder10 = builder8.setLocale(locale9);
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale16.getDisplayName();
        java.lang.String str18 = locale16.getDisplayCountry();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.util.Locale.setDefault(category12, locale16);
        java.util.Locale locale21 = java.util.Locale.getDefault(category12);
        java.util.Locale.Builder builder22 = builder11.setLocale(locale21);
        java.util.Locale.setDefault(category0, locale21);
        java.lang.String str24 = locale21.getISO3Country();
        java.util.Locale locale27 = new java.util.Locale("java.text.ParsePosition[index=100,errorIndex=-1]", "Jan 10, 4630 12:00:00 AM");
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale27);
        calendar28.setFirstDayOfWeek(42);
        boolean boolean31 = locale21.equals((java.lang.Object) 42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar19 and calendar28", (calendar19.compareTo(calendar28) == 0) == calendar19.equals(calendar28));
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test398");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        int int9 = calendar7.getActualMinimum(2);
        java.util.TimeZone timeZone10 = calendar7.getTimeZone();
        java.util.TimeZone timeZone11 = calendar7.getTimeZone();
        java.lang.String str12 = calendar7.getCalendarType();
        java.lang.String str13 = calendar7.getCalendarType();
        java.util.TimeZone timeZone14 = calendar7.getTimeZone();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.ROOT;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone17, locale19);
        java.text.ParsePosition parsePosition22 = new java.text.ParsePosition(16);
        int int23 = parsePosition22.getErrorIndex();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet25 = locale24.getExtensionKeys();
        boolean boolean26 = parsePosition22.equals((java.lang.Object) locale24);
        java.lang.String str27 = locale24.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone17, locale24);
        int int29 = timeZone17.getRawOffset();
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        boolean boolean32 = locale30.hasExtensions();
        java.lang.String str33 = locale30.getDisplayScript();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(locale30);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone17, locale30);
        java.lang.String str36 = locale30.getDisplayCountry();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone14, locale30);
        int int39 = timeZone14.getOffset(1644485892910L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar7 and calendar20", (calendar7.compareTo(calendar20) == 0) == calendar7.equals(calendar20));
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test399");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        strList2.clear();
        java.lang.String[] strArray7 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.stream.Stream<java.lang.String> strStream10 = strList8.stream();
        boolean boolean11 = strList2.containsAll((java.util.Collection<java.lang.String>) strList8);
        java.lang.Object obj12 = null;
        int int13 = strList8.lastIndexOf(obj12);
        java.lang.String[] strArray15 = java.util.TimeZone.getAvailableIDs(7);
        java.lang.Comparable<java.lang.String>[] strComparableArray16 = strList8.toArray((java.lang.Comparable<java.lang.String>[]) strArray15);
        java.lang.Object obj17 = null;
        boolean boolean18 = strList8.remove(obj17);
        strList8.clear();
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale21);
        boolean boolean23 = fastDateFormat22.getTimeZoneOverridesCalendar();
        java.lang.Object obj24 = fastDateFormat22.clone();
        java.util.Date date25 = new java.util.Date();
        int int26 = date25.getTimezoneOffset();
        long long27 = date25.getTime();
        int int28 = date25.getMonth();
        date25.setSeconds(7);
        date25.setSeconds(1);
        java.util.Date date33 = new java.util.Date();
        int int34 = date33.getTimezoneOffset();
        long long35 = date33.getTime();
        int int36 = date33.getMonth();
        date33.setSeconds(7);
        date33.setSeconds(1);
        boolean boolean41 = date25.before(date33);
        java.text.AttributedCharacterIterator attributedCharacterIterator42 = fastDateFormat22.formatToCharacterIterator((java.lang.Object) date25);
        java.lang.String str43 = fastDateFormat22.toString();
        int int44 = strList8.indexOf((java.lang.Object) str43);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone46, locale48);
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone52);
        timeZone52.setRawOffset(3);
        java.util.TimeZone timeZone58 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone58);
        java.lang.String str60 = fastDateFormat59.getPattern();
        java.util.TimeZone timeZone61 = fastDateFormat59.getTimeZone();
        boolean boolean62 = timeZone52.hasSameRules(timeZone61);
        boolean boolean63 = timeZone46.hasSameRules(timeZone61);
        timeZone46.setRawOffset(50);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone46);
        boolean boolean67 = strList8.remove((java.lang.Object) timeZone46);
        java.text.ParsePosition parsePosition69 = new java.text.ParsePosition(16);
        int int70 = parsePosition69.getErrorIndex();
        java.util.TimeZone timeZone72 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat73 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone72);
        java.lang.String str74 = fastDateFormat73.getPattern();
        boolean boolean75 = parsePosition69.equals((java.lang.Object) fastDateFormat73);
        java.util.TimeZone timeZone78 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        boolean boolean80 = timeZone78.hasSameRules(timeZone79);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat81 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone79);
        java.util.Locale locale82 = fastDateFormat81.getLocale();
        java.lang.String str83 = fastDateFormat81.toString();
        java.text.ParsePosition parsePosition86 = new java.text.ParsePosition(16);
        int int87 = parsePosition86.getErrorIndex();
        java.lang.Object obj88 = fastDateFormat81.parseObject("Vereinigtes K\366nigreich", parsePosition86);
        java.lang.Object obj89 = fastDateFormat73.parseObject("\uc624\uc804\uc2dc\ubd84\ucd08", parsePosition86);
        java.text.ParsePosition parsePosition92 = new java.text.ParsePosition((int) (short) 100);
        java.lang.Object obj93 = fastDateFormat73.parseObject("11 Jan 2022 09:36:59 GMT", parsePosition92);
        java.util.Locale locale94 = fastDateFormat73.getLocale();
        java.lang.String str95 = timeZone46.getDisplayName(locale94);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar49 and calendar66", (calendar49.compareTo(calendar66) == 0) == calendar49.equals(calendar66));
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test400");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        calendar4.clear(0);
        calendar4.setFirstDayOfWeek(51);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone11, locale13);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition(16);
        int int17 = parsePosition16.getErrorIndex();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) locale18);
        java.lang.String str21 = locale18.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone11, locale18);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        long long28 = calendar27.getTimeInMillis();
        java.lang.String str29 = fastDateFormat22.format(calendar27);
        java.util.Date date30 = calendar27.getTime();
        calendar4.setTime(date30);
        int int33 = calendar4.getLeastMaximum(0);
        boolean boolean34 = calendar4.isWeekDateSupported();
        int int35 = calendar4.getFirstDayOfWeek();
        int int36 = calendar4.getFirstDayOfWeek();
        java.util.Locale locale38 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale38);
        java.util.TimeZone timeZone40 = fastDateFormat39.getTimeZone();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet45 = locale44.getExtensionKeys();
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone41, locale44);
        java.lang.String str47 = locale44.getCountry();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone40, locale44);
        calendar4.setTimeZone(timeZone40);
        boolean boolean50 = timeZone40.observesDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar14", (calendar4.compareTo(calendar14) == 0) == calendar4.equals(calendar14));
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test401");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getWeeksInWeekYear();
        java.time.Instant instant2 = calendar0.toInstant();
        int int4 = calendar0.getMinimum(4);
        calendar0.setFirstDayOfWeek(13);
        calendar0.clear();
        int int9 = calendar0.getMaximum(12);
        int int11 = calendar0.getActualMinimum(12);
        java.util.TimeZone timeZone12 = calendar0.getTimeZone();
        java.util.Calendar.Builder builder13 = new java.util.Calendar.Builder();
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        boolean boolean16 = locale14.hasExtensions();
        java.lang.String str17 = locale14.getDisplayCountry();
        java.util.Calendar.Builder builder18 = builder13.setLocale(locale14);
        java.util.Locale.Category category19 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category19, locale20);
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category19, locale22);
        java.lang.String str24 = locale22.toLanguageTag();
        java.util.Calendar.Builder builder25 = builder13.setLocale(locale22);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone28, locale30);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition(16);
        int int34 = parsePosition33.getErrorIndex();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet36 = locale35.getExtensionKeys();
        boolean boolean37 = parsePosition33.equals((java.lang.Object) locale35);
        java.lang.String str38 = locale35.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone28, locale35);
        int int40 = timeZone28.getRawOffset();
        java.util.Calendar.Builder builder41 = builder25.setTimeZone(timeZone28);
        java.util.Calendar calendar42 = builder25.build();
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale43.getDisplayVariant(locale45);
        java.util.Locale locale47 = java.util.Locale.GERMANY;
        java.lang.String str48 = locale43.getDisplayVariant(locale47);
        java.util.Locale locale49 = java.util.Locale.PRC;
        java.lang.String str50 = locale47.getDisplayScript(locale49);
        java.util.Locale locale51 = locale47.stripExtensions();
        boolean boolean52 = calendar42.before((java.lang.Object) locale47);
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone53.hasSameRules(timeZone54);
        java.util.Locale locale56 = java.util.Locale.ROOT;
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(timeZone54, locale56);
        java.lang.String str58 = locale56.getDisplayLanguage();
        java.lang.String str59 = locale47.getDisplayScript(locale56);
        java.lang.String str60 = timeZone12.getDisplayName(locale56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar0 and calendar42", (calendar0.compareTo(calendar42) == 0) == calendar0.equals(calendar42));
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test402");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Locale locale3 = new java.util.Locale("de");
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale3);
        java.lang.String str5 = locale0.getDisplayVariant(locale3);
        java.lang.String str6 = locale3.getDisplayName();
        java.util.Locale locale7 = locale3.stripExtensions();
        java.lang.String[] strArray9 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.util.stream.Stream<java.lang.String> strStream12 = strList10.stream();
        boolean boolean14 = strList10.add("hi!");
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.lang.String str20 = locale15.getDisplayVariant(locale19);
        boolean boolean21 = strList10.contains((java.lang.Object) locale15);
        java.lang.String str22 = locale15.getVariant();
        boolean boolean23 = locale15.hasExtensions();
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleKeys();
        java.lang.String str26 = locale15.getDisplayLanguage(locale24);
        java.lang.String str27 = locale15.getCountry();
        java.lang.String str28 = locale3.getDisplayVariant(locale15);
        java.lang.String str29 = locale15.getISO3Country();
        java.text.AttributedCharacterIterator.Attribute attribute30 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str31 = attribute30.toString();
        java.lang.String str32 = attribute30.toString();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str35 = fastDateFormat33.format((long) 100);
        boolean boolean36 = attribute30.equals((java.lang.Object) str35);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance();
        int int38 = calendar37.getWeeksInWeekYear();
        java.time.Instant instant39 = calendar37.toInstant();
        int int41 = calendar37.getMinimum(4);
        calendar37.setFirstDayOfWeek(13);
        boolean boolean44 = attribute30.equals((java.lang.Object) 13);
        java.util.Locale locale45 = java.util.Locale.UK;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.lang.String str47 = locale45.getDisplayCountry(locale46);
        java.util.Locale locale48 = locale45.stripExtensions();
        java.lang.String str49 = locale45.getDisplayScript();
        boolean boolean50 = attribute30.equals((java.lang.Object) locale45);
        java.lang.String str51 = locale45.toLanguageTag();
        java.lang.String str52 = locale15.getDisplayLanguage(locale45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar4 and calendar37", (calendar4.compareTo(calendar37) == 0) == calendar4.equals(calendar37));
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test403");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayVariant(locale9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale7);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.lang.String str18 = locale16.getDisplayLanguage();
        java.lang.String str20 = locale16.getUnicodeLocaleType("zh");
        java.lang.String str21 = locale12.getDisplayScript(locale16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone6, locale16);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        boolean boolean27 = timeZone23.hasSameRules(timeZone25);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        java.text.ParsePosition parsePosition35 = new java.text.ParsePosition(16);
        int int36 = parsePosition35.getErrorIndex();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        boolean boolean39 = parsePosition35.equals((java.lang.Object) locale37);
        java.lang.String str40 = locale37.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone30, locale37);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        timeZone42.setRawOffset((-1));
        boolean boolean45 = timeZone30.hasSameRules(timeZone42);
        java.util.TimeZone timeZone46 = null;
        boolean boolean47 = timeZone42.hasSameRules(timeZone46);
        int int48 = timeZone42.getRawOffset();
        boolean boolean49 = timeZone23.hasSameRules(timeZone42);
        boolean boolean50 = timeZone6.hasSameRules(timeZone23);
        boolean boolean51 = timeZone23.observesDaylightTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar11 and calendar17", (calendar11.compareTo(calendar17) == 0) == calendar11.equals(calendar17));
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test404");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone4 = fastDateFormat2.getTimeZone();
        java.lang.String[] strArray10 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        int int15 = strList11.lastIndexOf((java.lang.Object) locale14);
        java.util.stream.Stream<java.lang.String> strStream16 = strList11.stream();
        java.lang.String[] strArray18 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.util.stream.Stream<java.lang.String> strStream21 = strList19.stream();
        strList19.clear();
        java.util.Spliterator<java.lang.String> strSpliterator23 = strList19.spliterator();
        int int24 = strList11.lastIndexOf((java.lang.Object) strSpliterator23);
        java.util.TimeZone timeZone26 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone26);
        java.lang.String str28 = fastDateFormat27.getPattern();
        boolean boolean29 = strList11.contains((java.lang.Object) str28);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone31, locale33);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone37);
        timeZone37.setRawOffset(3);
        java.util.TimeZone timeZone43 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone43);
        java.lang.String str45 = fastDateFormat44.getPattern();
        java.util.TimeZone timeZone46 = fastDateFormat44.getTimeZone();
        boolean boolean47 = timeZone37.hasSameRules(timeZone46);
        boolean boolean48 = timeZone31.hasSameRules(timeZone46);
        java.util.TimeZone.setDefault(timeZone46);
        boolean boolean50 = strList11.contains((java.lang.Object) timeZone46);
        boolean boolean51 = fastDateFormat2.equals((java.lang.Object) strList11);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0);
        java.util.Locale locale54 = fastDateFormat53.getLocale();
        java.util.Locale locale57 = new java.util.Locale("Tue Jan 11 09:34:31 UTC 2022", "java.text.ParsePosition[index=100,errorIndex=-1]");
        java.util.Locale.setDefault(locale57);
        java.lang.String str59 = locale57.getDisplayCountry();
        boolean boolean60 = fastDateFormat53.equals((java.lang.Object) locale57);
        java.lang.Object obj61 = null;
        boolean boolean62 = fastDateFormat53.equals(obj61);
        int int63 = fastDateFormat53.getMaxLengthEstimate();
        java.util.Calendar calendar64 = java.util.Calendar.getInstance();
        boolean boolean65 = calendar64.isWeekDateSupported();
        java.util.Locale locale66 = java.util.Locale.CHINESE;
        java.lang.String str67 = locale66.getLanguage();
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.lang.String str69 = locale66.getDisplayVariant(locale68);
        boolean boolean70 = calendar64.before((java.lang.Object) str69);
        int int71 = calendar64.getFirstDayOfWeek();
        int int72 = calendar64.getWeekYear();
        int int73 = calendar64.getWeekYear();
        java.util.Date date74 = calendar64.getTime();
        java.time.Instant instant75 = date74.toInstant();
        java.util.Date date76 = java.util.Date.from(instant75);
        java.util.Date date77 = java.util.Date.from(instant75);
        date77.setSeconds(34);
        java.lang.String str80 = fastDateFormat53.format(date77);
        boolean boolean81 = strList11.equals((java.lang.Object) fastDateFormat53);
        java.util.Spliterator<java.lang.String> strSpliterator82 = strList11.spliterator();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar34 and calendar64", (calendar34.compareTo(calendar64) == 0) == calendar34.equals(calendar64));
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test405");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5, locale7);
        java.lang.String str9 = locale7.getDisplayLanguage();
        java.lang.String str10 = locale3.getDisplayCountry(locale7);
        java.lang.String str11 = locale7.getLanguage();
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category12, locale13);
        java.util.Locale locale15 = java.util.Locale.getDefault(category12);
        boolean boolean16 = locale15.hasExtensions();
        java.lang.String[] strArray22 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.util.stream.Stream<java.lang.String> strStream25 = strList23.stream();
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        int int27 = strList23.lastIndexOf((java.lang.Object) locale26);
        java.lang.String str28 = locale15.getDisplayVariant(locale26);
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.lang.String str30 = locale29.getLanguage();
        java.lang.String str31 = locale15.getDisplayVariant(locale29);
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = locale32.getLanguage();
        boolean boolean34 = locale32.hasExtensions();
        java.lang.String str35 = locale32.getDisplayScript();
        java.lang.String str36 = locale29.getDisplayCountry(locale32);
        java.lang.String str37 = locale7.getDisplayVariant(locale29);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale29);
        calendar38.clear();
        int int41 = calendar38.getMinimum(16);
        java.text.Format.Field field42 = null;
        java.text.FieldPosition fieldPosition44 = new java.text.FieldPosition(field42, 1);
        int int45 = fieldPosition44.getBeginIndex();
        java.text.Format.Field field46 = fieldPosition44.getFieldAttribute();
        java.text.Format.Field field47 = fieldPosition44.getFieldAttribute();
        fieldPosition44.setBeginIndex(35);
        int int50 = fieldPosition44.getEndIndex();
        int int51 = fieldPosition44.getField();
        java.lang.String[] strArray53 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        java.util.stream.Stream<java.lang.String> strStream56 = strList54.stream();
        strList54.clear();
        java.lang.String[] strArray59 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        java.util.stream.Stream<java.lang.String> strStream62 = strList60.stream();
        boolean boolean63 = strList54.containsAll((java.util.Collection<java.lang.String>) strList60);
        java.lang.String[] strArray69 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022", "FastDateFormat[h:mm:ss a z]", "zh", "java.text.ParsePosition[index=16,errorIndex=-1]", "de" };
        java.util.ArrayList<java.lang.String> strList70 = new java.util.ArrayList<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList70, strArray69);
        java.lang.Object[] objArray72 = strList70.toArray();
        boolean boolean73 = strList54.equals((java.lang.Object) objArray72);
        boolean boolean74 = fieldPosition44.equals((java.lang.Object) strList54);
        java.util.Calendar calendar75 = java.util.Calendar.getInstance();
        int int76 = calendar75.getWeeksInWeekYear();
        java.time.Instant instant77 = calendar75.toInstant();
        java.util.Date date78 = java.util.Date.from(instant77);
        java.util.Date date79 = java.util.Date.from(instant77);
        java.util.Date date80 = java.util.Date.from(instant77);
        boolean boolean81 = strList54.contains((java.lang.Object) date80);
        int int82 = date80.getHours();
        calendar38.setTime(date80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar75", (calendar8.compareTo(calendar75) == 0) == calendar8.equals(calendar75));
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test406");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("FastDateFormat[h:mm:ss a z]");
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone3);
        java.lang.StringBuffer stringBuffer6 = null;
        java.lang.StringBuffer stringBuffer7 = fastDateFormat4.format((long) 32772, stringBuffer6);
        java.util.TimeZone timeZone8 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone9 = fastDateFormat4.getTimeZone();
        java.util.TimeZone timeZone10 = fastDateFormat4.getTimeZone();
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.lang.String str12 = locale11.getLanguage();
        boolean boolean13 = locale11.hasExtensions();
        java.lang.String str14 = locale11.getDisplayScript();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone10, locale11);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone1, locale11);
        java.lang.String str17 = locale11.getDisplayVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar15 and calendar16", (calendar15.compareTo(calendar16) == 0) == calendar15.equals(calendar16));
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test407");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.TimeZone.setDefault(timeZone1);
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.lang.String str5 = locale4.getLanguage();
        boolean boolean6 = locale4.hasExtensions();
        java.lang.String str7 = locale4.getDisplayScript();
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale9);
        java.lang.String str11 = locale9.getLanguage();
        java.lang.String str12 = locale9.getVariant();
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        boolean boolean15 = locale13.hasExtensions();
        java.lang.String str16 = locale9.getDisplayCountry(locale13);
        java.util.Locale.Category category17 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category17, locale18);
        java.util.Locale locale20 = java.util.Locale.getDefault(category17);
        boolean boolean21 = locale20.hasExtensions();
        java.lang.String[] strArray27 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.stream.Stream<java.lang.String> strStream30 = strList28.stream();
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        int int32 = strList28.lastIndexOf((java.lang.Object) locale31);
        java.lang.String str33 = locale20.getDisplayVariant(locale31);
        java.lang.String str34 = locale9.getDisplayCountry(locale20);
        java.lang.String str35 = locale9.getDisplayName();
        java.text.ParsePosition parsePosition37 = new java.text.ParsePosition(16);
        int int38 = parsePosition37.getErrorIndex();
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone40);
        java.lang.String str42 = fastDateFormat41.getPattern();
        boolean boolean43 = parsePosition37.equals((java.lang.Object) fastDateFormat41);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        boolean boolean45 = parsePosition37.equals((java.lang.Object) locale44);
        java.lang.String str46 = locale44.getDisplayScript();
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder49 = builder47.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder50 = builder47.clear();
        java.util.Locale locale51 = builder50.build();
        java.lang.String str52 = locale44.getDisplayVariant(locale51);
        java.lang.String str53 = locale9.getDisplayVariant(locale44);
        java.lang.String str54 = locale44.getScript();
        java.lang.String str55 = locale4.getDisplayVariant(locale44);
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone1, locale4);
        boolean boolean57 = calendar56.isWeekDateSupported();
        int int59 = calendar56.getActualMaximum((int) (short) 10);
        java.util.TimeZone timeZone60 = calendar56.getTimeZone();
        java.util.Locale locale61 = java.util.Locale.CHINESE;
        java.lang.String str62 = locale61.getLanguage();
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.lang.String str64 = locale61.getDisplayVariant(locale63);
        java.util.Locale locale65 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleKeys();
        java.lang.String str67 = locale63.getDisplayCountry(locale65);
        java.lang.String str68 = locale65.toLanguageTag();
        java.lang.String str69 = locale65.toLanguageTag();
        java.util.Calendar calendar70 = java.util.Calendar.getInstance(timeZone60, locale65);
        java.lang.String str72 = locale65.getExtension('x');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar56 and calendar70", (calendar56.compareTo(calendar70) == 0) == calendar56.equals(calendar70));
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test408");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(47);
        java.lang.String[] strArray3 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        java.util.stream.Stream<java.lang.String> strStream6 = strList4.stream();
        strList4.clear();
        java.lang.String[] strArray9 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.util.stream.Stream<java.lang.String> strStream12 = strList10.stream();
        boolean boolean13 = strList4.containsAll((java.util.Collection<java.lang.String>) strList10);
        java.lang.Object obj14 = null;
        int int15 = strList10.lastIndexOf(obj14);
        java.lang.String[] strArray17 = java.util.TimeZone.getAvailableIDs(7);
        java.lang.Comparable<java.lang.String>[] strComparableArray18 = strList10.toArray((java.lang.Comparable<java.lang.String>[]) strArray17);
        boolean boolean19 = parsePosition1.equals((java.lang.Object) strList10);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder20.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder24 = builder22.setLanguageTag("it");
        java.util.Locale.Builder builder26 = builder22.setLanguage("coreano");
        java.util.Locale.Builder builder27 = builder26.clearExtensions();
        java.util.Locale.Builder builder28 = builder26.clearExtensions();
        java.util.Locale locale29 = java.util.Locale.PRC;
        java.lang.String str30 = locale29.getDisplayLanguage();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        boolean boolean33 = timeZone31.hasSameRules(timeZone32);
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale34.getDisplayName();
        java.lang.String str36 = locale34.getDisplayCountry();
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone32, locale34);
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.util.Locale locale39 = locale38.stripExtensions();
        java.lang.String str40 = locale38.getVariant();
        java.lang.String str41 = locale34.getDisplayScript(locale38);
        java.util.Set<java.lang.String> strSet42 = locale34.getUnicodeLocaleKeys();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale.Category category44 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category44, locale45);
        java.lang.String str47 = locale45.getScript();
        java.lang.String str48 = locale43.getDisplayCountry(locale45);
        java.lang.String str49 = locale34.getDisplayCountry(locale45);
        java.lang.String str50 = locale29.getDisplayCountry(locale45);
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        java.lang.String str52 = locale45.getDisplayCountry(locale51);
        java.util.Locale.Builder builder53 = builder28.setLocale(locale51);
        int int54 = strList10.indexOf((java.lang.Object) builder28);
        java.util.TimeZone timeZone56 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone56);
        java.lang.StringBuffer stringBuffer59 = null;
        java.lang.StringBuffer stringBuffer60 = fastDateFormat57.format((long) 32772, stringBuffer59);
        java.util.Date date61 = new java.util.Date();
        int int62 = date61.getTimezoneOffset();
        long long63 = date61.getTime();
        int int64 = date61.getMinutes();
        java.lang.String str65 = fastDateFormat57.format(date61);
        java.util.TimeZone timeZone66 = fastDateFormat57.getTimeZone();
        int int68 = timeZone66.getOffset((long) 36);
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        boolean boolean71 = timeZone69.hasSameRules(timeZone70);
        java.util.Locale locale72 = java.util.Locale.ROOT;
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone70, locale72);
        boolean boolean74 = timeZone66.hasSameRules(timeZone70);
        java.util.Locale locale76 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat77 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale76);
        java.util.TimeZone timeZone78 = fastDateFormat77.getTimeZone();
        java.util.TimeZone timeZone79 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone80 = java.util.TimeZone.getDefault();
        boolean boolean81 = timeZone79.hasSameRules(timeZone80);
        java.util.Locale locale82 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet83 = locale82.getExtensionKeys();
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(timeZone79, locale82);
        java.lang.String str85 = locale82.getCountry();
        java.util.Calendar calendar86 = java.util.Calendar.getInstance(timeZone78, locale82);
        java.util.Calendar calendar87 = java.util.Calendar.getInstance(timeZone70, locale82);
        calendar87.clear();
        int int89 = strList10.indexOf((java.lang.Object) calendar87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar37 and calendar73", (calendar37.compareTo(calendar73) == 0) == calendar37.equals(calendar73));
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test409");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.util.Locale.setDefault(locale5);
        java.util.Locale.setDefault(category0, locale5);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone11);
        java.util.Locale locale14 = fastDateFormat13.getLocale();
        java.lang.String str15 = fastDateFormat13.toString();
        java.lang.Object obj16 = fastDateFormat13.clone();
        java.util.Locale locale17 = fastDateFormat13.getLocale();
        java.lang.String str18 = locale17.getVariant();
        java.util.Locale.setDefault(category0, locale17);
        java.util.Locale locale23 = new java.util.Locale("10.01.4630 00:00:00", "\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00", "11-feb-2022 9.37.07");
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone26, locale28);
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition(16);
        int int32 = parsePosition31.getErrorIndex();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet34 = locale33.getExtensionKeys();
        boolean boolean35 = parsePosition31.equals((java.lang.Object) locale33);
        java.lang.String str36 = locale33.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone26, locale33);
        int int38 = timeZone26.getRawOffset();
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = locale39.getLanguage();
        boolean boolean41 = locale39.hasExtensions();
        java.lang.String str42 = locale39.getDisplayScript();
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(locale39);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone26, locale39);
        java.lang.String str45 = locale39.getDisplayCountry();
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str47 = locale39.getDisplayScript(locale46);
        java.lang.String str48 = locale23.getDisplayScript(locale46);
        java.util.Locale.setDefault(category0, locale46);
        java.util.TimeZone timeZone51 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone51);
        java.lang.String str53 = fastDateFormat52.toString();
        java.lang.String str54 = fastDateFormat52.toString();
        java.util.TimeZone timeZone55 = fastDateFormat52.getTimeZone();
        java.util.Locale locale56 = fastDateFormat52.getLocale();
        java.lang.String str57 = locale56.getLanguage();
        java.util.Locale.setDefault(category0, locale56);
        java.util.Locale locale59 = java.util.Locale.CHINESE;
        java.lang.String str60 = locale59.getLanguage();
        java.lang.String str61 = locale59.getDisplayLanguage();
        java.util.Locale.setDefault(locale59);
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        java.lang.String str64 = locale59.getDisplayCountry(locale63);
        java.lang.String str65 = locale63.getCountry();
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(locale63);
        java.util.Set<java.lang.Character> charSet67 = locale63.getExtensionKeys();
        java.util.Locale.setDefault(category0, locale63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar29 and calendar66", (calendar29.compareTo(calendar66) == 0) == calendar29.equals(calendar66));
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test410");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.StringBuffer stringBuffer4 = null;
        java.lang.StringBuffer stringBuffer5 = fastDateFormat2.format((long) 32772, stringBuffer4);
        java.util.TimeZone timeZone6 = fastDateFormat2.getTimeZone();
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition(16);
        java.util.Date date14 = new java.util.Date();
        int int15 = date14.getDay();
        java.util.Date date16 = new java.util.Date();
        date16.setMinutes((int) '#');
        boolean boolean19 = date14.before(date16);
        boolean boolean20 = parsePosition13.equals((java.lang.Object) boolean19);
        java.lang.Object obj21 = fastDateFormat9.parseObject("eng", parsePosition13);
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition(16);
        int int25 = parsePosition24.getErrorIndex();
        java.util.TimeZone timeZone27 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone27);
        java.lang.String str29 = fastDateFormat28.getPattern();
        boolean boolean30 = parsePosition24.equals((java.lang.Object) fastDateFormat28);
        int int31 = parsePosition24.getErrorIndex();
        java.lang.Object obj32 = fastDateFormat9.parseObject("zh_CN", parsePosition24);
        parsePosition24.setIndex(2022);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance();
        int int36 = calendar35.getWeeksInWeekYear();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone39 = java.util.TimeZone.getDefault();
        boolean boolean40 = timeZone38.hasSameRules(timeZone39);
        boolean boolean41 = timeZone37.hasSameRules(timeZone39);
        calendar35.setTimeZone(timeZone37);
        boolean boolean43 = parsePosition24.equals((java.lang.Object) timeZone37);
        boolean boolean44 = timeZone6.hasSameRules(timeZone37);
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.lang.String str48 = locale47.getDisplayName();
        java.lang.String str49 = locale47.getDisplayCountry();
        java.util.Set<java.lang.String> strSet50 = locale47.getUnicodeLocaleKeys();
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale53 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet54 = locale53.getExtensionKeys();
        java.util.Locale locale56 = new java.util.Locale("de");
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(locale56);
        java.lang.String str58 = locale53.getDisplayVariant(locale56);
        java.lang.String str59 = locale52.getDisplayCountry(locale53);
        java.lang.String str60 = locale47.getDisplayLanguage(locale53);
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(locale53);
        java.lang.String str62 = timeZone37.getDisplayName(false, 0, locale53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar57 and calendar61", (calendar57.compareTo(calendar61) == 0) == calendar57.equals(calendar61));
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test411");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder7 = builder0.setLenient(false);
        java.util.Calendar calendar8 = builder0.build();
        java.util.Calendar.Builder builder12 = builder0.setDate((-1969), 38, 0);
        java.util.Calendar.Builder builder13 = new java.util.Calendar.Builder();
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        boolean boolean16 = locale14.hasExtensions();
        java.lang.String str17 = locale14.getDisplayCountry();
        java.util.Calendar.Builder builder18 = builder13.setLocale(locale14);
        java.util.Calendar.Builder builder22 = builder13.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder24 = builder13.setLenient(false);
        java.util.Calendar.Builder builder28 = builder13.setTimeOfDay(15, 0, 32770);
        java.util.Calendar.Builder builder31 = builder28.setWeekDefinition(7, 7);
        java.util.Calendar.Builder builder33 = builder28.setLenient(true);
        java.util.Calendar.Builder builder38 = builder33.setTimeOfDay(41, 45, 13, 11);
        java.util.Calendar calendar39 = builder33.build();
        java.util.Calendar.Builder builder40 = new java.util.Calendar.Builder();
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = locale41.getLanguage();
        boolean boolean43 = locale41.hasExtensions();
        java.lang.String str44 = locale41.getDisplayCountry();
        java.util.Calendar.Builder builder45 = builder40.setLocale(locale41);
        java.util.Date date47 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder48 = builder45.setInstant(date47);
        java.util.Calendar.Builder builder52 = builder48.setWeekDate((int) (short) -1, (int) '4', 35);
        int[] intArray53 = new int[] {};
        java.util.Calendar.Builder builder54 = builder52.setFields(intArray53);
        java.util.Calendar.Builder builder55 = new java.util.Calendar.Builder();
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.lang.String str57 = locale56.getLanguage();
        boolean boolean58 = locale56.hasExtensions();
        java.lang.String str59 = locale56.getDisplayCountry();
        java.util.Calendar.Builder builder60 = builder55.setLocale(locale56);
        java.util.Locale.Category category61 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category61, locale62);
        java.util.Locale locale64 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category61, locale64);
        java.lang.String str66 = locale64.toLanguageTag();
        java.util.Calendar.Builder builder67 = builder55.setLocale(locale64);
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        boolean boolean71 = timeZone69.hasSameRules(timeZone70);
        java.util.Locale locale72 = java.util.Locale.ROOT;
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone70, locale72);
        java.text.ParsePosition parsePosition75 = new java.text.ParsePosition(16);
        int int76 = parsePosition75.getErrorIndex();
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet78 = locale77.getExtensionKeys();
        boolean boolean79 = parsePosition75.equals((java.lang.Object) locale77);
        java.lang.String str80 = locale77.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat81 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone70, locale77);
        int int82 = timeZone70.getRawOffset();
        java.util.Calendar.Builder builder83 = builder67.setTimeZone(timeZone70);
        java.util.Calendar calendar84 = builder67.build();
        java.util.Calendar.Builder builder88 = builder67.setTimeOfDay(0, 59, 58);
        java.util.Calendar.Builder builder90 = builder88.setLenient(false);
        int[] intArray93 = new int[] { (short) 10, 'u' };
        java.util.Calendar.Builder builder94 = builder88.setFields(intArray93);
        java.util.Calendar.Builder builder95 = builder52.setFields(intArray93);
        java.util.Calendar.Builder builder96 = builder33.setFields(intArray93);
        java.util.Calendar.Builder builder97 = builder0.setFields(intArray93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar8 and calendar84", (calendar8.compareTo(calendar84) == 0) == calendar8.equals(calendar84));
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test412");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale9.getDisplayName();
        java.lang.String str11 = locale9.getDisplayCountry();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone7, locale9);
        calendar12.set(31, (int) (byte) 100, (int) (byte) 10, (int) (short) 100, 9, 8);
        java.util.Date date23 = new java.util.Date((-1), 32772, (int) (short) 10);
        java.lang.String str24 = date23.toLocaleString();
        calendar12.setTime(date23);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale29.getDisplayName();
        java.lang.String str31 = locale29.getDisplayCountry();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone27, locale29);
        int int34 = calendar32.getActualMinimum(2);
        java.util.TimeZone timeZone35 = calendar32.getTimeZone();
        boolean boolean36 = timeZone35.observesDaylightTime();
        calendar12.setTimeZone(timeZone35);
        boolean boolean38 = timeZone5.hasSameRules(timeZone35);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getTimeZone("java.text.ParsePosition[index=16,errorIndex=-1]");
        boolean boolean41 = timeZone5.hasSameRules(timeZone40);
        int int43 = timeZone40.getOffset(1644572159651L);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance();
        int int45 = calendar44.getWeeksInWeekYear();
        java.time.Instant instant46 = calendar44.toInstant();
        int int48 = calendar44.getActualMinimum((int) (byte) 10);
        calendar44.setMinimalDaysInFirstWeek((int) (byte) -1);
        java.util.Locale locale54 = new java.util.Locale("java.text.ParsePosition[index=16,errorIndex=-1]", "tedesco (Germania)", "Jan 10, 4630 12:00:00 AM");
        boolean boolean55 = calendar44.before((java.lang.Object) locale54);
        java.lang.String str56 = timeZone40.getDisplayName(locale54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar32 and calendar44", (calendar32.compareTo(calendar44) == 0) == calendar32.equals(calendar44));
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test413");
        java.util.Locale locale1 = new java.util.Locale("de");
        java.lang.String str2 = locale1.toLanguageTag();
        java.lang.String[] strArray4 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.util.stream.Stream<java.lang.String> strStream7 = strList5.stream();
        boolean boolean9 = strList5.add("hi!");
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getLanguage();
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale10.getDisplayVariant(locale12);
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale10.getDisplayVariant(locale14);
        boolean boolean16 = strList5.contains((java.lang.Object) locale10);
        java.lang.String str17 = locale1.getDisplayScript(locale10);
        java.util.Set<java.lang.Character> charSet18 = locale1.getExtensionKeys();
        java.lang.String str19 = locale1.getISO3Language();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder20.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder23 = builder20.clear();
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder25 = builder23.setLocale(locale24);
        java.lang.String str26 = locale24.getISO3Country();
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.lang.String str28 = locale27.getLanguage();
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale27.getDisplayVariant(locale29);
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.lang.String str32 = locale27.getDisplayVariant(locale31);
        boolean boolean33 = locale31.hasExtensions();
        java.lang.String str34 = locale24.getDisplayLanguage(locale31);
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale36);
        java.lang.String str38 = locale36.getLanguage();
        java.lang.String str39 = locale36.getVariant();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(locale36);
        java.lang.String str41 = locale24.getDisplayScript(locale36);
        java.lang.String str42 = locale1.getDisplayLanguage(locale24);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance();
        boolean boolean45 = calendar44.isWeekDateSupported();
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.lang.String str47 = locale46.getLanguage();
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.lang.String str49 = locale46.getDisplayVariant(locale48);
        boolean boolean50 = calendar44.before((java.lang.Object) str49);
        int int51 = calendar44.getFirstDayOfWeek();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone52.hasSameRules(timeZone53);
        java.util.Calendar calendar55 = java.util.Calendar.getInstance(timeZone52);
        calendar44.setTimeZone(timeZone52);
        java.util.Locale locale58 = new java.util.Locale("");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08", timeZone52, locale58);
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(timeZone52);
        java.util.TimeZone timeZone62 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone63 = java.util.TimeZone.getDefault();
        boolean boolean64 = timeZone62.hasSameRules(timeZone63);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat65 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone63);
        java.util.Locale locale66 = fastDateFormat65.getLocale();
        java.text.ParsePosition parsePosition69 = new java.text.ParsePosition(16);
        int int70 = parsePosition69.getErrorIndex();
        java.util.TimeZone timeZone72 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat73 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone72);
        java.lang.String str74 = fastDateFormat73.getPattern();
        boolean boolean75 = parsePosition69.equals((java.lang.Object) fastDateFormat73);
        int int76 = parsePosition69.getIndex();
        java.lang.String str77 = parsePosition69.toString();
        java.lang.Object obj78 = fastDateFormat65.parseObject("\uc624\uc804\uc2dc\ubd84\ucd08", parsePosition69);
        boolean boolean79 = calendar60.before((java.lang.Object) fastDateFormat65);
        java.util.Locale locale82 = java.util.Locale.forLanguageTag("\u610f\u5927\u5229\u6587");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat83 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5fb7\u6587", locale82);
        boolean boolean84 = calendar60.before((java.lang.Object) locale82);
        java.lang.String str85 = locale24.getDisplayScript(locale82);
        java.lang.String str86 = locale82.getISO3Language();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar40 and calendar44", (calendar40.compareTo(calendar44) == 0) == calendar40.equals(calendar44));
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test414");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale11);
        java.util.Locale.setDefault(category7, locale11);
        java.util.Locale locale16 = java.util.Locale.getDefault(category7);
        java.util.Locale.Builder builder17 = builder6.setLocale(locale16);
        java.util.Locale.Builder builder18 = builder6.clearExtensions();
        java.util.Locale.Builder builder19 = builder6.clearExtensions();
        java.util.Locale.Builder builder20 = builder19.clear();
        java.util.Locale.Category category21 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category21, locale22);
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category21, locale24);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale26);
        java.util.Locale.setDefault(category21, locale26);
        java.util.Locale locale29 = java.util.Locale.getDefault(category21);
        java.util.Locale locale30 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(category21, locale30);
        java.util.Locale locale32 = java.util.Locale.getDefault(category21);
        java.util.Locale locale33 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(category21, locale33);
        java.util.Locale locale37 = new java.util.Locale("Tue Jan 11 09:34:31 UTC 2022", "java.text.ParsePosition[index=100,errorIndex=-1]");
        java.util.Locale.setDefault(locale37);
        java.lang.String str39 = locale37.getDisplayCountry();
        java.util.Set<java.lang.String> strSet40 = locale37.getUnicodeLocaleKeys();
        java.lang.String str41 = locale37.getCountry();
        java.util.Locale locale42 = locale37.stripExtensions();
        java.lang.String str43 = locale33.getDisplayName(locale37);
        java.util.Locale.Builder builder44 = builder19.setLocale(locale33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar14 and calendar27", (calendar14.compareTo(calendar27) == 0) == calendar14.equals(calendar27));
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test415");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int8 = calendar6.getActualMinimum(2);
        java.util.TimeZone timeZone9 = calendar6.getTimeZone();
        java.util.TimeZone timeZone10 = calendar6.getTimeZone();
        calendar6.setLenient(false);
        int int13 = calendar6.getWeeksInWeekYear();
        java.util.Calendar.Builder builder14 = new java.util.Calendar.Builder();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        boolean boolean17 = locale15.hasExtensions();
        java.lang.String str18 = locale15.getDisplayCountry();
        java.util.Calendar.Builder builder19 = builder14.setLocale(locale15);
        java.util.Date date21 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder22 = builder19.setInstant(date21);
        java.util.Calendar.Builder builder26 = builder22.setWeekDate((int) (short) -1, (int) '4', 35);
        int[] intArray27 = new int[] {};
        java.util.Calendar.Builder builder28 = builder26.setFields(intArray27);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.TimeZone.setDefault(timeZone30);
        java.util.Calendar.Builder builder33 = builder28.setTimeZone(timeZone30);
        boolean boolean34 = calendar6.before((java.lang.Object) builder33);
        java.util.Calendar.Builder builder38 = builder33.setDate(43, 5, 23);
        java.util.Calendar.Builder builder42 = builder38.setTimeOfDay(28, (-405), 15);
        java.util.Calendar.Builder builder44 = builder38.setLenient(false);
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone46);
        java.lang.StringBuffer stringBuffer49 = null;
        java.lang.StringBuffer stringBuffer50 = fastDateFormat47.format((long) 32772, stringBuffer49);
        java.lang.StringBuffer stringBuffer52 = null;
        java.lang.StringBuffer stringBuffer53 = fastDateFormat47.format(1644572128302L, stringBuffer52);
        java.util.Date date60 = new java.util.Date(45, (int) (byte) 100, (int) '#', 50, 100, 36);
        date60.setMinutes((int) '4');
        java.lang.String str63 = fastDateFormat47.format(date60);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance();
        calendar64.setMinimalDaysInFirstWeek(15);
        java.util.Date date67 = calendar64.getTime();
        calendar64.roll(0, 44);
        java.lang.String str71 = fastDateFormat47.format(calendar64);
        int int72 = calendar64.getWeekYear();
        int int73 = calendar64.getFirstDayOfWeek();
        java.util.Calendar calendar76 = java.util.Calendar.getInstance();
        int int77 = calendar76.getWeeksInWeekYear();
        java.time.Instant instant78 = calendar76.toInstant();
        int int80 = calendar76.getActualMinimum((int) (byte) 10);
        java.lang.String str81 = calendar76.getCalendarType();
        java.util.Date date82 = new java.util.Date();
        int int83 = date82.getTimezoneOffset();
        int int84 = date82.getMinutes();
        calendar76.setTime(date82);
        calendar76.setLenient(true);
        java.util.TimeZone timeZone88 = calendar76.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat89 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1, 1, timeZone88);
        calendar64.setTimeZone(timeZone88);
        java.util.Calendar.Builder builder91 = builder38.setTimeZone(timeZone88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar6 and calendar64", (calendar6.compareTo(calendar64) == 0) == calendar6.equals(calendar64));
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test416");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        java.util.Locale locale7 = fastDateFormat3.getLocale();
        java.util.TimeZone timeZone8 = fastDateFormat3.getTimeZone();
        java.util.Locale locale11 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String[] strArray14 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.stream.Stream<java.lang.String> strStream17 = strList15.stream();
        boolean boolean19 = strList15.add("hi!");
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = locale20.getLanguage();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale20.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.lang.String str25 = locale20.getDisplayVariant(locale24);
        boolean boolean26 = strList15.contains((java.lang.Object) locale20);
        java.lang.String str27 = locale20.getVariant();
        boolean boolean28 = locale20.hasExtensions();
        java.lang.String str29 = locale12.getDisplayCountry(locale20);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getInstance("d. MMMM yyyy", timeZone8, locale12);
        int int32 = timeZone8.getOffset(1644572218353L);
        java.util.Calendar calendar33 = java.util.Calendar.getInstance();
        boolean boolean34 = calendar33.isWeekDateSupported();
        calendar33.setLenient(true);
        java.text.FieldPosition fieldPosition38 = new java.text.FieldPosition(2022);
        int int39 = fieldPosition38.getField();
        java.text.Format.Field field40 = fieldPosition38.getFieldAttribute();
        boolean boolean41 = calendar33.after((java.lang.Object) fieldPosition38);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone44.hasSameRules(timeZone45);
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.lang.String str48 = locale47.getDisplayName();
        java.lang.String str49 = locale47.getDisplayCountry();
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone45, locale47);
        java.text.ParsePosition parsePosition52 = new java.text.ParsePosition(16);
        int int53 = parsePosition52.getErrorIndex();
        java.util.TimeZone timeZone55 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone55);
        java.lang.String str57 = fastDateFormat56.getPattern();
        boolean boolean58 = parsePosition52.equals((java.lang.Object) fastDateFormat56);
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        boolean boolean60 = parsePosition52.equals((java.lang.Object) locale59);
        java.lang.String str61 = locale47.getDisplayCountry(locale59);
        java.util.Locale.Category category62 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale63 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category62, locale63);
        java.util.Locale locale65 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category62, locale65);
        java.lang.String str67 = locale65.getVariant();
        java.lang.String str68 = locale65.toLanguageTag();
        java.lang.String str69 = locale59.getDisplayName(locale65);
        java.lang.String str70 = locale65.getDisplayScript();
        java.lang.String str71 = locale65.getLanguage();
        java.util.Map<java.lang.String, java.lang.Integer> strMap72 = calendar33.getDisplayNames((int) (byte) 10, (int) (byte) 1, locale65);
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone8, locale65);
        java.lang.String str74 = calendar73.getCalendarType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar33 and calendar50", (calendar33.compareTo(calendar50) == 0) == calendar33.equals(calendar50));
    }
}


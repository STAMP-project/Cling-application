import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest40 {

    public static boolean debug = false;

    @Test
    public void test20001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20001");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = fastDateFormat2.getLocale();
        java.util.TimeZone timeZone7 = fastDateFormat2.getTimeZone();
        int int8 = timeZone7.getRawOffset();
        timeZone7.setRawOffset(43);
        int int12 = timeZone7.getOffset(1644572253337L);
        int int14 = timeZone7.getOffset(1644572170993L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId15 = timeZone7.toZoneId();
// flaky:             org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: franzo?sisch");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 43 + "'", int12 == 43);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 43 + "'", int14 == 43);
    }

    @Test
    public void test20002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20002");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.lang.String str1 = attribute0.toString();
        java.lang.String str2 = attribute0.toString();
        java.util.Calendar.Builder builder3 = new java.util.Calendar.Builder();
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.lang.String str5 = locale4.getLanguage();
        boolean boolean6 = locale4.hasExtensions();
        java.lang.String str7 = locale4.getDisplayCountry();
        java.util.Calendar.Builder builder8 = builder3.setLocale(locale4);
        boolean boolean9 = attribute0.equals((java.lang.Object) builder8);
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        boolean boolean13 = locale11.hasExtensions();
        java.lang.String str14 = locale11.getDisplayCountry();
        java.util.Calendar.Builder builder15 = builder10.setLocale(locale11);
        java.util.Date date17 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder18 = builder15.setInstant(date17);
        java.util.Calendar.Builder builder22 = builder18.setWeekDate((int) (short) -1, (int) '4', 35);
        int[] intArray23 = new int[] {};
        java.util.Calendar.Builder builder24 = builder22.setFields(intArray23);
        java.util.Calendar.Builder builder25 = builder8.setFields(intArray23);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        boolean boolean30 = timeZone26.hasSameRules(timeZone28);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone33, locale35);
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition(16);
        int int39 = parsePosition38.getErrorIndex();
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet41 = locale40.getExtensionKeys();
        boolean boolean42 = parsePosition38.equals((java.lang.Object) locale40);
        java.lang.String str43 = locale40.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone33, locale40);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        timeZone45.setRawOffset((-1));
        boolean boolean48 = timeZone33.hasSameRules(timeZone45);
        java.util.TimeZone timeZone49 = null;
        boolean boolean50 = timeZone45.hasSameRules(timeZone49);
        int int51 = timeZone45.getRawOffset();
        boolean boolean52 = timeZone26.hasSameRules(timeZone45);
        java.lang.String str53 = timeZone45.getID();
        java.util.Calendar.Builder builder54 = builder25.setTimeZone(timeZone45);
        java.util.Calendar.Builder builder59 = builder25.setTimeOfDay((int) (byte) 1, 20, 8, 23);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder62 = builder59.setWeekDefinition(70, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(input_method_segment)" + "'", str1, "java.text.AttributedCharacterIterator$Attribute(input_method_segment)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(input_method_segment)" + "'", str2, "java.text.AttributedCharacterIterator$Attribute(input_method_segment)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh" + "'", str5, "zh");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh" + "'", str12, "zh");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 11 09:34:31 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1644572635003,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"franz\366sisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=55,MILLISECOND=43,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "coreano" + "'", str43, "coreano");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "franz\366sisch" + "'", str53, "franz\366sisch");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test20003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20003");
        java.util.Calendar.Builder builder2 = new java.util.Calendar.Builder();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        boolean boolean5 = locale3.hasExtensions();
        java.lang.String str6 = locale3.getDisplayCountry();
        java.util.Calendar.Builder builder7 = builder2.setLocale(locale3);
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale locale11 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category8, locale11);
        java.lang.String str13 = locale11.toLanguageTag();
        java.util.Calendar.Builder builder14 = builder2.setLocale(locale11);
        java.util.Calendar.Builder builder18 = builder14.setDate((int) (byte) 100, 53, 45);
        java.util.Calendar.Builder builder22 = builder18.setWeekDate(52, (int) '#', 27);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        boolean boolean27 = timeZone23.hasSameRules(timeZone25);
        java.util.Calendar.Builder builder28 = builder18.setTimeZone(timeZone23);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone32 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone32);
        java.lang.String str34 = fastDateFormat33.toString();
        java.lang.String str35 = fastDateFormat33.toString();
        java.util.TimeZone timeZone36 = fastDateFormat33.getTimeZone();
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = locale37.getLanguage();
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale37.getDisplayVariant(locale39);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone36, locale37);
        boolean boolean42 = calendar41.isWeekDateSupported();
        calendar41.set(7, 4, 0);
        java.util.Date date47 = calendar41.getTime();
        java.lang.String str48 = fastDateFormat30.format(calendar41);
        java.util.TimeZone timeZone49 = fastDateFormat30.getTimeZone();
        java.lang.Object obj50 = null;
        boolean boolean51 = fastDateFormat30.equals(obj50);
        java.util.Calendar calendar52 = java.util.Calendar.getInstance();
        int int53 = calendar52.getWeeksInWeekYear();
        java.time.Instant instant54 = calendar52.toInstant();
        int int56 = calendar52.getMinimum(4);
        java.lang.String str57 = fastDateFormat30.format(calendar52);
        java.util.Date date64 = new java.util.Date(45, (int) (byte) 100, (int) '#', 50, 100, 36);
        calendar52.setTime(date64);
        java.util.Locale locale66 = java.util.Locale.FRENCH;
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(locale66);
        java.util.Locale locale68 = java.util.Locale.GERMAN;
        java.util.Locale.Category category69 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale70 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category69, locale70);
        java.lang.String str72 = locale70.getScript();
        java.lang.String str73 = locale68.getDisplayCountry(locale70);
        boolean boolean74 = calendar67.after((java.lang.Object) locale68);
        java.util.Locale.setDefault(locale68);
        java.lang.String str76 = locale68.getLanguage();
        boolean boolean77 = calendar52.after((java.lang.Object) locale68);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat78 = org.apache.commons.lang3.time.FastDateFormat.getInstance("10250-6-11 9:35:43", timeZone23, locale68);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat79 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(34, locale68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 34");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh" + "'", str4, "zh");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh" + "'", str13, "zh");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str34, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str35, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zh" + "'", str38, "zh");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=-61936150564968,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"franz\366sisch\",offset=43,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=55,MILLISECOND=75,ZONE_OFFSET=43,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Sat Apr 30 09:43:55 GMT+00:00 7");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u5e74\u6708\u65e5" + "'", str48, "\u5e74\u6708\u65e5");
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=-522965964040,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"franz\366sisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1953,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=1,DAY_OF_MONTH=6,DAY_OF_YEAR=157,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=40,SECOND=36,MILLISECOND=0,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 53 + "'", int53 == 53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u5e74\u6708\u65e5" + "'", str57, "\u5e74\u6708\u65e5");
// flaky:         org.junit.Assert.assertEquals(date64.toString(), "Sat Jun 06 03:40:36 GMT+00:00 1953");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1644572635033,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"franz\366sisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=55,MILLISECOND=73,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertTrue("'" + category69 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category69.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "de" + "'", str76, "de");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(fastDateFormat78);
    }

    @Test
    public void test20004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20004");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        boolean boolean3 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str5 = fastDateFormat2.format(1644485690024L);
        java.lang.Object obj6 = null;
        boolean boolean7 = fastDateFormat2.equals(obj6);
        java.util.Locale locale8 = fastDateFormat2.getLocale();
        java.lang.String str9 = fastDateFormat2.toString();
        java.lang.String str10 = fastDateFormat2.toString();
        java.lang.String str11 = fastDateFormat2.getPattern();
        java.util.Calendar.Builder builder12 = new java.util.Calendar.Builder();
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        boolean boolean15 = locale13.hasExtensions();
        java.lang.String str16 = locale13.getDisplayCountry();
        java.util.Calendar.Builder builder17 = builder12.setLocale(locale13);
        java.util.Calendar.Builder builder19 = builder12.setLenient(false);
        java.util.Date date21 = new java.util.Date("11 Feb 2022 09:37:02 GMT");
        date21.setMinutes(41);
        java.util.Calendar.Builder builder24 = builder19.setInstant(date21);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5e74\u6708\u65e5");
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition((int) (byte) 10);
        java.lang.Object obj30 = fastDateFormat26.parseObject("UTC12", parsePosition29);
        java.util.TimeZone timeZone32 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone32);
        java.lang.String str34 = fastDateFormat33.toString();
        java.lang.String str35 = fastDateFormat33.toString();
        java.util.TimeZone timeZone36 = fastDateFormat33.getTimeZone();
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = locale37.getLanguage();
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale37.getDisplayVariant(locale39);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone36, locale37);
        boolean boolean42 = calendar41.isWeekDateSupported();
        java.time.Instant instant43 = calendar41.toInstant();
        java.util.Calendar.Builder builder44 = new java.util.Calendar.Builder();
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale45.getLanguage();
        boolean boolean47 = locale45.hasExtensions();
        java.lang.String str48 = locale45.getDisplayCountry();
        java.util.Calendar.Builder builder49 = builder44.setLocale(locale45);
        java.util.Date date51 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder52 = builder49.setInstant(date51);
        java.util.Calendar.Builder builder56 = builder52.setWeekDate((int) (short) -1, (int) '4', 35);
        java.util.TimeZone timeZone58 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone58);
        java.lang.String str60 = fastDateFormat59.toString();
        java.lang.String str61 = fastDateFormat59.toString();
        java.util.TimeZone timeZone62 = fastDateFormat59.getTimeZone();
        java.util.Locale locale63 = java.util.Locale.CHINESE;
        java.lang.String str64 = locale63.getLanguage();
        java.util.Locale locale65 = java.util.Locale.GERMAN;
        java.lang.String str66 = locale63.getDisplayVariant(locale65);
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(timeZone62, locale63);
        java.util.Calendar.Builder builder68 = builder56.setTimeZone(timeZone62);
        calendar41.setTimeZone(timeZone62);
        int int70 = calendar41.getWeekYear();
        java.lang.String str71 = fastDateFormat26.format(calendar41);
        java.util.Date date72 = calendar41.getTime();
        java.util.Calendar.Builder builder73 = builder19.setInstant(date72);
        java.lang.String str74 = fastDateFormat2.format(date72);
        date72.setMinutes((int) (byte) -1);
        date72.setTime(1644485770817L);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GMT+00:009" + "'", str5, "GMT+00:009");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "FastDateFormat[zh]" + "'", str9, "FastDateFormat[zh]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "FastDateFormat[zh]" + "'", str10, "FastDateFormat[zh]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zh" + "'", str11, "zh");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Fri Feb 11 09:41:02 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str34, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str35, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zh" + "'", str38, "zh");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1644572635067,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"franz\366sisch\",offset=43,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=55,MILLISECOND=110,ZONE_OFFSET=43,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zh" + "'", str46, "zh");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(builder49);
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Tue Jan 11 09:34:31 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str60, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str61, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "zh" + "'", str64, "zh");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1644572635067,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"franz\366sisch\",offset=43,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=55,MILLISECOND=110,ZONE_OFFSET=43,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u5e74\u6708\u65e5" + "'", str71, "\u5e74\u6708\u65e5");
        org.junit.Assert.assertNotNull(date72);
// flaky:         org.junit.Assert.assertEquals(date72.toString(), "Thu Feb 10 09:36:10 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(builder73);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "GMT+00:009" + "'", str74, "GMT+00:009");
    }

    @Test
    public void test20005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20005");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int8 = calendar6.getActualMinimum(2);
        java.util.TimeZone timeZone9 = calendar6.getTimeZone();
        java.util.TimeZone timeZone10 = calendar6.getTimeZone();
        java.lang.String str11 = calendar6.getCalendarType();
        java.lang.String str12 = calendar6.getCalendarType();
        java.util.TimeZone timeZone13 = calendar6.getTimeZone();
        java.lang.String str14 = calendar6.getCalendarType();
        java.util.Calendar.Builder builder15 = new java.util.Calendar.Builder();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        boolean boolean18 = locale16.hasExtensions();
        java.lang.String str19 = locale16.getDisplayCountry();
        java.util.Calendar.Builder builder20 = builder15.setLocale(locale16);
        java.util.Calendar.Builder builder24 = builder15.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale26 = new java.util.Locale("de");
        java.lang.String str27 = locale26.toLanguageTag();
        java.lang.String str28 = locale26.getCountry();
        java.util.Calendar.Builder builder29 = builder15.setLocale(locale26);
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale30.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleKeys();
        java.lang.String str36 = locale32.getDisplayCountry(locale34);
        java.lang.String str37 = locale34.getISO3Country();
        java.util.Locale locale40 = new java.util.Locale("9:34:37 AM UTC", "Fri Feb 11 09:34:34 UTC 2022");
        java.text.ParsePosition parsePosition42 = new java.text.ParsePosition(16);
        int int43 = parsePosition42.getErrorIndex();
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone45);
        java.lang.String str47 = fastDateFormat46.getPattern();
        boolean boolean48 = parsePosition42.equals((java.lang.Object) fastDateFormat46);
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        boolean boolean50 = parsePosition42.equals((java.lang.Object) locale49);
        java.lang.String str51 = locale49.getDisplayScript();
        java.lang.String str52 = locale40.getDisplayLanguage(locale49);
        java.lang.String str53 = locale34.getDisplayVariant(locale49);
        java.lang.String str54 = locale26.getDisplayCountry(locale49);
        java.util.Locale locale55 = locale49.stripExtensions();
        boolean boolean56 = calendar6.before((java.lang.Object) locale55);
        int int58 = calendar6.getActualMaximum(0);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Deutsch" + "'", str4, "Deutsch");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572635100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"franz\366sisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=55,MILLISECOND=140,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gregory" + "'", str11, "gregory");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "gregory" + "'", str12, "gregory");
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gregory" + "'", str14, "gregory");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "de" + "'", str27, "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zh" + "'", str31, "zh");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DEU" + "'", str37, "DEU");
        org.junit.Assert.assertEquals(locale40.toString(), "9:34:37 am utc_FRI FEB 11 09:34:34 UTC 2022");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "h:mm:ss a z" + "'", str47, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "9:34:37 am utc" + "'", str52, "9:34:37 am utc");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
    }

    @Test
    public void test20006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20006");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        long long5 = calendar4.getTimeInMillis();
        calendar4.set(2022, (int) 'a', 8);
        int int11 = calendar4.getGreatestMinimum(5);
        java.time.Instant instant12 = calendar4.toInstant();
        int int13 = calendar4.getMinimalDaysInFirstWeek();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        int int15 = calendar14.getWeeksInWeekYear();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        boolean boolean20 = timeZone16.hasSameRules(timeZone18);
        calendar14.setTimeZone(timeZone16);
        calendar14.set((int) (byte) 100, (int) (byte) 1, 0, 6, (-1));
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone28.hasSameRules(timeZone29);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone29, locale31);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone35);
        timeZone35.setRawOffset(3);
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.util.TimeZone timeZone44 = fastDateFormat42.getTimeZone();
        boolean boolean45 = timeZone35.hasSameRules(timeZone44);
        boolean boolean46 = timeZone29.hasSameRules(timeZone44);
        timeZone29.setRawOffset(50);
        calendar14.setTimeZone(timeZone29);
        int int50 = calendar4.compareTo(calendar14);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1896774235131,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"franz\366sisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2030,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=39,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=55,MILLISECOND=171,ZONE_OFFSET=40,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1644572635131L + "'", long5 == 1644572635131L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"franz\366sisch\",offset=50,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=100,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=0,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=6,MINUTE=-1,SECOND=55,MILLISECOND=171,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1644572635131,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"franz\366sisch\",offset=50,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=55,MILLISECOND=171,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "h:mm:ss a z" + "'", str43, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
    }

    @Test
    public void test20007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20007");
        java.util.Date date1 = new java.util.Date("10 Feb 2022 09:35:42 GMT");
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Feb 10 09:35:42 GMT+00:00 2022");
    }

    @Test
    public void test20008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20008");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor8 = strList2.listIterator(0);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        boolean boolean15 = strList11.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor17 = strList11.listIterator(0);
        java.lang.String[] strArray19 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.stream.Stream<java.lang.String> strStream22 = strList20.stream();
        java.util.ListIterator<java.lang.String> strItor23 = strList20.listIterator();
        boolean boolean24 = strList11.removeAll((java.util.Collection<java.lang.String>) strList20);
        boolean boolean25 = strList2.containsAll((java.util.Collection<java.lang.String>) strList11);
        boolean boolean27 = strList11.remove((java.lang.Object) 0.0d);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone28.hasSameRules(timeZone29);
        java.util.Locale locale31 = java.util.Locale.ROOT;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone29, locale31);
        java.lang.String str33 = locale31.getDisplayLanguage();
        java.lang.String str35 = locale31.getUnicodeLocaleType("zh");
        java.util.Locale locale36 = locale31.stripExtensions();
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        boolean boolean38 = strList11.contains((java.lang.Object) strSet37);
        java.lang.Object obj39 = null;
        boolean boolean40 = strList11.contains(obj39);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1644572635203,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"franz\366sisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=55,MILLISECOND=243,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test20009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20009");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        java.lang.String str4 = locale0.getDisplayLanguage();
        java.lang.String str5 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572635228,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"franz\366sisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=55,MILLISECOND=268,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Franz\366sisch" + "'", str4, "Franz\366sisch");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fr" + "'", str5, "fr");
    }

    @Test
    public void test20010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20010");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        timeZone5.setRawOffset((int) (short) 100);
        int int8 = timeZone5.getRawOffset();
        java.util.TimeZone.setDefault(timeZone5);
        int int10 = timeZone5.getDSTSavings();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 100 + "'", int8 == 100);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test20011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20011");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        java.lang.Object obj3 = fastDateFormat2.clone();
        java.util.Calendar.Builder builder4 = new java.util.Calendar.Builder();
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        boolean boolean7 = locale5.hasExtensions();
        java.lang.String str8 = locale5.getDisplayCountry();
        java.util.Calendar.Builder builder9 = builder4.setLocale(locale5);
        java.util.Date date11 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder12 = builder9.setInstant(date11);
        java.lang.String str13 = fastDateFormat2.format(date11);
        java.lang.String str14 = fastDateFormat2.getPattern();
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition(34);
        int int18 = parsePosition17.getIndex();
        java.lang.Object obj19 = fastDateFormat2.parseObject("German", parsePosition17);
        java.lang.String str21 = fastDateFormat2.format(1644572174927L);
        java.util.Locale locale22 = fastDateFormat2.getLocale();
        java.lang.String str24 = fastDateFormat2.format(1644572158252L);
        java.lang.String str25 = fastDateFormat2.toString();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "FastDateFormat[zh]");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh" + "'", str6, "zh");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 11 09:34:31 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(builder12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GMT+00:009" + "'", str13, "GMT+00:009");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 34 + "'", int18 == 34);
        org.junit.Assert.assertNull(obj19);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GMT+00:009" + "'", str21, "GMT+00:009");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "GMT+00:009" + "'", str24, "GMT+00:009");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "FastDateFormat[zh]" + "'", str25, "FastDateFormat[zh]");
    }

    @Test
    public void test20012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20012");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale locale7 = builder6.build();
        java.util.Locale locale8 = builder6.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
    }

    @Test
    public void test20013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20013");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("FR");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        int int3 = calendar2.getWeeksInWeekYear();
        java.time.Instant instant4 = calendar2.toInstant();
        int int6 = calendar2.getMinimum(4);
        calendar2.setFirstDayOfWeek(13);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        boolean boolean15 = strList11.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor17 = strList11.listIterator(0);
        java.lang.String[] strArray19 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.stream.Stream<java.lang.String> strStream22 = strList20.stream();
        java.util.ListIterator<java.lang.String> strItor23 = strList20.listIterator();
        boolean boolean24 = strList11.removeAll((java.util.Collection<java.lang.String>) strList20);
        java.util.Iterator<java.lang.String> strItor25 = strList11.iterator();
        java.util.ListIterator<java.lang.String> strItor26 = strList11.listIterator();
        boolean boolean27 = calendar2.before((java.lang.Object) strList11);
        strList11.clear();
        java.util.Locale.FilteringMode filteringMode29 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strList11, filteringMode29);
        java.util.stream.Stream<java.lang.String> strStream31 = strList11.parallelStream();
        int int32 = strList11.size();
        // The following exception was thrown during execution in test generation
        try {
            strList11.add(166, "9:41:06 AM GMT+00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 166, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644572635293,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=13,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=55,MILLISECOND=393,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + filteringMode29 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode29.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strStream31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test20014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20014");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.add("hi!");
        strList2.clear();
        java.util.Date date8 = new java.util.Date();
        int int9 = date8.getTimezoneOffset();
        long long10 = date8.getTime();
        int int11 = date8.getHours();
        boolean boolean12 = strList2.contains((java.lang.Object) date8);
        java.util.Spliterator<java.lang.String> strSpliterator13 = strList2.spliterator();
        java.lang.String[] strArray15 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.stream.Stream<java.lang.String> strStream18 = strList16.stream();
        boolean boolean20 = strList16.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor22 = strList16.listIterator(0);
        java.lang.String[] strArray24 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.stream.Stream<java.lang.String> strStream27 = strList25.stream();
        boolean boolean29 = strList25.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor31 = strList25.listIterator(0);
        java.lang.String[] strArray33 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        java.util.stream.Stream<java.lang.String> strStream36 = strList34.stream();
        java.util.ListIterator<java.lang.String> strItor37 = strList34.listIterator();
        boolean boolean38 = strList25.removeAll((java.util.Collection<java.lang.String>) strList34);
        boolean boolean39 = strList16.containsAll((java.util.Collection<java.lang.String>) strList25);
        java.util.Spliterator<java.lang.String> strSpliterator40 = strList25.spliterator();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5e74\u6708\u65e5");
        java.text.ParsePosition parsePosition45 = new java.text.ParsePosition(16);
        java.lang.Object obj46 = fastDateFormat42.parseObject("12:00:00 AM UTC", parsePosition45);
        parsePosition45.setErrorIndex((int) 'a');
        boolean boolean49 = strList25.remove((java.lang.Object) parsePosition45);
        java.util.stream.Stream<java.lang.String> strStream50 = strList25.stream();
        int int51 = strList25.size();
        boolean boolean52 = strList2.removeAll((java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.LanguageRange languageRange54 = new java.util.Locale.LanguageRange("CHN");
        double double55 = languageRange54.getWeight();
        java.lang.String str56 = languageRange54.getRange();
        java.lang.String str57 = languageRange54.getRange();
        int int58 = strList25.indexOf((java.lang.Object) languageRange54);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 11 09:43:55 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644572635320L + "'", long10 == 1644572635320L);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSpliterator13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strStream27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strItor31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strSpliterator40);
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strStream50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "chn" + "'", str56, "chn");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "chn" + "'", str57, "chn");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test20015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20015");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone6);
        java.lang.String str8 = fastDateFormat7.toString();
        java.lang.String str9 = fastDateFormat7.toString();
        java.util.TimeZone timeZone10 = fastDateFormat7.getTimeZone();
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale11.getDisplayVariant(locale13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone10, locale11);
        boolean boolean16 = calendar15.isWeekDateSupported();
        calendar15.set(7, 4, 0);
        java.util.Date date21 = calendar15.getTime();
        java.lang.String str22 = fastDateFormat4.format(calendar15);
        java.util.TimeZone timeZone23 = fastDateFormat4.getTimeZone();
        java.util.Locale locale25 = java.util.Locale.ROOT;
        boolean boolean26 = locale25.hasExtensions();
        java.util.Set<java.lang.String> strSet27 = locale25.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale25);
        java.util.Set<java.lang.String> strSet29 = locale25.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 0, timeZone23, locale25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 0, timeZone23);
        boolean boolean32 = timeZone23.observesDaylightTime();
        java.util.Locale.Category category33 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category33, locale34);
        java.util.Locale locale36 = java.util.Locale.getDefault(category33);
        java.util.Locale locale37 = java.util.Locale.getDefault(category33);
        java.util.Locale locale38 = java.util.Locale.getDefault(category33);
        java.util.Calendar.Builder builder39 = new java.util.Calendar.Builder();
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.lang.String str41 = locale40.getLanguage();
        boolean boolean42 = locale40.hasExtensions();
        java.lang.String str43 = locale40.getDisplayCountry();
        java.util.Calendar.Builder builder44 = builder39.setLocale(locale40);
        java.util.Calendar.Builder builder48 = builder39.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale50 = new java.util.Locale("de");
        java.lang.String str51 = locale50.toLanguageTag();
        java.lang.String str52 = locale50.getCountry();
        java.util.Calendar.Builder builder53 = builder39.setLocale(locale50);
        java.lang.String str54 = locale50.getISO3Language();
        java.util.Locale.setDefault(category33, locale50);
        java.util.Locale locale56 = java.util.Locale.getDefault(category33);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(11, timeZone23, locale56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 11");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str8, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str9, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh" + "'", str12, "zh");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-61936150564645,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=55,MILLISECOND=455,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Sat Apr 30 09:43:55 GMT+00:00 7");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "30. April 0007" + "'", str22, "30. April 0007");
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category33.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zh" + "'", str41, "zh");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "de" + "'", str51, "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "deu" + "'", str54, "deu");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
    }

    @Test
    public void test20016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20016");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone4 = fastDateFormat2.getTimeZone();
        java.lang.String str6 = fastDateFormat2.format(1644572243852L);
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition(32770);
        int int10 = parsePosition9.getErrorIndex();
        parsePosition9.setErrorIndex(101);
        parsePosition9.setIndex(100061);
        java.lang.Object obj15 = fastDateFormat2.parseObject("\uc624\uc804\uc2dc\ubd84\ucd08", parsePosition9);
        java.util.Locale locale16 = fastDateFormat2.getLocale();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "h:mm:ss a z" + "'", str3, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "9:37:23 AM UTC" + "'", str6, "9:37:23 AM UTC");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_US");
    }

    @Test
    public void test20017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20017");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5e74\u6708\u65e5");
        int int2 = fastDateFormat1.getMaxLengthEstimate();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.Locale locale5 = java.util.Locale.PRC;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone4, locale5);
        boolean boolean7 = fastDateFormat1.equals((java.lang.Object) locale5);
        java.util.Locale locale8 = fastDateFormat1.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = fastDateFormat1.parseObject("chinois");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
    }

    @Test
    public void test20018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20018");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        java.lang.String str3 = locale1.getLanguage();
        java.lang.String str4 = locale1.getVariant();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale1);
        calendar5.setLenient(false);
        int int8 = calendar5.getMinimalDaysInFirstWeek();
        calendar5.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = calendar5.getLeastMaximum(32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh" + "'", str3, "zh");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644572635436,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=55,MILLISECOND=536,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test20019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20019");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.time.Instant instant2 = calendar1.toInstant();
        calendar1.set(14, (int) (byte) 0, 52, 3, 56, 47);
        boolean boolean10 = calendar1.isWeekDateSupported();
        calendar1.add(6, 2);
        long long14 = calendar1.getTimeInMillis();
        boolean boolean15 = calendar1.isWeekDateSupported();
        calendar1.setTimeInMillis(1644572267698L);
        boolean boolean18 = calendar1.isWeekDateSupported();
        int int20 = calendar1.getMinimum(0);
        boolean boolean21 = calendar1.isWeekDateSupported();
        calendar1.setFirstDayOfWeek(19);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572267698,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=19,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=47,MILLISECOND=798,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61720948992535L) + "'", long14 == (-61720948992535L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test20020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20020");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale8.getDisplayCountry();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale8);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale12.getDisplayLanguage(locale13);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale19);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone25);
        java.util.Locale locale28 = fastDateFormat27.getLocale();
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale30.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.lang.String str35 = locale30.getDisplayVariant(locale34);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone42);
        java.util.Locale locale45 = fastDateFormat44.getLocale();
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone49);
        java.util.Locale locale52 = fastDateFormat51.getLocale();
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale54 = java.util.Locale.UK;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale8, locale12, locale16, locale19, locale21, locale22, locale28, locale29, locale34, locale36, locale37, locale38, locale39, locale45, locale46, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale locale58 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList56);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap59);
        java.lang.String[] strArray66 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022", "FastDateFormat[h:mm:ss a z]", "zh", "java.text.ParsePosition[index=16,errorIndex=-1]", "de" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        java.lang.Object[] objArray69 = strList67.toArray();
        strList67.clear();
        java.lang.String[] strArray72 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        java.util.stream.Stream<java.lang.String> strStream75 = strList73.stream();
        strList73.clear();
        java.util.Spliterator<java.lang.String> strSpliterator77 = strList73.spliterator();
        boolean boolean78 = strList67.containsAll((java.util.Collection<java.lang.String>) strList73);
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList73);
        java.lang.String[] strArray85 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList86 = new java.util.ArrayList<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList86, strArray85);
        java.util.stream.Stream<java.lang.String> strStream88 = strList86.stream();
        java.util.Locale locale89 = java.util.Locale.JAPANESE;
        int int90 = strList86.lastIndexOf((java.lang.Object) locale89);
        java.util.stream.Stream<java.lang.String> strStream91 = strList86.stream();
        java.util.List<java.lang.String> strList92 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList86);
        int int94 = strList92.indexOf((java.lang.Object) "Fri Feb 11 09:35:03 GMT+00:00 1916");
        boolean boolean95 = strList92.isEmpty();
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644572635484,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=55,MILLISECOND=584,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str15, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zh" + "'", str31, "zh");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strStream75);
        org.junit.Assert.assertNotNull(strSpliterator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(strStream88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(strStream91);
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test20021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20021");
        java.lang.String[] strArray15 = new java.lang.String[] { "Vereinigtes K\366nigreich", "tedesco (Germania)", "Jan 10, 4630 12:00:00 AM", "Chinese", "", "Tue Jan 11 09:34:31 UTC 2022", "", "Greenwich Mean Time", "Coordinated Universal Time", "", "Greenwich Mean Time", "h:mm:ss a z", "", "coreano", "Greenwich Mean Time" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.stream.Stream<java.lang.String> strStream22 = strList20.stream();
        java.util.ListIterator<java.lang.String> strItor23 = strList20.listIterator();
        int int24 = strList16.lastIndexOf((java.lang.Object) strItor23);
        java.lang.String[] strArray26 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        java.util.stream.Stream<java.lang.String> strStream29 = strList27.stream();
        boolean boolean31 = strList27.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor33 = strList27.listIterator(0);
        java.lang.String[] strArray35 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.util.stream.Stream<java.lang.String> strStream38 = strList36.stream();
        boolean boolean40 = strList36.add("hi!");
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = locale41.getLanguage();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale41.getDisplayVariant(locale43);
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        java.lang.String str46 = locale41.getDisplayVariant(locale45);
        boolean boolean47 = strList36.contains((java.lang.Object) locale41);
        boolean boolean48 = strList27.removeAll((java.util.Collection<java.lang.String>) strList36);
        java.lang.String[] strArray50 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.util.stream.Stream<java.lang.String> strStream53 = strList51.stream();
        strList51.clear();
        boolean boolean55 = strList51.isEmpty();
        boolean boolean56 = strList51.isEmpty();
        java.util.ListIterator<java.lang.String> strItor57 = strList51.listIterator();
        boolean boolean58 = strList27.retainAll((java.util.Collection<java.lang.String>) strList51);
        boolean boolean59 = strList16.containsAll((java.util.Collection<java.lang.String>) strList27);
        java.util.Spliterator<java.lang.String> strSpliterator60 = strList16.spliterator();
        java.util.stream.Stream<java.lang.String> strStream61 = strList16.stream();
        java.util.Locale locale65 = new java.util.Locale("Freitag, 11. Februar 2022", "9:37:36 AM UTC", "11 Feb 2022 09:37:32 GMT");
        int int66 = strList16.indexOf((java.lang.Object) "11 Feb 2022 09:37:32 GMT");
        java.util.function.UnaryOperator<java.lang.String> strUnaryOperator67 = null;
        // The following exception was thrown during execution in test generation
        try {
            strList16.replaceAll(strUnaryOperator67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strStream38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zh" + "'", str42, "zh");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strStream53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strSpliterator60);
        org.junit.Assert.assertNotNull(strStream61);
        org.junit.Assert.assertEquals(locale65.toString(), "freitag, 11. februar 2022_9:37:36 AM UTC_11 Feb 2022 09:37:32 GMT");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test20022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20022");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("java.util.GregorianCalendar[time=1644572431900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=40,SECOND=31,MILLISECOND=900,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test20023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20023");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getWeeksInWeekYear();
        calendar0.setMinimalDaysInFirstWeek(1910);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance();
        int int5 = calendar4.getWeeksInWeekYear();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        boolean boolean10 = timeZone6.hasSameRules(timeZone8);
        calendar4.setTimeZone(timeZone6);
        calendar4.setMinimalDaysInFirstWeek((int) (byte) 10);
        calendar4.set(54, 41, 14, (int) ' ', 45, (int) (short) -1);
        calendar4.setMinimalDaysInFirstWeek(30);
        boolean boolean23 = calendar0.before((java.lang.Object) calendar4);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5e74\u6708\u65e5");
        java.lang.String str27 = fastDateFormat25.format(1644572104526L);
        java.util.Date date29 = new java.util.Date(1644572120674L);
        java.lang.String str30 = fastDateFormat25.format(date29);
        calendar4.setTime(date29);
        date29.setHours(780);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572635576,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=1910,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=55,MILLISECOND=676,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 52 + "'", int1 == 52);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572120674,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=30,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=35,SECOND=20,MILLISECOND=774,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u5e74\u6708\u65e5" + "'", str27, "\u5e74\u6708\u65e5");
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Tue Mar 15 12:35:20 GMT+00:00 2022");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u5e74\u6708\u65e5" + "'", str30, "\u5e74\u6708\u65e5");
    }

    @Test
    public void test20024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20024");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        strList2.clear();
        java.lang.String[] strArray7 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.stream.Stream<java.lang.String> strStream10 = strList8.stream();
        boolean boolean11 = strList2.containsAll((java.util.Collection<java.lang.String>) strList8);
        java.util.Spliterator<java.lang.String> strSpliterator12 = strList2.spliterator();
        java.util.Date date16 = new java.util.Date((-1), 32772, (int) (short) 10);
        java.lang.String str17 = date16.toLocaleString();
        boolean boolean18 = strList2.contains((java.lang.Object) date16);
        java.lang.Comparable[][][] comparableArray20 = new java.lang.Comparable[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][][] strComparableArray21 = (java.lang.Comparable<java.lang.String>[][][]) comparableArray20;
        java.lang.Comparable<java.lang.String>[][][] strComparableArray22 = strList2.toArray(strComparableArray21);
        java.util.Spliterator<java.lang.String> strSpliterator23 = strList2.spliterator();
        boolean boolean25 = strList2.add("9. November 1916");
        java.util.Spliterator<java.lang.String> strSpliterator26 = strList2.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator27 = strList2.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator28 = strList2.spliterator();
        java.util.stream.Stream<java.lang.String> strStream29 = strList2.stream();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSpliterator12);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Sun Jan 10 00:00:00 GMT+00:00 4630");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "10.01.4630 00:00:00" + "'", str17, "10.01.4630 00:00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(comparableArray20);
        org.junit.Assert.assertNotNull(strComparableArray21);
        org.junit.Assert.assertNotNull(strComparableArray22);
        org.junit.Assert.assertNotNull(strSpliterator23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strSpliterator26);
        org.junit.Assert.assertNotNull(strSpliterator27);
        org.junit.Assert.assertNotNull(strSpliterator28);
        org.junit.Assert.assertNotNull(strStream29);
    }

    @Test
    public void test20025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20025");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = locale6.getLanguage();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale6.getDisplayVariant(locale8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone5, locale6);
        boolean boolean11 = calendar10.isWeekDateSupported();
        calendar10.roll(5, 53);
        calendar10.clear();
        calendar10.setFirstDayOfWeek(9);
        java.lang.String str18 = calendar10.toString();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh" + "'", str7, "zh");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=9,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=9,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]" + "'", str18, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=9,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test20026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20026");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Wed Dec 31 23:58:59 GMT 1969", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=weddec3123:58:59gmt1969");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test20027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20027");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("it");
        java.util.Locale.Builder builder7 = builder2.setExtension('x', "de");
        java.util.Locale locale8 = builder2.build();
        java.util.Locale locale9 = java.util.Locale.UK;
        java.lang.String str10 = locale9.toLanguageTag();
        java.util.Locale.Builder builder11 = builder2.setLocale(locale9);
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("ko");
        java.util.Locale.Builder builder14 = builder11.clear();
        java.util.Locale locale15 = builder11.build();
        java.util.Locale.Builder builder16 = builder11.clear();
        java.util.Locale locale17 = builder16.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it__#x-de");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "en-GB" + "'", str10, "en-GB");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
    }

    @Test
    public void test20028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20028");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder7 = builder4.setExtension('x', "GMT4");
        java.util.Locale.Builder builder9 = builder7.addUnicodeLocaleAttribute("Deutsch");
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale10.getDisplayLanguage(locale11);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.lang.String str18 = locale11.getDisplayLanguage(locale14);
        java.lang.String str19 = locale11.getCountry();
        java.lang.String str20 = locale11.getISO3Country();
        java.util.Locale.Builder builder21 = builder7.setLocale(locale11);
        java.util.Locale locale25 = new java.util.Locale("Ora media di Greenwich", "31 May 2022 09:35:03 GMT", "2/11/22 9:35 AM");
        java.util.Locale.setDefault(locale25);
        java.lang.String str27 = locale11.getDisplayLanguage(locale25);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh" + "'", str12, "zh");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str13, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u4e2d\u6587" + "'", str18, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals(locale25.toString(), "ora media di greenwich_31 MAY 2022 09:35:03 GMT_2/11/22 9:35 AM");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Chinese" + "'", str27, "Chinese");
    }

    @Test
    public void test20029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20029");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale11 = new java.util.Locale("de");
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale11.getCountry();
        java.util.Calendar.Builder builder14 = builder0.setLocale(locale11);
        java.util.Calendar calendar15 = builder14.build();
        int[] intArray16 = new int[] {};
        java.util.Calendar.Builder builder17 = builder14.setFields(intArray16);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("04.02.1919 02:07:00");
        java.lang.String str20 = locale19.getDisplayName();
        java.util.Calendar.Builder builder21 = builder17.setLocale(locale19);
        java.util.Calendar.Builder builder23 = builder21.setLenient(true);
        java.util.Calendar calendar24 = builder23.build();
        java.time.Instant instant25 = calendar24.toInstant();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "de" + "'", str12, "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-62130240000100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=6,DAY_OF_YEAR=65,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-62131449600100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=51,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant25);
    }

    @Test
    public void test20030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20030");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale11);
        java.util.Locale.setDefault(category7, locale11);
        java.util.Locale locale16 = java.util.Locale.getDefault(category7);
        java.util.Locale.Builder builder17 = builder6.setLocale(locale16);
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder17.setLanguageTag("2 Nov 1904 23:59:59 GMT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2 Nov 1904 23:59:59 GMT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "German" + "'", str12, "German");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572635690,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=55,MILLISECOND=790,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test20031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20031");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("11.02.2022 09:40:38", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=11.02.202209:40:38");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test20032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20032");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder7 = builder0.setLenient(false);
        java.util.Calendar calendar8 = builder0.build();
        java.util.Calendar.Builder builder12 = builder0.setDate(31, 5, 55);
        java.util.Calendar.Builder builder15 = builder12.set((int) (short) 10, 5);
        java.util.Calendar.Builder builder19 = builder12.setDate(1969, 4, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder21 = builder19.setCalendarType("\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: ??09?37?07? GMT+00:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test20033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20033");
        java.util.TimeZone timeZone1 = null;
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.Locale locale4 = java.util.Locale.PRC;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone3, locale4);
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getTimezoneOffset();
        date6.setMonth(0);
        int int10 = date6.getSeconds();
        int int11 = date6.getDay();
        java.text.AttributedCharacterIterator attributedCharacterIterator12 = fastDateFormat5.formatToCharacterIterator((java.lang.Object) date6);
        java.lang.String str13 = fastDateFormat5.getPattern();
        java.util.Locale locale14 = fastDateFormat5.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 10, timeZone1, locale14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat5);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue Jan 11 09:43:55 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 55 + "'", int10 == 55);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(attributedCharacterIterator12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
    }

    @Test
    public void test20034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20034");
        java.util.Locale locale3 = new java.util.Locale("2022-2-11 9:35:30", "00:00:00 o'clock GMT+00:00", "25 Jan 3925 23:59:59 GMT");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale3.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for 00:00:00 O'CLOCK GMT+00:00");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "2022-2-11 9:35:30_00:00:00 O'CLOCK GMT+00:00_25 Jan 3925 23:59:59 GMT");
    }

    @Test
    public void test20035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20035");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str1 = attribute0.toString();
        java.util.Date date2 = new java.util.Date();
        int int3 = date2.getTimezoneOffset();
        long long4 = date2.getTime();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getSeconds();
        long long7 = date5.getTime();
        date5.setTime((long) ' ');
        int int10 = date5.getTimezoneOffset();
        boolean boolean11 = date2.before(date5);
        boolean boolean12 = attribute0.equals((java.lang.Object) date2);
        boolean boolean14 = attribute0.equals((java.lang.Object) "\u5e74\u6708\u65e5");
        boolean boolean16 = attribute0.equals((java.lang.Object) true);
        java.lang.String[] strArray52 = new java.lang.String[] { "eng", "Jan 10, 4630 12:00:00 AM", "2022-2-11 9:34:42", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "java.util.GregorianCalendar[time=1644572075684,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=15,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=684,ZONE_OFFSET=0,DST_OFFSET=0]", "zh", "java.text.ParsePosition[index=100,errorIndex=-1]", "9:34:41 AM UTC", "Greenwich Mean Time", "Chinese", "\uc624\uc804\uc2dc\ubd84\ucd08", "9:34:37 AM UTC", "9:34:38 AM UTC", "9:34:41 AM UTC", "9:34:37 AM UTC", "Chinese", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "\u4e2d\u6587", "FastDateFormat[h:mm:ss a z]", "Jan 10, 4630 12:00:00 AM", "9:34:41 AM UTC", "it", "\u610f\u5927\u5229\u6587", "Tue Jan 11 09:34:31 UTC 2022", "9:34:38 AM UTC", "", "de", "tedesco", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "\uc624\uc804\uc2dc\ubd84\ucd08", "12:00:00 AM UTC", "eng", "\uc624\uc804\uc2dc\ubd84\ucd08", "\u5e74\u6708\u65e5", "\u610f\u5927\u5229\u6587" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        java.lang.String str56 = strList53.remove(0);
        boolean boolean57 = strList53.isEmpty();
        boolean boolean58 = attribute0.equals((java.lang.Object) strList53);
        int int60 = strList53.indexOf((java.lang.Object) 1644572192398L);
        java.util.stream.Stream<java.lang.String> strStream61 = strList53.stream();
        int int62 = strList53.size();
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str1, "java.text.AttributedCharacterIterator$Attribute(language)");
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Fri Feb 11 09:43:55 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1644572635794L + "'", long4 == 1644572635794L);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 55 + "'", int6 == 55);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1644572635794L + "'", long7 == 1644572635794L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "eng" + "'", str56, "eng");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(strStream61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 34 + "'", int62 == 34);
    }

    @Test
    public void test20036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20036");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5e74\u6708\u65e5");
        int int2 = fastDateFormat1.getMaxLengthEstimate();
        java.text.ParsePosition parsePosition5 = new java.text.ParsePosition(38);
        java.lang.Object obj6 = fastDateFormat1.parseObject("Chinesisch", parsePosition5);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        int int8 = calendar7.getWeeksInWeekYear();
        java.time.Instant instant9 = calendar7.toInstant();
        int int11 = calendar7.getActualMinimum((int) (byte) 10);
        java.lang.String str12 = calendar7.getCalendarType();
        java.util.Date date13 = new java.util.Date();
        int int14 = date13.getTimezoneOffset();
        int int15 = date13.getMinutes();
        calendar7.setTime(date13);
        java.text.AttributedCharacterIterator attributedCharacterIterator17 = fastDateFormat1.formatToCharacterIterator((java.lang.Object) calendar7);
        java.util.Locale locale18 = fastDateFormat1.getLocale();
        java.lang.Object obj19 = locale18.clone();
        org.junit.Assert.assertNotNull(fastDateFormat1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1644572635814,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=55,MILLISECOND=914,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "gregory" + "'", str12, "gregory");
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Fri Feb 11 09:43:55 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 43 + "'", int15 == 43);
        org.junit.Assert.assertNotNull(attributedCharacterIterator17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ora media di greenwich_31 MAY 2022 09:35:03 GMT_2/11/22 9:35 AM");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "ora media di greenwich_31 MAY 2022 09:35:03 GMT_2/11/22 9:35 AM");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "ora media di greenwich_31 MAY 2022 09:35:03 GMT_2/11/22 9:35 AM");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "ora media di greenwich_31 MAY 2022 09:35:03 GMT_2/11/22 9:35 AM");
    }

    @Test
    public void test20037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20037");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale5);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale8 = java.util.Locale.getDefault(category0);
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(category0, locale9);
        java.text.AttributedCharacterIterator.Attribute attribute11 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str12 = attribute11.toString();
        java.util.Date date13 = new java.util.Date();
        int int14 = date13.getTimezoneOffset();
        long long15 = date13.getTime();
        java.util.Date date16 = new java.util.Date();
        int int17 = date16.getSeconds();
        long long18 = date16.getTime();
        date16.setTime((long) ' ');
        int int21 = date16.getTimezoneOffset();
        boolean boolean22 = date13.before(date16);
        boolean boolean23 = attribute11.equals((java.lang.Object) date13);
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category24, locale25);
        java.util.Locale locale27 = java.util.Locale.getDefault(category24);
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String[] strArray34 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.util.stream.Stream<java.lang.String> strStream37 = strList35.stream();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        int int39 = strList35.lastIndexOf((java.lang.Object) locale38);
        java.lang.String str40 = locale27.getDisplayVariant(locale38);
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str43 = locale27.getDisplayVariant(locale41);
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.lang.String str45 = locale44.getLanguage();
        boolean boolean46 = locale44.hasExtensions();
        java.lang.String str47 = locale44.getDisplayScript();
        java.lang.String str48 = locale41.getDisplayCountry(locale44);
        boolean boolean49 = attribute11.equals((java.lang.Object) locale41);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale.Category category51 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category51, locale52);
        java.lang.String str54 = locale52.getScript();
        java.lang.String str55 = locale50.getDisplayCountry(locale52);
        java.lang.String str56 = locale50.getISO3Country();
        java.lang.String str57 = locale41.getDisplayVariant(locale50);
        java.util.Locale.setDefault(category0, locale41);
        java.util.Locale.Builder builder59 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder61 = builder59.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder62 = builder59.clear();
        java.util.Locale.Builder builder63 = builder62.clear();
        java.util.Locale.Builder builder66 = builder63.setExtension('x', "GMT4");
        java.util.Locale.Builder builder67 = builder63.clear();
        java.util.Locale locale68 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder69 = builder63.setLocale(locale68);
        java.util.Locale.Builder builder70 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder72 = builder70.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder73 = builder70.clear();
        java.util.Locale locale74 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder75 = builder73.setLocale(locale74);
        java.lang.String str76 = locale74.getISO3Country();
        java.util.Locale locale77 = locale74.stripExtensions();
        java.lang.String str78 = locale68.getDisplayCountry(locale74);
        java.util.Locale.setDefault(category0, locale68);
        java.util.Locale locale80 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ora media di greenwich_31 MAY 2022 09:35:03 GMT_2/11/22 9:35 AM");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572635836,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=55,MILLISECOND=936,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(attribute11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str12, "java.text.AttributedCharacterIterator$Attribute(language)");
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Fri Feb 11 09:43:55 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644572635836L + "'", long15 == 1644572635836L);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 55 + "'", int17 == 55);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1644572635836L + "'", long18 == 1644572635836L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zh" + "'", str42, "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "zh" + "'", str45, "zh");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertTrue("'" + category51 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category51.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "CHN" + "'", str76, "CHN");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\u5fb7\u56fd" + "'", str78, "\u5fb7\u56fd");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "de_DE");
    }

    @Test
    public void test20038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20038");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("German", strMap1);
        org.junit.Assert.assertNotNull(languageRangeList2);
    }

    @Test
    public void test20039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20039");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        boolean boolean3 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.Object obj4 = fastDateFormat2.clone();
        java.lang.Object obj5 = fastDateFormat2.clone();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7, locale9);
        long long11 = calendar10.getTimeInMillis();
        calendar10.set(2022, (int) 'a', 8);
        calendar10.roll(9, true);
        int int19 = calendar10.getWeeksInWeekYear();
        calendar10.setTimeInMillis(1644572091641L);
        java.lang.String str22 = fastDateFormat2.format(calendar10);
        boolean boolean23 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.util.Locale locale24 = fastDateFormat2.getLocale();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "FastDateFormat[zh]");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "FastDateFormat[zh]");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572091641,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=51,MILLISECOND=741,ZONE_OFFSET=100,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1644572635919L + "'", long11 == 1644572635919L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GMT+00:009" + "'", str22, "GMT+00:009");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
    }

    @Test
    public void test20040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20040");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        long long5 = calendar4.getTimeInMillis();
        calendar4.set(2022, (int) 'a', 8);
        calendar4.roll(9, true);
        boolean boolean13 = calendar4.isWeekDateSupported();
        calendar4.setWeekDate((int) 'a', 31, (int) (byte) 1);
        java.lang.String str18 = calendar4.getCalendarType();
        long long19 = calendar4.getTimeInMillis();
        java.util.TimeZone timeZone20 = calendar4.getTimeZone();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=-59088017764061,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=97,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=6,DAY_OF_MONTH=30,DAY_OF_YEAR=211,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=43,SECOND=56,MILLISECOND=39,ZONE_OFFSET=100,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1644572635939L + "'", long5 == 1644572635939L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "gregory" + "'", str18, "gregory");
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-59088017764061L) + "'", long19 == (-59088017764061L));
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test20041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20041");
        java.lang.String[] strArray5 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.stream.Stream<java.lang.String> strStream8 = strList6.stream();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        int int10 = strList6.lastIndexOf((java.lang.Object) locale9);
        java.util.stream.Stream<java.lang.String> strStream11 = strList6.stream();
        java.util.Iterator<java.lang.String> strItor12 = strList6.iterator();
        java.util.ListIterator<java.lang.String> strItor13 = strList6.listIterator();
        java.lang.String[] strArray15 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.stream.Stream<java.lang.String> strStream18 = strList16.stream();
        boolean boolean20 = strList16.add("hi!");
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.lang.String str22 = locale21.getLanguage();
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale21.getDisplayVariant(locale23);
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.lang.String str26 = locale21.getDisplayVariant(locale25);
        boolean boolean27 = strList16.contains((java.lang.Object) locale21);
        java.lang.Object[] objArray28 = strList16.toArray();
        boolean boolean29 = strList6.addAll((java.util.Collection<java.lang.String>) strList16);
        int int30 = strList6.size();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh" + "'", str22, "zh");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[Tue Jan 11 09:34:31 UTC 2022, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[Tue Jan 11 09:34:31 UTC 2022, hi!]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 7 + "'", int30 == 7);
    }

    @Test
    public void test20042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20042");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("9:41:34 AM GMT+00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=9:41:34 am gmt+00:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test20043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20043");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.time.Instant instant2 = calendar1.toInstant();
        java.util.Date date3 = java.util.Date.from(instant2);
        date3.setDate(0);
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getTimezoneOffset();
        long long8 = date6.getTime();
        java.util.Date date9 = new java.util.Date();
        int int10 = date9.getSeconds();
        long long11 = date9.getTime();
        date9.setTime((long) ' ');
        int int14 = date9.getTimezoneOffset();
        boolean boolean15 = date6.before(date9);
        java.util.Date date19 = new java.util.Date(11, 11, 3);
        boolean boolean20 = date6.before(date19);
        java.util.Date date21 = new java.util.Date();
        int int22 = date21.getDay();
        java.util.Date date23 = new java.util.Date();
        date23.setMinutes((int) '#');
        boolean boolean26 = date21.before(date23);
        int int27 = date23.getHours();
        boolean boolean28 = date6.before(date23);
        int int29 = date23.getMonth();
        int int30 = date23.getDate();
        int int31 = date23.getDate();
        boolean boolean32 = date3.before(date23);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572636001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=56,MILLISECOND=101,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Jan 31 09:43:56 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Feb 11 09:43:56 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1644572636001L + "'", long8 == 1644572636001L);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 56 + "'", int10 == 56);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1644572636001L + "'", long11 == 1644572636001L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Sun Dec 03 00:00:00 GMT+00:00 1911");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Fri Feb 11 09:43:56 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Fri Feb 11 09:35:56 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 11 + "'", int30 == 11);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 11 + "'", int31 == 11);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test20044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20044");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        java.lang.String str11 = locale8.getDisplayLanguage(locale9);
        java.lang.String str12 = locale6.getDisplayLanguage(locale8);
        java.util.Locale.Builder builder13 = builder3.setLocale(locale8);
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder16 = builder13.setLocale(locale14);
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder17.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder20 = builder17.clear();
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        java.util.Locale.Builder builder23 = builder22.clearExtensions();
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getDisplayName();
        java.lang.String str30 = locale28.getDisplayCountry();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone26, locale28);
        java.util.Locale.setDefault(category24, locale28);
        java.util.Locale locale33 = java.util.Locale.getDefault(category24);
        java.util.Locale.Builder builder34 = builder23.setLocale(locale33);
        java.util.Locale.Builder builder35 = builder23.clearExtensions();
        java.util.Locale.Category category36 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category36, locale37);
        java.lang.String str39 = locale37.getDisplayName();
        java.util.Locale.Builder builder40 = builder23.setLocale(locale37);
        java.util.Locale locale41 = locale37.stripExtensions();
        boolean boolean42 = locale41.hasExtensions();
        java.util.Locale.Builder builder43 = builder13.setLocale(locale41);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder45 = builder43.addUnicodeLocaleAttribute("10 Feb 2022 09:39:46 GMT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 10 Feb 2022 09:39:46 GMT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh" + "'", str10, "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str11, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "coreano" + "'", str12, "coreano");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tedesco" + "'", str29, "tedesco");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644572636021,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=56,MILLISECOND=121,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + category36 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category36.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "italiano" + "'", str39, "italiano");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test20045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20045");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        java.lang.String str3 = locale0.getDisplayLanguage(locale1);
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.lang.String str5 = locale4.getLanguage();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale4.getDisplayVariant(locale6);
        java.lang.String str8 = locale1.getDisplayLanguage(locale4);
        java.util.Set<java.lang.Character> charSet9 = locale1.getExtensionKeys();
        java.util.Locale locale12 = new java.util.Locale("9:34:38 AM UTC", "9:34:37 AM UTC");
        java.lang.String str13 = locale12.getDisplayCountry();
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleKeys();
        java.util.Calendar.Builder builder15 = new java.util.Calendar.Builder();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        boolean boolean18 = locale16.hasExtensions();
        java.lang.String str19 = locale16.getDisplayCountry();
        java.util.Calendar.Builder builder20 = builder15.setLocale(locale16);
        java.util.Calendar.Builder builder22 = builder15.setLenient(false);
        java.util.Date date24 = new java.util.Date("11 Feb 2022 09:37:02 GMT");
        date24.setMinutes(41);
        java.util.Calendar.Builder builder27 = builder22.setInstant(date24);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.lang.String str29 = locale28.getDisplayName();
        java.util.Calendar.Builder builder30 = builder22.setLocale(locale28);
        java.lang.String str31 = locale12.getDisplayCountry(locale28);
        java.lang.String str32 = locale1.getDisplayLanguage(locale12);
        java.util.Set<java.lang.String> strSet33 = locale12.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str3, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh" + "'", str5, "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u4e2d\u6587" + "'", str8, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertEquals(locale12.toString(), "9:34:38 am utc_9:34:37 AM UTC");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9:34:37 AM UTC" + "'", str13, "9:34:37 AM UTC");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Fri Feb 11 09:41:02 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "9:34:37 AM UTC" + "'", str31, "9:34:37 AM UTC");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese" + "'", str32, "Chinese");
        org.junit.Assert.assertNotNull(strSet33);
    }

    @Test
    public void test20046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20046");
        java.util.Date date3 = new java.util.Date((-1), 32772, (int) (short) 10);
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getTimezoneOffset();
        long long6 = date4.getTime();
        boolean boolean7 = date3.before(date4);
        java.lang.String str8 = date3.toGMTString();
        date3.setTime(1644485838602L);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Thu Feb 10 09:37:18 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Fri Feb 11 09:43:56 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1644572636059L + "'", long6 == 1644572636059L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "9 Jan 4630 23:59:59 GMT" + "'", str8, "9 Jan 4630 23:59:59 GMT");
    }

    @Test
    public void test20047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20047");
        java.lang.String[] strArray35 = new java.lang.String[] { "eng", "Jan 10, 4630 12:00:00 AM", "2022-2-11 9:34:42", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "java.util.GregorianCalendar[time=1644572075684,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=15,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=684,ZONE_OFFSET=0,DST_OFFSET=0]", "zh", "java.text.ParsePosition[index=100,errorIndex=-1]", "9:34:41 AM UTC", "Greenwich Mean Time", "Chinese", "\uc624\uc804\uc2dc\ubd84\ucd08", "9:34:37 AM UTC", "9:34:38 AM UTC", "9:34:41 AM UTC", "9:34:37 AM UTC", "Chinese", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "\u4e2d\u6587", "FastDateFormat[h:mm:ss a z]", "Jan 10, 4630 12:00:00 AM", "9:34:41 AM UTC", "it", "\u610f\u5927\u5229\u6587", "Tue Jan 11 09:34:31 UTC 2022", "9:34:38 AM UTC", "", "de", "tedesco", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "\uc624\uc804\uc2dc\ubd84\ucd08", "12:00:00 AM UTC", "eng", "\uc624\uc804\uc2dc\ubd84\ucd08", "\u5e74\u6708\u65e5", "\u610f\u5927\u5229\u6587" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.lang.String str39 = strList36.remove(0);
        boolean boolean41 = strList36.add("Koordinierte Universalzeit");
        java.lang.String[] strArray43 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.util.stream.Stream<java.lang.String> strStream46 = strList44.stream();
        strList44.clear();
        boolean boolean48 = strList44.isEmpty();
        boolean boolean49 = strList44.isEmpty();
        java.util.ListIterator<java.lang.String> strItor50 = strList44.listIterator();
        java.util.Date date51 = new java.util.Date();
        int int52 = date51.getTimezoneOffset();
        date51.setYear(32769);
        int int55 = date51.getYear();
        int int56 = strList44.indexOf((java.lang.Object) int55);
        boolean boolean57 = strList36.addAll((java.util.Collection<java.lang.String>) strList44);
        strList44.clear();
        int int60 = strList44.indexOf((java.lang.Object) 1644226543412L);
        boolean boolean62 = strList44.add("10.02.2022 09:35:09");
        boolean boolean63 = strList44.isEmpty();
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "eng" + "'", str39, "eng");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strStream46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strItor50);
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Thu Feb 11 09:43:56 GMT+00:00 34669");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32769 + "'", int55 == 32769);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test20048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20048");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale11);
        java.util.Locale.setDefault(category7, locale11);
        java.util.Locale locale16 = java.util.Locale.getDefault(category7);
        java.util.Locale.Builder builder17 = builder6.setLocale(locale16);
        java.util.Locale.Builder builder18 = builder6.clearExtensions();
        java.util.Locale.Builder builder20 = builder18.setLanguage("eng");
        java.util.Locale locale21 = builder20.build();
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder22.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale locale25 = builder22.build();
        java.util.Locale locale26 = builder22.build();
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder27.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale locale30 = builder27.build();
        java.util.Locale locale32 = new java.util.Locale("de");
        java.lang.String str33 = locale32.toLanguageTag();
        java.lang.String str34 = locale32.getCountry();
        java.lang.String str35 = locale32.getDisplayCountry();
        java.util.Locale.setDefault(locale32);
        java.lang.String str37 = locale30.getDisplayVariant(locale32);
        java.lang.String str38 = locale26.getDisplayLanguage(locale32);
        java.lang.String str39 = locale26.getScript();
        java.util.Locale.Builder builder40 = builder20.setLocale(locale26);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tedesco" + "'", str12, "tedesco");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572636110,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=56,MILLISECOND=210,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "eng");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "de" + "'", str33, "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test20049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20049");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor8 = strList2.listIterator(0);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        boolean boolean15 = strList11.add("hi!");
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale16.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale16.getDisplayVariant(locale20);
        boolean boolean22 = strList11.contains((java.lang.Object) locale16);
        boolean boolean23 = strList2.removeAll((java.util.Collection<java.lang.String>) strList11);
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone25);
        java.util.Date date27 = new java.util.Date();
        int int28 = date27.getTimezoneOffset();
        int int29 = date27.getSeconds();
        java.lang.StringBuffer stringBuffer30 = null;
        java.text.Format.Field field31 = null;
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition(field31, 1);
        fieldPosition33.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer36 = fastDateFormat26.format((java.lang.Object) date27, stringBuffer30, fieldPosition33);
        int int37 = strList2.lastIndexOf((java.lang.Object) fieldPosition33);
        java.util.Date date38 = new java.util.Date();
        int int39 = date38.getDay();
        java.util.Date date40 = new java.util.Date();
        date40.setMinutes((int) '#');
        boolean boolean43 = date38.before(date40);
        boolean boolean44 = fieldPosition33.equals((java.lang.Object) date40);
        int int45 = fieldPosition33.getEndIndex();
        java.text.Format.Field field46 = fieldPosition33.getFieldAttribute();
        java.lang.String str47 = fieldPosition33.toString();
        java.text.Format.Field field48 = fieldPosition33.getFieldAttribute();
        java.text.Format.Field field49 = fieldPosition33.getFieldAttribute();
        java.lang.String str50 = fieldPosition33.toString();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(fastDateFormat26);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Fri Feb 11 09:43:56 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 56 + "'", int29 == 56);
        org.junit.Assert.assertNull(stringBuffer36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Fri Feb 11 09:43:56 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Fri Feb 11 09:35:56 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(field46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "java.text.FieldPosition[field=1,attribute=null,beginIndex=34,endIndex=0]" + "'", str47, "java.text.FieldPosition[field=1,attribute=null,beginIndex=34,endIndex=0]");
        org.junit.Assert.assertNull(field48);
        org.junit.Assert.assertNull(field49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "java.text.FieldPosition[field=1,attribute=null,beginIndex=34,endIndex=0]" + "'", str50, "java.text.FieldPosition[field=1,attribute=null,beginIndex=34,endIndex=0]");
    }

    @Test
    public void test20050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20050");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getTimezoneOffset();
        int int2 = date0.getSeconds();
        date0.setDate(7);
        long long5 = date0.getTime();
        date0.setMinutes(9);
        int int8 = date0.getHours();
        int int9 = date0.getSeconds();
        java.lang.String str10 = date0.toGMTString();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Mon Feb 07 09:09:56 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 56 + "'", int2 == 56);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1644227036160L + "'", long5 == 1644227036160L);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 9 + "'", int8 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 56 + "'", int9 == 56);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "7 Feb 2022 09:09:56 GMT" + "'", str10, "7 Feb 2022 09:09:56 GMT");
    }

    @Test
    public void test20051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20051");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor8 = strList2.listIterator(0);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        boolean boolean15 = strList11.add("hi!");
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale16.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale16.getDisplayVariant(locale20);
        boolean boolean22 = strList11.contains((java.lang.Object) locale16);
        boolean boolean23 = strList2.removeAll((java.util.Collection<java.lang.String>) strList11);
        java.util.Locale locale26 = new java.util.Locale("java.text.ParsePosition[index=100,errorIndex=-1]", "Jan 10, 4630 12:00:00 AM");
        int int27 = strList2.lastIndexOf((java.lang.Object) locale26);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone29);
        java.lang.StringBuffer stringBuffer32 = null;
        java.lang.StringBuffer stringBuffer33 = fastDateFormat30.format((long) 32772, stringBuffer32);
        java.util.TimeZone timeZone34 = fastDateFormat30.getTimeZone();
        int int35 = timeZone34.getRawOffset();
        java.util.TimeZone timeZone37 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone37);
        java.lang.String str39 = fastDateFormat38.toString();
        java.lang.String str40 = fastDateFormat38.toString();
        java.util.TimeZone timeZone41 = fastDateFormat38.getTimeZone();
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = locale42.getLanguage();
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale42.getDisplayVariant(locale44);
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone41, locale42);
        boolean boolean47 = timeZone34.hasSameRules(timeZone41);
        java.lang.String str48 = timeZone41.getID();
        int int49 = strList2.lastIndexOf((java.lang.Object) timeZone41);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.lang.String> strItor51 = strList2.listIterator(22);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 22");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertEquals(locale26.toString(), "java.text.parseposition[index=100,errorindex=-1]_JAN 10, 4630 12:00:00 AM");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertNull(stringBuffer33);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str39, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str40, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "zh" + "'", str43, "zh");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1644572636173,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=56,MILLISECOND=273,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "11 Feb 2022 09:37:02 GMT" + "'", str48, "11 Feb 2022 09:37:02 GMT");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test20052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20052");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        long long19 = calendar18.getTimeInMillis();
        java.lang.String str20 = fastDateFormat13.format(calendar18);
        java.lang.String[] strArray22 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.util.stream.Stream<java.lang.String> strStream25 = strList23.stream();
        boolean boolean27 = strList23.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor29 = strList23.listIterator(0);
        java.lang.String[] strArray31 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList32 = new java.util.ArrayList<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList32, strArray31);
        java.util.stream.Stream<java.lang.String> strStream34 = strList32.stream();
        boolean boolean36 = strList32.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor38 = strList32.listIterator(0);
        java.lang.String[] strArray40 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.util.stream.Stream<java.lang.String> strStream43 = strList41.stream();
        java.util.ListIterator<java.lang.String> strItor44 = strList41.listIterator();
        boolean boolean45 = strList32.removeAll((java.util.Collection<java.lang.String>) strList41);
        boolean boolean46 = strList23.containsAll((java.util.Collection<java.lang.String>) strList32);
        boolean boolean48 = strList32.remove((java.lang.Object) 0.0d);
        boolean boolean49 = calendar18.before((java.lang.Object) 0.0d);
        java.util.Date date56 = new java.util.Date(32770, 0, 40, 22, 122, 32770);
        calendar18.setTime(date56);
        calendar18.setFirstDayOfWeek((int) 'a');
        java.lang.Object obj60 = calendar18.clone();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644572636204,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=56,MILLISECOND=304,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Koreanisch" + "'", str12, "Koreanisch");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1031915840889900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=97,minimalDaysInFirstWeek=1,ERA=1,YEAR=34670,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=41,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=8,SECOND=10,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644572636204L + "'", long19 == 1644572636204L);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc624\uc804\uc2dc\ubd84\ucd08" + "'", str20, "\uc624\uc804\uc2dc\ubd84\ucd08");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strStream25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strStream43);
        org.junit.Assert.assertNotNull(strItor44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertEquals(date56.toString(), "Thu Feb 10 09:08:10 GMT+00:00 34670");
        org.junit.Assert.assertNotNull(obj60);
// flaky:         org.junit.Assert.assertEquals(obj60.toString(), "java.util.GregorianCalendar[time=1031915840889900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=97,minimalDaysInFirstWeek=1,ERA=1,YEAR=34670,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=41,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=8,SECOND=10,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "java.util.GregorianCalendar[time=1031915840889900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=97,minimalDaysInFirstWeek=1,ERA=1,YEAR=34670,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=41,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=8,SECOND=10,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "java.util.GregorianCalendar[time=1031915840889900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=97,minimalDaysInFirstWeek=1,ERA=1,YEAR=34670,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=41,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=8,SECOND=10,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
    }

    @Test
    public void test20053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20053");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("java.util.GregorianCalendar[time=1644572138551,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=-1,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=35,SECOND=38,MILLISECOND=550,ZONE_OFFSET=-1,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test20054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20054");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        int int5 = date3.getSeconds();
        date3.setDate(7);
        java.time.Instant instant8 = date3.toInstant();
        java.util.Date date9 = java.util.Date.from(instant8);
        java.lang.String str10 = date9.toLocaleString();
        java.lang.StringBuffer stringBuffer11 = null;
        java.lang.StringBuffer stringBuffer12 = fastDateFormat2.format(date9, stringBuffer11);
        java.util.Date date13 = new java.util.Date();
        int int14 = date13.getTimezoneOffset();
        long long15 = date13.getTime();
        int int16 = date13.getMonth();
        date13.setSeconds(7);
        date13.setSeconds(1);
        java.util.Date date21 = new java.util.Date();
        int int22 = date21.getTimezoneOffset();
        long long23 = date21.getTime();
        int int24 = date21.getMonth();
        date21.setSeconds(7);
        date21.setSeconds(1);
        boolean boolean29 = date13.before(date21);
        java.lang.String str30 = fastDateFormat2.format(date13);
        int int31 = fastDateFormat2.getMaxLengthEstimate();
        java.lang.String str33 = fastDateFormat2.format(1644572097638L);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(locale34);
        java.util.Date date42 = new java.util.Date(9, 11, (int) '4', 35, 40, 100);
        calendar35.setTime(date42);
        calendar35.setLenient(false);
        java.time.Instant instant46 = calendar35.toInstant();
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder49 = builder47.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder50 = builder47.clear();
        java.util.Locale.Builder builder52 = builder47.addUnicodeLocaleAttribute("Deutsch");
        java.util.Locale locale54 = java.util.Locale.forLanguageTag("04.02.1919 02:07:00");
        java.util.Locale.Builder builder55 = builder52.setLocale(locale54);
        java.util.Locale.Builder builder56 = builder55.clearExtensions();
        java.util.Locale.Builder builder57 = builder55.clearExtensions();
        boolean boolean58 = calendar35.before((java.lang.Object) builder57);
        java.util.Locale.Builder builder59 = builder57.clear();
        java.util.Locale locale60 = builder59.build();
        java.util.Set<java.lang.Character> charSet61 = locale60.getExtensionKeys();
        java.lang.StringBuffer stringBuffer62 = null;
        java.text.FieldPosition fieldPosition64 = new java.text.FieldPosition(35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer65 = fastDateFormat2.format((java.lang.Object) charSet61, stringBuffer62, fieldPosition64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: java.util.Collections$EmptySet");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Mon Feb 07 09:43:56 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 56 + "'", int5 == 56);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Feb 07 09:43:56 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "07.02.2022 09:43:56" + "'", str10, "07.02.2022 09:43:56");
        org.junit.Assert.assertNull(stringBuffer12);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Fri Feb 11 09:43:01 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644572636258L + "'", long15 == 1644572636258L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Fri Feb 11 09:43:01 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1644572636258L + "'", long23 == 1644572636258L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=-1891599500100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1910,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=22,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=41,SECOND=40,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Sat Jan 22 11:41:40 GMT+00:00 1910");
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertNotNull(charSet61);
    }

    @Test
    public void test20055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20055");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setMinimalDaysInFirstWeek((int) (short) 10);
        java.util.Date date3 = calendar0.getTime();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone5);
        java.util.Date date7 = new java.util.Date();
        int int8 = date7.getTimezoneOffset();
        int int9 = date7.getSeconds();
        date7.setDate(7);
        java.time.Instant instant12 = date7.toInstant();
        java.util.Date date13 = java.util.Date.from(instant12);
        java.lang.String str14 = date13.toLocaleString();
        java.lang.StringBuffer stringBuffer15 = null;
        java.lang.StringBuffer stringBuffer16 = fastDateFormat6.format(date13, stringBuffer15);
        calendar0.setTime(date13);
        int int18 = calendar0.getWeekYear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644227036288,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=10,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=7,DAY_OF_YEAR=38,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=56,MILLISECOND=388,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Fri Feb 11 09:43:56 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(fastDateFormat6);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Mon Feb 07 09:43:56 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 56 + "'", int9 == 56);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Mon Feb 07 09:43:56 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "07.02.2022 09:43:56" + "'", str14, "07.02.2022 09:43:56");
        org.junit.Assert.assertNull(stringBuffer16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
    }

    @Test
    public void test20056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20056");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone3);
        java.lang.String str5 = fastDateFormat4.toString();
        java.lang.String str6 = fastDateFormat4.toString();
        java.util.TimeZone timeZone7 = fastDateFormat4.getTimeZone();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone7, locale8);
        boolean boolean13 = calendar12.isWeekDateSupported();
        calendar12.set(7, 4, 0);
        java.util.Date date18 = calendar12.getTime();
        java.lang.String str19 = fastDateFormat1.format(calendar12);
        java.util.TimeZone timeZone20 = fastDateFormat1.getTimeZone();
        java.lang.Object obj21 = null;
        boolean boolean22 = fastDateFormat1.equals(obj21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance();
        int int24 = calendar23.getWeeksInWeekYear();
        java.time.Instant instant25 = calendar23.toInstant();
        int int27 = calendar23.getMinimum(4);
        java.lang.String str28 = fastDateFormat1.format(calendar23);
        java.util.Date date35 = new java.util.Date(45, (int) (byte) 100, (int) '#', 50, 100, 36);
        calendar23.setTime(date35);
        date35.setHours(31);
        int int39 = date35.getYear();
        java.lang.Object obj40 = date35.clone();
        org.junit.Assert.assertNotNull(fastDateFormat1);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str5, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str6, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh" + "'", str9, "zh");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-61936150563692,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=56,MILLISECOND=408,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 30 09:43:56 GMT+00:00 7");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "30. April 0007" + "'", str19, "30. April 0007");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-522965964100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1953,MONTH=5,WEEK_OF_YEAR=23,WEEK_OF_MONTH=1,DAY_OF_MONTH=6,DAY_OF_YEAR=157,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=40,SECOND=36,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "11. Februar 2022" + "'", str28, "11. Februar 2022");
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Sun Jun 07 07:40:36 GMT+00:00 1953");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 53 + "'", int39 == 53);
        org.junit.Assert.assertNotNull(obj40);
// flaky:         org.junit.Assert.assertEquals(obj40.toString(), "Sun Jun 07 07:40:36 GMT+00:00 1953");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "Sun Jun 07 07:40:36 GMT+00:00 1953");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "Sun Jun 07 07:40:36 GMT+00:00 1953");
    }

    @Test
    public void test20057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20057");
        java.util.Date date5 = new java.util.Date(53, (int) (byte) 1, 121, 4, 34);
        int int6 = date5.getMinutes();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Jun 01 04:34:00 GMT+00:00 1953");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 34 + "'", int6 == 34);
    }

    @Test
    public void test20058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20058");
        java.lang.String[] strArray35 = new java.lang.String[] { "eng", "Jan 10, 4630 12:00:00 AM", "2022-2-11 9:34:42", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "java.util.GregorianCalendar[time=1644572075684,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=15,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=684,ZONE_OFFSET=0,DST_OFFSET=0]", "zh", "java.text.ParsePosition[index=100,errorIndex=-1]", "9:34:41 AM UTC", "Greenwich Mean Time", "Chinese", "\uc624\uc804\uc2dc\ubd84\ucd08", "9:34:37 AM UTC", "9:34:38 AM UTC", "9:34:41 AM UTC", "9:34:37 AM UTC", "Chinese", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "\u4e2d\u6587", "FastDateFormat[h:mm:ss a z]", "Jan 10, 4630 12:00:00 AM", "9:34:41 AM UTC", "it", "\u610f\u5927\u5229\u6587", "Tue Jan 11 09:34:31 UTC 2022", "9:34:38 AM UTC", "", "de", "tedesco", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "\uc624\uc804\uc2dc\ubd84\ucd08", "12:00:00 AM UTC", "eng", "\uc624\uc804\uc2dc\ubd84\ucd08", "\u5e74\u6708\u65e5", "\u610f\u5927\u5229\u6587" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.lang.String str39 = strList36.remove(0);
        boolean boolean41 = strList36.add("Koordinierte Universalzeit");
        java.lang.String[] strArray43 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.util.stream.Stream<java.lang.String> strStream46 = strList44.stream();
        strList44.clear();
        boolean boolean48 = strList44.isEmpty();
        boolean boolean49 = strList44.isEmpty();
        java.util.ListIterator<java.lang.String> strItor50 = strList44.listIterator();
        java.util.Date date51 = new java.util.Date();
        int int52 = date51.getTimezoneOffset();
        date51.setYear(32769);
        int int55 = date51.getYear();
        int int56 = strList44.indexOf((java.lang.Object) int55);
        boolean boolean57 = strList36.addAll((java.util.Collection<java.lang.String>) strList44);
        int int58 = strList36.size();
        java.util.TimeZone timeZone60 = java.util.TimeZone.getTimeZone("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(timeZone60);
        java.time.ZoneId zoneId62 = timeZone60.toZoneId();
        java.util.TimeZone timeZone63 = java.util.TimeZone.getTimeZone(zoneId62);
        boolean boolean64 = timeZone63.observesDaylightTime();
        java.time.ZoneId zoneId65 = timeZone63.toZoneId();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getTimeZone(zoneId65);
        int int67 = strList36.indexOf((java.lang.Object) timeZone66);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "eng" + "'", str39, "eng");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strStream46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strItor50);
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Thu Feb 11 09:43:56 GMT+00:00 34669");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32769 + "'", int55 == 32769);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(calendar61);
// flaky:         org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=1644572636351,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=56,MILLISECOND=351,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(zoneId62);
        org.junit.Assert.assertNotNull(timeZone63);
        org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(zoneId65);
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test20059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20059");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(26);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test20060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20060");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5e74\u6708\u65e5");
        java.text.ParsePosition parsePosition4 = new java.text.ParsePosition(16);
        java.lang.Object obj5 = fastDateFormat1.parseObject("12:00:00 AM UTC", parsePosition4);
        java.lang.String str7 = fastDateFormat1.format((java.lang.Object) 1644572083694L);
        java.lang.String str8 = fastDateFormat1.getPattern();
        java.util.TimeZone timeZone9 = fastDateFormat1.getTimeZone();
        java.lang.String str10 = fastDateFormat1.toString();
        java.util.Date date12 = new java.util.Date("Fri Feb 11 09:34:53 GMT 2022");
        int int13 = date12.getTimezoneOffset();
        date12.setTime(1644572151829L);
        java.util.Date date16 = new java.util.Date();
        int int17 = date16.getTimezoneOffset();
        int int18 = date16.getSeconds();
        date16.setDate(7);
        java.time.Instant instant21 = date16.toInstant();
        java.util.Date date22 = java.util.Date.from(instant21);
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        java.util.TimeZone timeZone27 = fastDateFormat25.getTimeZone();
        java.util.Date date28 = new java.util.Date();
        int int29 = date28.getTimezoneOffset();
        long long30 = date28.getTime();
        date28.setDate((int) (byte) 10);
        long long33 = date28.getTime();
        date28.setHours(32769);
        java.lang.String str36 = fastDateFormat25.format(date28);
        boolean boolean37 = date22.before(date28);
        date22.setTime(0L);
        java.lang.String str40 = date22.toGMTString();
        java.time.Instant instant41 = date22.toInstant();
        java.util.Date date42 = new java.util.Date();
        int int43 = date42.getTimezoneOffset();
        int int44 = date42.getSeconds();
        date42.setDate(7);
        java.time.Instant instant47 = date42.toInstant();
        java.util.Date date48 = java.util.Date.from(instant47);
        java.lang.String str49 = date48.toLocaleString();
        date48.setDate(37);
        boolean boolean52 = date22.after(date48);
        boolean boolean53 = date12.before(date48);
        java.lang.StringBuffer stringBuffer54 = null;
        java.text.FieldPosition fieldPosition56 = new java.text.FieldPosition(100);
        java.text.Format.Field field57 = fieldPosition56.getFieldAttribute();
        int int58 = fieldPosition56.getEndIndex();
        boolean boolean60 = fieldPosition56.equals((java.lang.Object) 1644572248703L);
        java.text.Format.Field field61 = fieldPosition56.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer62 = fastDateFormat1.format((java.lang.Object) date12, stringBuffer54, fieldPosition56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat1);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u5e74\u6708\u65e5" + "'", str7, "\u5e74\u6708\u65e5");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u5e74\u6708\u65e5" + "'", str8, "\u5e74\u6708\u65e5");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u5e74\u6708\u65e5]" + "'", str10, "\u5e74\u6708\u65e5]");
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Fri Feb 11 09:35:51 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Mon Feb 07 09:43:56 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 56 + "'", int18 == 56);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "h:mm:ss a z" + "'", str26, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Thu Nov 06 09:43:56 GMT+00:00 2025");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1644572636388L + "'", long30 == 1644572636388L);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1644486236388L + "'", long33 == 1644486236388L);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "9:43:56 AM UTC" + "'", str36, "9:43:56 AM UTC");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str40, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertNotNull(instant41);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Mon Feb 07 09:43:56 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 56 + "'", int44 == 56);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Wed Mar 09 09:43:56 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "07.02.2022 09:43:56" + "'", str49, "07.02.2022 09:43:56");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(field57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(field61);
    }

    @Test
    public void test20061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20061");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        java.lang.String str3 = locale1.getLanguage();
        java.lang.String str4 = locale1.getVariant();
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        boolean boolean7 = locale5.hasExtensions();
        java.lang.String str8 = locale1.getDisplayCountry(locale5);
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category9, locale10);
        java.util.Locale locale12 = java.util.Locale.getDefault(category9);
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String[] strArray19 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.stream.Stream<java.lang.String> strStream22 = strList20.stream();
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        int int24 = strList20.lastIndexOf((java.lang.Object) locale23);
        java.lang.String str25 = locale12.getDisplayVariant(locale23);
        java.lang.String str26 = locale1.getDisplayCountry(locale12);
        java.lang.String str27 = locale1.getDisplayName();
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition(16);
        int int30 = parsePosition29.getErrorIndex();
        java.util.TimeZone timeZone32 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone32);
        java.lang.String str34 = fastDateFormat33.getPattern();
        boolean boolean35 = parsePosition29.equals((java.lang.Object) fastDateFormat33);
        java.util.Locale locale36 = java.util.Locale.FRANCE;
        boolean boolean37 = parsePosition29.equals((java.lang.Object) locale36);
        java.lang.String str38 = locale36.getDisplayScript();
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder39.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder42 = builder39.clear();
        java.util.Locale locale43 = builder42.build();
        java.lang.String str44 = locale36.getDisplayVariant(locale43);
        java.lang.String str45 = locale1.getDisplayVariant(locale36);
        java.lang.String str46 = locale1.toLanguageTag();
        java.lang.String str47 = locale1.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = locale1.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh" + "'", str3, "zh");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh" + "'", str6, "zh");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u4e2d\u56fd" + "'", str8, "\u4e2d\u56fd");
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Cina" + "'", str26, "Cina");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "cinese (Cina)" + "'", str27, "cinese (Cina)");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "h:mm:ss a z" + "'", str34, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zh-CN" + "'", str46, "zh-CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "cinese (Cina)" + "'", str47, "cinese (Cina)");
    }

    @Test
    public void test20062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20062");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("gregory", strMap1);
        java.lang.String[] strArray8 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.stream.Stream<java.lang.String> strStream11 = strList9.stream();
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        int int13 = strList9.lastIndexOf((java.lang.Object) locale12);
        java.util.stream.Stream<java.lang.String> strStream14 = strList9.stream();
        java.lang.String[] strArray16 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        java.util.stream.Stream<java.lang.String> strStream19 = strList17.stream();
        strList17.clear();
        java.util.Spliterator<java.lang.String> strSpliterator21 = strList17.spliterator();
        int int22 = strList9.lastIndexOf((java.lang.Object) strSpliterator21);
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone24);
        java.lang.String str26 = fastDateFormat25.getPattern();
        boolean boolean27 = strList9.contains((java.lang.Object) str26);
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strList9);
        java.util.Spliterator<java.lang.String> strSpliterator29 = strList9.spliterator();
        java.util.stream.Stream<java.lang.String> strStream30 = strList9.stream();
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertNotNull(strSpliterator21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(strSpliterator29);
        org.junit.Assert.assertNotNull(strStream30);
    }

    @Test
    public void test20063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20063");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.lang.String[] strArray8 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.stream.Stream<java.lang.String> strStream11 = strList9.stream();
        boolean boolean13 = strList9.add("hi!");
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = locale14.getDisplayVariant(locale18);
        boolean boolean20 = strList9.contains((java.lang.Object) locale14);
        java.lang.String str21 = locale14.getVariant();
        boolean boolean22 = locale14.hasExtensions();
        java.util.Locale.Builder builder23 = builder3.setLocale(locale14);
        java.util.Locale.Builder builder24 = builder3.clearExtensions();
        java.util.Locale.Builder builder25 = builder3.clear();
        java.util.Locale.Builder builder26 = builder25.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder29 = builder25.setUnicodeLocaleKeyword("4630-1-10 0:00:00", "Jan 11, 2022 9:34:31 AM");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 4630-1-10 0:00:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test20064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20064");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        boolean boolean3 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.Object obj4 = fastDateFormat2.clone();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.lang.String str9 = parsePosition7.toString();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) "9:34:49 AM UTC");
        java.lang.Object obj12 = fastDateFormat2.parseObject("Feb 4, 1919 2:07:00 AM", parsePosition7);
        java.lang.Object obj13 = fastDateFormat2.clone();
        java.util.TimeZone timeZone14 = fastDateFormat2.getTimeZone();
        java.text.FieldPosition fieldPosition16 = new java.text.FieldPosition(2022);
        fieldPosition16.setEndIndex(47);
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale20 = java.util.Locale.getDefault(category19);
        boolean boolean21 = fieldPosition16.equals((java.lang.Object) category19);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.util.Locale locale23 = locale22.stripExtensions();
        java.lang.String str24 = locale22.getISO3Country();
        java.util.Locale.setDefault(category19, locale22);
        java.util.TimeZone timeZone27 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone27);
        java.lang.String str29 = fastDateFormat28.getPattern();
        java.util.Locale.Category category30 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale31 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category30, locale31);
        java.util.Locale locale33 = java.util.Locale.getDefault(category30);
        boolean boolean34 = fastDateFormat28.equals((java.lang.Object) locale33);
        java.lang.String str35 = locale33.getISO3Language();
        java.util.Locale.setDefault(category19, locale33);
        java.util.Locale locale40 = new java.util.Locale("java.text.FieldPosition[field=1,attribute=null,beginIndex=0,endIndex=0]", "\u4e0a\u5348", "h:mm:ss a z");
        java.util.Locale locale41 = java.util.Locale.PRC;
        java.lang.String str42 = locale41.getDisplayLanguage();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.lang.String str47 = locale46.getDisplayName();
        java.lang.String str48 = locale46.getDisplayCountry();
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone44, locale46);
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.util.Locale locale51 = locale50.stripExtensions();
        java.lang.String str52 = locale50.getVariant();
        java.lang.String str53 = locale46.getDisplayScript(locale50);
        java.util.Set<java.lang.String> strSet54 = locale46.getUnicodeLocaleKeys();
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.util.Locale.Category category56 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale57 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category56, locale57);
        java.lang.String str59 = locale57.getScript();
        java.lang.String str60 = locale55.getDisplayCountry(locale57);
        java.lang.String str61 = locale46.getDisplayCountry(locale57);
        java.lang.String str62 = locale41.getDisplayCountry(locale57);
        java.lang.String str63 = locale40.getDisplayScript(locale41);
        java.util.Locale.setDefault(category19, locale41);
        java.lang.String str65 = timeZone14.getDisplayName(locale41);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "FastDateFormat[zh]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str9, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "FastDateFormat[zh]");
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category30.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ita" + "'", str35, "ita");
// flaky:         org.junit.Assert.assertEquals(locale40.toString(), "\u4e0a\u5348_h:mm:ss a z");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "cinese" + "'", str42, "cinese");
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "tedesco" + "'", str47, "tedesco");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1644572636525,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=56,MILLISECOND=625,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertTrue("'" + category56 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category56.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Cina" + "'", str62, "Cina");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "GMT+00:00" + "'", str65, "GMT+00:00");
    }

    @Test
    public void test20065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20065");
        java.util.Locale locale4 = new java.util.Locale("java.text.FieldPosition[field=1,attribute=null,beginIndex=0,endIndex=0]", "\u4e0a\u5348", "h:mm:ss a z");
        java.util.Locale locale5 = java.util.Locale.PRC;
        java.lang.String str6 = locale5.getDisplayLanguage();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale10.getDisplayCountry();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale10);
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale14.getVariant();
        java.lang.String str17 = locale10.getDisplayScript(locale14);
        java.util.Set<java.lang.String> strSet18 = locale10.getUnicodeLocaleKeys();
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category20, locale21);
        java.lang.String str23 = locale21.getScript();
        java.lang.String str24 = locale19.getDisplayCountry(locale21);
        java.lang.String str25 = locale10.getDisplayCountry(locale21);
        java.lang.String str26 = locale5.getDisplayCountry(locale21);
        java.lang.String str27 = locale4.getDisplayScript(locale5);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, locale4);
        java.util.TimeZone timeZone31 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone31);
        java.lang.String str33 = fastDateFormat32.getPattern();
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition(16);
        java.util.Date date37 = new java.util.Date();
        int int38 = date37.getDay();
        java.util.Date date39 = new java.util.Date();
        date39.setMinutes((int) '#');
        boolean boolean42 = date37.before(date39);
        boolean boolean43 = parsePosition36.equals((java.lang.Object) boolean42);
        java.lang.Object obj44 = fastDateFormat32.parseObject("eng", parsePosition36);
        java.lang.Object obj45 = fastDateFormat28.parseObject("java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022", parsePosition36);
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition(9);
        int int49 = parsePosition48.getIndex();
        java.lang.Object obj50 = fastDateFormat28.parseObject("Dec 2, 1911 11:59:59 PM", parsePosition48);
        java.util.Locale locale52 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale52);
        java.util.TimeZone timeZone56 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone56);
        java.lang.String str58 = fastDateFormat57.toString();
        java.lang.String str59 = fastDateFormat57.toString();
        java.text.ParsePosition parsePosition62 = new java.text.ParsePosition(100);
        java.lang.String str63 = parsePosition62.toString();
        java.lang.Object obj64 = fastDateFormat57.parseObject("de", parsePosition62);
        java.lang.Object obj65 = fastDateFormat53.parseObject("Coordinated Universal Time", parsePosition62);
        java.lang.String str66 = parsePosition62.toString();
        int int67 = parsePosition62.getIndex();
        parsePosition62.setErrorIndex(48);
        parsePosition62.setErrorIndex(28);
        boolean boolean72 = fastDateFormat28.equals((java.lang.Object) parsePosition62);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "\u4e0a\u5348_h:mm:ss a z");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "cinese" + "'", str6, "cinese");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tedesco" + "'", str11, "tedesco");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1644572636564,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=56,MILLISECOND=664,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Cina" + "'", str26, "Cina");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "h:mm:ss a z" + "'", str33, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Fri Feb 11 09:43:56 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
// flaky:         org.junit.Assert.assertEquals(date39.toString(), "Fri Feb 11 09:35:56 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str58, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str59, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "java.text.ParsePosition[index=100,errorIndex=-1]" + "'", str63, "java.text.ParsePosition[index=100,errorIndex=-1]");
        org.junit.Assert.assertNull(obj64);
        org.junit.Assert.assertNull(obj65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "java.text.ParsePosition[index=0,errorIndex=0]" + "'", str66, "java.text.ParsePosition[index=0,errorIndex=0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test20066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20066");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.lang.Class<?> wildcardClass4 = builder0.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test20067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20067");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        boolean boolean3 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.Object obj4 = fastDateFormat2.clone();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.lang.String str9 = parsePosition7.toString();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) "9:34:49 AM UTC");
        java.lang.Object obj12 = fastDateFormat2.parseObject("Feb 4, 1919 2:07:00 AM", parsePosition7);
        java.lang.Object obj13 = fastDateFormat2.clone();
        java.util.Date date20 = new java.util.Date(27, 8, 24356589, (int) ' ', 43, 0);
        int int21 = date20.getDate();
        java.lang.String str22 = fastDateFormat2.format(date20);
        int int23 = fastDateFormat2.getMaxLengthEstimate();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "FastDateFormat[zh]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str9, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "FastDateFormat[zh]");
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Tue Sep 28 08:43:00 GMT+00:00 68613");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 28 + "'", int21 == 28);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "GMT+00:008" + "'", str22, "GMT+00:008");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
    }

    @Test
    public void test20068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20068");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7);
        timeZone7.setRawOffset(3);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        boolean boolean17 = timeZone7.hasSameRules(timeZone16);
        boolean boolean18 = timeZone1.hasSameRules(timeZone16);
        java.util.TimeZone.setDefault(timeZone16);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition(16);
        int int28 = parsePosition27.getErrorIndex();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        boolean boolean31 = parsePosition27.equals((java.lang.Object) locale29);
        java.lang.String str32 = locale29.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22, locale29);
        int int34 = timeZone22.getRawOffset();
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.lang.String str36 = locale35.getLanguage();
        boolean boolean37 = locale35.hasExtensions();
        java.lang.String str38 = locale35.getDisplayScript();
        java.util.Calendar calendar39 = java.util.Calendar.getInstance(locale35);
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone22, locale35);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone16, locale35);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone43 = fastDateFormat42.getTimeZone();
        int int45 = timeZone43.getOffset(1644572101904L);
        calendar41.setTimeZone(timeZone43);
        calendar41.clear();
        // The following exception was thrown during execution in test generation
        try {
            calendar41.setWeekDate(10, 55, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 11");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572636625,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=56,MILLISECOND=725,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "h:mm:ss a z" + "'", str15, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1644572636625,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=56,MILLISECOND=725,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "coreano" + "'", str32, "coreano");
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "zh" + "'", str36, "zh");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1644572636625,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=56,MILLISECOND=725,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1644572636625,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=56,MILLISECOND=725,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
    }

    @Test
    public void test20069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20069");
        java.lang.String[] strArray15 = new java.lang.String[] { "Vereinigtes K\366nigreich", "tedesco (Germania)", "Jan 10, 4630 12:00:00 AM", "Chinese", "", "Tue Jan 11 09:34:31 UTC 2022", "", "Greenwich Mean Time", "Coordinated Universal Time", "", "Greenwich Mean Time", "h:mm:ss a z", "", "coreano", "Greenwich Mean Time" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.stream.Stream<java.lang.String> strStream22 = strList20.stream();
        java.util.ListIterator<java.lang.String> strItor23 = strList20.listIterator();
        int int24 = strList16.lastIndexOf((java.lang.Object) strItor23);
        boolean boolean26 = strList16.add("07-Feb-1970 00:00:00");
        java.util.Spliterator<java.lang.String> strSpliterator27 = strList16.spliterator();
        java.util.stream.Stream<java.lang.String> strStream28 = strList16.stream();
        int int29 = strList16.size();
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strSpliterator27);
        org.junit.Assert.assertNotNull(strStream28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
    }

    @Test
    public void test20070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20070");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone3 = fastDateFormat2.getTimeZone();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale7.getDisplayName();
        java.lang.String str9 = locale7.getDisplayCountry();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone5, locale7);
        int int12 = calendar10.getActualMinimum(2);
        java.util.TimeZone timeZone13 = calendar10.getTimeZone();
        boolean boolean14 = timeZone13.observesDaylightTime();
        boolean boolean15 = timeZone3.hasSameRules(timeZone13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(100061, 131, timeZone3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 131");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tedesco" + "'", str8, "tedesco");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572636671,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=56,MILLISECOND=771,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test20071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20071");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7);
        timeZone7.setRawOffset(3);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        boolean boolean17 = timeZone7.hasSameRules(timeZone16);
        boolean boolean18 = timeZone1.hasSameRules(timeZone16);
        timeZone1.setRawOffset(50);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone1);
        java.util.Locale locale24 = new java.util.Locale("java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022", "11 Feb 2022 09:35:42 GMT");
        boolean boolean25 = calendar21.after((java.lang.Object) "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022");
        calendar21.set(17, (-1969), 46, 19750, 2738);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572636696,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=50,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=56,MILLISECOND=796,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "h:mm:ss a z" + "'", str15, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=50,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=17,MONTH=-1969,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=46,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=19750,MINUTE=2738,SECOND=56,MILLISECOND=746,ZONE_OFFSET=50,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(locale24.toString(), "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_tue jan 11 09:34:31 utc 2022_11 FEB 2022 09:35:42 GMT");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test20072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20072");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        java.lang.String str3 = locale1.getLanguage();
        java.lang.String str4 = locale1.getVariant();
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        boolean boolean7 = locale5.hasExtensions();
        java.lang.String str8 = locale1.getDisplayCountry(locale5);
        java.lang.String str9 = locale1.getDisplayCountry();
        java.lang.String str10 = locale1.getLanguage();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder11.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale locale14 = builder11.build();
        java.util.Locale locale15 = builder11.build();
        java.util.Locale.Category category16 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category16, locale17);
        java.util.Locale locale19 = java.util.Locale.getDefault(category16);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone21, locale23);
        java.lang.String str25 = locale23.getDisplayLanguage();
        java.lang.String str26 = locale19.getDisplayCountry(locale23);
        java.lang.String str27 = locale23.getLanguage();
        java.util.Locale.Category category28 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category28, locale29);
        java.util.Locale locale31 = java.util.Locale.getDefault(category28);
        boolean boolean32 = locale31.hasExtensions();
        java.lang.String[] strArray38 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.stream.Stream<java.lang.String> strStream41 = strList39.stream();
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        int int43 = strList39.lastIndexOf((java.lang.Object) locale42);
        java.lang.String str44 = locale31.getDisplayVariant(locale42);
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale45.getLanguage();
        java.lang.String str47 = locale31.getDisplayVariant(locale45);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = locale48.getLanguage();
        boolean boolean50 = locale48.hasExtensions();
        java.lang.String str51 = locale48.getDisplayScript();
        java.lang.String str52 = locale45.getDisplayCountry(locale48);
        java.lang.String str53 = locale23.getDisplayVariant(locale45);
        java.util.Set<java.lang.String> strSet54 = locale45.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder55 = builder11.setLocale(locale45);
        java.util.Locale locale56 = locale45.stripExtensions();
        java.lang.String str57 = locale1.getDisplayVariant(locale45);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh" + "'", str3, "zh");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh" + "'", str6, "zh");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u4e2d\u56fd" + "'", str8, "\u4e2d\u56fd");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Cina" + "'", str9, "Cina");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh" + "'", str10, "zh");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category16.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572636721,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=56,MILLISECOND=821,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category28.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strStream41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zh" + "'", str46, "zh");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "zh" + "'", str49, "zh");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test20073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20073");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2);
        timeZone2.setRawOffset(40);
        boolean boolean8 = timeZone2.observesDaylightTime();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone2);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone2);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(28, timeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 28");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644572636757,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=56,MILLISECOND=857,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572636757,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=56,MILLISECOND=797,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644572636757,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=56,MILLISECOND=797,ZONE_OFFSET=40,DST_OFFSET=0]");
    }

    @Test
    public void test20074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20074");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category6, locale9);
        java.lang.String str11 = locale9.toLanguageTag();
        java.util.Calendar.Builder builder12 = builder0.setLocale(locale9);
        java.util.Calendar.Builder builder16 = builder12.setDate((int) (byte) 100, 53, 45);
        java.util.Calendar.Builder builder20 = builder12.setDate(43, 5, (int) (short) 0);
        java.util.Calendar calendar21 = builder20.build();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-60797433600100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=43,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=151,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
    }

    @Test
    public void test20075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20075");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, 1);
        int int3 = fieldPosition2.getBeginIndex();
        java.text.Format.Field field4 = fieldPosition2.getFieldAttribute();
        java.text.Format.Field field5 = fieldPosition2.getFieldAttribute();
        java.lang.Object obj6 = null;
        boolean boolean7 = fieldPosition2.equals(obj6);
        java.lang.String[] strArray9 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.util.stream.Stream<java.lang.String> strStream12 = strList10.stream();
        boolean boolean14 = strList10.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor16 = strList10.listIterator(0);
        java.lang.String[] strArray18 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.util.stream.Stream<java.lang.String> strStream21 = strList19.stream();
        java.util.ListIterator<java.lang.String> strItor22 = strList19.listIterator();
        boolean boolean23 = strList10.removeAll((java.util.Collection<java.lang.String>) strList19);
        boolean boolean24 = fieldPosition2.equals((java.lang.Object) strList19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = strList19.get(131);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 131, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(field4);
        org.junit.Assert.assertNull(field5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertNotNull(strItor22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test20076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20076");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str1 = attribute0.toString();
        java.lang.String str2 = attribute0.toString();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str5 = fastDateFormat3.format((long) 100);
        boolean boolean6 = attribute0.equals((java.lang.Object) str5);
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone8);
        boolean boolean10 = fastDateFormat9.getTimeZoneOverridesCalendar();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance();
        int int12 = calendar11.getWeeksInWeekYear();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        boolean boolean17 = timeZone13.hasSameRules(timeZone15);
        calendar11.setTimeZone(timeZone13);
        calendar11.set((int) (byte) 100, (int) (byte) 1, 0, 6, (-1));
        java.lang.String str25 = fastDateFormat9.format(calendar11);
        java.lang.String str26 = calendar11.getCalendarType();
        java.util.Date date27 = calendar11.getTime();
        java.util.Date date33 = new java.util.Date((int) 'a', (int) (byte) 1, 36, 39, 3);
        date33.setHours(3);
        calendar11.setTime(date33);
        calendar11.setFirstDayOfWeek((int) (byte) 1);
        boolean boolean39 = attribute0.equals((java.lang.Object) calendar11);
        long long40 = calendar11.getTimeInMillis();
        java.util.Date date41 = calendar11.getTime();
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str1, "java.text.AttributedCharacterIterator$Attribute(language)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str2, "java.text.AttributedCharacterIterator$Attribute(language)");
        org.junit.Assert.assertNotNull(fastDateFormat3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1/1/70 12:00 AM" + "'", str5, "1/1/70 12:00 AM");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=857876579900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1997,MONTH=2,WEEK_OF_YEAR=11,WEEK_OF_MONTH=3,DAY_OF_MONTH=9,DAY_OF_YEAR=68,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=3,SECOND=0,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "gregory" + "'", str26, "gregory");
        org.junit.Assert.assertNotNull(date27);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Fri Jan 31 05:59:56 GMT+00:00 100");
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Sun Mar 09 03:03:00 GMT+00:00 1997");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 857876579900L + "'", long40 == 857876579900L);
        org.junit.Assert.assertNotNull(date41);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Sun Mar 09 03:03:00 GMT+00:00 1997");
    }

    @Test
    public void test20077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20077");
        java.lang.String[] strArray5 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022", "FastDateFormat[h:mm:ss a z]", "zh", "java.text.ParsePosition[index=16,errorIndex=-1]", "de" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.lang.Object[] objArray8 = strList6.toArray();
        strList6.clear();
        java.lang.String[] strArray11 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        java.util.stream.Stream<java.lang.String> strStream14 = strList12.stream();
        strList12.clear();
        java.util.Spliterator<java.lang.String> strSpliterator16 = strList12.spliterator();
        boolean boolean17 = strList6.containsAll((java.util.Collection<java.lang.String>) strList12);
        boolean boolean18 = strList6.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream19 = strList6.parallelStream();
        strList6.clear();
        boolean boolean22 = strList6.contains((java.lang.Object) "java.util.GregorianCalendar[time=1644572223835,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u5e74\u6708\u65e5\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=3,MILLISECOND=935,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strStream14);
        org.junit.Assert.assertNotNull(strSpliterator16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test20078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20078");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set(14, 2022);
        calendar1.setTimeInMillis(1644572083287L);
        java.time.Instant instant7 = calendar1.toInstant();
        java.util.Date date8 = new java.util.Date();
        int int9 = date8.getDay();
        java.time.Instant instant10 = date8.toInstant();
        calendar1.setTime(date8);
        calendar1.setLenient(true);
        boolean boolean15 = calendar1.before((java.lang.Object) "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2142,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=42,MILLISECOND=444,ZONE_OFFSET=100,DST_OFFSET=0]");
        calendar1.setMinimalDaysInFirstWeek(97);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572636886,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=97,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=56,MILLISECOND=986,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant7);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 11 09:43:56 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 5 + "'", int9 == 5);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test20079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20079");
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.getDefault(category1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category1);
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale5);
        java.lang.String str7 = locale5.getLanguage();
        java.lang.String str8 = locale5.getVariant();
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        boolean boolean11 = locale9.hasExtensions();
        java.lang.String str12 = locale5.getDisplayCountry(locale9);
        java.util.Locale locale13 = locale9.stripExtensions();
        java.util.Set<java.lang.String> strSet14 = locale13.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category1, locale13);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(266, locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 266");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh" + "'", str7, "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh" + "'", str10, "zh");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u56fd" + "'", str12, "\u4e2d\u56fd");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet14);
    }

    @Test
    public void test20080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20080");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = fastDateFormat2.getLocale();
        boolean boolean7 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str8 = fastDateFormat2.getPattern();
        java.lang.String str9 = fastDateFormat2.toString();
        java.lang.Object obj10 = fastDateFormat2.clone();
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(locale11);
        java.time.Instant instant13 = calendar12.toInstant();
        java.time.Instant instant14 = calendar12.toInstant();
        java.time.Instant instant15 = calendar12.toInstant();
        java.lang.String str16 = fastDateFormat2.format(calendar12);
        java.lang.String str18 = fastDateFormat2.format(1644572118293L);
        boolean boolean19 = fastDateFormat2.getTimeZoneOverridesCalendar();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "h:mm:ss a z" + "'", str8, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str9, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644572636918,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=18,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "9:43:57 AM UTC" + "'", str16, "9:43:57 AM UTC");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "9:35:18 AM UTC" + "'", str18, "9:35:18 AM UTC");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test20081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20081");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        calendar6.clear(12);
        int int9 = calendar6.getMinimalDaysInFirstWeek();
        int int10 = calendar6.getMinimalDaysInFirstWeek();
        calendar6.setLenient(false);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u5fb7\u6587" + "'", str4, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=?,SECOND=57,MILLISECOND=42,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
    }

    @Test
    public void test20082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20082");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        java.util.Calendar.Builder builder3 = new java.util.Calendar.Builder();
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.lang.String str5 = locale4.getLanguage();
        boolean boolean6 = locale4.hasExtensions();
        java.lang.String str7 = locale4.getDisplayCountry();
        java.util.Calendar.Builder builder8 = builder3.setLocale(locale4);
        java.util.Calendar.Builder builder12 = builder3.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale14 = new java.util.Locale("de");
        java.lang.String str15 = locale14.toLanguageTag();
        java.lang.String str16 = locale14.getCountry();
        java.util.Calendar.Builder builder17 = builder3.setLocale(locale14);
        java.util.Calendar calendar18 = builder17.build();
        calendar18.set(100, 2, 44, (int) (byte) 100, 45, (int) (short) 1);
        java.lang.String str26 = fastDateFormat2.format(calendar18);
        calendar18.setFirstDayOfWeek(0);
        calendar18.setLenient(false);
        int int32 = calendar18.getGreatestMinimum((int) (byte) 10);
        int int34 = calendar18.getLeastMaximum(11);
        calendar18.setFirstDayOfWeek(29);
        calendar18.set(5, (int) 'a', 55, 365, 32768);
        calendar18.setMinimalDaysInFirstWeek(32770);
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone46);
        java.lang.StringBuffer stringBuffer49 = null;
        java.lang.StringBuffer stringBuffer50 = fastDateFormat47.format((long) 32772, stringBuffer49);
        java.util.TimeZone timeZone51 = fastDateFormat47.getTimeZone();
        java.util.TimeZone timeZone52 = fastDateFormat47.getTimeZone();
        java.util.Date date53 = new java.util.Date();
        int int54 = date53.getTimezoneOffset();
        long long55 = date53.getTime();
        date53.setDate((int) (byte) 10);
        long long58 = date53.getTime();
        int int59 = date53.getYear();
        int int60 = date53.getMonth();
        int int61 = date53.getHours();
        date53.setMonth(48);
        java.lang.String str64 = fastDateFormat47.format(date53);
        calendar18.setTime(date53);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh" + "'", str5, "zh");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "de" + "'", str15, "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1768038236958,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=29,minimalDaysInFirstWeek=32770,ERA=1,YEAR=2026,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=58,ZONE_OFFSET=100,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GMT+00:004" + "'", str26, "GMT+00:004");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 23 + "'", int34 == 23);
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertNull(stringBuffer50);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Sat Jan 10 09:43:57 GMT+00:00 2026");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1644572636958L + "'", long55 == 1644572636958L);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1644486236958L + "'", long58 == 1644486236958L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 122 + "'", int59 == 122);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test20083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20083");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, 1);
        int int3 = fieldPosition2.getBeginIndex();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.lang.String str7 = fastDateFormat6.toString();
        java.lang.String str8 = fastDateFormat6.toString();
        java.util.TimeZone timeZone9 = fastDateFormat6.getTimeZone();
        java.util.Locale locale10 = fastDateFormat6.getLocale();
        java.util.TimeZone timeZone11 = fastDateFormat6.getTimeZone();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone11);
        java.lang.Object obj13 = timeZone11.clone();
        boolean boolean14 = fieldPosition2.equals((java.lang.Object) timeZone11);
        fieldPosition2.setEndIndex(40);
        int int17 = fieldPosition2.getEndIndex();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str7, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str8, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644572636985,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=85,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 40 + "'", int17 == 40);
    }

    @Test
    public void test20084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20084");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getTimezoneOffset();
        int int2 = date0.getSeconds();
        date0.setDate(7);
        java.time.Instant instant5 = date0.toInstant();
        java.util.Date date6 = java.util.Date.from(instant5);
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.util.TimeZone timeZone11 = fastDateFormat9.getTimeZone();
        java.util.Date date12 = new java.util.Date();
        int int13 = date12.getTimezoneOffset();
        long long14 = date12.getTime();
        date12.setDate((int) (byte) 10);
        long long17 = date12.getTime();
        date12.setHours(32769);
        java.lang.String str20 = fastDateFormat9.format(date12);
        boolean boolean21 = date6.before(date12);
        date6.setTime(0L);
        java.lang.String str24 = date6.toGMTString();
        java.time.Instant instant25 = date6.toInstant();
        java.util.Date date27 = new java.util.Date(1644226478002L);
        int int28 = date27.getMinutes();
        date27.setMinutes(45);
        java.util.Date date36 = new java.util.Date(10, 1, (int) ' ', (int) (byte) 1, (int) (short) 0);
        boolean boolean37 = date27.after(date36);
        java.time.Instant instant38 = date27.toInstant();
        boolean boolean39 = date6.after(date27);
        java.util.Date date43 = new java.util.Date(32769, 27, 2);
        boolean boolean44 = date6.after(date43);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance();
        calendar45.setMinimalDaysInFirstWeek((int) (short) 10);
        java.util.Date date48 = calendar45.getTime();
        java.util.TimeZone timeZone50 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone50);
        java.util.Date date52 = new java.util.Date();
        int int53 = date52.getTimezoneOffset();
        int int54 = date52.getSeconds();
        date52.setDate(7);
        java.time.Instant instant57 = date52.toInstant();
        java.util.Date date58 = java.util.Date.from(instant57);
        java.lang.String str59 = date58.toLocaleString();
        java.lang.StringBuffer stringBuffer60 = null;
        java.lang.StringBuffer stringBuffer61 = fastDateFormat51.format(date58, stringBuffer60);
        calendar45.setTime(date58);
        java.lang.String str63 = date58.toLocaleString();
        date58.setDate(41);
        int int66 = date58.getMinutes();
        int int67 = date58.getDate();
        boolean boolean68 = date6.after(date58);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Mon Feb 07 09:43:57 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 57 + "'", int2 == 57);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "h:mm:ss a z" + "'", str10, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Nov 06 09:43:57 GMT+00:00 2025");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572637006L + "'", long14 == 1644572637006L);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644486237006L + "'", long17 == 1644486237006L);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "9:43:57 AM UTC" + "'", str20, "9:43:57 AM UTC");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1 Jan 1970 00:00:00 GMT" + "'", str24, "1 Jan 1970 00:00:00 GMT");
        org.junit.Assert.assertNotNull(instant25);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Mon Feb 07 09:45:38 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 34 + "'", int28 == 34);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Fri Mar 04 01:00:00 GMT+00:00 1910");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Sun Apr 02 00:00:00 GMT+00:00 34671");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1644227037006,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=10,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=7,DAY_OF_YEAR=38,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=106,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Fri Feb 11 09:43:57 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(fastDateFormat51);
// flaky:         org.junit.Assert.assertEquals(date52.toString(), "Mon Feb 07 09:43:57 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 57 + "'", int54 == 57);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(date58);
// flaky:         org.junit.Assert.assertEquals(date58.toString(), "Sun Mar 13 09:43:57 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-2-7 9:43:57" + "'", str59, "2022-2-7 9:43:57");
        org.junit.Assert.assertNull(stringBuffer61);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-2-7 9:43:57" + "'", str63, "2022-2-7 9:43:57");
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 43 + "'", int66 == 43);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 13 + "'", int67 == 13);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test20085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20085");
        java.util.Date date1 = new java.util.Date(1644572109662L);
        date1.setMinutes(0);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Fri Feb 11 09:00:09 GMT+00:00 2022");
    }

    @Test
    public void test20086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20086");
        java.util.Date date5 = new java.util.Date(0, (int) ' ', 41, 16, 38);
        java.util.Date date12 = new java.util.Date(5, (int) '4', 31, 17, (int) (short) 100, 8);
        java.lang.String str13 = date12.toGMTString();
        date12.setMonth(12);
        long long16 = date12.getTime();
        date12.setMonth((-1));
        date12.setHours(292278994);
        date12.setTime((-124286225000L));
        boolean boolean23 = date5.after(date12);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sat Oct 11 16:38:00 GMT+00:00 1902");
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Sun Jan 23 12:02:55 GMT+00:00 1966");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "31 May 1909 18:40:07 GMT" + "'", str13, "31 May 1909 18:40:07 GMT");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1890796792100L) + "'", long16 == (-1890796792100L));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test20087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20087");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getDate();
        long long2 = date0.getTime();
        java.util.Locale locale7 = new java.util.Locale("coreano", "Fri Feb 11 09:34:34 UTC 2022", "de");
        boolean boolean8 = locale7.hasExtensions();
        java.lang.String str9 = locale7.getDisplayVariant();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", locale7);
        java.lang.StringBuffer stringBuffer12 = null;
        java.lang.StringBuffer stringBuffer13 = fastDateFormat10.format((-2170453192000L), stringBuffer12);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition(9);
        parsePosition16.setIndex((int) 'a');
        parsePosition16.setErrorIndex(16);
        java.lang.Object obj21 = fastDateFormat10.parseObject("gregory", parsePosition16);
        java.util.Date date22 = new java.util.Date();
        int int23 = date22.getTimezoneOffset();
        int int24 = date22.getSeconds();
        java.time.Instant instant25 = date22.toInstant();
        int int26 = date22.getYear();
        java.lang.StringBuffer stringBuffer27 = null;
        java.lang.StringBuffer stringBuffer28 = fastDateFormat10.format(date22, stringBuffer27);
        date22.setSeconds(1910);
        boolean boolean31 = date0.after(date22);
        int int32 = date22.getSeconds();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Fri Feb 11 09:43:57 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 11 + "'", int1 == 11);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1644572637057L + "'", long2 == 1644572637057L);
        org.junit.Assert.assertEquals(locale7.toString(), "coreano_FRI FEB 11 09:34:34 UTC 2022_de");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "de" + "'", str9, "de");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertNull(stringBuffer13);
        org.junit.Assert.assertNull(obj21);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Fri Feb 11 10:14:50 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 57 + "'", int24 == 57);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 122 + "'", int26 == 122);
        org.junit.Assert.assertNull(stringBuffer28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 50 + "'", int32 == 50);
    }

    @Test
    public void test20088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20088");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(0);
        fieldPosition1.setBeginIndex(7);
        int int4 = fieldPosition1.getField();
        fieldPosition1.setEndIndex(19);
        int int7 = fieldPosition1.getBeginIndex();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
    }

    @Test
    public void test20089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20089");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("eng", strMap1);
        java.util.Locale.LanguageRange languageRange4 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] { languageRange4 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale11);
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.lang.String str18 = locale15.getDisplayLanguage(locale16);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        java.util.Locale locale22 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale22);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone28);
        java.util.Locale locale31 = fastDateFormat30.getLocale();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale33.getLanguage();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale33.getDisplayVariant(locale35);
        java.util.Locale locale37 = java.util.Locale.GERMANY;
        java.lang.String str38 = locale33.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone44.hasSameRules(timeZone45);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone45);
        java.util.Locale locale48 = fastDateFormat47.getLocale();
        java.util.Locale locale49 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone52);
        java.util.Locale locale55 = fastDateFormat54.getLocale();
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale57 = java.util.Locale.UK;
        java.util.Locale[] localeArray58 = new java.util.Locale[] { locale11, locale15, locale19, locale22, locale24, locale25, locale31, locale32, locale37, locale39, locale40, locale41, locale42, locale48, locale49, locale55, locale56, locale57 };
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        java.util.Locale locale61 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList59);
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList59);
        java.lang.String[] strArray64 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        java.util.stream.Stream<java.lang.String> strStream67 = strList65.stream();
        boolean boolean69 = strList65.add("hi!");
        strList65.clear();
        java.lang.String str71 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strList65);
        java.util.Collection<java.util.Locale> localeCollection72 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter(languageRangeList2, localeCollection72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u5fb7\u6587" + "'", str12, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572637086,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=186,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str18, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh" + "'", str34, "zh");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strStream67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNull(str71);
    }

    @Test
    public void test20090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20090");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getWeeksInWeekYear();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        boolean boolean6 = timeZone2.hasSameRules(timeZone4);
        calendar0.setTimeZone(timeZone2);
        calendar0.set((int) (byte) 100, (int) (byte) 1, 0, 6, (-1));
        java.util.Date date14 = calendar0.getTime();
        int int15 = date14.getMonth();
        int int16 = date14.getMonth();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale18.getVariant();
        java.lang.String str20 = locale18.toLanguageTag();
        boolean boolean21 = date14.equals((java.lang.Object) locale18);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-59009018402873,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=59,SECOND=57,MILLISECOND=227,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 53 + "'", int1 == 53);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Fri Jan 31 05:59:57 GMT+00:00 100");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh" + "'", str20, "zh");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test20091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20091");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getTimezoneOffset();
        long long6 = date4.getTime();
        int int7 = date4.getMonth();
        date4.setSeconds(7);
        date4.setSeconds(1);
        java.util.Date date12 = new java.util.Date();
        int int13 = date12.getTimezoneOffset();
        long long14 = date12.getTime();
        int int15 = date12.getMonth();
        date12.setSeconds(7);
        date12.setSeconds(1);
        boolean boolean20 = date4.before(date12);
        long long21 = date4.getTime();
        java.text.AttributedCharacterIterator attributedCharacterIterator22 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) date4);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone27 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone27);
        java.lang.String str29 = fastDateFormat28.toString();
        java.lang.String str30 = fastDateFormat28.toString();
        java.util.TimeZone timeZone31 = fastDateFormat28.getTimeZone();
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = locale32.getLanguage();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale32.getDisplayVariant(locale34);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone31, locale32);
        boolean boolean37 = calendar36.isWeekDateSupported();
        calendar36.set(7, 4, 0);
        java.util.Date date42 = calendar36.getTime();
        java.lang.String str43 = fastDateFormat25.format(calendar36);
        java.util.TimeZone timeZone44 = fastDateFormat25.getTimeZone();
        java.text.ParsePosition parsePosition47 = new java.text.ParsePosition(100);
        java.lang.Object obj48 = fastDateFormat25.parseObject("5:45:53 PM UTC", parsePosition47);
        int int49 = parsePosition47.getErrorIndex();
        java.text.Format.Field field50 = null;
        java.text.FieldPosition fieldPosition52 = new java.text.FieldPosition(field50, 1);
        int int53 = fieldPosition52.getBeginIndex();
        fieldPosition52.setBeginIndex((int) (short) 1);
        boolean boolean56 = parsePosition47.equals((java.lang.Object) (short) 1);
        java.lang.Object obj57 = fastDateFormat2.parseObject("Feb", parsePosition47);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08");
        java.lang.Object obj60 = fastDateFormat59.clone();
        java.lang.String str61 = fastDateFormat59.getPattern();
        java.lang.Object obj62 = fastDateFormat59.clone();
        boolean boolean63 = fastDateFormat2.equals((java.lang.Object) fastDateFormat59);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance();
        int int65 = calendar64.getWeeksInWeekYear();
        java.util.TimeZone timeZone66 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        boolean boolean69 = timeZone67.hasSameRules(timeZone68);
        boolean boolean70 = timeZone66.hasSameRules(timeZone68);
        calendar64.setTimeZone(timeZone66);
        calendar64.setMinimalDaysInFirstWeek((int) (byte) 10);
        calendar64.set(54, 41, 14, (int) ' ', 45, (int) (short) -1);
        calendar64.setMinimalDaysInFirstWeek(30);
        calendar64.setMinimalDaysInFirstWeek(43);
        java.lang.String str85 = fastDateFormat59.format(calendar64);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Fri Feb 11 09:43:01 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1644572637142L + "'", long6 == 1644572637142L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Fri Feb 11 09:43:01 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572637142L + "'", long14 == 1644572637142L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1644572581142L + "'", long21 == 1644572581142L);
        org.junit.Assert.assertNotNull(attributedCharacterIterator22);
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str29, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str30, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "zh" + "'", str33, "zh");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=-61936150562858,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=242,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(date42);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Sat Apr 30 09:43:57 GMT+00:00 7");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "30. April 0007" + "'", str43, "30. April 0007");
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertNotNull(obj60);
// flaky:         org.junit.Assert.assertEquals(obj60.toString(), "\uc624\uc804\uc2dc\ubd84\ucd08]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "\uc624\uc804\uc2dc\ubd84\ucd08]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "\uc624\uc804\uc2dc\ubd84\ucd08]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\uc624\uc804\uc2dc\ubd84\ucd08" + "'", str61, "\uc624\uc804\uc2dc\ubd84\ucd08");
        org.junit.Assert.assertNotNull(obj62);
// flaky:         org.junit.Assert.assertEquals(obj62.toString(), "\uc624\uc804\uc2dc\ubd84\ucd08]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "\uc624\uc804\uc2dc\ubd84\ucd08]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "\uc624\uc804\uc2dc\ubd84\ucd08]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=43,ERA=1,YEAR=54,MONTH=41,WEEK_OF_YEAR=24,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=32,MINUTE=45,SECOND=-1,MILLISECOND=243,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 53 + "'", int65 == 53);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone67);
// flaky:         org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\uc624\uc804\uc2dc\ubd84\ucd08" + "'", str85, "\uc624\uc804\uc2dc\ubd84\ucd08");
    }

    @Test
    public void test20092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20092");
        java.util.Date date5 = new java.util.Date(9, (int) 'x', (int) '#', 2, 7);
        java.lang.String str6 = date5.toLocaleString();
        date5.setSeconds(5);
        date5.setDate(21);
        date5.setHours(126);
        java.lang.Object obj13 = date5.clone();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Wed Feb 26 06:07:05 GMT+00:00 1919");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1919-2-4 2:07:00" + "'", str6, "1919-2-4 2:07:00");
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "Wed Feb 26 06:07:05 GMT+00:00 1919");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "Wed Feb 26 06:07:05 GMT+00:00 1919");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "Wed Feb 26 06:07:05 GMT+00:00 1919");
    }

    @Test
    public void test20093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20093");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone2);
        java.util.Locale locale5 = fastDateFormat4.getLocale();
        boolean boolean6 = fastDateFormat4.getTimeZoneOverridesCalendar();
        java.lang.String str7 = fastDateFormat4.toString();
        java.lang.String str9 = fastDateFormat4.format(1644572099959L);
        java.util.Date date10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = fastDateFormat4.format(date10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FastDateFormat[HH:mm' Uhr 'z]" + "'", str7, "FastDateFormat[HH:mm' Uhr 'z]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "09:35 Uhr GMT+00:00" + "'", str9, "09:35 Uhr GMT+00:00");
    }

    @Test
    public void test20094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20094");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        boolean boolean3 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str4 = fastDateFormat2.toString();
        int int5 = fastDateFormat2.getMaxLengthEstimate();
        java.util.Date date9 = new java.util.Date((-1), 32772, (int) (short) 10);
        java.util.Date date10 = new java.util.Date();
        int int11 = date10.getTimezoneOffset();
        long long12 = date10.getTime();
        boolean boolean13 = date9.before(date10);
        date9.setHours(25);
        java.lang.String str16 = fastDateFormat2.format(date9);
        java.util.TimeZone timeZone17 = fastDateFormat2.getTimeZone();
        java.util.Locale locale18 = fastDateFormat2.getLocale();
        java.lang.Object obj19 = null;
        boolean boolean20 = locale18.equals(obj19);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[zh]" + "'", str4, "FastDateFormat[zh]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Jan 11 01:00:00 GMT+00:00 4630");
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Fri Feb 11 09:43:57 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1644572637205L + "'", long12 == 1644572637205L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "GMT+00:001" + "'", str16, "GMT+00:001");
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test20095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20095");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(35);
        int int2 = parsePosition1.getErrorIndex();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test20096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20096");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setMinimalDaysInFirstWeek((int) (short) 10);
        java.util.Date date3 = calendar0.getTime();
        calendar0.set(122, 0, 2022, 1970, 43);
        int int10 = calendar0.getWeeksInWeekYear();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13, locale15);
        java.text.ParsePosition parsePosition18 = new java.text.ParsePosition(16);
        int int19 = parsePosition18.getErrorIndex();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        boolean boolean22 = parsePosition18.equals((java.lang.Object) locale20);
        java.lang.String str23 = locale20.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13, locale20);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone26, locale28);
        long long30 = calendar29.getTimeInMillis();
        java.lang.String str31 = fastDateFormat24.format(calendar29);
        java.lang.String[] strArray33 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        java.util.stream.Stream<java.lang.String> strStream36 = strList34.stream();
        boolean boolean38 = strList34.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor40 = strList34.listIterator(0);
        java.lang.String[] strArray42 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.util.stream.Stream<java.lang.String> strStream45 = strList43.stream();
        boolean boolean47 = strList43.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor49 = strList43.listIterator(0);
        java.lang.String[] strArray51 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.util.stream.Stream<java.lang.String> strStream54 = strList52.stream();
        java.util.ListIterator<java.lang.String> strItor55 = strList52.listIterator();
        boolean boolean56 = strList43.removeAll((java.util.Collection<java.lang.String>) strList52);
        boolean boolean57 = strList34.containsAll((java.util.Collection<java.lang.String>) strList43);
        boolean boolean59 = strList43.remove((java.lang.Object) 0.0d);
        boolean boolean60 = calendar29.before((java.lang.Object) 0.0d);
        int int61 = calendar29.getWeekYear();
        java.util.Date date62 = new java.util.Date();
        int int63 = date62.getTimezoneOffset();
        long long64 = date62.getTime();
        java.util.Date date65 = new java.util.Date();
        int int66 = date65.getSeconds();
        long long67 = date65.getTime();
        date65.setTime((long) ' ');
        int int70 = date65.getTimezoneOffset();
        boolean boolean71 = date62.before(date65);
        java.util.Date date75 = new java.util.Date(11, 11, 3);
        boolean boolean76 = date62.before(date75);
        java.util.Date date77 = new java.util.Date();
        int int78 = date77.getDay();
        java.util.Date date79 = new java.util.Date();
        date79.setMinutes((int) '#');
        boolean boolean82 = date77.before(date79);
        int int83 = date79.getHours();
        boolean boolean84 = date62.before(date79);
        java.time.Instant instant85 = date62.toInstant();
        java.util.Date date86 = java.util.Date.from(instant85);
        calendar29.setTime(date86);
        calendar0.setTime(date86);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572637238,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=10,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=338,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Fri Feb 11 09:43:57 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644572637238,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=338,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u671d\u9c9c\u6587" + "'", str23, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1644572637238,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=338,ZONE_OFFSET=100,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1644572637238L + "'", long30 == 1644572637238L);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\uc624\uc804\uc2dc\ubd84\ucd08" + "'", str31, "\uc624\uc804\uc2dc\ubd84\ucd08");
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strItor40);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strStream45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strItor49);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strStream54);
        org.junit.Assert.assertNotNull(strItor55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
// flaky:         org.junit.Assert.assertEquals(date62.toString(), "Fri Feb 11 09:43:57 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1644572637238L + "'", long64 == 1644572637238L);
// flaky:         org.junit.Assert.assertEquals(date65.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 57 + "'", int66 == 57);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1644572637238L + "'", long67 == 1644572637238L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
// flaky:         org.junit.Assert.assertEquals(date75.toString(), "Sun Dec 03 00:00:00 GMT+00:00 1911");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertEquals(date77.toString(), "Fri Feb 11 09:43:57 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 5 + "'", int78 == 5);
// flaky:         org.junit.Assert.assertEquals(date79.toString(), "Fri Feb 11 09:35:57 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 9 + "'", int83 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertNotNull(date86);
// flaky:         org.junit.Assert.assertEquals(date86.toString(), "Fri Feb 11 09:43:57 GMT+00:00 2022");
    }

    @Test
    public void test20097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20097");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale5.getDisplayName();
        java.lang.String str7 = locale5.getDisplayCountry();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone3, locale5);
        int int10 = calendar8.getActualMinimum(2);
        java.util.TimeZone timeZone11 = calendar8.getTimeZone();
        boolean boolean12 = timeZone11.observesDaylightTime();
        boolean boolean13 = timeZone1.hasSameRules(timeZone11);
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15);
        java.lang.String str17 = fastDateFormat16.toString();
        java.lang.String str18 = fastDateFormat16.toString();
        java.util.TimeZone timeZone19 = fastDateFormat16.getTimeZone();
        java.util.Locale locale20 = fastDateFormat16.getLocale();
        boolean boolean21 = fastDateFormat16.getTimeZoneOverridesCalendar();
        java.lang.String str22 = fastDateFormat16.getPattern();
        java.lang.Object obj23 = fastDateFormat16.clone();
        java.lang.String str24 = fastDateFormat16.getPattern();
        java.util.Locale locale25 = fastDateFormat16.getLocale();
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str27 = timeZone1.getDisplayName(locale25);
        org.junit.Assert.assertNotNull(fastDateFormat0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u5fb7\u6587" + "'", str6, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1644572637302,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=402,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str17, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str18, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "h:mm:ss a z" + "'", str22, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "h:mm:ss a z" + "'", str24, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(strSet26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "GMT+00:00" + "'", str27, "GMT+00:00");
    }

    @Test
    public void test20098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20098");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.time.Instant instant2 = calendar1.toInstant();
        int int3 = calendar1.getMinimalDaysInFirstWeek();
        int int4 = calendar1.getMinimalDaysInFirstWeek();
        java.time.Instant instant5 = calendar1.toInstant();
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("de");
        double double8 = languageRange7.getWeight();
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] { languageRange7 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale.LanguageRange languageRange13 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] { languageRange13 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        boolean boolean19 = timeZone17.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale20.getDisplayName();
        java.lang.String str22 = locale20.getDisplayCountry();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone18, locale20);
        java.util.Locale locale24 = java.util.Locale.ITALIAN;
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = locale25.getLanguage();
        java.lang.String str27 = locale24.getDisplayLanguage(locale25);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale31);
        java.util.Locale locale33 = java.util.Locale.FRANCE;
        java.util.Locale locale34 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone37);
        java.util.Locale locale40 = fastDateFormat39.getLocale();
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = locale42.getLanguage();
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale42.getDisplayVariant(locale44);
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        java.lang.String str47 = locale42.getDisplayVariant(locale46);
        java.util.Locale locale48 = java.util.Locale.ENGLISH;
        java.util.Locale locale49 = java.util.Locale.CHINESE;
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        boolean boolean55 = timeZone53.hasSameRules(timeZone54);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone54);
        java.util.Locale locale57 = fastDateFormat56.getLocale();
        java.util.Locale locale58 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        boolean boolean62 = timeZone60.hasSameRules(timeZone61);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone61);
        java.util.Locale locale64 = fastDateFormat63.getLocale();
        java.util.Locale locale65 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale66 = java.util.Locale.UK;
        java.util.Locale[] localeArray67 = new java.util.Locale[] { locale20, locale24, locale28, locale31, locale33, locale34, locale40, locale41, locale46, locale48, locale49, locale50, locale51, locale57, locale58, locale64, locale65, locale66 };
        java.util.ArrayList<java.util.Locale> localeList68 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList68, localeArray67);
        java.util.Locale locale70 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList68);
        java.util.Locale locale71 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList68);
        java.lang.String[] strArray73 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.util.stream.Stream<java.lang.String> strStream76 = strList74.stream();
        strList74.clear();
        java.lang.String[] strArray79 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        java.util.stream.Stream<java.lang.String> strStream82 = strList80.stream();
        boolean boolean83 = strList74.containsAll((java.util.Collection<java.lang.String>) strList80);
        java.util.Locale.FilteringMode filteringMode84 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList85 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList74, filteringMode84);
        boolean boolean86 = strList74.isEmpty();
        boolean boolean87 = calendar1.after((java.lang.Object) boolean86);
        calendar1.set(1, 23);
        calendar1.setMinimalDaysInFirstWeek(266);
        int int94 = calendar1.getGreatestMinimum((int) (byte) 0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=266,ERA=1,YEAR=23,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=426,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u5fb7\u6587" + "'", str21, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1644572637327,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=427,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zh" + "'", str26, "zh");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str27, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "zh" + "'", str43, "zh");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone54);
// flaky:         org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(fastDateFormat63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strStream76);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(strStream82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + filteringMode84 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode84.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test20099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20099");
        java.util.Locale locale2 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale3);
        calendar4.roll(0, false);
        calendar4.setLenient(true);
        org.junit.Assert.assertEquals(locale2.toString(), "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=487,ZONE_OFFSET=100,DST_OFFSET=0]");
    }

    @Test
    public void test20100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20100");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        boolean boolean6 = fastDateFormat3.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone7 = fastDateFormat3.getTimeZone();
        java.util.TimeZone timeZone8 = fastDateFormat3.getTimeZone();
        java.util.TimeZone.setDefault(timeZone8);
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category10, locale11);
        java.util.Locale locale13 = java.util.Locale.getDefault(category10);
        java.util.Locale locale14 = java.util.Locale.getDefault(category10);
        java.util.Locale locale15 = java.util.Locale.getDefault(category10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("10 Feb 2022 09:39:09 GMT", timeZone8, locale15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: e");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str5, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
    }

    @Test
    public void test20101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20101");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        long long5 = calendar4.getTimeInMillis();
        calendar4.set(2022, (int) 'a', 8);
        calendar4.roll(9, true);
        int int13 = calendar4.getWeeksInWeekYear();
        calendar4.setTimeInMillis(1644572091641L);
        java.util.Locale locale16 = java.util.Locale.UK;
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleKeys();
        boolean boolean20 = calendar4.before((java.lang.Object) strSet19);
        calendar4.setLenient(true);
        int int23 = calendar4.getMinimalDaysInFirstWeek();
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder24.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder27 = builder24.clear();
        java.util.Locale locale28 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder29 = builder27.setLocale(locale28);
        java.util.Locale.Builder builder30 = builder29.clearExtensions();
        boolean boolean31 = calendar4.before((java.lang.Object) builder29);
        int int32 = calendar4.getWeekYear();
        calendar4.setTimeInMillis(1644226950318L);
        java.util.Calendar.Builder builder35 = new java.util.Calendar.Builder();
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        boolean boolean38 = locale36.hasExtensions();
        java.lang.String str39 = locale36.getDisplayCountry();
        java.util.Calendar.Builder builder40 = builder35.setLocale(locale36);
        java.util.Calendar.Builder builder44 = builder35.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder46 = builder35.setLenient(false);
        java.util.Calendar.Builder builder50 = builder35.setTimeOfDay(15, 0, 32770);
        java.util.Calendar.Builder builder53 = builder50.setWeekDefinition(7, 7);
        java.util.Calendar.Builder builder55 = builder50.setLenient(true);
        java.util.TimeZone timeZone57 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone57);
        java.lang.String str59 = fastDateFormat58.toString();
        java.lang.String str60 = fastDateFormat58.toString();
        java.util.TimeZone timeZone61 = fastDateFormat58.getTimeZone();
        java.util.Locale locale62 = fastDateFormat58.getLocale();
        boolean boolean63 = fastDateFormat58.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone64 = fastDateFormat58.getTimeZone();
        timeZone64.setID("Chinesisch");
        java.util.Calendar.Builder builder67 = builder50.setTimeZone(timeZone64);
        int int68 = timeZone64.getRawOffset();
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        boolean boolean71 = timeZone69.hasSameRules(timeZone70);
        java.util.Locale locale72 = java.util.Locale.ROOT;
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone70, locale72);
        int int74 = timeZone70.getRawOffset();
        java.util.TimeZone.setDefault(timeZone70);
        boolean boolean76 = timeZone64.hasSameRules(timeZone70);
        java.lang.String str77 = timeZone70.getID();
        boolean boolean78 = calendar4.before((java.lang.Object) str77);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644226950318,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:37:02 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=38,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=30,MILLISECOND=418,ZONE_OFFSET=100,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1644572637419L + "'", long5 == 1644572637419L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vereinigtes K\366nigreich" + "'", str18, "Vereinigtes K\366nigreich");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "zh" + "'", str37, "zh");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(fastDateFormat58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str59, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str60, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(timeZone64);
        org.junit.Assert.assertEquals(timeZone64.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1644572637419,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=519,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Chinesisch" + "'", str77, "Chinesisch");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test20102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20102");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder5 = builder2.setWeekDefinition(15, 780);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test20103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20103");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("11 Feb 2022 09:36:26 GMT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test20104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20104");
        java.util.Locale locale0 = java.util.Locale.US;
        java.util.Locale locale3 = new java.util.Locale("Deutsch");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u610f\u5927\u5229\u6587", locale3);
        java.lang.String str5 = locale3.getVariant();
        java.util.Locale locale6 = locale3.stripExtensions();
        java.lang.String str7 = locale0.getDisplayLanguage(locale3);
        java.util.Locale.setDefault(locale3);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals(locale3.toString(), "deutsch");
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "deutsch");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
    }

    @Test
    public void test20105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20105");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.StringBuffer stringBuffer4 = null;
        java.lang.StringBuffer stringBuffer5 = fastDateFormat2.format((long) 32772, stringBuffer4);
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getTimezoneOffset();
        long long8 = date6.getTime();
        int int9 = date6.getMinutes();
        java.lang.String str10 = fastDateFormat2.format(date6);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone12, locale14);
        calendar17.setWeekDate(36, (int) (short) 100, (int) (short) 1);
        java.util.TimeZone timeZone22 = calendar17.getTimeZone();
        calendar17.set(37, 0, (int) (short) 100);
        calendar17.setFirstDayOfWeek(37);
        java.lang.StringBuffer stringBuffer29 = null;
        java.text.Format.Field field30 = null;
        java.text.FieldPosition fieldPosition32 = new java.text.FieldPosition(field30, 1);
        int int33 = fieldPosition32.getBeginIndex();
        java.util.TimeZone timeZone35 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone35);
        java.lang.String str37 = fastDateFormat36.toString();
        java.lang.String str38 = fastDateFormat36.toString();
        java.util.TimeZone timeZone39 = fastDateFormat36.getTimeZone();
        java.util.Locale locale40 = fastDateFormat36.getLocale();
        java.util.TimeZone timeZone41 = fastDateFormat36.getTimeZone();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone41);
        java.lang.Object obj43 = timeZone41.clone();
        boolean boolean44 = fieldPosition32.equals((java.lang.Object) timeZone41);
        java.lang.StringBuffer stringBuffer45 = fastDateFormat2.format((java.lang.Object) calendar17, stringBuffer29, fieldPosition32);
        boolean boolean46 = calendar17.isWeekDateSupported();
        int int47 = calendar17.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNull(stringBuffer5);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Feb 11 09:43:57 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1644572637493L + "'", long8 == 1644572637493L);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 43 + "'", int9 == 43);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "German" + "'", str15, "German");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=37,minimalDaysInFirstWeek=4,ERA=1,YEAR=37,MONTH=0,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=100,DAY_OF_YEAR=335,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=593,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str37, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str38, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_US");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1644572637493,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=593,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(stringBuffer45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
    }

    @Test
    public void test20106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20106");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale11 = new java.util.Locale("de");
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale11.getCountry();
        java.util.Calendar.Builder builder14 = builder0.setLocale(locale11);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay((int) 'u', 6, 0, 8);
        java.util.Calendar.Builder builder23 = builder19.setTimeOfDay((int) (byte) 100, 51, 100);
        java.util.Calendar.Builder builder27 = builder19.setTimeOfDay((int) (byte) -1, (int) (short) 10, 50);
        java.util.Calendar.Builder builder31 = builder19.setDate(5, (int) ' ', 32769);
        java.util.Date date32 = new java.util.Date();
        int int33 = date32.getTimezoneOffset();
        int int34 = date32.getSeconds();
        date32.setDate(7);
        long long37 = date32.getTime();
        date32.setMinutes(9);
        date32.setDate(37);
        date32.setTime(1644226503121L);
        int int44 = date32.getSeconds();
        date32.setDate((int) 'x');
        int int47 = date32.getDate();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder48 = builder19.setInstant(date32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "de" + "'", str12, "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertEquals(date32.toString(), "Tue May 31 09:35:03 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 57 + "'", int34 == 57);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1644227037517L + "'", long37 == 1644227037517L);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 31 + "'", int47 == 31);
    }

    @Test
    public void test20107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20107");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone3);
        java.lang.String str5 = fastDateFormat4.toString();
        java.lang.String str6 = fastDateFormat4.toString();
        java.util.TimeZone timeZone7 = fastDateFormat4.getTimeZone();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone7, locale8);
        boolean boolean13 = calendar12.isWeekDateSupported();
        calendar12.set(7, 4, 0);
        java.util.Date date18 = calendar12.getTime();
        java.lang.String str19 = fastDateFormat1.format(calendar12);
        java.lang.String str21 = fastDateFormat1.format(1644572138841L);
        java.util.Date date28 = new java.util.Date((int) '4', 0, 122, 11, 17, (int) (short) 100);
        java.time.Instant instant29 = date28.toInstant();
        java.time.Instant instant30 = date28.toInstant();
        boolean boolean31 = fastDateFormat1.equals((java.lang.Object) instant30);
        java.util.TimeZone timeZone34 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone34);
        java.lang.String str36 = fastDateFormat35.getPattern();
        java.util.TimeZone timeZone37 = fastDateFormat35.getTimeZone();
        java.util.Date date38 = new java.util.Date();
        int int39 = date38.getTimezoneOffset();
        long long40 = date38.getTime();
        date38.setDate((int) (byte) 10);
        long long43 = date38.getTime();
        date38.setHours(32769);
        java.lang.String str46 = fastDateFormat35.format(date38);
        java.util.Date date47 = new java.util.Date();
        int int48 = date47.getDay();
        java.lang.String str49 = fastDateFormat35.format(date47);
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone50);
        int int55 = calendar53.getActualMaximum(0);
        java.lang.String str56 = fastDateFormat35.format(calendar53);
        java.text.ParsePosition parsePosition59 = new java.text.ParsePosition(16);
        int int60 = parsePosition59.getErrorIndex();
        java.lang.String str61 = parsePosition59.toString();
        java.lang.String str62 = parsePosition59.toString();
        java.lang.Object obj63 = fastDateFormat35.parseObject("\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00", parsePosition59);
        java.lang.Object obj64 = fastDateFormat1.parseObject("", parsePosition59);
        org.junit.Assert.assertNotNull(fastDateFormat1);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str5, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str6, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh" + "'", str9, "zh");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-61936150562467,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=633,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 30 09:43:57 GMT+00:00 7");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "April 30, 0007" + "'", str19, "April 30, 0007");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "February 11, 2022" + "'", str21, "February 11, 2022");
        org.junit.Assert.assertEquals(date28.toString(), "Thu May 01 11:18:40 GMT+00:00 1952");
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "h:mm:ss a z" + "'", str36, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Thu Nov 06 09:43:57 GMT+00:00 2025");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1644572637533L + "'", long40 == 1644572637533L);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1644486237533L + "'", long43 == 1644486237533L);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "9:43:57 AM GMT+00:00" + "'", str46, "9:43:57 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Fri Feb 11 09:43:57 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "9:43:57 AM GMT+00:00" + "'", str49, "9:43:57 AM GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1644572637533,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=633,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "9:43:57 AM GMT+00:00" + "'", str56, "9:43:57 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str61, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str62, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertNull(obj63);
        org.junit.Assert.assertNull(obj64);
    }

    @Test
    public void test20108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20108");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale11 = new java.util.Locale("de");
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale11.getCountry();
        java.util.Calendar.Builder builder14 = builder0.setLocale(locale11);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay((int) 'u', 6, 0, 8);
        java.util.Calendar.Builder builder23 = builder19.setTimeOfDay((int) (byte) 100, 51, 100);
        java.util.Calendar.Builder builder27 = builder19.setTimeOfDay((int) (byte) -1, (int) (short) 10, 50);
        java.util.Calendar.Builder builder31 = builder19.setDate(5, (int) ' ', 32769);
        java.util.TimeZone timeZone33 = java.util.TimeZone.getTimeZone("9:34:38 AM UTC");
        int int35 = timeZone33.getOffset(1644572185638L);
        int int37 = timeZone33.getOffset(1644572233022L);
        java.util.Calendar.Builder builder38 = builder31.setTimeZone(timeZone33);
        java.util.Locale locale40 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale40);
        boolean boolean42 = fastDateFormat41.getTimeZoneOverridesCalendar();
        java.lang.String str43 = fastDateFormat41.toString();
        int int44 = fastDateFormat41.getMaxLengthEstimate();
        java.lang.String[] strArray47 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.util.stream.Stream<java.lang.String> strStream50 = strList48.stream();
        boolean boolean52 = strList48.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor54 = strList48.listIterator(0);
        java.lang.String[] strArray56 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        java.util.stream.Stream<java.lang.String> strStream59 = strList57.stream();
        boolean boolean61 = strList57.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor63 = strList57.listIterator(0);
        java.lang.String[] strArray65 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        java.util.stream.Stream<java.lang.String> strStream68 = strList66.stream();
        java.util.ListIterator<java.lang.String> strItor69 = strList66.listIterator();
        boolean boolean70 = strList57.removeAll((java.util.Collection<java.lang.String>) strList66);
        boolean boolean71 = strList48.containsAll((java.util.Collection<java.lang.String>) strList57);
        java.util.Spliterator<java.lang.String> strSpliterator72 = strList57.spliterator();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5e74\u6708\u65e5");
        java.text.ParsePosition parsePosition77 = new java.text.ParsePosition(16);
        java.lang.Object obj78 = fastDateFormat74.parseObject("12:00:00 AM UTC", parsePosition77);
        parsePosition77.setErrorIndex((int) 'a');
        boolean boolean81 = strList57.remove((java.lang.Object) parsePosition77);
        java.lang.Object obj82 = fastDateFormat41.parseObject("\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00", parsePosition77);
        java.util.TimeZone timeZone83 = fastDateFormat41.getTimeZone();
        int int84 = timeZone83.getRawOffset();
        java.util.Calendar.Builder builder85 = builder38.setTimeZone(timeZone83);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "de" + "'", str12, "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "FastDateFormat[zh]" + "'", str43, "FastDateFormat[zh]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 8 + "'", int44 == 8);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strStream50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strItor54);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strStream59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strItor63);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strStream68);
        org.junit.Assert.assertNotNull(strItor69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strSpliterator72);
        org.junit.Assert.assertNotNull(fastDateFormat74);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNotNull(timeZone83);
        org.junit.Assert.assertEquals(timeZone83.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 100 + "'", int84 == 100);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test20109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20109");
        long long6 = java.util.Date.UTC(7, 780, 1973, (int) (byte) 100, 28, 131);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 233814611000L + "'", long6 == 233814611000L);
    }

    @Test
    public void test20110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20110");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-2-11 9:43:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test20111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20111");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor8 = strList2.listIterator(0);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        boolean boolean15 = strList11.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor17 = strList11.listIterator(0);
        java.lang.String[] strArray19 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.stream.Stream<java.lang.String> strStream22 = strList20.stream();
        java.util.ListIterator<java.lang.String> strItor23 = strList20.listIterator();
        boolean boolean24 = strList11.removeAll((java.util.Collection<java.lang.String>) strList20);
        boolean boolean25 = strList2.containsAll((java.util.Collection<java.lang.String>) strList11);
        java.util.Spliterator<java.lang.String> strSpliterator26 = strList11.spliterator();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5e74\u6708\u65e5");
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition(16);
        java.lang.Object obj32 = fastDateFormat28.parseObject("12:00:00 AM UTC", parsePosition31);
        parsePosition31.setErrorIndex((int) 'a');
        boolean boolean35 = strList11.remove((java.lang.Object) parsePosition31);
        java.util.stream.Stream<java.lang.String> strStream36 = strList11.stream();
        int int37 = strList11.size();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = strList11.remove(1969);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1969, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strSpliterator26);
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test20112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20112");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getVariant();
        java.util.Set<java.lang.Character> charSet3 = locale1.getExtensionKeys();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale1);
        int int5 = calendar4.getFirstDayOfWeek();
        calendar4.clear();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = calendar4.getActualMinimum(34);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 34");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertNotNull(calendar4);
        org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test20113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20113");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-2-7 9:43:26", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-2-79:43:26");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test20114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20114");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getLanguage();
        boolean boolean2 = locale0.hasExtensions();
        java.lang.String str3 = locale0.getDisplayScript();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale0);
        int int5 = calendar4.getFirstDayOfWeek();
        long long6 = calendar4.getTimeInMillis();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = calendar4.getMinimum(24356589);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 24356589");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh" + "'", str1, "zh");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572637711,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=811,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1644572637711L + "'", long6 == 1644572637711L);
    }

    @Test
    public void test20115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20115");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.add("hi!");
        strList2.clear();
        java.util.Date date8 = new java.util.Date();
        int int9 = date8.getTimezoneOffset();
        long long10 = date8.getTime();
        int int11 = date8.getHours();
        boolean boolean12 = strList2.contains((java.lang.Object) date8);
        java.util.Locale locale14 = new java.util.Locale("it-x-de");
        boolean boolean15 = strList2.equals((java.lang.Object) locale14);
        java.util.Calendar.Builder builder16 = new java.util.Calendar.Builder();
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = locale17.getLanguage();
        boolean boolean19 = locale17.hasExtensions();
        java.lang.String str20 = locale17.getDisplayCountry();
        java.util.Calendar.Builder builder21 = builder16.setLocale(locale17);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category22, locale23);
        java.util.Locale locale25 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category22, locale25);
        java.lang.String str27 = locale25.toLanguageTag();
        java.util.Calendar.Builder builder28 = builder16.setLocale(locale25);
        java.util.Calendar.Builder builder32 = builder16.setTimeOfDay((int) 'u', 49, 56);
        java.util.Calendar calendar33 = builder16.build();
        int int35 = calendar33.getActualMinimum(8);
        boolean boolean36 = strList2.remove((java.lang.Object) calendar33);
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.lang.String str38 = locale37.getDisplayVariant();
        java.util.Locale locale42 = new java.util.Locale("it", "", "United States");
        java.util.Set<java.lang.Character> charSet43 = locale42.getExtensionKeys();
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.lang.String str45 = locale44.getLanguage();
        boolean boolean46 = locale44.hasExtensions();
        java.lang.String str47 = locale42.getDisplayName(locale44);
        java.lang.String str48 = locale44.getVariant();
        java.lang.String str49 = locale37.getDisplayLanguage(locale44);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(locale44);
        java.util.Locale.setDefault(locale44);
        java.util.Locale locale53 = new java.util.Locale("coreano");
        java.lang.String str54 = locale53.getISO3Country();
        java.lang.String str55 = locale44.getDisplayVariant(locale53);
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("\uc624\uc804\uc2dc\ubd84\ucd08");
        java.lang.String str58 = locale44.getDisplayScript(locale57);
        boolean boolean59 = strList2.remove((java.lang.Object) locale44);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Feb 11 09:43:57 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644572637740L + "'", long10 == 1644572637740L);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals(locale14.toString(), "it-x-de");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh" + "'", str18, "zh");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "deutsch");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "deutsch" + "'", str27, "deutsch");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=424195900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=5,DAY_OF_YEAR=5,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=49,SECOND=56,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "deutsch");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals(locale42.toString(), "it__United States");
        org.junit.Assert.assertNotNull(charSet43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "zh" + "'", str45, "zh");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u610f\u5927\u5229\u6587 (United States)" + "'", str47, "\u610f\u5927\u5229\u6587 (United States)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "deutsch" + "'", str49, "deutsch");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644572637740,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=840,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(locale53.toString(), "coreano");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test20116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20116");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08");
        java.lang.Object obj2 = fastDateFormat1.clone();
        java.lang.String str3 = fastDateFormat1.toString();
        int int4 = fastDateFormat1.getMaxLengthEstimate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj6 = fastDateFormat1.parseObject("9:40:32 AM GMT+00:00");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat1);
        org.junit.Assert.assertNotNull(obj2);
// flaky:         org.junit.Assert.assertEquals(obj2.toString(), "\uc624\uc804\uc2dc\ubd84\ucd08]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "\uc624\uc804\uc2dc\ubd84\ucd08]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "\uc624\uc804\uc2dc\ubd84\ucd08]");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc624\uc804\uc2dc\ubd84\ucd08]" + "'", str3, "\uc624\uc804\uc2dc\ubd84\ucd08]");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 13 + "'", int4 == 13);
    }

    @Test
    public void test20117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20117");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        java.lang.Object obj3 = fastDateFormat2.clone();
        java.util.Calendar.Builder builder4 = new java.util.Calendar.Builder();
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        boolean boolean7 = locale5.hasExtensions();
        java.lang.String str8 = locale5.getDisplayCountry();
        java.util.Calendar.Builder builder9 = builder4.setLocale(locale5);
        java.util.Date date11 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder12 = builder9.setInstant(date11);
        java.lang.String str13 = fastDateFormat2.format(date11);
        java.lang.String str14 = fastDateFormat2.getPattern();
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition(34);
        int int18 = parsePosition17.getIndex();
        java.lang.Object obj19 = fastDateFormat2.parseObject("German", parsePosition17);
        java.lang.String str21 = fastDateFormat2.format(1644572174927L);
        java.util.Locale locale22 = fastDateFormat2.getLocale();
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.lang.String str25 = locale24.getVariant();
        java.util.Set<java.lang.Character> charSet26 = locale24.getExtensionKeys();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(locale24);
        java.util.Date date28 = new java.util.Date();
        int int29 = date28.getTimezoneOffset();
        long long30 = date28.getTime();
        date28.setDate((int) (byte) 10);
        int int33 = date28.getMonth();
        int int34 = date28.getSeconds();
        date28.setHours(19);
        calendar27.setTime(date28);
        calendar27.set(8, 2022, 2730, 6, 100061);
        java.lang.StringBuffer stringBuffer44 = null;
        java.text.Format.Field field45 = null;
        java.text.FieldPosition fieldPosition47 = new java.text.FieldPosition(field45, 24356589);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer48 = fastDateFormat2.format((java.lang.Object) 8, stringBuffer44, fieldPosition47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "FastDateFormat[zh]");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh" + "'", str6, "zh");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(date11.toString(), "Tue Jan 11 09:34:31 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GMT+00:009" + "'", str13, "GMT+00:009");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 34 + "'", int18 == 34);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "GMT+00:009" + "'", str21, "GMT+00:009");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=2022,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=2730,DAY_OF_YEAR=41,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=7,HOUR_OF_DAY=6,MINUTE=100061,SECOND=57,MILLISECOND=888,ZONE_OFFSET=100,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Thu Feb 10 19:43:57 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1644572637788L + "'", long30 == 1644572637788L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 57 + "'", int34 == 57);
    }

    @Test
    public void test20118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20118");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        boolean boolean2 = calendar1.isWeekDateSupported();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale3.getDisplayVariant(locale5);
        boolean boolean7 = calendar1.before((java.lang.Object) str6);
        int int8 = calendar1.getFirstDayOfWeek();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone9);
        calendar1.setTimeZone(timeZone9);
        java.util.Locale locale15 = new java.util.Locale("");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08", timeZone9, locale15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone9);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = calendar17.get(29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572637812,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=912,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh" + "'", str4, "zh");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644572637812,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=912,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1644572637812,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=912,ZONE_OFFSET=100,DST_OFFSET=0]");
    }

    @Test
    public void test20119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20119");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale11 = new java.util.Locale("de");
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale11.getCountry();
        java.util.Calendar.Builder builder14 = builder0.setLocale(locale11);
        java.util.Calendar calendar15 = builder14.build();
        calendar15.set(0, 36, 55);
        java.util.TimeZone timeZone20 = calendar15.getTimeZone();
        java.util.Locale locale24 = new java.util.Locale("zh", "10 Feb 2022 09:36:07 GMT", "java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone20, locale24);
        // The following exception was thrown during execution in test generation
        try {
            int int27 = calendar25.getMaximum(97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "de" + "'", str12, "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=0,MONTH=36,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=55,DAY_OF_YEAR=65,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals(locale24.toString(), "zh_10 FEB 2022 09:36:07 GMT_java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1644572637831,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=931,ZONE_OFFSET=100,DST_OFFSET=0]");
    }

    @Test
    public void test20120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20120");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        long long5 = calendar4.getTimeInMillis();
        calendar4.set((int) (short) 100, 8, (int) '4');
        int int10 = calendar4.getMinimalDaysInFirstWeek();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=8,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=52,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=945,ZONE_OFFSET=100,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1644572637845L + "'", long5 == 1644572637845L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test20121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20121");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        boolean boolean3 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale4);
        java.lang.StringBuffer stringBuffer6 = null;
        java.lang.StringBuffer stringBuffer7 = fastDateFormat2.format(calendar5, stringBuffer6);
        calendar5.set(32769, (-1), 5, 0, (int) (byte) 1);
        calendar5.set((int) (byte) 100, 58, (-99), 5, (-1969));
        calendar5.set(57, (int) (short) 100, (-1969), (int) (short) -1, 38, 3);
        java.util.Date date30 = new java.util.Date(30, 29, 45);
        calendar5.setTime(date30);
        java.lang.String str32 = date30.toLocaleString();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=-1182297600100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1932,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=197,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNull(stringBuffer7);
        org.junit.Assert.assertEquals(date30.toString(), "Fri Jul 15 00:00:00 GMT+00:00 1932");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1932-7-15 0:00:00" + "'", str32, "1932-7-15 0:00:00");
    }

    @Test
    public void test20122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20122");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale5);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale8 = java.util.Locale.getDefault(category0);
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(category0, locale9);
        java.util.Locale locale14 = new java.util.Locale("10.01.4630 00:00:00", "\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00", "11-feb-2022 9.37.07");
        java.lang.String str15 = locale9.getDisplayLanguage(locale14);
        java.lang.String str16 = locale9.getISO3Country();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572637896,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=57,MILLISECOND=996,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00_11-feb-2022 9.37.07");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Japanese" + "'", str15, "Japanese");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "JPN" + "'", str16, "JPN");
    }

    @Test
    public void test20123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20123");
        java.util.Date date6 = new java.util.Date(292278994, 17, 39, 0, (int) (short) 0, (int) (byte) 0);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Oct 10 09:34:08 GMT+00:00 292267154");
    }

    @Test
    public void test20124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20124");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        java.util.TimeZone timeZone3 = fastDateFormat2.getTimeZone();
        int int4 = fastDateFormat2.getMaxLengthEstimate();
        java.lang.String str5 = fastDateFormat2.toString();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FastDateFormat[zh]" + "'", str5, "FastDateFormat[zh]");
    }

    @Test
    public void test20125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20125");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        boolean boolean3 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.Object obj4 = fastDateFormat2.clone();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getTimezoneOffset();
        long long7 = date5.getTime();
        date5.setDate((int) (byte) 10);
        long long10 = date5.getTime();
        int int11 = date5.getYear();
        int int12 = date5.getMonth();
        java.lang.String str13 = date5.toGMTString();
        java.lang.String str14 = fastDateFormat2.format(date5);
        int int15 = date5.getMonth();
        date5.setYear((int) 'a');
        java.lang.String str18 = date5.toLocaleString();
        java.lang.String str19 = date5.toGMTString();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "FastDateFormat[zh]");
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Feb 10 09:43:58 GMT+00:00 1997");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1644572637996L + "'", long7 == 1644572637996L);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644486237996L + "'", long10 == 1644486237996L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 122 + "'", int11 == 122);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "10 Feb 2022 09:43:57 GMT" + "'", str13, "10 Feb 2022 09:43:57 GMT");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "GMT+00:009" + "'", str14, "GMT+00:009");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1997-2-10 9:43:58" + "'", str18, "1997-2-10 9:43:58");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "10 Feb 1997 09:43:57 GMT" + "'", str19, "10 Feb 1997 09:43:57 GMT");
    }

    @Test
    public void test20126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20126");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone0, locale3);
        calendar5.roll(4, true);
        // The following exception was thrown during execution in test generation
        try {
            calendar5.set(21, 2030);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=18,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=133,ZONE_OFFSET=100,DST_OFFSET=0]");
    }

    @Test
    public void test20127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20127");
        java.util.Locale locale2 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale3 = locale2.stripExtensions();
        java.lang.String[] strArray5 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.stream.Stream<java.lang.String> strStream8 = strList6.stream();
        boolean boolean10 = strList6.add("hi!");
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale11.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.lang.String str16 = locale11.getDisplayVariant(locale15);
        boolean boolean17 = strList6.contains((java.lang.Object) locale11);
        java.lang.String str18 = locale11.getVariant();
        boolean boolean19 = locale11.hasExtensions();
        java.lang.String str20 = locale3.getDisplayCountry(locale11);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale11);
        calendar21.setLenient(false);
        calendar21.set((int) (byte) 1, 0);
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone29);
        java.lang.StringBuffer stringBuffer32 = null;
        java.lang.StringBuffer stringBuffer33 = fastDateFormat30.format((long) 32772, stringBuffer32);
        java.util.TimeZone timeZone34 = fastDateFormat30.getTimeZone();
        int int35 = timeZone34.getRawOffset();
        java.lang.String str36 = timeZone34.getID();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone34);
        calendar21.setTimeZone(timeZone34);
        java.lang.String str39 = timeZone34.getID();
        org.junit.Assert.assertEquals(locale2.toString(), "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh" + "'", str12, "zh");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "TUE JAN 11 09:34:31 UTC 2022" + "'", str20, "TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=0,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=149,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertNull(stringBuffer33);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Chinesisch" + "'", str36, "Chinesisch");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Chinesisch" + "'", str39, "Chinesisch");
    }

    @Test
    public void test20128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20128");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("zh");
        java.lang.String[] strArray3 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList4 = new java.util.ArrayList<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList4, strArray3);
        java.util.stream.Stream<java.lang.String> strStream6 = strList4.stream();
        boolean boolean8 = strList4.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor10 = strList4.listIterator(0);
        java.lang.String[] strArray12 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.util.stream.Stream<java.lang.String> strStream15 = strList13.stream();
        boolean boolean17 = strList13.add("hi!");
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.lang.String str19 = locale18.getLanguage();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale18.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.lang.String str23 = locale18.getDisplayVariant(locale22);
        boolean boolean24 = strList13.contains((java.lang.Object) locale18);
        boolean boolean25 = strList4.removeAll((java.util.Collection<java.lang.String>) strList13);
        java.util.TimeZone timeZone27 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone27);
        java.util.Date date29 = new java.util.Date();
        int int30 = date29.getTimezoneOffset();
        int int31 = date29.getSeconds();
        java.lang.StringBuffer stringBuffer32 = null;
        java.text.Format.Field field33 = null;
        java.text.FieldPosition fieldPosition35 = new java.text.FieldPosition(field33, 1);
        fieldPosition35.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer38 = fastDateFormat28.format((java.lang.Object) date29, stringBuffer32, fieldPosition35);
        int int39 = strList4.lastIndexOf((java.lang.Object) fieldPosition35);
        java.lang.String[] strArray41 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.stream.Stream<java.lang.String> strStream44 = strList42.stream();
        boolean boolean46 = strList42.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor48 = strList42.listIterator(0);
        java.lang.String[] strArray50 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.util.stream.Stream<java.lang.String> strStream53 = strList51.stream();
        boolean boolean55 = strList51.add("hi!");
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.lang.String str57 = locale56.getLanguage();
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.lang.String str59 = locale56.getDisplayVariant(locale58);
        java.util.Locale locale60 = java.util.Locale.GERMANY;
        java.lang.String str61 = locale56.getDisplayVariant(locale60);
        boolean boolean62 = strList51.contains((java.lang.Object) locale56);
        boolean boolean63 = strList42.removeAll((java.util.Collection<java.lang.String>) strList51);
        java.lang.String[] strArray65 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        java.util.stream.Stream<java.lang.String> strStream68 = strList66.stream();
        strList66.clear();
        boolean boolean70 = strList66.isEmpty();
        boolean boolean71 = strList66.isEmpty();
        java.util.ListIterator<java.lang.String> strItor72 = strList66.listIterator();
        boolean boolean73 = strList42.retainAll((java.util.Collection<java.lang.String>) strList66);
        boolean boolean74 = strList66.isEmpty();
        boolean boolean75 = strList4.retainAll((java.util.Collection<java.lang.String>) strList66);
        java.util.ListIterator<java.lang.String> strItor77 = strList4.listIterator(0);
        java.util.Locale.FilteringMode filteringMode78 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strList4, filteringMode78);
        java.util.Locale locale82 = new java.util.Locale("java.text.AttributedCharacterIterator$Attribute(input_method_segment)", "cinese");
        java.util.Locale locale83 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar84 = java.util.Calendar.getInstance(locale83);
        java.util.Set<java.lang.String> strSet85 = locale83.getUnicodeLocaleKeys();
        java.util.Calendar calendar86 = java.util.Calendar.getInstance(locale83);
        java.lang.String str87 = locale82.getDisplayVariant(locale83);
        java.util.Set<java.lang.String> strSet88 = locale82.getUnicodeLocaleKeys();
        java.lang.String str89 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet88);
        java.util.Collection<java.util.Locale> localeCollection90 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter(languageRangeList1, localeCollection90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strStream6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strStream15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh" + "'", str19, "zh");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(fastDateFormat28);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Fri Feb 11 09:43:58 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 58 + "'", int31 == 58);
        org.junit.Assert.assertNull(stringBuffer38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strStream44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strStream53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "zh" + "'", str57, "zh");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(strStream68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(strItor72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strItor77);
        org.junit.Assert.assertTrue("'" + filteringMode78 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode78.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertEquals(locale82.toString(), "java.text.attributedcharacteriterator$attribute(input_method_segment)_CINESE");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(calendar84);
// flaky:         org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=1644572638081,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=181,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertNotNull(calendar86);
// flaky:         org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=1644572638081,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=181,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNull(str89);
    }

    @Test
    public void test20129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20129");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        boolean boolean3 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.Object obj4 = fastDateFormat2.clone();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getTimezoneOffset();
        long long7 = date5.getTime();
        int int8 = date5.getMonth();
        date5.setSeconds(7);
        date5.setSeconds(1);
        java.util.Date date13 = new java.util.Date();
        int int14 = date13.getTimezoneOffset();
        long long15 = date13.getTime();
        int int16 = date13.getMonth();
        date13.setSeconds(7);
        date13.setSeconds(1);
        boolean boolean21 = date5.before(date13);
        java.text.AttributedCharacterIterator attributedCharacterIterator22 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) date5);
        int int23 = fastDateFormat2.getMaxLengthEstimate();
        java.lang.Object obj24 = fastDateFormat2.clone();
        boolean boolean25 = fastDateFormat2.getTimeZoneOverridesCalendar();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "FastDateFormat[zh]");
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 11 09:43:01 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1644572638120L + "'", long7 == 1644572638120L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Fri Feb 11 09:43:01 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644572638120L + "'", long15 == 1644572638120L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(attributedCharacterIterator22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "FastDateFormat[zh]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test20130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20130");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale5);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale8 = java.util.Locale.getDefault(category0);
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.util.Locale.setDefault(category0, locale9);
        java.text.AttributedCharacterIterator.Attribute attribute11 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str12 = attribute11.toString();
        java.util.Date date13 = new java.util.Date();
        int int14 = date13.getTimezoneOffset();
        long long15 = date13.getTime();
        java.util.Date date16 = new java.util.Date();
        int int17 = date16.getSeconds();
        long long18 = date16.getTime();
        date16.setTime((long) ' ');
        int int21 = date16.getTimezoneOffset();
        boolean boolean22 = date13.before(date16);
        boolean boolean23 = attribute11.equals((java.lang.Object) date13);
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category24, locale25);
        java.util.Locale locale27 = java.util.Locale.getDefault(category24);
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String[] strArray34 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.util.stream.Stream<java.lang.String> strStream37 = strList35.stream();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        int int39 = strList35.lastIndexOf((java.lang.Object) locale38);
        java.lang.String str40 = locale27.getDisplayVariant(locale38);
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str43 = locale27.getDisplayVariant(locale41);
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.lang.String str45 = locale44.getLanguage();
        boolean boolean46 = locale44.hasExtensions();
        java.lang.String str47 = locale44.getDisplayScript();
        java.lang.String str48 = locale41.getDisplayCountry(locale44);
        boolean boolean49 = attribute11.equals((java.lang.Object) locale41);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale.Category category51 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category51, locale52);
        java.lang.String str54 = locale52.getScript();
        java.lang.String str55 = locale50.getDisplayCountry(locale52);
        java.lang.String str56 = locale50.getISO3Country();
        java.lang.String str57 = locale41.getDisplayVariant(locale50);
        java.util.Locale.setDefault(category0, locale41);
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        java.util.Locale.setDefault(category0, locale59);
        java.util.Locale.Builder builder61 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder63 = builder61.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder64 = builder61.clear();
        java.util.Locale locale65 = builder64.build();
        java.util.Locale.setDefault(category0, locale65);
        java.util.Locale locale67 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572638146,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=246,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(attribute11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str12, "java.text.AttributedCharacterIterator$Attribute(language)");
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Fri Feb 11 09:43:58 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1644572638146L + "'", long15 == 1644572638146L);
        org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 58 + "'", int17 == 58);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1644572638146L + "'", long18 == 1644572638146L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zh" + "'", str42, "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "zh" + "'", str45, "zh");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertTrue("'" + category51 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category51.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
    }

    @Test
    public void test20131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20131");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor8 = strList2.listIterator(0);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        boolean boolean15 = strList11.add("hi!");
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale16.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale16.getDisplayVariant(locale20);
        boolean boolean22 = strList11.contains((java.lang.Object) locale16);
        boolean boolean23 = strList2.removeAll((java.util.Collection<java.lang.String>) strList11);
        java.util.Locale locale24 = java.util.Locale.UK;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.lang.String str26 = locale24.getDisplayCountry(locale25);
        java.util.Set<java.lang.String> strSet27 = locale24.getUnicodeLocaleKeys();
        boolean boolean28 = strList11.retainAll((java.util.Collection<java.lang.String>) strSet27);
        java.lang.String[] strArray30 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.stream.Stream<java.lang.String> strStream33 = strList31.stream();
        strList31.clear();
        java.util.Spliterator<java.lang.String> strSpliterator35 = strList31.spliterator();
        java.util.stream.Stream<java.lang.String> strStream36 = strList31.parallelStream();
        boolean boolean37 = strList11.addAll((java.util.Collection<java.lang.String>) strList31);
        boolean boolean39 = strList11.add("UTC9");
        java.lang.String[] strArray41 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.stream.Stream<java.lang.String> strStream44 = strList42.stream();
        boolean boolean46 = strList42.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor48 = strList42.listIterator(0);
        java.lang.String[] strArray50 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.util.stream.Stream<java.lang.String> strStream53 = strList51.stream();
        boolean boolean55 = strList51.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor57 = strList51.listIterator(0);
        java.lang.String[] strArray59 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        java.util.stream.Stream<java.lang.String> strStream62 = strList60.stream();
        java.util.ListIterator<java.lang.String> strItor63 = strList60.listIterator();
        boolean boolean64 = strList51.removeAll((java.util.Collection<java.lang.String>) strList60);
        boolean boolean65 = strList42.containsAll((java.util.Collection<java.lang.String>) strList51);
        boolean boolean66 = strList11.addAll((java.util.Collection<java.lang.String>) strList51);
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        java.util.Locale locale69 = java.util.Locale.PRC;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat70 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone68, locale69);
        java.util.Locale.setDefault(locale69);
        java.lang.String str72 = locale69.getDisplayVariant();
        int int73 = strList11.indexOf((java.lang.Object) locale69);
        java.util.ListIterator<java.lang.String> strItor75 = strList11.listIterator(1);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Vereinigtes K\366nigreich" + "'", str26, "Vereinigtes K\366nigreich");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertNotNull(strSpliterator35);
        org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strStream44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strStream53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strStream62);
        org.junit.Assert.assertNotNull(strItor63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat70);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(strItor75);
    }

    @Test
    public void test20132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20132");
        java.util.Date date6 = new java.util.Date(10, (int) (byte) 100, 32769, 36, 10, (int) (short) 100);
        int int7 = date6.getDate();
        long long8 = date6.getTime();
        java.time.Instant instant9 = date6.toInstant();
        org.junit.Assert.assertEquals(date6.toString(), "Fri Jan 18 12:11:40 GMT+00:00 2008");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 18 + "'", int7 == 18);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1200658299900L + "'", long8 == 1200658299900L);
        org.junit.Assert.assertNotNull(instant9);
    }

    @Test
    public void test20133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20133");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("9:34:37 AM UTC");
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229\u6587");
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone2);
        java.util.Locale locale7 = fastDateFormat6.getLocale();
        boolean boolean8 = fastDateFormat6.getTimeZoneOverridesCalendar();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.lang.String str15 = fastDateFormat14.toString();
        java.lang.String str16 = fastDateFormat14.toString();
        java.util.TimeZone timeZone17 = fastDateFormat14.getTimeZone();
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.lang.String str19 = locale18.getLanguage();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale18.getDisplayVariant(locale20);
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone17, locale18);
        boolean boolean23 = calendar22.isWeekDateSupported();
        calendar22.set(7, 4, 0);
        java.util.Date date28 = calendar22.getTime();
        java.lang.String str29 = fastDateFormat11.format(calendar22);
        java.util.TimeZone timeZone30 = fastDateFormat11.getTimeZone();
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition(100);
        java.lang.Object obj34 = fastDateFormat11.parseObject("5:45:53 PM UTC", parsePosition33);
        java.lang.Object obj35 = fastDateFormat6.parseObject("07-Feb-2022 09:35:57", parsePosition33);
        java.lang.Object obj36 = fastDateFormat6.clone();
        int int37 = fastDateFormat6.getMaxLengthEstimate();
        java.util.Date date44 = new java.util.Date(8, (int) (byte) 1, 101, 97, 24, (-4871));
        java.lang.String str45 = fastDateFormat6.format(date44);
        java.util.Locale locale46 = java.util.Locale.FRENCH;
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(locale46);
        java.util.Date date54 = new java.util.Date(9, 11, (int) '4', 35, 40, 100);
        boolean boolean55 = calendar47.after((java.lang.Object) 35);
        java.util.Date date56 = calendar47.getTime();
        int int57 = date56.getSeconds();
        int int58 = date44.compareTo(date56);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str15, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str16, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh" + "'", str19, "zh");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=-61936150561757,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=343,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(date28);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Sat Apr 30 09:43:58 GMT+00:00 7");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u5e74\u6708\u65e5" + "'", str29, "\u5e74\u6708\u65e5");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "FastDateFormat[yyyy-M-d]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "FastDateFormat[yyyy-M-d]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "FastDateFormat[yyyy-M-d]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 12 + "'", int37 == 12);
        org.junit.Assert.assertEquals(date44.toString(), "Fri May 15 00:02:49 GMT+00:00 1908");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1908-5-15" + "'", str45, "1908-5-15");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1644572638243,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=343,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date54.toString(), "Sat Jan 22 11:41:40 GMT+00:00 1910");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(date56);
// flaky:         org.junit.Assert.assertEquals(date56.toString(), "Fri Feb 11 09:43:58 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 58 + "'", int57 == 58);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test20134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20134");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getWeeksInWeekYear();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        boolean boolean6 = timeZone2.hasSameRules(timeZone4);
        calendar0.setTimeZone(timeZone2);
        calendar0.set((int) (byte) 100, (int) (byte) 1, 0, 6, (-1));
        java.util.Date date14 = calendar0.getTime();
        int int15 = calendar0.getWeekYear();
        int int16 = calendar0.getMinimalDaysInFirstWeek();
        int int17 = calendar0.getFirstDayOfWeek();
        boolean boolean18 = calendar0.isLenient();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-59009018401723,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=59,SECOND=58,MILLISECOND=377,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 53 + "'", int1 == 53);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Fri Jan 31 05:59:58 GMT+00:00 100");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test20135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20135");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder11 = builder0.setLenient(false);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay(15, 0, 32770);
        java.util.Calendar.Builder builder18 = builder15.setWeekDefinition(7, 7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar19 = builder15.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: SECOND");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test20136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20136");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        java.util.TimeZone timeZone3 = fastDateFormat2.getTimeZone();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone4, locale7);
        java.lang.String str10 = locale7.getCountry();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone3, locale7);
        int int13 = timeZone3.getOffset(1644486123583L);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644572638304,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=404,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644572638304,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=404,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test20137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20137");
        java.lang.String[] strArray35 = new java.lang.String[] { "eng", "Jan 10, 4630 12:00:00 AM", "2022-2-11 9:34:42", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "java.util.GregorianCalendar[time=1644572075684,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=15,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=684,ZONE_OFFSET=0,DST_OFFSET=0]", "zh", "java.text.ParsePosition[index=100,errorIndex=-1]", "9:34:41 AM UTC", "Greenwich Mean Time", "Chinese", "\uc624\uc804\uc2dc\ubd84\ucd08", "9:34:37 AM UTC", "9:34:38 AM UTC", "9:34:41 AM UTC", "9:34:37 AM UTC", "Chinese", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "\u4e2d\u6587", "FastDateFormat[h:mm:ss a z]", "Jan 10, 4630 12:00:00 AM", "9:34:41 AM UTC", "it", "\u610f\u5927\u5229\u6587", "Tue Jan 11 09:34:31 UTC 2022", "9:34:38 AM UTC", "", "de", "tedesco", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "\uc624\uc804\uc2dc\ubd84\ucd08", "12:00:00 AM UTC", "eng", "\uc624\uc804\uc2dc\ubd84\ucd08", "\u5e74\u6708\u65e5", "\u610f\u5927\u5229\u6587" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.lang.String str39 = strList36.remove(0);
        boolean boolean41 = strList36.add("Koordinierte Universalzeit");
        java.lang.String[] strArray43 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.util.stream.Stream<java.lang.String> strStream46 = strList44.stream();
        strList44.clear();
        boolean boolean48 = strList44.isEmpty();
        boolean boolean49 = strList44.isEmpty();
        java.util.ListIterator<java.lang.String> strItor50 = strList44.listIterator();
        java.util.Date date51 = new java.util.Date();
        int int52 = date51.getTimezoneOffset();
        date51.setYear(32769);
        int int55 = date51.getYear();
        int int56 = strList44.indexOf((java.lang.Object) int55);
        boolean boolean57 = strList36.addAll((java.util.Collection<java.lang.String>) strList44);
        boolean boolean59 = strList44.add("9:38:28 AM GMT+00:00");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "eng" + "'", str39, "eng");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strStream46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strItor50);
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Thu Feb 11 09:43:58 GMT+00:00 34669");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32769 + "'", int55 == 32769);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test20138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20138");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(19750);
    }

    @Test
    public void test20139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20139");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getTimezoneOffset();
        date1.setYear(32769);
        int int5 = date1.getYear();
        java.util.Calendar.Builder builder6 = builder0.setInstant(date1);
        java.util.Calendar calendar7 = builder6.build();
        calendar7.set(2, 22, 63, 0, 166, 33);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Feb 11 09:43:58 GMT+00:00 34669");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32769 + "'", int5 == 32769);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=22,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=63,DAY_OF_YEAR=42,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=0,MINUTE=166,SECOND=33,MILLISECOND=455,ZONE_OFFSET=100,DST_OFFSET=0]");
    }

    @Test
    public void test20140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20140");
        java.util.Date date6 = new java.util.Date(34, 66697, 1970, 7, 27, 999);
        org.junit.Assert.assertEquals(date6.toString(), "Wed Jun 23 07:43:39 GMT+00:00 7497");
    }

    @Test
    public void test20141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20141");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getSeconds();
        date0.setMinutes((int) (short) 1);
        int int4 = date0.getMinutes();
        date0.setSeconds(50400000);
        date0.setHours(0);
        java.util.Date date10 = new java.util.Date("Friday, February 11, 2022 9:38 AM");
        boolean boolean11 = date0.after(date10);
        int int12 = date0.getHours();
        org.junit.Assert.assertEquals(date0.toString(), "Sun Sep 17 08:01:00 GMT+00:00 2023");
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 58 + "'", int1 == 58);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertEquals(date10.toString(), "Fri Feb 11 09:38:00 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
    }

    @Test
    public void test20142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20142");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder11 = builder0.setLenient(false);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay(15, 0, 32770);
        java.util.Calendar.Builder builder18 = builder15.setWeekDefinition(7, 7);
        java.util.Calendar.Builder builder20 = builder15.setLenient(true);
        java.util.Calendar.Builder builder25 = builder20.setTimeOfDay(41, 45, 13, 11);
        java.util.Calendar.Builder builder27 = builder25.setLenient(false);
        java.util.Calendar.Builder builder31 = builder27.setDate((int) ' ', 4, 20);
        java.util.Calendar.Builder builder36 = builder27.setTimeOfDay(48, (int) 'a', 25, 42);
        java.util.Calendar.Builder builder40 = builder36.setTimeOfDay(0, 58, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder42 = builder40.setInstant(1644572496869L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test20143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20143");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        int int5 = date3.getSeconds();
        java.lang.StringBuffer stringBuffer6 = null;
        java.text.Format.Field field7 = null;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition(field7, 1);
        fieldPosition9.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer12 = fastDateFormat2.format((java.lang.Object) date3, stringBuffer6, fieldPosition9);
        int int13 = date3.getYear();
        date3.setTime(1644572124860L);
        date3.setTime(1644226513232L);
        int int18 = date3.getYear();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals(date3.toString(), "Mon Feb 07 09:35:13 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 58 + "'", int5 == 58);
        org.junit.Assert.assertNull(stringBuffer12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 122 + "'", int13 == 122);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 122 + "'", int18 == 122);
    }

    @Test
    public void test20144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20144");
        java.util.Locale locale4 = new java.util.Locale("10 Feb 2022 09:36:29 GMT", "GMT1", "\uc624\uc804\uc2dc\ubd84\ucd08");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(122, locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 122");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "\uc624\uc804\uc2dc\ubd84\ucd08");
    }

    @Test
    public void test20145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20145");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String[] strArray6 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022", "FastDateFormat[h:mm:ss a z]", "zh", "java.text.ParsePosition[index=16,errorIndex=-1]", "de" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.lang.Object[] objArray9 = strList7.toArray();
        strList7.clear();
        java.lang.String[] strArray12 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.util.stream.Stream<java.lang.String> strStream15 = strList13.stream();
        strList13.clear();
        java.util.Spliterator<java.lang.String> strSpliterator17 = strList13.spliterator();
        boolean boolean18 = strList7.containsAll((java.util.Collection<java.lang.String>) strList13);
        java.lang.Object[] objArray19 = strList13.toArray();
        java.lang.String[] strArray21 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.util.stream.Stream<java.lang.String> strStream24 = strList22.stream();
        strList22.clear();
        java.util.stream.Stream<java.lang.String> strStream26 = strList22.stream();
        boolean boolean27 = strList13.addAll((java.util.Collection<java.lang.String>) strList22);
        java.lang.String[] strArray43 = new java.lang.String[] { "Vereinigtes K\366nigreich", "tedesco (Germania)", "Jan 10, 4630 12:00:00 AM", "Chinese", "", "Tue Jan 11 09:34:31 UTC 2022", "", "Greenwich Mean Time", "Coordinated Universal Time", "", "Greenwich Mean Time", "h:mm:ss a z", "", "coreano", "Greenwich Mean Time" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.lang.String[] strArray47 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.util.stream.Stream<java.lang.String> strStream50 = strList48.stream();
        java.util.ListIterator<java.lang.String> strItor51 = strList48.listIterator();
        int int52 = strList44.lastIndexOf((java.lang.Object) strItor51);
        java.util.stream.Stream<java.lang.String> strStream53 = strList44.stream();
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = locale54.getLanguage();
        java.lang.String str56 = locale54.getDisplayLanguage();
        boolean boolean57 = strList44.equals((java.lang.Object) locale54);
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        boolean boolean60 = timeZone58.hasSameRules(timeZone59);
        java.util.Locale locale61 = java.util.Locale.ROOT;
        java.util.Calendar calendar62 = java.util.Calendar.getInstance(timeZone59, locale61);
        java.lang.String str63 = locale54.getDisplayCountry(locale61);
        int int64 = strList22.lastIndexOf((java.lang.Object) locale54);
        java.lang.String str65 = locale54.getCountry();
        java.lang.String str66 = locale0.getDisplayLanguage(locale54);
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(locale0);
        // The following exception was thrown during execution in test generation
        try {
            int int69 = calendar67.getActualMaximum(30);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 30");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strStream15);
        org.junit.Assert.assertNotNull(strSpliterator17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strStream24);
        org.junit.Assert.assertNotNull(strStream26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strStream50);
        org.junit.Assert.assertNotNull(strItor51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(strStream53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "zh" + "'", str55, "zh");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u4e2d\u6587" + "'", str56, "\u4e2d\u6587");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNotNull(calendar62);
// flaky:         org.junit.Assert.assertEquals(calendar62.toString(), "java.util.GregorianCalendar[time=1644572638429,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=529,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str66, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1644572638429,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=529,ZONE_OFFSET=100,DST_OFFSET=0]");
    }

    @Test
    public void test20146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20146");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(16);
        java.util.Date date2 = new java.util.Date();
        int int3 = date2.getDay();
        java.util.Date date4 = new java.util.Date();
        date4.setMinutes((int) '#');
        boolean boolean7 = date2.before(date4);
        boolean boolean8 = parsePosition1.equals((java.lang.Object) boolean7);
        parsePosition1.setErrorIndex(0);
        boolean boolean12 = parsePosition1.equals((java.lang.Object) 1644226589507L);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Fri Feb 11 09:43:58 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 5 + "'", int3 == 5);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Fri Feb 11 09:35:58 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test20147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20147");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.lang.String[] strArray2 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList3 = new java.util.ArrayList<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList3, strArray2);
        java.util.stream.Stream<java.lang.String> strStream5 = strList3.stream();
        strList3.clear();
        boolean boolean7 = strList3.isEmpty();
        boolean boolean8 = strList3.isEmpty();
        java.util.ListIterator<java.lang.String> strItor9 = strList3.listIterator();
        java.util.Locale locale10 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12, locale14);
        java.lang.String str16 = locale14.getDisplayLanguage();
        java.lang.String str18 = locale14.getUnicodeLocaleType("zh");
        java.lang.String str19 = locale10.getDisplayScript(locale14);
        int int20 = strList3.indexOf((java.lang.Object) locale10);
        int int21 = strList3.size();
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        boolean boolean23 = strList3.remove((java.lang.Object) filteringMode22);
        strList3.clear();
        java.util.Iterator<java.lang.String> strItor25 = strList3.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags(languageRangeList0, (java.util.Collection<java.lang.String>) strList3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644572638464,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=564,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode22.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strItor25);
    }

    @Test
    public void test20148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20148");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone3);
        timeZone3.setRawOffset(3);
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        java.util.TimeZone timeZone12 = fastDateFormat10.getTimeZone();
        boolean boolean13 = timeZone3.hasSameRules(timeZone12);
        boolean boolean14 = timeZone3.observesDaylightTime();
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone3);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone("\uc911\uad6d\uc5b4");
        java.lang.String str18 = timeZone17.getID();
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone20);
        java.lang.StringBuffer stringBuffer23 = null;
        java.lang.StringBuffer stringBuffer24 = fastDateFormat21.format((long) 32772, stringBuffer23);
        java.util.Date date25 = new java.util.Date();
        int int26 = date25.getTimezoneOffset();
        long long27 = date25.getTime();
        int int28 = date25.getMinutes();
        java.lang.String str29 = fastDateFormat21.format(date25);
        java.util.TimeZone timeZone30 = fastDateFormat21.getTimeZone();
        int int32 = timeZone30.getOffset((long) 36);
        boolean boolean33 = timeZone17.hasSameRules(timeZone30);
        timeZone30.setRawOffset(8);
        calendar15.setTimeZone(timeZone30);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone37.hasSameRules(timeZone38);
        java.util.Locale locale40 = java.util.Locale.ROOT;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone38, locale40);
        java.lang.String str42 = locale40.getDisplayLanguage();
        java.lang.String str44 = locale40.getUnicodeLocaleType("zh");
        java.lang.String str45 = locale40.getDisplayScript();
        java.util.Locale locale48 = new java.util.Locale("Tue Jan 11 09:34:31 UTC 2022", "java.text.ParsePosition[index=100,errorIndex=-1]");
        java.lang.String str49 = locale40.getDisplayScript(locale48);
        java.util.Locale locale50 = java.util.Locale.UK;
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.lang.String str52 = locale50.getDisplayCountry(locale51);
        java.lang.String str53 = locale50.getISO3Language();
        java.lang.String str55 = locale50.getExtension('x');
        java.lang.String str56 = locale50.getLanguage();
        java.lang.String str57 = locale50.getScript();
        java.util.Locale.setDefault(locale50);
        java.lang.String str59 = locale40.getDisplayCountry(locale50);
        java.lang.String str60 = locale40.getISO3Language();
        java.lang.String str61 = locale40.getISO3Language();
        java.lang.String[] strArray63 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        java.util.stream.Stream<java.lang.String> strStream66 = strList64.stream();
        boolean boolean68 = strList64.add("hi!");
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        java.lang.String str70 = locale69.getLanguage();
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.lang.String str72 = locale69.getDisplayVariant(locale71);
        java.util.Locale locale73 = java.util.Locale.GERMANY;
        java.lang.String str74 = locale69.getDisplayVariant(locale73);
        boolean boolean75 = strList64.contains((java.lang.Object) locale69);
        java.lang.String str76 = locale40.getDisplayVariant(locale69);
        java.lang.String str77 = locale40.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat78 = org.apache.commons.lang3.time.FastDateFormat.getInstance("java.text.ParsePosition[index=16,errorIndex=-1]", timeZone30, locale40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: j");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "h:mm:ss a z" + "'", str11, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644572638483,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=8,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=486,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "GMT" + "'", str18, "GMT");
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertNull(stringBuffer24);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Fri Feb 11 09:43:58 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1644572638483L + "'", long27 == 1644572638483L);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 43 + "'", int28 == 43);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1644572638484,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=584,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals(locale48.toString(), "tue jan 11 09:34:31 utc 2022_JAVA.TEXT.PARSEPOSITION[INDEX=100,ERRORINDEX=-1]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Vereinigtes K\366nigreich" + "'", str52, "Vereinigtes K\366nigreich");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "eng" + "'", str53, "eng");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "en" + "'", str56, "en");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strStream66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "zh" + "'", str70, "zh");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
    }

    @Test
    public void test20149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20149");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder5 = builder0.addUnicodeLocaleAttribute("Deutsch");
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("04.02.1919 02:07:00");
        java.util.Locale.Builder builder8 = builder5.setLocale(locale7);
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.clear();
        java.util.Locale.Builder builder12 = builder10.setLanguageTag("deu");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder10.setUnicodeLocaleKeyword("italien", "\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: italien [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test20150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20150");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getTimezoneOffset();
        int int2 = date0.getSeconds();
        date0.setDate(7);
        long long5 = date0.getTime();
        date0.setMinutes(9);
        java.util.Date date8 = new java.util.Date();
        int int9 = date8.getTimezoneOffset();
        date8.setMonth(0);
        int int12 = date8.getSeconds();
        int int13 = date8.getDate();
        boolean boolean14 = date0.before(date8);
        int int15 = date8.getDay();
        java.util.Date date17 = new java.util.Date("Fri Feb 11 09:34:53 GMT 2022");
        date17.setSeconds(13);
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        java.util.TimeZone timeZone24 = fastDateFormat22.getTimeZone();
        java.util.Date date25 = new java.util.Date();
        int int26 = date25.getTimezoneOffset();
        long long27 = date25.getTime();
        date25.setDate((int) (byte) 10);
        long long30 = date25.getTime();
        date25.setHours(32769);
        java.lang.String str33 = fastDateFormat22.format(date25);
        boolean boolean34 = date17.after(date25);
        boolean boolean35 = date8.before(date17);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Mon Feb 07 09:09:58 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 58 + "'", int2 == 58);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1644227038564L + "'", long5 == 1644227038564L);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Jan 11 09:43:58 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 58 + "'", int12 == 58);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 11 + "'", int13 == 11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertEquals(date17.toString(), "Fri Feb 11 09:34:13 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "h:mm:ss a z" + "'", str23, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Thu Nov 06 09:43:58 GMT+00:00 2025");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1644572638564L + "'", long27 == 1644572638564L);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1644486238564L + "'", long30 == 1644486238564L);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "9:43:58 AM GMT+00:00" + "'", str33, "9:43:58 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test20151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20151");
        java.util.Date date3 = new java.util.Date(30, 55, 20);
        date3.setTime(1641893710878L);
        int int6 = date3.getYear();
        java.util.Date date10 = new java.util.Date(32, 46, (int) '#');
        boolean boolean11 = date3.after(date10);
        int int12 = date10.getDay();
        org.junit.Assert.assertEquals(date3.toString(), "Tue Jan 11 09:35:10 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 122 + "'", int6 == 122);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Dec 05 00:00:00 GMT+00:00 1935");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
    }

    @Test
    public void test20152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20152");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int8 = calendar6.getActualMinimum(2);
        java.util.TimeZone timeZone9 = calendar6.getTimeZone();
        java.util.TimeZone timeZone10 = calendar6.getTimeZone();
        calendar6.clear();
        calendar6.set(7, 46, 45);
        calendar6.set(100, (int) (short) 1, 1970);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone20);
        timeZone20.setRawOffset(40);
        boolean boolean26 = timeZone20.observesDaylightTime();
        int int28 = timeZone20.getOffset(1644572074258L);
        boolean boolean29 = calendar6.before((java.lang.Object) 1644572074258L);
        java.util.Calendar.Builder builder30 = new java.util.Calendar.Builder();
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = locale31.getLanguage();
        boolean boolean33 = locale31.hasExtensions();
        java.lang.String str34 = locale31.getDisplayCountry();
        java.util.Calendar.Builder builder35 = builder30.setLocale(locale31);
        java.util.Calendar.Builder builder39 = builder30.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder41 = builder30.setLenient(false);
        java.util.Calendar.Builder builder45 = builder30.setTimeOfDay(15, 0, 32770);
        java.util.Calendar.Builder builder48 = builder45.setWeekDefinition(7, 7);
        java.util.Calendar.Builder builder50 = builder45.setLenient(true);
        java.util.TimeZone timeZone52 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone52);
        java.lang.String str54 = fastDateFormat53.toString();
        java.lang.String str55 = fastDateFormat53.toString();
        java.util.TimeZone timeZone56 = fastDateFormat53.getTimeZone();
        java.util.Locale locale57 = fastDateFormat53.getLocale();
        boolean boolean58 = fastDateFormat53.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone59 = fastDateFormat53.getTimeZone();
        timeZone59.setID("Chinesisch");
        java.util.Calendar.Builder builder62 = builder45.setTimeZone(timeZone59);
        int int63 = timeZone59.getRawOffset();
        int int64 = timeZone59.getRawOffset();
        java.util.TimeZone.setDefault(timeZone59);
        calendar6.setTimeZone(timeZone59);
        java.util.Date date67 = calendar6.getTime();
        int int68 = date67.getDate();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "German" + "'", str4, "German");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-58838832000100,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=105,MONTH=5,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=23,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1644572638611,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=711,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 40 + "'", int28 == 40);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zh" + "'", str32, "zh");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str54, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str55, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 100 + "'", int63 == 100);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertNotNull(date67);
        org.junit.Assert.assertEquals(date67.toString(), "Mon Jun 23 00:00:00 GMT+00:00 105");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 23 + "'", int68 == 23);
    }

    @Test
    public void test20153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20153");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category3, locale4);
        java.util.Locale locale6 = java.util.Locale.getDefault(category3);
        boolean boolean7 = locale6.hasExtensions();
        java.lang.String[] strArray13 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.stream.Stream<java.lang.String> strStream16 = strList14.stream();
        java.util.Locale locale17 = java.util.Locale.JAPANESE;
        int int18 = strList14.lastIndexOf((java.lang.Object) locale17);
        java.lang.String str19 = locale6.getDisplayVariant(locale17);
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale6.getDisplayVariant(locale20);
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.text.Format.Field field26 = null;
        java.text.FieldPosition fieldPosition28 = new java.text.FieldPosition(field26, 3);
        int int29 = fieldPosition28.getBeginIndex();
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.lang.String str32 = locale31.getVariant();
        java.util.Set<java.lang.Character> charSet33 = locale31.getExtensionKeys();
        boolean boolean34 = fieldPosition28.equals((java.lang.Object) locale31);
        java.util.Locale.setDefault(category24, locale31);
        java.util.Locale locale36 = java.util.Locale.getDefault(category24);
        java.util.Locale.setDefault(category0, locale36);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh" + "'", str21, "zh");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
    }

    @Test
    public void test20154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20154");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        strList2.clear();
        java.lang.String[] strArray7 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.stream.Stream<java.lang.String> strStream10 = strList8.stream();
        boolean boolean11 = strList2.containsAll((java.util.Collection<java.lang.String>) strList8);
        java.lang.Object obj12 = null;
        int int13 = strList8.lastIndexOf(obj12);
        java.lang.String[] strArray15 = java.util.TimeZone.getAvailableIDs(7);
        java.lang.Comparable<java.lang.String>[] strComparableArray16 = strList8.toArray((java.lang.Comparable<java.lang.String>[]) strArray15);
        java.lang.Object obj17 = null;
        boolean boolean18 = strList8.remove(obj17);
        strList8.clear();
        java.lang.String[] strArray21 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.util.stream.Stream<java.lang.String> strStream24 = strList22.stream();
        strList22.clear();
        boolean boolean26 = strList22.isEmpty();
        boolean boolean27 = strList22.isEmpty();
        java.util.ListIterator<java.lang.String> strItor28 = strList22.listIterator();
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone31, locale33);
        java.lang.String str35 = locale33.getDisplayLanguage();
        java.lang.String str37 = locale33.getUnicodeLocaleType("zh");
        java.lang.String str38 = locale29.getDisplayScript(locale33);
        int int39 = strList22.indexOf((java.lang.Object) locale29);
        int int40 = strList22.size();
        java.util.Locale.FilteringMode filteringMode41 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        boolean boolean42 = strList22.remove((java.lang.Object) filteringMode41);
        boolean boolean44 = strList22.add("09 November 1916");
        boolean boolean45 = strList8.removeAll((java.util.Collection<java.lang.String>) strList22);
        java.util.Date date47 = new java.util.Date((long) 2);
        date47.setDate(4);
        date47.setDate((int) (byte) 0);
        date47.setSeconds((int) (short) 1);
        int int54 = strList8.lastIndexOf((java.lang.Object) (short) 1);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strComparableArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strStream24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1644572638678,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=778,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + filteringMode41 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode41.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals(date47.toString(), "Wed Dec 31 00:00:01 GMT+00:00 1969");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test20155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20155");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale11 = new java.util.Locale("de");
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale11.getCountry();
        java.util.Calendar.Builder builder14 = builder0.setLocale(locale11);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleKeys();
        java.lang.String str21 = locale17.getDisplayCountry(locale19);
        java.lang.String str22 = locale19.getISO3Country();
        java.util.Locale locale25 = new java.util.Locale("9:34:37 AM UTC", "Fri Feb 11 09:34:34 UTC 2022");
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition(16);
        int int28 = parsePosition27.getErrorIndex();
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone30);
        java.lang.String str32 = fastDateFormat31.getPattern();
        boolean boolean33 = parsePosition27.equals((java.lang.Object) fastDateFormat31);
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        boolean boolean35 = parsePosition27.equals((java.lang.Object) locale34);
        java.lang.String str36 = locale34.getDisplayScript();
        java.lang.String str37 = locale25.getDisplayLanguage(locale34);
        java.lang.String str38 = locale19.getDisplayVariant(locale34);
        java.lang.String str39 = locale11.getDisplayCountry(locale34);
        java.lang.String str41 = locale34.getExtension('x');
        java.util.Set<java.lang.Character> charSet42 = locale34.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "de" + "'", str12, "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh" + "'", str16, "zh");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DEU" + "'", str22, "DEU");
        org.junit.Assert.assertEquals(locale25.toString(), "9:34:37 am utc_FRI FEB 11 09:34:34 UTC 2022");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "h:mm:ss a z" + "'", str32, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "9:34:37 am utc" + "'", str37, "9:34:37 am utc");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(charSet42);
    }

    @Test
    public void test20156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20156");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = locale6.getLanguage();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale6.getDisplayVariant(locale8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone5, locale6);
        java.time.Instant instant11 = calendar10.toInstant();
        java.util.Locale locale13 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale13);
        java.util.TimeZone timeZone15 = fastDateFormat14.getTimeZone();
        calendar10.setTimeZone(timeZone15);
        java.lang.String str17 = timeZone15.getID();
        timeZone15.setRawOffset(32768);
        boolean boolean20 = timeZone15.observesDaylightTime();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh" + "'", str7, "zh");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572638759,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32768,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=859,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinesisch" + "'", str17, "Chinesisch");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test20157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20157");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder7 = builder0.setLenient(false);
        java.util.Calendar.Builder builder9 = builder7.setInstant(1644485752836L);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale12.getDisplayLanguage(locale13);
        java.lang.String str16 = locale10.getDisplayLanguage(locale12);
        boolean boolean17 = locale12.hasExtensions();
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.lang.String str19 = locale18.getLanguage();
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale18.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.lang.String str23 = locale18.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.PRC;
        java.lang.String str25 = locale22.getDisplayScript(locale24);
        java.lang.String str26 = locale12.getDisplayName(locale22);
        java.util.Calendar.Builder builder27 = builder9.setLocale(locale22);
        java.util.Calendar calendar28 = builder27.build();
        java.util.Date date29 = calendar28.getTime();
        java.util.Calendar calendar30 = java.util.Calendar.getInstance();
        int int31 = calendar30.getWeeksInWeekYear();
        java.time.Instant instant32 = calendar30.toInstant();
        java.util.Date date33 = java.util.Date.from(instant32);
        java.util.Date date34 = java.util.Date.from(instant32);
        date34.setMonth(24);
        int int37 = date34.getTimezoneOffset();
        date34.setYear(45);
        int int40 = date29.compareTo(date34);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str15, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "coreano" + "'", str16, "coreano");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh" + "'", str19, "zh");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Italienisch" + "'", str26, "Italienisch");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1644485752836,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=41,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=35,SECOND=52,MILLISECOND=936,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Feb 10 09:35:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1644572638781,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=881,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 53 + "'", int31 == 53);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Fri Feb 11 09:43:58 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Thu Jan 11 09:43:58 GMT+00:00 1945");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test20158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20158");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale3 = new java.util.Locale("9:34:38 AM UTC", "9:34:37 AM UTC");
        java.util.Calendar.Builder builder4 = builder0.setLocale(locale3);
        java.util.Calendar.Builder builder6 = builder0.setLenient(true);
        java.util.Calendar.Builder builder7 = new java.util.Calendar.Builder();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        boolean boolean10 = locale8.hasExtensions();
        java.lang.String str11 = locale8.getDisplayCountry();
        java.util.Calendar.Builder builder12 = builder7.setLocale(locale8);
        java.util.Calendar.Builder builder16 = builder7.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale18 = new java.util.Locale("de");
        java.lang.String str19 = locale18.toLanguageTag();
        java.lang.String str20 = locale18.getCountry();
        java.util.Calendar.Builder builder21 = builder7.setLocale(locale18);
        java.util.Calendar.Builder builder26 = builder21.setTimeOfDay((int) 'u', 6, 0, 8);
        java.util.Calendar.Builder builder30 = builder26.setTimeOfDay((int) (byte) 100, 51, 100);
        java.util.Calendar.Builder builder34 = builder26.setTimeOfDay((int) (byte) -1, (int) (short) 10, 50);
        java.util.Calendar.Builder builder38 = builder26.setWeekDate(41, 5, 41);
        java.util.Calendar.Builder builder39 = new java.util.Calendar.Builder();
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.lang.String str41 = locale40.getLanguage();
        boolean boolean42 = locale40.hasExtensions();
        java.lang.String str43 = locale40.getDisplayCountry();
        java.util.Calendar.Builder builder44 = builder39.setLocale(locale40);
        java.util.Calendar.Builder builder48 = builder39.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale50 = new java.util.Locale("de");
        java.lang.String str51 = locale50.toLanguageTag();
        java.lang.String str52 = locale50.getCountry();
        java.util.Calendar.Builder builder53 = builder39.setLocale(locale50);
        java.util.Calendar.Builder builder54 = new java.util.Calendar.Builder();
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        java.lang.String str56 = locale55.getLanguage();
        boolean boolean57 = locale55.hasExtensions();
        java.lang.String str58 = locale55.getDisplayCountry();
        java.util.Calendar.Builder builder59 = builder54.setLocale(locale55);
        java.util.Calendar.Builder builder63 = builder54.setWeekDate(38, 41, 11);
        java.util.Locale locale66 = new java.util.Locale("java.text.ParsePosition[index=100,errorIndex=-1]", "Jan 10, 4630 12:00:00 AM");
        java.util.Calendar.Builder builder67 = builder63.setLocale(locale66);
        java.util.Calendar.Builder builder68 = new java.util.Calendar.Builder();
        java.util.Locale locale69 = java.util.Locale.CHINESE;
        java.lang.String str70 = locale69.getLanguage();
        boolean boolean71 = locale69.hasExtensions();
        java.lang.String str72 = locale69.getDisplayCountry();
        java.util.Calendar.Builder builder73 = builder68.setLocale(locale69);
        java.util.Calendar.Builder builder77 = builder68.setWeekDate((int) (short) 1, 9, 1);
        int[] intArray80 = new int[] { 14, ' ' };
        java.util.Calendar.Builder builder81 = builder77.setFields(intArray80);
        java.util.Calendar.Builder builder82 = builder67.setFields(intArray80);
        java.util.Calendar.Builder builder83 = builder39.setFields(intArray80);
        java.util.Calendar.Builder builder84 = builder38.setFields(intArray80);
        java.util.Calendar.Builder builder85 = builder6.setFields(intArray80);
        org.junit.Assert.assertEquals(locale3.toString(), "9:34:38 am utc_9:34:37 AM UTC");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh" + "'", str9, "zh");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "de" + "'", str19, "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zh" + "'", str41, "zh");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "de" + "'", str51, "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "zh" + "'", str56, "zh");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals(locale66.toString(), "java.text.parseposition[index=100,errorindex=-1]_JAN 10, 4630 12:00:00 AM");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "zh" + "'", str70, "zh");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[14, 32]");
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test20159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20159");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        long long19 = calendar18.getTimeInMillis();
        java.lang.String str20 = fastDateFormat13.format(calendar18);
        boolean boolean21 = fastDateFormat13.getTimeZoneOverridesCalendar();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone25);
        java.lang.String str27 = fastDateFormat26.toString();
        java.lang.String str28 = fastDateFormat26.toString();
        java.util.TimeZone timeZone29 = fastDateFormat26.getTimeZone();
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale30.getDisplayVariant(locale32);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone29, locale30);
        boolean boolean35 = calendar34.isWeekDateSupported();
        calendar34.set(7, 4, 0);
        java.util.Date date40 = calendar34.getTime();
        java.lang.String str41 = fastDateFormat23.format(calendar34);
        java.util.TimeZone timeZone42 = fastDateFormat23.getTimeZone();
        java.lang.Object obj43 = null;
        boolean boolean44 = fastDateFormat23.equals(obj43);
        java.util.Calendar calendar45 = java.util.Calendar.getInstance();
        int int46 = calendar45.getWeeksInWeekYear();
        java.time.Instant instant47 = calendar45.toInstant();
        int int49 = calendar45.getMinimum(4);
        java.lang.String str50 = fastDateFormat23.format(calendar45);
        java.util.Date date57 = new java.util.Date(45, (int) (byte) 100, (int) '#', 50, 100, 36);
        calendar45.setTime(date57);
        java.util.TimeZone timeZone59 = calendar45.getTimeZone();
        calendar45.set((int) '4', 37, 20, 0, 36, 36);
        java.util.Locale.Category category67 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale68 = java.util.Locale.getDefault(category67);
        java.util.Locale locale69 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category67, locale69);
        java.lang.String str71 = locale69.getCountry();
        java.lang.String str72 = locale69.getDisplayCountry();
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(locale69);
        java.util.Date date80 = new java.util.Date(45, (int) (byte) 100, (int) '#', 50, 100, 36);
        date80.setTime(1644572091641L);
        boolean boolean83 = calendar73.after((java.lang.Object) date80);
        calendar45.setTime(date80);
        java.util.Locale locale86 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat87 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale86);
        java.util.TimeZone timeZone88 = fastDateFormat87.getTimeZone();
        boolean boolean89 = timeZone88.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone88);
        calendar45.setTimeZone(timeZone88);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str92 = fastDateFormat13.format((java.lang.Object) timeZone88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: sun.util.calendar.ZoneInfo");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644572638840,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=940,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u671d\u9c9c\u6587" + "'", str12, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1644572638840,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=940,ZONE_OFFSET=100,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644572638840L + "'", long19 == 1644572638840L);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc624\uc804\uc2dc\ubd84\ucd08" + "'", str20, "\uc624\uc804\uc2dc\ubd84\ucd08");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str27, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str28, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zh" + "'", str31, "zh");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-61936150561160,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=940,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(date40);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Sat Apr 30 09:43:58 GMT+00:00 7");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "30 April 0007" + "'", str41, "30 April 0007");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1644572091641,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=51,MILLISECOND=741,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 53 + "'", int46 == 53);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "11 February 2022" + "'", str50, "11 February 2022");
        org.junit.Assert.assertEquals(date57.toString(), "Sat Jun 06 03:40:36 GMT+00:00 1953");
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + category67 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category67.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1644572638840,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=940,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date80.toString(), "Fri Feb 11 09:34:51 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat87);
        org.junit.Assert.assertNotNull(timeZone88);
        org.junit.Assert.assertEquals(timeZone88.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test20160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20160");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(1969, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test20161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20161");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale11);
        java.util.Locale.setDefault(category7, locale11);
        java.util.Locale locale16 = java.util.Locale.getDefault(category7);
        java.util.Locale.Builder builder17 = builder6.setLocale(locale16);
        java.util.Locale.Builder builder18 = builder6.clearExtensions();
        java.util.Locale.Builder builder19 = builder18.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder21 = builder19.setVariant("16-Mar-1949 12:02:50");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 16-Mar-1949 12:02:50 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tedesco" + "'", str12, "tedesco");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572638895,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=58,MILLISECOND=995,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test20162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20162");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getLanguage();
        java.lang.String str2 = locale0.getDisplayLanguage();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.util.Locale locale6 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale7 = locale6.stripExtensions();
        java.lang.String str8 = locale6.getScript();
        java.lang.String str9 = locale3.getDisplayCountry(locale6);
        java.lang.String str10 = locale3.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh" + "'", str1, "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Chinesisch" + "'", str2, "Chinesisch");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertEquals(locale6.toString(), "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test20163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20163");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Date date8 = new java.util.Date(9, 11, (int) '4', 35, 40, 100);
        boolean boolean9 = calendar1.after((java.lang.Object) 35);
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone11);
        java.lang.String str13 = fastDateFormat12.toString();
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition(16);
        java.util.Date date17 = new java.util.Date();
        int int18 = date17.getDay();
        java.util.Date date19 = new java.util.Date();
        date19.setMinutes((int) '#');
        boolean boolean22 = date17.before(date19);
        boolean boolean23 = parsePosition16.equals((java.lang.Object) boolean22);
        parsePosition16.setErrorIndex(0);
        java.lang.Object obj26 = fastDateFormat12.parseObject("tedesco", parsePosition16);
        boolean boolean27 = calendar1.after((java.lang.Object) "tedesco");
        java.time.Instant instant28 = calendar1.toInstant();
        calendar1.clear();
        int int30 = calendar1.getFirstDayOfWeek();
        boolean boolean32 = calendar1.isSet(6);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertEquals(date8.toString(), "Sat Jan 22 11:41:40 GMT+00:00 1910");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str13, "FastDateFormat[h:mm:ss a z]");
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Fri Feb 11 09:43:59 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Fri Feb 11 09:35:59 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test20164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20164");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.time.Instant instant2 = calendar1.toInstant();
        calendar1.set((int) (short) 1, 37, 44, (int) (short) 10, 0);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale12);
        int int16 = timeZone9.getOffset((long) 2);
        java.util.Locale.Category category17 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category17, locale18);
        java.util.Locale locale20 = java.util.Locale.getDefault(category17);
        java.util.Locale locale21 = java.util.Locale.getDefault(category17);
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone9, locale21);
        calendar24.roll(0, 39);
        boolean boolean28 = calendar1.before((java.lang.Object) 39);
        int int29 = calendar1.getWeeksInWeekYear();
        calendar1.clear();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572638975,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=59,MILLISECOND=75,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category17.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=59,MILLISECOND=75,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
    }

    @Test
    public void test20165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20165");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor8 = strList2.listIterator(0);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        boolean boolean15 = strList11.add("hi!");
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale16.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale16.getDisplayVariant(locale20);
        boolean boolean22 = strList11.contains((java.lang.Object) locale16);
        boolean boolean23 = strList2.removeAll((java.util.Collection<java.lang.String>) strList11);
        java.util.Locale locale24 = java.util.Locale.UK;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.lang.String str26 = locale24.getDisplayCountry(locale25);
        java.util.Set<java.lang.String> strSet27 = locale24.getUnicodeLocaleKeys();
        boolean boolean28 = strList11.retainAll((java.util.Collection<java.lang.String>) strSet27);
        java.lang.String[] strArray30 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.stream.Stream<java.lang.String> strStream33 = strList31.stream();
        strList31.clear();
        java.util.Spliterator<java.lang.String> strSpliterator35 = strList31.spliterator();
        java.util.stream.Stream<java.lang.String> strStream36 = strList31.parallelStream();
        boolean boolean37 = strList11.addAll((java.util.Collection<java.lang.String>) strList31);
        boolean boolean39 = strList11.add("UTC9");
        java.lang.String[] strArray41 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.stream.Stream<java.lang.String> strStream44 = strList42.stream();
        boolean boolean46 = strList42.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor48 = strList42.listIterator(0);
        java.lang.String[] strArray50 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.util.stream.Stream<java.lang.String> strStream53 = strList51.stream();
        boolean boolean55 = strList51.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor57 = strList51.listIterator(0);
        java.lang.String[] strArray59 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        java.util.stream.Stream<java.lang.String> strStream62 = strList60.stream();
        java.util.ListIterator<java.lang.String> strItor63 = strList60.listIterator();
        boolean boolean64 = strList51.removeAll((java.util.Collection<java.lang.String>) strList60);
        boolean boolean65 = strList42.containsAll((java.util.Collection<java.lang.String>) strList51);
        boolean boolean66 = strList11.addAll((java.util.Collection<java.lang.String>) strList51);
        boolean boolean67 = strList51.isEmpty();
        boolean boolean68 = strList51.isEmpty();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Vereinigtes K\366nigreich" + "'", str26, "Vereinigtes K\366nigreich");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertNotNull(strSpliterator35);
        org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strStream44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strItor48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strStream53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strStream62);
        org.junit.Assert.assertNotNull(strItor63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test20166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20166");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        strList2.clear();
        java.util.stream.Stream<java.lang.String> strStream6 = strList2.stream();
        int int7 = strList2.size();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.lang.String str14 = locale10.getDisplayCountry(locale12);
        java.lang.String str15 = locale12.getISO3Country();
        int int16 = strList2.indexOf((java.lang.Object) locale12);
        java.lang.String[] strArray18 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.util.stream.Stream<java.lang.String> strStream21 = strList19.stream();
        boolean boolean23 = strList19.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor25 = strList19.listIterator(0);
        java.lang.String[] strArray27 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.stream.Stream<java.lang.String> strStream30 = strList28.stream();
        boolean boolean32 = strList28.add("hi!");
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale33.getLanguage();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale33.getDisplayVariant(locale35);
        java.util.Locale locale37 = java.util.Locale.GERMANY;
        java.lang.String str38 = locale33.getDisplayVariant(locale37);
        boolean boolean39 = strList28.contains((java.lang.Object) locale33);
        boolean boolean40 = strList19.removeAll((java.util.Collection<java.lang.String>) strList28);
        java.util.Locale locale41 = java.util.Locale.UK;
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.lang.String str43 = locale41.getDisplayCountry(locale42);
        java.util.Set<java.lang.String> strSet44 = locale41.getUnicodeLocaleKeys();
        boolean boolean45 = strList28.retainAll((java.util.Collection<java.lang.String>) strSet44);
        java.lang.String[] strArray47 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.util.stream.Stream<java.lang.String> strStream50 = strList48.stream();
        strList48.clear();
        java.util.Spliterator<java.lang.String> strSpliterator52 = strList48.spliterator();
        java.util.stream.Stream<java.lang.String> strStream53 = strList48.parallelStream();
        boolean boolean54 = strList28.addAll((java.util.Collection<java.lang.String>) strList48);
        boolean boolean55 = strList2.addAll((java.util.Collection<java.lang.String>) strList48);
        boolean boolean56 = strList48.isEmpty();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(strStream6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh" + "'", str9, "zh");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DEU" + "'", str15, "DEU");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strItor25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strStream30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh" + "'", str34, "zh");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Vereinigtes K\366nigreich" + "'", str43, "Vereinigtes K\366nigreich");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strStream50);
        org.junit.Assert.assertNotNull(strSpliterator52);
        org.junit.Assert.assertNotNull(strStream53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test20167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20167");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        timeZone1.setRawOffset(40);
        timeZone1.setID("francese (Francia)");
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone1);
        java.lang.String str10 = timeZone1.getID();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(23, timeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 23");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572639058,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"francese (Francia)\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=59,MILLISECOND=158,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644572639059,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"francese (Francia)\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=59,MILLISECOND=99,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "francese (Francia)" + "'", str10, "francese (Francia)");
    }

    @Test
    public void test20168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20168");
        java.text.ParsePosition parsePosition2 = new java.text.ParsePosition(16);
        int int3 = parsePosition2.getErrorIndex();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone5);
        java.lang.String str7 = fastDateFormat6.getPattern();
        boolean boolean8 = parsePosition2.equals((java.lang.Object) fastDateFormat6);
        int int9 = parsePosition2.getIndex();
        int int10 = parsePosition2.getIndex();
        java.util.Calendar.Builder builder11 = new java.util.Calendar.Builder();
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = locale12.getLanguage();
        boolean boolean14 = locale12.hasExtensions();
        java.lang.String str15 = locale12.getDisplayCountry();
        java.util.Calendar.Builder builder16 = builder11.setLocale(locale12);
        java.util.Calendar.Builder builder20 = builder11.setWeekDate((int) (short) 1, 9, 1);
        int[] intArray23 = new int[] { 14, ' ' };
        java.util.Calendar.Builder builder24 = builder20.setFields(intArray23);
        boolean boolean25 = parsePosition2.equals((java.lang.Object) builder20);
        java.util.Calendar.Builder builder29 = builder20.setTimeOfDay(32770, 50, 38);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone31 = fastDateFormat30.getTimeZone();
        int int32 = timeZone31.getRawOffset();
        java.util.Calendar.Builder builder33 = builder29.setTimeZone(timeZone31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 0, timeZone31);
        int int35 = fastDateFormat34.getMaxLengthEstimate();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "h:mm:ss a z" + "'", str7, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh" + "'", str13, "zh");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[14, 32]");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(fastDateFormat34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 21 + "'", int35 == 21);
    }

    @Test
    public void test20169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20169");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.UK;
        java.lang.String str7 = locale6.toLanguageTag();
        java.util.Locale.setDefault(locale6);
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale11 = new java.util.Locale("de-DE");
        java.util.Locale locale13 = new java.util.Locale("Deutsch");
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition(16);
        java.util.Date date16 = new java.util.Date();
        int int17 = date16.getDay();
        java.util.Date date18 = new java.util.Date();
        date18.setMinutes((int) '#');
        boolean boolean21 = date16.before(date18);
        boolean boolean22 = parsePosition15.equals((java.lang.Object) boolean21);
        parsePosition15.setErrorIndex((int) (short) 10);
        int int25 = parsePosition15.getIndex();
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        java.lang.String str27 = locale26.getLanguage();
        boolean boolean28 = locale26.hasExtensions();
        java.lang.String str29 = locale26.getDisplayScript();
        java.lang.String str30 = locale26.getDisplayScript();
        boolean boolean31 = parsePosition15.equals((java.lang.Object) locale26);
        java.lang.String str32 = locale13.getDisplayLanguage(locale26);
        java.lang.String str33 = locale13.getDisplayVariant();
        java.lang.String str34 = locale11.getDisplayVariant(locale13);
        java.util.Locale.setDefault(category0, locale13);
        java.util.Locale locale37 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale37);
        java.lang.Object obj39 = fastDateFormat38.clone();
        java.util.Locale.Category category40 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale41 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category40, locale41);
        java.util.Locale locale43 = java.util.Locale.getDefault(category40);
        boolean boolean44 = locale43.hasExtensions();
        java.lang.String[] strArray50 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.util.stream.Stream<java.lang.String> strStream53 = strList51.stream();
        java.util.Locale locale54 = java.util.Locale.JAPANESE;
        int int55 = strList51.lastIndexOf((java.lang.Object) locale54);
        java.lang.String str56 = locale43.getDisplayVariant(locale54);
        java.util.Locale locale58 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale58);
        java.lang.String str60 = locale58.getLanguage();
        java.lang.String str61 = locale58.getVariant();
        java.util.Locale locale62 = java.util.Locale.CHINESE;
        java.lang.String str63 = locale62.getLanguage();
        boolean boolean64 = locale62.hasExtensions();
        java.lang.String str65 = locale58.getDisplayCountry(locale62);
        java.util.Locale.Category category66 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale67 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category66, locale67);
        java.util.Locale locale69 = java.util.Locale.getDefault(category66);
        boolean boolean70 = locale69.hasExtensions();
        java.lang.String[] strArray76 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        java.util.stream.Stream<java.lang.String> strStream79 = strList77.stream();
        java.util.Locale locale80 = java.util.Locale.JAPANESE;
        int int81 = strList77.lastIndexOf((java.lang.Object) locale80);
        java.lang.String str82 = locale69.getDisplayVariant(locale80);
        java.lang.String str83 = locale58.getDisplayCountry(locale69);
        java.lang.String str84 = locale54.getDisplayName(locale58);
        boolean boolean85 = fastDateFormat38.equals((java.lang.Object) locale54);
        java.lang.String str86 = locale13.getDisplayCountry(locale54);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "en-GB" + "'", str7, "en-GB");
        org.junit.Assert.assertEquals(locale11.toString(), "de-de");
        org.junit.Assert.assertEquals(locale13.toString(), "deutsch");
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Fri Feb 11 09:43:59 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Fri Feb 11 09:35:59 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "zh" + "'", str27, "zh");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "deutsch" + "'", str32, "deutsch");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "FastDateFormat[zh]");
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category40.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strStream53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "zh" + "'", str60, "zh");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "zh" + "'", str63, "zh");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u4e2d\u56fd" + "'", str65, "\u4e2d\u56fd");
        org.junit.Assert.assertTrue("'" + category66 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category66.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(strStream79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Cina" + "'", str83, "Cina");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u65e5\u6587" + "'", str84, "\u65e5\u6587");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test20170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20170");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        boolean boolean3 = calendar2.isWeekDateSupported();
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.lang.String str5 = locale4.getLanguage();
        java.util.Locale locale6 = java.util.Locale.GERMAN;
        java.lang.String str7 = locale4.getDisplayVariant(locale6);
        boolean boolean8 = calendar2.before((java.lang.Object) str7);
        long long9 = calendar2.getTimeInMillis();
        int int10 = calendar2.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone11 = calendar2.getTimeZone();
        int int12 = timeZone11.getRawOffset();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5e74\u6708\u65e5");
        int int15 = fastDateFormat14.getMaxLengthEstimate();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.Locale locale18 = java.util.Locale.PRC;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone17, locale18);
        boolean boolean20 = fastDateFormat14.equals((java.lang.Object) locale18);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getInstance("11.02.1916 09:34:55", timeZone11, locale18);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 0, timeZone11);
        int int23 = timeZone11.getRawOffset();
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1644572639218,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=59,MILLISECOND=318,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh" + "'", str5, "zh");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572639218L + "'", long9 == 1644572639218L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(fastDateFormat14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
    }

    @Test
    public void test20171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20171");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        timeZone1.setRawOffset((-1));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) -1, timeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test20172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20172");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor8 = strList2.listIterator(0);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        boolean boolean15 = strList11.add("hi!");
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale16.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale16.getDisplayVariant(locale20);
        boolean boolean22 = strList11.contains((java.lang.Object) locale16);
        boolean boolean23 = strList2.removeAll((java.util.Collection<java.lang.String>) strList11);
        java.lang.String[] strArray25 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        java.util.stream.Stream<java.lang.String> strStream28 = strList26.stream();
        strList26.clear();
        boolean boolean30 = strList26.isEmpty();
        boolean boolean31 = strList26.isEmpty();
        java.util.ListIterator<java.lang.String> strItor32 = strList26.listIterator();
        boolean boolean33 = strList2.retainAll((java.util.Collection<java.lang.String>) strList26);
        java.lang.String[] strArray35 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.util.stream.Stream<java.lang.String> strStream38 = strList36.stream();
        strList36.clear();
        boolean boolean40 = strList26.removeAll((java.util.Collection<java.lang.String>) strList36);
        java.lang.String[] strArray46 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022", "FastDateFormat[h:mm:ss a z]", "zh", "java.text.ParsePosition[index=16,errorIndex=-1]", "de" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        java.lang.Object[] objArray49 = strList47.toArray();
        strList47.clear();
        java.lang.String[] strArray52 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        java.util.stream.Stream<java.lang.String> strStream55 = strList53.stream();
        strList53.clear();
        java.util.Spliterator<java.lang.String> strSpliterator57 = strList53.spliterator();
        boolean boolean58 = strList47.containsAll((java.util.Collection<java.lang.String>) strList53);
        boolean boolean59 = strList47.isEmpty();
        boolean boolean60 = strList26.retainAll((java.util.Collection<java.lang.String>) strList47);
        int int62 = strList26.lastIndexOf((java.lang.Object) 1644572171508L);
        boolean boolean64 = strList26.add("Fri Feb 11 09:37:45 GMT+00:00 2022");
        java.util.Spliterator<java.lang.String> strSpliterator65 = strList26.spliterator();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strStream28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strStream38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strStream55);
        org.junit.Assert.assertNotNull(strSpliterator57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strSpliterator65);
    }

    @Test
    public void test20173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20173");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale10.getDisplayCountry();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale10);
        calendar13.set(31, (int) (byte) 100, (int) (byte) 10, (int) (short) 100, 9, 8);
        java.util.Date date24 = new java.util.Date((-1), 32772, (int) (short) 10);
        java.lang.String str25 = date24.toLocaleString();
        calendar13.setTime(date24);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.Locale locale30 = java.util.Locale.GERMAN;
        java.lang.String str31 = locale30.getDisplayName();
        java.lang.String str32 = locale30.getDisplayCountry();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone28, locale30);
        int int35 = calendar33.getActualMinimum(2);
        java.util.TimeZone timeZone36 = calendar33.getTimeZone();
        boolean boolean37 = timeZone36.observesDaylightTime();
        calendar13.setTimeZone(timeZone36);
        boolean boolean39 = timeZone6.hasSameRules(timeZone36);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getTimeZone("java.text.ParsePosition[index=16,errorIndex=-1]");
        boolean boolean42 = timeZone6.hasSameRules(timeZone41);
        java.lang.String str43 = timeZone6.getID();
        java.lang.String str44 = timeZone6.getID();
        int int45 = timeZone6.getRawOffset();
        boolean boolean46 = timeZone6.observesDaylightTime();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(1, timeZone6);
        java.util.Date date48 = new java.util.Date();
        int int49 = date48.getTimezoneOffset();
        int int50 = date48.getSeconds();
        date48.setDate(7);
        java.time.Instant instant53 = date48.toInstant();
        java.util.Date date54 = java.util.Date.from(instant53);
        java.lang.String str55 = date54.toLocaleString();
        java.util.Date date56 = new java.util.Date();
        int int57 = date56.getTimezoneOffset();
        int int58 = date56.getSeconds();
        date56.setDate(7);
        java.time.Instant instant61 = date56.toInstant();
        boolean boolean62 = date54.before(date56);
        java.lang.String str63 = date56.toGMTString();
        long long64 = date56.getTime();
        java.lang.StringBuffer stringBuffer65 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer66 = fastDateFormat47.format(date56, stringBuffer65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str5, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "tedesco" + "'", str11, "tedesco");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=83942265599900,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=4630,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date24.toString(), "Sun Jan 10 00:00:00 GMT+00:00 4630");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "10-Jan-4630 00:00:00" + "'", str25, "10-Jan-4630 00:00:00");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "tedesco" + "'", str31, "tedesco");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644572639299,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=59,MILLISECOND=399,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinesisch" + "'", str43, "Chinesisch");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Chinesisch" + "'", str44, "Chinesisch");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(fastDateFormat47);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Mon Feb 07 09:43:59 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 59 + "'", int50 == 59);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(date54);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Mon Feb 07 09:43:59 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "07-Feb-2022 09:43:59" + "'", str55, "07-Feb-2022 09:43:59");
// flaky:         org.junit.Assert.assertEquals(date56.toString(), "Mon Feb 07 09:43:59 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 59 + "'", int58 == 59);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "7 Feb 2022 09:43:59 GMT" + "'", str63, "7 Feb 2022 09:43:59 GMT");
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1644227039299L + "'", long64 == 1644227039299L);
    }

    @Test
    public void test20174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20174");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setLanguage("DEU");
        java.util.Locale.Builder builder7 = builder4.clear();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder11 = builder7.setExtension('a', "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.setLanguageTag("java.util.GregorianCalendar[time=1644701810735,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=43,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=12,DAY_OF_YEAR=43,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=36,SECOND=50,MILLISECOND=778,ZONE_OFFSET=43,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: java.util.GregorianCalendar[time=1644701810735,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=43,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=12,DAY_OF_YEAR=43,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=36,SECOND=50,MILLISECOND=778,ZONE_OFFSET=43,DST_OFFSET=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test20175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20175");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("it");
        java.util.Locale.Builder builder6 = builder2.setLanguage("coreano");
        java.util.Locale locale7 = builder2.build();
        java.util.Locale.Builder builder8 = builder2.clearExtensions();
        java.util.Locale.Builder builder11 = builder2.setExtension('a', "");
        java.util.Locale.Category category12 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale13 = java.util.Locale.getDefault(category12);
        java.text.Format.Field field14 = null;
        java.text.FieldPosition fieldPosition16 = new java.text.FieldPosition(field14, 3);
        int int17 = fieldPosition16.getBeginIndex();
        java.util.Locale locale18 = java.util.Locale.CHINESE;
        java.util.Locale locale19 = locale18.stripExtensions();
        java.lang.String str20 = locale19.getVariant();
        java.util.Set<java.lang.Character> charSet21 = locale19.getExtensionKeys();
        boolean boolean22 = fieldPosition16.equals((java.lang.Object) locale19);
        java.util.Locale.setDefault(category12, locale19);
        java.util.Locale locale25 = new java.util.Locale("10 Feb 2022 09:35:09 GMT");
        java.util.Locale locale27 = java.util.Locale.ROOT;
        boolean boolean28 = locale27.hasExtensions();
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale27);
        java.lang.String str31 = locale25.getDisplayVariant(locale27);
        java.lang.String str32 = locale27.getLanguage();
        java.lang.String str33 = locale19.getDisplayVariant(locale27);
        java.util.Locale.Builder builder34 = builder11.setLocale(locale19);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "coreano");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.FORMAT + "'", category12.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals(locale25.toString(), "10 feb 2022 09:35:09 gmt");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test20176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20176");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor8 = strList2.listIterator(0);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        boolean boolean15 = strList11.add("hi!");
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale16.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale16.getDisplayVariant(locale20);
        boolean boolean22 = strList11.contains((java.lang.Object) locale16);
        boolean boolean23 = strList2.removeAll((java.util.Collection<java.lang.String>) strList11);
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone25);
        java.util.Date date27 = new java.util.Date();
        int int28 = date27.getTimezoneOffset();
        int int29 = date27.getSeconds();
        java.lang.StringBuffer stringBuffer30 = null;
        java.text.Format.Field field31 = null;
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition(field31, 1);
        fieldPosition33.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer36 = fastDateFormat26.format((java.lang.Object) date27, stringBuffer30, fieldPosition33);
        int int37 = strList2.lastIndexOf((java.lang.Object) fieldPosition33);
        java.util.Date date38 = new java.util.Date();
        int int39 = date38.getDay();
        java.util.Date date40 = new java.util.Date();
        date40.setMinutes((int) '#');
        boolean boolean43 = date38.before(date40);
        boolean boolean44 = fieldPosition33.equals((java.lang.Object) date40);
        int int45 = fieldPosition33.getEndIndex();
        java.text.Format.Field field46 = fieldPosition33.getFieldAttribute();
        java.lang.String str47 = fieldPosition33.toString();
        int int48 = fieldPosition33.getBeginIndex();
        fieldPosition33.setBeginIndex((int) (byte) 10);
        int int51 = fieldPosition33.getBeginIndex();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(fastDateFormat26);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Fri Feb 11 09:43:59 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 59 + "'", int29 == 59);
        org.junit.Assert.assertNull(stringBuffer36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Fri Feb 11 09:43:59 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Fri Feb 11 09:35:59 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNull(field46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "java.text.FieldPosition[field=1,attribute=null,beginIndex=34,endIndex=0]" + "'", str47, "java.text.FieldPosition[field=1,attribute=null,beginIndex=34,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 34 + "'", int48 == 34);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
    }

    @Test
    public void test20177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20177");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone4 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone4);
        java.lang.String str6 = fastDateFormat5.toString();
        java.lang.String str7 = fastDateFormat5.toString();
        java.util.TimeZone timeZone8 = fastDateFormat5.getTimeZone();
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale9.getDisplayVariant(locale11);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale9);
        boolean boolean14 = calendar13.isWeekDateSupported();
        calendar13.set(7, 4, 0);
        java.util.Date date19 = calendar13.getTime();
        java.lang.String str20 = fastDateFormat2.format(calendar13);
        java.util.TimeZone timeZone21 = fastDateFormat2.getTimeZone();
        java.util.Locale locale23 = java.util.Locale.ROOT;
        boolean boolean24 = locale23.hasExtensions();
        java.util.Set<java.lang.String> strSet25 = locale23.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale23);
        java.util.Set<java.lang.String> strSet27 = locale23.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 0, timeZone21, locale23);
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.lang.String str30 = locale29.getLanguage();
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale29.getDisplayVariant(locale31);
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleKeys();
        java.lang.String str35 = locale31.getDisplayCountry(locale33);
        java.util.Locale locale36 = locale33.stripExtensions();
        boolean boolean37 = fastDateFormat28.equals((java.lang.Object) locale36);
        java.lang.String str38 = fastDateFormat28.getPattern();
        int int39 = fastDateFormat28.getMaxLengthEstimate();
        java.lang.String str40 = fastDateFormat28.toString();
        int int41 = fastDateFormat28.getMaxLengthEstimate();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str6, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str7, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh" + "'", str10, "zh");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-61936150560611,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=59,MILLISECOND=489,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Sat Apr 30 09:43:59 GMT+00:00 7");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "30 April 0007" + "'", str20, "30 April 0007");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "zh" + "'", str30, "zh");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "EEEE, MMMM d, yyyy" + "'", str38, "EEEE, MMMM d, yyyy");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 31 + "'", int39 == 31);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "FastDateFormat[EEEE, MMMM d, yyyy]" + "'", str40, "FastDateFormat[EEEE, MMMM d, yyyy]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 31 + "'", int41 == 31);
    }

    @Test
    public void test20178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20178");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Date date7 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder8 = builder5.setInstant(date7);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate((int) (short) -1, (int) '4', 35);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone14);
        java.lang.String str16 = fastDateFormat15.toString();
        java.lang.String str17 = fastDateFormat15.toString();
        java.util.TimeZone timeZone18 = fastDateFormat15.getTimeZone();
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale19.getDisplayVariant(locale21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone18, locale19);
        java.util.Calendar.Builder builder24 = builder12.setTimeZone(timeZone18);
        java.util.Calendar.Builder builder28 = builder24.setDate((int) (short) -1, 38, 52);
        java.util.Calendar calendar29 = builder24.build();
        java.text.AttributedCharacterIterator.Attribute attribute30 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str31 = attribute30.toString();
        java.lang.String str32 = attribute30.toString();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str35 = fastDateFormat33.format((long) 100);
        boolean boolean36 = attribute30.equals((java.lang.Object) str35);
        java.util.TimeZone timeZone38 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone38);
        java.lang.String str40 = fastDateFormat39.getPattern();
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition(16);
        java.util.Date date44 = new java.util.Date();
        int int45 = date44.getDay();
        java.util.Date date46 = new java.util.Date();
        date46.setMinutes((int) '#');
        boolean boolean49 = date44.before(date46);
        boolean boolean50 = parsePosition43.equals((java.lang.Object) boolean49);
        java.lang.Object obj51 = fastDateFormat39.parseObject("eng", parsePosition43);
        boolean boolean52 = fastDateFormat39.getTimeZoneOverridesCalendar();
        boolean boolean53 = attribute30.equals((java.lang.Object) fastDateFormat39);
        java.util.Locale.Builder builder54 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder56 = builder54.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder57 = builder54.clear();
        java.util.Locale.Builder builder58 = builder57.clear();
        java.util.Locale.Builder builder59 = builder57.clearExtensions();
        java.util.Locale.Builder builder60 = builder59.clear();
        boolean boolean61 = attribute30.equals((java.lang.Object) builder59);
        boolean boolean62 = calendar29.after((java.lang.Object) boolean61);
        calendar29.setFirstDayOfWeek(51);
        calendar29.set(55, (int) (byte) 100, 21, 36, 51);
        long long71 = calendar29.getTimeInMillis();
        int int73 = calendar29.getActualMaximum((int) (short) 1);
        calendar29.setFirstDayOfWeek(58);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals(date7.toString(), "Tue Jan 11 09:34:31 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str16, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str17, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh" + "'", str20, "zh");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1644572639417,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=59,MILLISECOND=517,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=-60167012940100,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=58,minimalDaysInFirstWeek=1,ERA=1,YEAR=63,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=142,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=51,SECOND=0,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(attribute30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str31, "java.text.AttributedCharacterIterator$Attribute(language)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str32, "java.text.AttributedCharacterIterator$Attribute(language)");
        org.junit.Assert.assertNotNull(fastDateFormat33);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1/1/70 12:00 AM" + "'", str35, "1/1/70 12:00 AM");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "h:mm:ss a z" + "'", str40, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Fri Feb 11 09:43:59 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Fri Feb 11 09:35:59 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-60167012940100L) + "'", long71 == (-60167012940100L));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 292278994 + "'", int73 == 292278994);
    }

    @Test
    public void test20179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20179");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        boolean boolean6 = timeZone4.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.ROOT;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5, locale7);
        java.lang.String str9 = locale7.getDisplayLanguage();
        java.lang.String str10 = locale3.getDisplayCountry(locale7);
        java.lang.String str11 = locale7.getLanguage();
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale13 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category12, locale13);
        java.util.Locale locale15 = java.util.Locale.getDefault(category12);
        boolean boolean16 = locale15.hasExtensions();
        java.lang.String[] strArray22 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList23 = new java.util.ArrayList<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList23, strArray22);
        java.util.stream.Stream<java.lang.String> strStream25 = strList23.stream();
        java.util.Locale locale26 = java.util.Locale.JAPANESE;
        int int27 = strList23.lastIndexOf((java.lang.Object) locale26);
        java.lang.String str28 = locale15.getDisplayVariant(locale26);
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.lang.String str30 = locale29.getLanguage();
        java.lang.String str31 = locale15.getDisplayVariant(locale29);
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = locale32.getLanguage();
        boolean boolean34 = locale32.hasExtensions();
        java.lang.String str35 = locale32.getDisplayScript();
        java.lang.String str36 = locale29.getDisplayCountry(locale32);
        java.lang.String str37 = locale7.getDisplayVariant(locale29);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale29);
        calendar38.clear();
        int int41 = calendar38.getMinimum(16);
        java.lang.String[] strArray47 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList48 = new java.util.ArrayList<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList48, strArray47);
        java.util.stream.Stream<java.lang.String> strStream50 = strList48.stream();
        boolean boolean52 = strList48.add("Coordinated Universal Time");
        java.lang.Object[] objArray53 = strList48.toArray();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08");
        java.lang.Object obj56 = fastDateFormat55.clone();
        java.lang.String str57 = fastDateFormat55.getPattern();
        java.util.Locale locale58 = fastDateFormat55.getLocale();
        java.lang.String str60 = locale58.getExtension('a');
        boolean boolean61 = strList48.equals((java.lang.Object) locale58);
        boolean boolean62 = strList48.isEmpty();
        boolean boolean63 = calendar38.before((java.lang.Object) strList48);
        java.util.stream.Stream<java.lang.String> strStream64 = strList48.stream();
        java.lang.String str67 = strList48.set(4, "11-Feb-2022 09:38:59");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone71 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat72 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone71);
        java.lang.String str73 = fastDateFormat72.toString();
        java.lang.String str74 = fastDateFormat72.toString();
        java.util.TimeZone timeZone75 = fastDateFormat72.getTimeZone();
        java.util.Locale locale76 = java.util.Locale.CHINESE;
        java.lang.String str77 = locale76.getLanguage();
        java.util.Locale locale78 = java.util.Locale.GERMAN;
        java.lang.String str79 = locale76.getDisplayVariant(locale78);
        java.util.Calendar calendar80 = java.util.Calendar.getInstance(timeZone75, locale76);
        boolean boolean81 = calendar80.isWeekDateSupported();
        calendar80.set(7, 4, 0);
        java.util.Date date86 = calendar80.getTime();
        java.lang.String str87 = fastDateFormat69.format(calendar80);
        java.util.TimeZone timeZone88 = fastDateFormat69.getTimeZone();
        boolean boolean89 = strList48.equals((java.lang.Object) timeZone88);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1644572639455,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=59,MILLISECOND=555,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category12.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strStream25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "zh" + "'", str30, "zh");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "zh" + "'", str33, "zh");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(strStream50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[de, FastDateFormat[h:mm:ss a z], FastDateFormat[h:mm:ss a z], Chinese, Coordinated Universal Time, Coordinated Universal Time]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[de, FastDateFormat[h:mm:ss a z], FastDateFormat[h:mm:ss a z], Chinese, Coordinated Universal Time, Coordinated Universal Time]");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertNotNull(obj56);
// flaky:         org.junit.Assert.assertEquals(obj56.toString(), "\uc624\uc804\uc2dc\ubd84\ucd08]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "\uc624\uc804\uc2dc\ubd84\ucd08]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "\uc624\uc804\uc2dc\ubd84\ucd08]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\uc624\uc804\uc2dc\ubd84\ucd08" + "'", str57, "\uc624\uc804\uc2dc\ubd84\ucd08");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_GB");
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strStream64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Coordinated Universal Time" + "'", str67, "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(fastDateFormat69);
        org.junit.Assert.assertNotNull(fastDateFormat72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str73, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str74, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone75);
        org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "zh" + "'", str77, "zh");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(calendar80);
// flaky:         org.junit.Assert.assertEquals(calendar80.toString(), "java.util.GregorianCalendar[time=-61936150560545,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=59,MILLISECOND=555,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(date86);
// flaky:         org.junit.Assert.assertEquals(date86.toString(), "Sat Apr 30 09:43:59 GMT+00:00 7");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "30 April 0007" + "'", str87, "30 April 0007");
        org.junit.Assert.assertNotNull(timeZone88);
        org.junit.Assert.assertEquals(timeZone88.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test20180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20180");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("it");
        java.util.Locale.Builder builder7 = builder2.setExtension('x', "de");
        java.util.Locale locale8 = builder2.build();
        java.util.Locale.Builder builder10 = builder2.setRegion("");
        java.util.Locale locale11 = java.util.Locale.JAPAN;
        java.lang.String str12 = locale11.getDisplayCountry();
        java.lang.String str13 = locale11.getLanguage();
        java.util.Locale.Builder builder14 = builder10.setLocale(locale11);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it__#x-de");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Giappone" + "'", str12, "Giappone");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ja" + "'", str13, "ja");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test20181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20181");
        long long6 = java.util.Date.UTC((int) (byte) 1, 130, 999, 57, 50, 39);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1749218961000L) + "'", long6 == (-1749218961000L));
    }

    @Test
    public void test20182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20182");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor8 = strList2.listIterator(0);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        boolean boolean15 = strList11.add("hi!");
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale16.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale16.getDisplayVariant(locale20);
        boolean boolean22 = strList11.contains((java.lang.Object) locale16);
        boolean boolean23 = strList2.removeAll((java.util.Collection<java.lang.String>) strList11);
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone25);
        java.util.Date date27 = new java.util.Date();
        int int28 = date27.getTimezoneOffset();
        int int29 = date27.getSeconds();
        java.lang.StringBuffer stringBuffer30 = null;
        java.text.Format.Field field31 = null;
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition(field31, 1);
        fieldPosition33.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer36 = fastDateFormat26.format((java.lang.Object) date27, stringBuffer30, fieldPosition33);
        int int37 = strList2.lastIndexOf((java.lang.Object) fieldPosition33);
        java.util.Date date38 = new java.util.Date();
        int int39 = date38.getDay();
        java.util.Date date40 = new java.util.Date();
        date40.setMinutes((int) '#');
        boolean boolean43 = date38.before(date40);
        boolean boolean44 = fieldPosition33.equals((java.lang.Object) date40);
        int int45 = fieldPosition33.getEndIndex();
        java.lang.String str46 = fieldPosition33.toString();
        int int47 = fieldPosition33.getBeginIndex();
        java.text.Format.Field field48 = fieldPosition33.getFieldAttribute();
        fieldPosition33.setBeginIndex(15);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(fastDateFormat26);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Fri Feb 11 09:43:59 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 59 + "'", int29 == 59);
        org.junit.Assert.assertNull(stringBuffer36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Fri Feb 11 09:43:59 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Fri Feb 11 09:35:59 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "java.text.FieldPosition[field=1,attribute=null,beginIndex=34,endIndex=0]" + "'", str46, "java.text.FieldPosition[field=1,attribute=null,beginIndex=34,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 34 + "'", int47 == 34);
        org.junit.Assert.assertNull(field48);
    }

    @Test
    public void test20183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20183");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate(38, 41, 11);
        java.util.Locale locale12 = new java.util.Locale("java.text.ParsePosition[index=100,errorIndex=-1]", "Jan 10, 4630 12:00:00 AM");
        java.util.Calendar.Builder builder13 = builder9.setLocale(locale12);
        java.util.Calendar.Builder builder14 = new java.util.Calendar.Builder();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        boolean boolean17 = locale15.hasExtensions();
        java.lang.String str18 = locale15.getDisplayCountry();
        java.util.Calendar.Builder builder19 = builder14.setLocale(locale15);
        java.util.Calendar.Builder builder23 = builder14.setWeekDate((int) (short) 1, 9, 1);
        int[] intArray26 = new int[] { 14, ' ' };
        java.util.Calendar.Builder builder27 = builder23.setFields(intArray26);
        java.util.Calendar.Builder builder28 = builder13.setFields(intArray26);
        java.util.Calendar.Builder builder33 = builder28.setTimeOfDay(29, 37, 35, 10);
        java.util.Calendar.Builder builder35 = builder28.setLenient(true);
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder38 = builder36.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder39 = builder36.clear();
        java.util.Locale.Builder builder41 = builder36.addUnicodeLocaleAttribute("Deutsch");
        java.util.Locale.Builder builder42 = builder41.clear();
        java.util.Locale.Category category43 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone44.hasSameRules(timeZone45);
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.lang.String str48 = locale47.getDisplayName();
        java.lang.String str49 = locale47.getDisplayCountry();
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(timeZone45, locale47);
        java.util.Locale.setDefault(category43, locale47);
        java.util.Locale locale52 = java.util.Locale.getDefault(category43);
        java.util.Locale.Builder builder53 = builder42.setLocale(locale52);
        java.util.Locale locale54 = builder42.build();
        java.util.Locale.Builder builder55 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder57 = builder55.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder59 = builder57.setLanguageTag("it");
        java.util.Locale.Builder builder62 = builder57.setExtension('x', "de");
        java.util.Locale locale63 = builder62.build();
        java.util.Set<java.lang.Character> charSet64 = locale63.getExtensionKeys();
        java.util.Locale.Builder builder65 = builder42.setLocale(locale63);
        java.util.Calendar.Builder builder66 = builder28.setLocale(locale63);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale12.toString(), "java.text.parseposition[index=100,errorindex=-1]_JAN 10, 4630 12:00:00 AM");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh" + "'", str16, "zh");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[14, 32]");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + category43 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category43.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "tedesco" + "'", str48, "tedesco");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644572639554,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=59,MILLISECOND=654,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "it__#x-de");
        org.junit.Assert.assertNotNull(charSet64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test20184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20184");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        calendar0.clear();
        calendar0.setTimeInMillis((-698313473000L));
        int int6 = calendar0.getMaximum(0);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-698313473000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1947,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=319,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=2,SECOND=7,MILLISECOND=100,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
    }

    @Test
    public void test20185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20185");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(2022);
        fieldPosition1.setEndIndex(47);
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        boolean boolean6 = fieldPosition1.equals((java.lang.Object) category4);
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale7.getISO3Country();
        java.util.Locale.setDefault(category4, locale7);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = locale14.getDisplayLanguage(locale15);
        java.lang.String str18 = locale12.getDisplayLanguage(locale14);
        boolean boolean19 = locale14.hasExtensions();
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = locale20.getLanguage();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale20.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.lang.String str25 = locale20.getDisplayVariant(locale24);
        java.util.Locale locale26 = java.util.Locale.PRC;
        java.lang.String str27 = locale24.getDisplayScript(locale26);
        java.lang.String str28 = locale14.getDisplayName(locale24);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale24);
        java.util.Locale.setDefault(category4, locale24);
        java.util.Locale locale31 = java.util.Locale.getDefault(category4);
        java.util.Locale locale32 = java.util.Locale.getDefault(category4);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh" + "'", str16, "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str17, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "coreano" + "'", str18, "coreano");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh" + "'", str21, "zh");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Italienisch" + "'", str28, "Italienisch");
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
    }

    @Test
    public void test20186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20186");
        java.lang.String[] strArray5 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.stream.Stream<java.lang.String> strStream8 = strList6.stream();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        int int10 = strList6.lastIndexOf((java.lang.Object) locale9);
        java.util.stream.Stream<java.lang.String> strStream11 = strList6.stream();
        java.util.Iterator<java.lang.String> strItor12 = strList6.iterator();
        java.util.ListIterator<java.lang.String> strItor13 = strList6.listIterator();
        boolean boolean14 = strList6.isEmpty();
        strList6.clear();
        java.util.stream.Stream<java.lang.String> strStream16 = strList6.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = strList6.set(6, "9:34:46 AM UTC");
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strStream16);
    }

    @Test
    public void test20187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20187");
        java.util.Date date6 = new java.util.Date(53, 31, 19, 32768, 45, 50);
        org.junit.Assert.assertEquals(date6.toString(), "Fri May 15 08:45:50 GMT+00:00 1959");
    }

    @Test
    public void test20188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20188");
        java.util.Date date3 = new java.util.Date(30, 55, 20);
        date3.setTime(1641893710878L);
        java.util.Date date9 = new java.util.Date((int) (byte) 100, 3, 53);
        date9.setSeconds((-1));
        date9.setTime(1644572167520L);
        int int14 = date3.compareTo(date9);
        org.junit.Assert.assertEquals(date3.toString(), "Tue Jan 11 09:35:10 GMT+00:00 2022");
        org.junit.Assert.assertEquals(date9.toString(), "Fri Feb 11 09:36:07 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test20189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20189");
        java.util.Date date3 = new java.util.Date(35, 365, 53);
        org.junit.Assert.assertEquals(date3.toString(), "Fri Jul 23 00:00:00 GMT+00:00 1965");
    }

    @Test
    public void test20190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20190");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = locale6.getLanguage();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale6.getDisplayVariant(locale8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone5, locale6);
        int int12 = calendar10.getActualMinimum((int) (short) 0);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1);
        java.text.ParsePosition parsePosition17 = new java.text.ParsePosition(1);
        java.lang.String str18 = parsePosition17.toString();
        java.lang.Object obj19 = fastDateFormat14.parseObject("GMT+00:009", parsePosition17);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        int int24 = timeZone21.getOffset(1644572071852L);
        boolean boolean25 = parsePosition17.equals((java.lang.Object) timeZone21);
        timeZone21.setRawOffset(27);
        boolean boolean28 = timeZone21.observesDaylightTime();
        calendar10.setTimeZone(timeZone21);
        calendar10.clear();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh" + "'", str7, "zh");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=27,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=-1]" + "'", str18, "java.text.ParsePosition[index=1,errorIndex=-1]");
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test20191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20191");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor8 = strList2.listIterator(0);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        boolean boolean15 = strList11.add("hi!");
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale16.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale16.getDisplayVariant(locale20);
        boolean boolean22 = strList11.contains((java.lang.Object) locale16);
        boolean boolean23 = strList2.removeAll((java.util.Collection<java.lang.String>) strList11);
        boolean boolean25 = strList2.add("\uc624\uc804\uc2dc\ubd84\ucd08");
        java.util.Iterator<java.lang.String> strItor26 = strList2.iterator();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet31 = locale30.getExtensionKeys();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone27, locale30);
        calendar32.setMinimalDaysInFirstWeek((int) (short) 0);
        calendar32.setLenient(false);
        int int37 = calendar32.getFirstDayOfWeek();
        boolean boolean38 = strList2.equals((java.lang.Object) calendar32);
        java.lang.String str39 = calendar32.getCalendarType();
        java.lang.String str40 = calendar32.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = calendar32.getMaximum(29);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 29");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strItor26);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1644572639688,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=0,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=59,MILLISECOND=788,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "gregory" + "'", str39, "gregory");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "gregory" + "'", str40, "gregory");
    }

    @Test
    public void test20192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20192");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(100);
        java.lang.String str8 = parsePosition7.toString();
        java.lang.Object obj9 = fastDateFormat2.parseObject("de", parsePosition7);
        java.lang.String str11 = fastDateFormat2.format((long) 11);
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(locale12);
        int int14 = calendar13.getMinimalDaysInFirstWeek();
        java.util.Date date15 = calendar13.getTime();
        int int17 = calendar13.getMaximum(12);
        java.util.TimeZone timeZone18 = calendar13.getTimeZone();
        java.util.Date date19 = calendar13.getTime();
        java.lang.String str20 = fastDateFormat2.format(calendar13);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.text.ParsePosition[index=100,errorIndex=-1]" + "'", str8, "java.text.ParsePosition[index=100,errorIndex=-1]");
        org.junit.Assert.assertNull(obj9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str11, "12:00:00 AM GMT+00:00");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1644572639714,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=59,MILLISECOND=814,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Fri Feb 11 09:43:59 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(date19);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Fri Feb 11 09:43:59 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "9:43:59 AM GMT+00:00" + "'", str20, "9:43:59 AM GMT+00:00");
    }

    @Test
    public void test20193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20193");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.add("hi!");
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayVariant(locale9);
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.lang.String str12 = locale7.getDisplayVariant(locale11);
        boolean boolean13 = strList2.contains((java.lang.Object) locale7);
        java.lang.String str14 = locale7.getVariant();
        java.lang.String str15 = locale7.getISO3Country();
        java.lang.String str16 = locale7.getVariant();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet18 = locale17.getExtensionKeys();
        java.util.Locale locale20 = new java.util.Locale("de");
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale20);
        java.lang.String str22 = locale17.getDisplayVariant(locale20);
        java.lang.String str23 = locale7.getDisplayLanguage(locale20);
        java.lang.String str24 = locale20.getDisplayScript();
        java.text.ParsePosition parsePosition26 = new java.text.ParsePosition(16);
        java.util.Date date27 = new java.util.Date();
        int int28 = date27.getDay();
        java.util.Date date29 = new java.util.Date();
        date29.setMinutes((int) '#');
        boolean boolean32 = date27.before(date29);
        boolean boolean33 = parsePosition26.equals((java.lang.Object) boolean32);
        parsePosition26.setErrorIndex((int) (short) 10);
        int int36 = parsePosition26.getIndex();
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = locale37.getLanguage();
        boolean boolean39 = locale37.hasExtensions();
        java.lang.String str40 = locale37.getDisplayScript();
        java.lang.String str41 = locale37.getDisplayScript();
        boolean boolean42 = parsePosition26.equals((java.lang.Object) locale37);
        java.util.Locale.setDefault(locale37);
        java.lang.String str44 = locale37.getVariant();
        java.lang.String str45 = locale20.getDisplayScript(locale37);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zh" + "'", str8, "zh");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644572639739,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=59,MILLISECOND=839,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Chinesisch" + "'", str23, "Chinesisch");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Fri Feb 11 09:43:59 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 5 + "'", int28 == 5);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Fri Feb 11 09:35:59 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 16 + "'", int36 == 16);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zh" + "'", str38, "zh");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
    }

    @Test
    public void test20194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20194");
        java.lang.String[] strArray5 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.stream.Stream<java.lang.String> strStream8 = strList6.stream();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        int int10 = strList6.lastIndexOf((java.lang.Object) locale9);
        java.util.stream.Stream<java.lang.String> strStream11 = strList6.stream();
        java.lang.Object[] objArray12 = strList6.toArray();
        java.lang.String str14 = strList6.get((int) (short) 1);
        boolean boolean16 = strList6.add("Italienisch");
        java.util.Date date17 = new java.util.Date();
        int int18 = date17.getTimezoneOffset();
        date17.setYear(11);
        int int21 = date17.getDate();
        java.util.Date date22 = new java.util.Date();
        int int23 = date22.getSeconds();
        date22.setMinutes((int) (short) 1);
        boolean boolean26 = date17.after(date22);
        java.time.Instant instant27 = date22.toInstant();
        int int28 = strList6.lastIndexOf((java.lang.Object) date22);
        int int29 = date22.getDay();
        int int30 = date22.getDate();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[de, FastDateFormat[h:mm:ss a z], FastDateFormat[h:mm:ss a z], Chinese, Coordinated Universal Time]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[de, FastDateFormat[h:mm:ss a z], FastDateFormat[h:mm:ss a z], Chinese, Coordinated Universal Time]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str14, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Sat Feb 11 09:43:59 GMT+00:00 1911");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 11 + "'", int21 == 11);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Fri Feb 11 09:01:59 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 59 + "'", int23 == 59);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 11 + "'", int30 == 11);
    }

    @Test
    public void test20195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20195");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder11 = builder0.setLenient(false);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay(15, 0, 32770);
        java.util.Calendar.Builder builder18 = builder15.setWeekDefinition(7, 7);
        java.util.Calendar.Builder builder20 = builder15.setLenient(true);
        java.util.Calendar.Builder builder25 = builder20.setTimeOfDay(41, 45, 13, 11);
        java.util.Calendar.Builder builder27 = builder25.setLenient(false);
        java.util.Calendar.Builder builder31 = builder27.setDate((int) ' ', 4, 20);
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder34 = builder32.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder35 = builder32.clear();
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder37 = builder35.setLocale(locale36);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet39 = locale38.getExtensionKeys();
        java.util.Locale locale40 = java.util.Locale.ITALIAN;
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = locale41.getLanguage();
        java.lang.String str43 = locale40.getDisplayLanguage(locale41);
        java.lang.String str44 = locale38.getDisplayLanguage(locale40);
        java.util.Locale.Builder builder45 = builder35.setLocale(locale40);
        java.util.Locale locale46 = builder35.build();
        java.lang.String str47 = locale46.getCountry();
        java.util.Set<java.lang.Character> charSet48 = locale46.getExtensionKeys();
        java.lang.String[] strArray50 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.util.stream.Stream<java.lang.String> strStream53 = strList51.stream();
        boolean boolean55 = strList51.add("hi!");
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.lang.String str57 = locale56.getLanguage();
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.lang.String str59 = locale56.getDisplayVariant(locale58);
        java.util.Locale locale60 = java.util.Locale.GERMANY;
        java.lang.String str61 = locale56.getDisplayVariant(locale60);
        boolean boolean62 = strList51.contains((java.lang.Object) locale56);
        java.lang.String str63 = locale56.getVariant();
        java.lang.String str64 = locale56.getISO3Country();
        java.lang.String str65 = locale56.getVariant();
        java.util.Locale locale66 = java.util.Locale.KOREA;
        java.util.Set<java.lang.Character> charSet67 = locale66.getExtensionKeys();
        java.util.Locale locale69 = new java.util.Locale("de");
        java.util.Calendar calendar70 = java.util.Calendar.getInstance(locale69);
        java.lang.String str71 = locale66.getDisplayVariant(locale69);
        java.lang.String str72 = locale56.getDisplayLanguage(locale69);
        java.lang.String str73 = locale46.getDisplayName(locale56);
        java.util.Calendar.Builder builder74 = builder27.setLocale(locale46);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder76 = builder27.setCalendarType("\u5fb7\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: ??");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zh" + "'", str42, "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str43, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "coreano" + "'", str44, "coreano");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(charSet48);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strStream53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "zh" + "'", str57, "zh");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(charSet67);
        org.junit.Assert.assertEquals(locale69.toString(), "de");
        org.junit.Assert.assertNotNull(calendar70);
// flaky:         org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=1644572639784,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=59,MILLISECOND=884,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Chinesisch" + "'", str72, "Chinesisch");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str73, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test20196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20196");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("it");
        java.util.Locale.Builder builder7 = builder2.setExtension('x', "de");
        java.util.Locale.Builder builder9 = builder2.setVariant("tedesco");
        java.util.Locale.Builder builder11 = builder2.setVariant("");
        java.util.Locale locale13 = new java.util.Locale("de");
        java.lang.String str14 = locale13.toLanguageTag();
        java.lang.String str15 = locale13.getDisplayVariant();
        java.util.Locale.Builder builder16 = builder11.setLocale(locale13);
        java.util.Locale.Builder builder17 = builder11.clearExtensions();
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder18.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder22 = builder20.setLanguageTag("it");
        java.util.Locale.Builder builder25 = builder20.setExtension('x', "de");
        java.util.Locale locale26 = builder25.build();
        java.util.Locale.Builder builder27 = builder17.setLocale(locale26);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder30 = builder27.setUnicodeLocaleKeyword("java.text.FieldPosition[field=32768,attribute=null,beginIndex=0,endIndex=0]", "CINA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: java.text.FieldPosition[field=32768,attribute=null,beginIndex=0,endIndex=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "de" + "'", str14, "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it__#x-de");
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test20197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20197");
        java.util.Locale locale3 = new java.util.Locale("\u5e74\u6708\u65e5\u661f\u671f\u4e94\u4e0a\u53489:41", "10 Feb 2022 09:42:12 GMT", "");
        org.junit.Assert.assertEquals(locale3.toString(), "\u5e74\u6708\u65e5\u661f\u671f\u4e94\u4e0a\u53489:41_10 FEB 2022 09:42:12 GMT");
    }

    @Test
    public void test20198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20198");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        boolean boolean3 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance();
        int int5 = calendar4.getWeeksInWeekYear();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        boolean boolean10 = timeZone6.hasSameRules(timeZone8);
        calendar4.setTimeZone(timeZone6);
        calendar4.set((int) (byte) 100, (int) (byte) 1, 0, 6, (-1));
        java.lang.String str18 = fastDateFormat2.format(calendar4);
        calendar4.add(14, 14);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        boolean boolean24 = timeZone22.hasSameRules(timeZone23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone22, locale25);
        int int29 = timeZone22.getOffset((long) 2);
        java.util.Locale.Category category30 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale31 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category30, locale31);
        java.util.Locale locale33 = java.util.Locale.getDefault(category30);
        java.util.Locale locale34 = java.util.Locale.getDefault(category30);
        java.util.Locale locale35 = null;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone22, locale34);
        boolean boolean38 = calendar4.before((java.lang.Object) calendar37);
        calendar37.setTimeInMillis(19178631271000L);
        java.util.Date date41 = calendar37.getTime();
        date41.setHours((-1969));
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=-59009018400157,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=59,SECOND=59,MILLISECOND=943,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644572639829,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=59,MILLISECOND=929,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category30.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(calendar37);
        org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=19178631271000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2577,MONTH=8,WEEK_OF_YEAR=40,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=272,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=9,HOUR_OF_DAY=21,MINUTE=34,SECOND=31,MILLISECOND=100,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Tue Jul 08 23:34:31 GMT+00:00 2577");
    }

    @Test
    public void test20199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20199");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int8 = calendar6.getActualMinimum(2);
        java.util.TimeZone timeZone9 = calendar6.getTimeZone();
        java.util.TimeZone timeZone10 = calendar6.getTimeZone();
        calendar6.clear();
        calendar6.set(7, 46, 45);
        int int16 = calendar6.getWeeksInWeekYear();
        java.lang.String str17 = calendar6.getCalendarType();
        calendar6.setMinimalDaysInFirstWeek(292278994);
        long long20 = calendar6.getTimeInMillis();
        java.util.Date date21 = calendar6.getTime();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = locale25.getLanguage();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.lang.String str28 = locale25.getDisplayVariant(locale27);
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.lang.String str30 = locale25.getDisplayVariant(locale29);
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder31.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder34 = builder31.clear();
        java.util.Locale locale35 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder36 = builder34.setLocale(locale35);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        java.util.Locale locale39 = java.util.Locale.ITALIAN;
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.lang.String str41 = locale40.getLanguage();
        java.lang.String str42 = locale39.getDisplayLanguage(locale40);
        java.lang.String str43 = locale37.getDisplayLanguage(locale39);
        java.util.Locale.Builder builder44 = builder34.setLocale(locale39);
        java.util.Locale locale45 = builder34.build();
        java.util.Locale locale46 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str47 = locale45.getDisplayVariant(locale46);
        java.util.Set<java.lang.String> strSet48 = locale45.getUnicodeLocaleAttributes();
        java.lang.String str50 = locale45.getExtension('a');
        java.util.Set<java.lang.Character> charSet51 = locale45.getExtensionKeys();
        java.lang.String str52 = locale45.getDisplayScript();
        java.lang.String str53 = locale25.getDisplayName(locale45);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone24, locale45);
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.lang.String str57 = locale56.getLanguage();
        boolean boolean58 = locale56.hasExtensions();
        java.lang.String str59 = locale56.getDisplayScript();
        java.lang.String str60 = locale56.getDisplayScript();
        java.util.Locale.Category category61 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category61, locale62);
        java.util.Locale locale64 = java.util.Locale.getDefault(category61);
        java.lang.String str65 = locale56.getDisplayLanguage(locale64);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat66 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 1, locale56);
        int int67 = fastDateFormat66.getMaxLengthEstimate();
        java.util.TimeZone timeZone68 = fastDateFormat66.getTimeZone();
        boolean boolean69 = timeZone24.hasSameRules(timeZone68);
        java.util.Calendar calendar70 = java.util.Calendar.getInstance(timeZone24);
        calendar6.setTimeZone(timeZone24);
        int int73 = calendar6.getGreatestMinimum(10);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tedesco" + "'", str4, "tedesco");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=-61821705600100,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=292278994,ERA=?,YEAR=10,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=15,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "gregory" + "'", str17, "gregory");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-61821705600100L) + "'", long20 == (-61821705600100L));
        org.junit.Assert.assertNotNull(date21);
        org.junit.Assert.assertEquals(date21.toString(), "Mon Dec 15 00:00:00 GMT+00:00 10");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zh" + "'", str26, "zh");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zh" + "'", str41, "zh");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str42, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "coreano" + "'", str43, "coreano");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(charSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "cinese" + "'", str53, "cinese");
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "zh" + "'", str57, "zh");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertTrue("'" + category61 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category61.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "cinese" + "'", str65, "cinese");
        org.junit.Assert.assertNotNull(fastDateFormat66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 13 + "'", int67 == 13);
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(calendar70);
// flaky:         org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=1644572639884,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=43,SECOND=59,MILLISECOND=884,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test20200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20200");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale8.getDisplayCountry();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale8);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale12.getDisplayLanguage(locale13);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale19);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone25);
        java.util.Locale locale28 = fastDateFormat27.getLocale();
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale30.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.lang.String str35 = locale30.getDisplayVariant(locale34);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone42);
        java.util.Locale locale45 = fastDateFormat44.getLocale();
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone49);
        java.util.Locale locale52 = fastDateFormat51.getLocale();
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale54 = java.util.Locale.UK;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale8, locale12, locale16, locale19, locale21, locale22, locale28, locale29, locale34, locale36, locale37, locale38, locale39, locale45, locale46, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale locale58 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList56);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap59);
        java.lang.String[] strArray66 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022", "FastDateFormat[h:mm:ss a z]", "zh", "java.text.ParsePosition[index=16,errorIndex=-1]", "de" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        java.lang.Object[] objArray69 = strList67.toArray();
        strList67.clear();
        java.lang.String[] strArray72 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        java.util.stream.Stream<java.lang.String> strStream75 = strList73.stream();
        strList73.clear();
        java.util.Spliterator<java.lang.String> strSpliterator77 = strList73.spliterator();
        boolean boolean78 = strList67.containsAll((java.util.Collection<java.lang.String>) strList73);
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList73);
        java.lang.String[] strArray81 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        java.util.stream.Stream<java.lang.String> strStream84 = strList82.stream();
        boolean boolean86 = strList82.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor88 = strList82.listIterator(0);
        java.util.Locale.FilteringMode filteringMode89 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList82, filteringMode89);
        java.util.Iterator<java.lang.String> strItor91 = strList90.iterator();
        boolean boolean93 = strList90.equals((java.lang.Object) 1644572357131L);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tedesco" + "'", str9, "tedesco");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644572639921,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=0,MILLISECOND=21,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str15, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zh" + "'", str31, "zh");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertNotNull(locale52);
// flaky:         org.junit.Assert.assertEquals(locale52.toString(), "zh");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strStream75);
        org.junit.Assert.assertNotNull(strSpliterator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(strStream84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strItor88);
        org.junit.Assert.assertTrue("'" + filteringMode89 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode89.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(strItor91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test20201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20201");
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale1.getDisplayVariant(locale3);
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale1.getDisplayVariant(locale5);
        boolean boolean7 = locale5.hasExtensions();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", locale5);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1);
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition(1);
        java.lang.String str15 = parsePosition14.toString();
        java.lang.Object obj16 = fastDateFormat11.parseObject("GMT+00:009", parsePosition14);
        java.lang.Object obj17 = fastDateFormat8.parseObject("9:34:55 AM UTC", parsePosition14);
        parsePosition14.setErrorIndex(100);
        java.util.Locale.Category category20 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category20, locale21);
        java.util.Locale locale23 = java.util.Locale.getDefault(category20);
        boolean boolean24 = locale23.hasExtensions();
        java.lang.String[] strArray30 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.stream.Stream<java.lang.String> strStream33 = strList31.stream();
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        int int35 = strList31.lastIndexOf((java.lang.Object) locale34);
        java.lang.String str36 = locale23.getDisplayVariant(locale34);
        java.util.Locale locale38 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale38);
        java.lang.String str40 = locale38.getLanguage();
        java.lang.String str41 = locale38.getVariant();
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = locale42.getLanguage();
        boolean boolean44 = locale42.hasExtensions();
        java.lang.String str45 = locale38.getDisplayCountry(locale42);
        java.util.Locale.Category category46 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category46, locale47);
        java.util.Locale locale49 = java.util.Locale.getDefault(category46);
        boolean boolean50 = locale49.hasExtensions();
        java.lang.String[] strArray56 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList57 = new java.util.ArrayList<java.lang.String>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList57, strArray56);
        java.util.stream.Stream<java.lang.String> strStream59 = strList57.stream();
        java.util.Locale locale60 = java.util.Locale.JAPANESE;
        int int61 = strList57.lastIndexOf((java.lang.Object) locale60);
        java.lang.String str62 = locale49.getDisplayVariant(locale60);
        java.lang.String str63 = locale38.getDisplayCountry(locale49);
        java.lang.String str64 = locale34.getDisplayName(locale38);
        java.lang.String str65 = locale34.getISO3Country();
        boolean boolean66 = parsePosition14.equals((java.lang.Object) str65);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=-1]" + "'", str15, "java.text.ParsePosition[index=1,errorIndex=-1]");
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category20.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "zh" + "'", str40, "zh");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "zh" + "'", str43, "zh");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u4e2d\u56fd" + "'", str45, "\u4e2d\u56fd");
        org.junit.Assert.assertTrue("'" + category46 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category46.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strStream59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Cina" + "'", str63, "Cina");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u65e5\u6587" + "'", str64, "\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test20202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20202");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getTimezoneOffset();
        date1.setYear(32769);
        int int5 = date1.getYear();
        java.util.Calendar.Builder builder6 = builder0.setInstant(date1);
        java.util.Calendar calendar7 = builder6.build();
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category8, locale9);
        java.util.Locale locale11 = java.util.Locale.getDefault(category8);
        java.util.Locale locale12 = java.util.Locale.getDefault(category8);
        java.util.Locale locale13 = java.util.Locale.getDefault(category8);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        java.lang.String str19 = locale17.getDisplayLanguage();
        java.util.Locale.setDefault(category8, locale17);
        java.util.Calendar.Builder builder21 = builder6.setLocale(locale17);
        java.util.Calendar.Builder builder23 = builder21.setInstant(1644572268805L);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Feb 11 09:44:00 GMT+00:00 34669");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32769 + "'", int5 == 32769);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1031884393440010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=34669,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=0,MILLISECOND=110,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1644572640010,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=0,MILLISECOND=110,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test20203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20203");
        java.util.Locale locale2 = new java.util.Locale("java.text.AttributedCharacterIterator$Attribute(input_method_segment)", "cinese");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(locale3);
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleKeys();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(locale3);
        java.lang.String str7 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale9);
        java.lang.String str11 = locale9.getLanguage();
        java.lang.String str12 = locale9.getVariant();
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        boolean boolean15 = locale13.hasExtensions();
        java.lang.String str16 = locale9.getDisplayCountry(locale13);
        java.util.Locale.Category category17 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category17, locale18);
        java.util.Locale locale20 = java.util.Locale.getDefault(category17);
        boolean boolean21 = locale20.hasExtensions();
        java.lang.String[] strArray27 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.stream.Stream<java.lang.String> strStream30 = strList28.stream();
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        int int32 = strList28.lastIndexOf((java.lang.Object) locale31);
        java.lang.String str33 = locale20.getDisplayVariant(locale31);
        java.lang.String str34 = locale9.getDisplayCountry(locale20);
        java.lang.String str35 = locale9.getDisplayLanguage();
        java.lang.String str36 = locale9.toLanguageTag();
        java.lang.String str37 = locale3.getDisplayVariant(locale9);
        java.lang.String str38 = locale9.getCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "java.text.attributedcharacteriterator$attribute(input_method_segment)_CINESE");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572640037,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=0,MILLISECOND=137,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572640037,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=0,MILLISECOND=137,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zh" + "'", str11, "zh");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u4e2d\u56fd" + "'", str16, "\u4e2d\u56fd");
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category17.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strStream30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Cina" + "'", str34, "Cina");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "cinese" + "'", str35, "cinese");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "zh-CN" + "'", str36, "zh-CN");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CN" + "'", str38, "CN");
    }

    @Test
    public void test20204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20204");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        int int9 = calendar7.getActualMinimum(2);
        int int10 = calendar7.getWeeksInWeekYear();
        java.util.Calendar.Builder builder11 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getDisplayName();
        java.lang.String str17 = locale15.getDisplayCountry();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone13, locale15);
        int int20 = calendar18.getActualMinimum(2);
        java.util.TimeZone timeZone21 = calendar18.getTimeZone();
        java.util.TimeZone timeZone22 = calendar18.getTimeZone();
        java.util.Calendar.Builder builder23 = builder11.setTimeZone(timeZone22);
        calendar7.setTimeZone(timeZone22);
        java.util.TimeZone.setDefault(timeZone22);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone22);
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone22);
        int int28 = calendar27.getWeekYear();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "tedesco" + "'", str5, "tedesco");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1644572640064,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=0,MILLISECOND=164,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tedesco" + "'", str16, "tedesco");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1644572640064,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=0,MILLISECOND=164,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644572640064,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=0,MILLISECOND=164,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
    }

    @Test
    public void test20205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20205");
        java.util.Date date3 = new java.util.Date(8, 46, 7);
        int int4 = date3.getDate();
        int int5 = date3.getDay();
        org.junit.Assert.assertEquals(date3.toString(), "Tue Nov 07 00:00:00 GMT+00:00 1911");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
    }

    @Test
    public void test20206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20206");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str1 = attribute0.toString();
        java.util.Date date2 = new java.util.Date();
        int int3 = date2.getTimezoneOffset();
        long long4 = date2.getTime();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getSeconds();
        long long7 = date5.getTime();
        date5.setTime((long) ' ');
        int int10 = date5.getTimezoneOffset();
        boolean boolean11 = date2.before(date5);
        boolean boolean12 = attribute0.equals((java.lang.Object) date2);
        java.util.Date date18 = new java.util.Date(9, (int) 'x', (int) '#', 2, 7);
        int int19 = date18.getTimezoneOffset();
        date18.setYear(1970);
        date18.setSeconds(0);
        int int24 = date18.getSeconds();
        boolean boolean25 = attribute0.equals((java.lang.Object) int24);
        java.util.Calendar.Builder builder26 = new java.util.Calendar.Builder();
        java.util.Locale locale27 = java.util.Locale.CHINESE;
        java.lang.String str28 = locale27.getLanguage();
        boolean boolean29 = locale27.hasExtensions();
        java.lang.String str30 = locale27.getDisplayCountry();
        java.util.Calendar.Builder builder31 = builder26.setLocale(locale27);
        java.util.Locale.Category category32 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category32, locale33);
        java.util.Locale locale35 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category32, locale35);
        java.lang.String str37 = locale35.toLanguageTag();
        java.util.Calendar.Builder builder38 = builder26.setLocale(locale35);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone41, locale43);
        java.text.ParsePosition parsePosition46 = new java.text.ParsePosition(16);
        int int47 = parsePosition46.getErrorIndex();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet49 = locale48.getExtensionKeys();
        boolean boolean50 = parsePosition46.equals((java.lang.Object) locale48);
        java.lang.String str51 = locale48.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone41, locale48);
        int int53 = timeZone41.getRawOffset();
        java.util.Calendar.Builder builder54 = builder38.setTimeZone(timeZone41);
        java.util.Calendar calendar55 = builder38.build();
        java.util.Calendar.Builder builder59 = builder38.setTimeOfDay(0, 59, 58);
        java.util.Calendar.Builder builder61 = builder59.setLenient(false);
        java.util.Calendar.Builder builder65 = builder61.setTimeOfDay(1, 0, 18);
        boolean boolean66 = attribute0.equals((java.lang.Object) builder65);
        java.util.TimeZone timeZone68 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat69 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone68);
        java.lang.StringBuffer stringBuffer71 = null;
        java.lang.StringBuffer stringBuffer72 = fastDateFormat69.format((long) 32772, stringBuffer71);
        java.lang.StringBuffer stringBuffer74 = null;
        java.lang.StringBuffer stringBuffer75 = fastDateFormat69.format((long) 97, stringBuffer74);
        java.lang.String str76 = fastDateFormat69.getPattern();
        boolean boolean77 = attribute0.equals((java.lang.Object) str76);
        java.lang.String str78 = attribute0.toString();
        java.lang.String str79 = attribute0.toString();
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str1, "java.text.AttributedCharacterIterator$Attribute(language)");
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Fri Feb 11 09:44:00 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1644572640095L + "'", long4 == 1644572640095L);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1644572640095L + "'", long7 == 1644572640095L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals(date18.toString(), "Fri Feb 04 02:07:00 GMT+00:00 3870");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "zh" + "'", str28, "zh");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category32.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "zh" + "'", str37, "zh");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572640095,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=0,MILLISECOND=195,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\u671d\u9c9c\u6587" + "'", str51, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(fastDateFormat69);
        org.junit.Assert.assertNull(stringBuffer72);
        org.junit.Assert.assertNull(stringBuffer75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str78, "java.text.AttributedCharacterIterator$Attribute(language)");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str79, "java.text.AttributedCharacterIterator$Attribute(language)");
    }

    @Test
    public void test20207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20207");
        java.util.Locale locale4 = new java.util.Locale("\uc624\uc804\uc2dc\ubd84\ucd08", "");
        java.lang.String str5 = locale4.getISO3Country();
        java.lang.String str6 = locale4.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(24, 0, locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 24");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale4.toString(), "\uc624\uc804\uc2dc\ubd84\ucd08");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test20208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20208");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, 1);
        int int3 = fieldPosition2.getEndIndex();
        java.text.Format.Field field4 = fieldPosition2.getFieldAttribute();
        java.util.Date date11 = new java.util.Date(51, (int) '4', 17, 4, 42, 1970);
        int int12 = date11.getDay();
        java.lang.String str13 = date11.toGMTString();
        date11.setDate((int) 'x');
        boolean boolean16 = fieldPosition2.equals((java.lang.Object) date11);
        int int17 = fieldPosition2.getBeginIndex();
        java.text.Format.Field field18 = fieldPosition2.getFieldAttribute();
        int int19 = fieldPosition2.getEndIndex();
        java.text.Format.Field field20 = fieldPosition2.getFieldAttribute();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(field4);
        org.junit.Assert.assertEquals(date11.toString(), "Sun Aug 28 05:14:50 GMT+00:00 1955");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "17 May 1955 05:14:49 GMT" + "'", str13, "17 May 1955 05:14:49 GMT");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(field18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(field20);
    }

    @Test
    public void test20209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20209");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        strList2.clear();
        java.lang.String[] strArray7 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.stream.Stream<java.lang.String> strStream10 = strList8.stream();
        boolean boolean11 = strList2.containsAll((java.util.Collection<java.lang.String>) strList8);
        java.lang.Object obj12 = null;
        int int13 = strList8.lastIndexOf(obj12);
        java.lang.String[] strArray15 = java.util.TimeZone.getAvailableIDs(7);
        java.lang.Comparable<java.lang.String>[] strComparableArray16 = strList8.toArray((java.lang.Comparable<java.lang.String>[]) strArray15);
        java.lang.Object obj17 = null;
        boolean boolean18 = strList8.remove(obj17);
        strList8.clear();
        java.lang.String[] strArray21 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.util.stream.Stream<java.lang.String> strStream24 = strList22.stream();
        strList22.clear();
        boolean boolean26 = strList22.isEmpty();
        boolean boolean27 = strList22.isEmpty();
        java.util.ListIterator<java.lang.String> strItor28 = strList22.listIterator();
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone31, locale33);
        java.lang.String str35 = locale33.getDisplayLanguage();
        java.lang.String str37 = locale33.getUnicodeLocaleType("zh");
        java.lang.String str38 = locale29.getDisplayScript(locale33);
        int int39 = strList22.indexOf((java.lang.Object) locale29);
        int int40 = strList22.size();
        java.util.Locale.FilteringMode filteringMode41 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        boolean boolean42 = strList22.remove((java.lang.Object) filteringMode41);
        boolean boolean44 = strList22.add("09 November 1916");
        boolean boolean45 = strList8.removeAll((java.util.Collection<java.lang.String>) strList22);
        java.util.Date date51 = new java.util.Date(0, 8, 35, 46, (int) '4');
        int int52 = date51.getMonth();
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.util.Locale locale54 = locale53.stripExtensions();
        java.lang.String str55 = locale54.getVariant();
        java.util.Set<java.lang.Character> charSet56 = locale54.getExtensionKeys();
        java.util.Calendar calendar57 = java.util.Calendar.getInstance(locale54);
        java.util.Date date58 = new java.util.Date();
        int int59 = date58.getTimezoneOffset();
        long long60 = date58.getTime();
        date58.setDate((int) (byte) 10);
        int int63 = date58.getMonth();
        int int64 = date58.getSeconds();
        date58.setHours(19);
        calendar57.setTime(date58);
        java.lang.String str68 = date58.toLocaleString();
        java.util.Date date69 = new java.util.Date();
        int int70 = date69.getTimezoneOffset();
        int int71 = date69.getSeconds();
        date69.setDate(7);
        long long74 = date69.getTime();
        date69.setMinutes(9);
        java.util.Date date77 = new java.util.Date();
        int int78 = date77.getTimezoneOffset();
        date77.setMonth(0);
        int int81 = date77.getSeconds();
        int int82 = date77.getDate();
        boolean boolean83 = date69.before(date77);
        int int84 = date69.getSeconds();
        boolean boolean85 = date58.after(date69);
        boolean boolean86 = date51.before(date69);
        int int87 = date51.getYear();
        int int88 = date51.getDay();
        boolean boolean89 = strList22.contains((java.lang.Object) date51);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strComparableArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strStream24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1644572640177,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=0,MILLISECOND=277,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + filteringMode41 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode41.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals(date51.toString(), "Sat Oct 06 22:52:00 GMT+00:00 1900");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 9 + "'", int52 == 9);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=1644522240177,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=41,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=44,SECOND=0,MILLISECOND=277,ZONE_OFFSET=100,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date58.toString(), "Thu Feb 10 19:44:00 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1644572640177L + "'", long60 == 1644572640177L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2022-2-10 19:44:00" + "'", str68, "2022-2-10 19:44:00");
// flaky:         org.junit.Assert.assertEquals(date69.toString(), "Mon Feb 07 09:09:00 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 1644227040177L + "'", long74 == 1644227040177L);
// flaky:         org.junit.Assert.assertEquals(date77.toString(), "Tue Jan 11 09:44:00 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 11 + "'", int82 == 11);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 6 + "'", int88 == 6);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test20210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20210");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale8.getDisplayCountry();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale8);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale12.getDisplayLanguage(locale13);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale19);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone25);
        java.util.Locale locale28 = fastDateFormat27.getLocale();
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale30.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.lang.String str35 = locale30.getDisplayVariant(locale34);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone42);
        java.util.Locale locale45 = fastDateFormat44.getLocale();
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone49);
        java.util.Locale locale52 = fastDateFormat51.getLocale();
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale54 = java.util.Locale.UK;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale8, locale12, locale16, locale19, locale21, locale22, locale28, locale29, locale34, locale36, locale37, locale38, locale39, locale45, locale46, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale locale58 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList56);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap59);
        java.lang.String[] strArray66 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022", "FastDateFormat[h:mm:ss a z]", "zh", "java.text.ParsePosition[index=16,errorIndex=-1]", "de" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        java.lang.Object[] objArray69 = strList67.toArray();
        strList67.clear();
        java.lang.String[] strArray72 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        java.util.stream.Stream<java.lang.String> strStream75 = strList73.stream();
        strList73.clear();
        java.util.Spliterator<java.lang.String> strSpliterator77 = strList73.spliterator();
        boolean boolean78 = strList67.containsAll((java.util.Collection<java.lang.String>) strList73);
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList73);
        boolean boolean80 = strList73.isEmpty();
        java.util.Locale.Builder builder81 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder83 = builder81.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder84 = builder81.clear();
        java.util.Locale locale85 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder86 = builder84.setLocale(locale85);
        java.util.Locale.Builder builder87 = builder86.clear();
        int int88 = strList73.indexOf((java.lang.Object) builder87);
        java.util.Locale.Builder builder91 = builder87.setUnicodeLocaleKeyword("US", "Taiwan");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder93 = builder87.addUnicodeLocaleAttribute("10-gen-4630 0.00.00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 10-gen-4630 0.00.00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u5fb7\u6587" + "'", str9, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644572640223,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=0,MILLISECOND=323,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str15, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zh" + "'", str31, "zh");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertNotNull(locale52);
// flaky:         org.junit.Assert.assertEquals(locale52.toString(), "zh");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strStream75);
        org.junit.Assert.assertNotNull(strSpliterator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(builder91);
    }

    @Test
    public void test20211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20211");
        java.util.Date date1 = new java.util.Date(1644572088406L);
        java.lang.String str2 = date1.toGMTString();
        java.lang.String str3 = date1.toString();
        org.junit.Assert.assertEquals(date1.toString(), "Fri Feb 11 09:34:48 GMT+00:00 2022");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "11 Feb 2022 09:34:48 GMT" + "'", str2, "11 Feb 2022 09:34:48 GMT");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Fri Feb 11 09:34:48 GMT+00:00 2022" + "'", str3, "Fri Feb 11 09:34:48 GMT+00:00 2022");
    }

    @Test
    public void test20212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20212");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.lang.String str6 = locale4.getDisplayLanguage();
        java.lang.String str8 = locale4.getUnicodeLocaleType("zh");
        java.lang.String str9 = locale0.getDisplayScript(locale4);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone11, locale13);
        java.lang.String str15 = locale13.getDisplayLanguage();
        java.lang.String str17 = locale13.getUnicodeLocaleType("zh");
        java.lang.String str18 = locale4.getDisplayScript(locale13);
        java.lang.String str19 = locale4.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet20 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale4.getISO3Language();
        java.util.Set<java.lang.String> strSet22 = locale4.getUnicodeLocaleAttributes();
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644572640278,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=0,MILLISECOND=378,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572640278,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=0,MILLISECOND=378,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1644572640278,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=0,MILLISECOND=378,ZONE_OFFSET=100,DST_OFFSET=0]");
    }

    @Test
    public void test20213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20213");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229\u6587");
        timeZone2.setID("\u5e74\u6708\u65e5");
        timeZone2.setRawOffset((int) (byte) 100);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 1, timeZone2);
        java.lang.Object obj8 = timeZone2.clone();
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "sun.util.calendar.ZoneInfo[id=\"\u5e74\u6708\u65e5\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "sun.util.calendar.ZoneInfo[id=\"\u5e74\u6708\u65e5\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "sun.util.calendar.ZoneInfo[id=\"\u5e74\u6708\u65e5\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test20214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20214");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale11 = new java.util.Locale("de");
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale11.getCountry();
        java.util.Calendar.Builder builder14 = builder0.setLocale(locale11);
        java.util.Calendar calendar15 = builder14.build();
        int[] intArray16 = new int[] {};
        java.util.Calendar.Builder builder17 = builder14.setFields(intArray16);
        java.util.Calendar.Builder builder21 = builder14.setDate((int) (short) 10, 2022, 4);
        java.util.Calendar.Builder builder23 = builder21.setLenient(true);
        java.util.Calendar.Builder builder24 = new java.util.Calendar.Builder();
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = locale25.getLanguage();
        boolean boolean27 = locale25.hasExtensions();
        java.lang.String str28 = locale25.getDisplayCountry();
        java.util.Calendar.Builder builder29 = builder24.setLocale(locale25);
        java.util.Calendar.Builder builder33 = builder24.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale35 = new java.util.Locale("de");
        java.lang.String str36 = locale35.toLanguageTag();
        java.lang.String str37 = locale35.getCountry();
        java.util.Calendar.Builder builder38 = builder24.setLocale(locale35);
        java.util.Calendar.Builder builder43 = builder38.setTimeOfDay((int) 'u', 6, 0, 8);
        java.util.Calendar.Builder builder44 = new java.util.Calendar.Builder();
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale45.getLanguage();
        boolean boolean47 = locale45.hasExtensions();
        java.lang.String str48 = locale45.getDisplayCountry();
        java.util.Calendar.Builder builder49 = builder44.setLocale(locale45);
        java.util.Date date51 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder52 = builder49.setInstant(date51);
        java.util.Calendar.Builder builder56 = builder52.setWeekDate((int) (short) -1, (int) '4', 35);
        int[] intArray57 = new int[] {};
        java.util.Calendar.Builder builder58 = builder56.setFields(intArray57);
        java.util.Calendar.Builder builder59 = builder43.setFields(intArray57);
        java.util.Calendar.Builder builder60 = builder21.setFields(intArray57);
        java.util.Calendar.Builder builder64 = builder60.setDate(1938, 57, (int) '#');
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "de" + "'", str12, "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-62130240000100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=6,DAY_OF_YEAR=65,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zh" + "'", str26, "zh");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "de" + "'", str36, "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zh" + "'", str46, "zh");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals(date51.toString(), "Tue Jan 11 09:34:31 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[]");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test20215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20215");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone2);
        java.util.Locale locale5 = fastDateFormat4.getLocale();
        java.lang.String str6 = fastDateFormat4.toString();
        java.util.Locale locale7 = fastDateFormat4.getLocale();
        java.lang.String str8 = locale7.getScript();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65f6\u5206\u79d2' z]" + "'", str6, "\u65f6\u5206\u79d2' z]");
        org.junit.Assert.assertNotNull(locale7);
// flaky:         org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test20216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20216");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        java.lang.String str11 = locale8.getDisplayLanguage(locale9);
        java.lang.String str12 = locale6.getDisplayLanguage(locale8);
        java.util.Locale.Builder builder13 = builder3.setLocale(locale8);
        java.util.Locale.Builder builder14 = builder3.clear();
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category15, locale16);
        java.util.Locale locale18 = java.util.Locale.getDefault(category15);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        boolean boolean21 = timeZone19.hasSameRules(timeZone20);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone20, locale22);
        java.lang.String str24 = locale22.getDisplayLanguage();
        java.lang.String str25 = locale18.getDisplayCountry(locale22);
        java.lang.String str26 = locale22.getLanguage();
        java.lang.String str27 = locale22.getISO3Country();
        java.lang.String str28 = locale22.getDisplayName();
        java.util.Locale.Builder builder29 = builder3.setLocale(locale22);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder31 = builder29.addUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh" + "'", str10, "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str11, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "coreano" + "'", str12, "coreano");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1644572640364,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=0,MILLISECOND=464,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test20217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20217");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("de");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        java.lang.String str7 = languageRange1.getRange();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone9);
        java.lang.String str11 = fastDateFormat10.toString();
        java.lang.String str12 = fastDateFormat10.toString();
        java.util.TimeZone timeZone13 = fastDateFormat10.getTimeZone();
        java.util.Locale locale14 = fastDateFormat10.getLocale();
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str17 = locale15.getExtension('u');
        boolean boolean18 = languageRange1.equals((java.lang.Object) locale15);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "de" + "'", str7, "de");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str11, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str12, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test20218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20218");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor8 = strList2.listIterator(0);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        boolean boolean15 = strList11.add("hi!");
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale16.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale16.getDisplayVariant(locale20);
        boolean boolean22 = strList11.contains((java.lang.Object) locale16);
        boolean boolean23 = strList2.removeAll((java.util.Collection<java.lang.String>) strList11);
        java.util.stream.Stream<java.lang.String> strStream24 = strList11.parallelStream();
        java.lang.Object[] objArray25 = strList11.toArray();
        java.util.Iterator<java.lang.String> strItor26 = strList11.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.lang.String> strItor28 = strList11.listIterator(39);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 39");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strStream24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[Tue Jan 11 09:34:31 UTC 2022, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[Tue Jan 11 09:34:31 UTC 2022, hi!]");
        org.junit.Assert.assertNotNull(strItor26);
    }

    @Test
    public void test20219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20219");
        java.util.Locale.Category category2 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category2, locale3);
        java.util.Locale locale5 = java.util.Locale.getDefault(category2);
        java.util.Locale locale6 = java.util.Locale.getDefault(category2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category2);
        java.util.Locale locale8 = java.util.Locale.getDefault(category2);
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category9, locale10);
        java.util.Locale locale12 = java.util.Locale.getDefault(category9);
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String[] strArray19 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.stream.Stream<java.lang.String> strStream22 = strList20.stream();
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        int int24 = strList20.lastIndexOf((java.lang.Object) locale23);
        java.lang.String str25 = locale12.getDisplayVariant(locale23);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone28, locale30);
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition(16);
        int int34 = parsePosition33.getErrorIndex();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet36 = locale35.getExtensionKeys();
        boolean boolean37 = parsePosition33.equals((java.lang.Object) locale35);
        java.lang.String str38 = locale35.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone28, locale35);
        int int40 = timeZone28.getRawOffset();
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = locale41.getLanguage();
        boolean boolean43 = locale41.hasExtensions();
        java.lang.String str44 = locale41.getDisplayScript();
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(locale41);
        java.util.Calendar calendar46 = java.util.Calendar.getInstance(timeZone28, locale41);
        java.lang.String str47 = locale41.getDisplayCountry();
        java.util.Locale locale48 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str49 = locale41.getDisplayScript(locale48);
        java.lang.String str50 = locale23.getDisplayName(locale48);
        java.util.Locale locale51 = java.util.Locale.ITALIAN;
        java.util.Locale locale52 = java.util.Locale.CHINESE;
        java.lang.String str53 = locale52.getLanguage();
        java.lang.String str54 = locale51.getDisplayLanguage(locale52);
        boolean boolean55 = locale52.hasExtensions();
        java.lang.String str56 = locale23.getDisplayScript(locale52);
        java.lang.String str57 = locale8.getDisplayName(locale23);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance(52, 6, locale8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 6");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category2.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644572640431,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=0,MILLISECOND=531,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "coreano" + "'", str38, "coreano");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zh" + "'", str42, "zh");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1644572640432,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=0,MILLISECOND=532,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1644572640432,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=0,MILLISECOND=532,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u65e5\u6587" + "'", str50, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "zh" + "'", str53, "zh");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str54, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e" + "'", str57, "\u30a4\u30bf\u30ea\u30a2\u8a9e");
    }

    @Test
    public void test20220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20220");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getTimezoneOffset();
        int int2 = date0.getSeconds();
        date0.setDate(7);
        long long5 = date0.getTime();
        long long6 = date0.getTime();
        date0.setSeconds((int) 'x');
        int int9 = date0.getTimezoneOffset();
        java.lang.String str10 = date0.toGMTString();
        date0.setHours(126);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Sat Feb 12 06:46:00 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1644227040466L + "'", long5 == 1644227040466L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1644227040466L + "'", long6 == 1644227040466L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "7 Feb 2022 09:46:00 GMT" + "'", str10, "7 Feb 2022 09:46:00 GMT");
    }

    @Test
    public void test20221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20221");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        strList2.clear();
        java.lang.String[] strArray7 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.stream.Stream<java.lang.String> strStream10 = strList8.stream();
        boolean boolean11 = strList2.containsAll((java.util.Collection<java.lang.String>) strList8);
        java.lang.Object[] objArray12 = strList2.toArray();
        java.util.stream.Stream<java.lang.String> strStream13 = strList2.stream();
        boolean boolean14 = strList2.isEmpty();
        java.lang.String[] strArray16 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        java.util.stream.Stream<java.lang.String> strStream19 = strList17.stream();
        boolean boolean21 = strList17.equals((java.lang.Object) (-1.0d));
        java.util.stream.Stream<java.lang.String> strStream22 = strList17.stream();
        int int23 = strList17.size();
        java.lang.String[] strArray29 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022", "FastDateFormat[h:mm:ss a z]", "zh", "java.text.ParsePosition[index=16,errorIndex=-1]", "de" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.lang.Object[] objArray32 = strList30.toArray();
        strList30.clear();
        java.lang.String[] strArray35 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.util.stream.Stream<java.lang.String> strStream38 = strList36.stream();
        strList36.clear();
        java.util.Spliterator<java.lang.String> strSpliterator40 = strList36.spliterator();
        boolean boolean41 = strList30.containsAll((java.util.Collection<java.lang.String>) strList36);
        boolean boolean42 = strList30.isEmpty();
        boolean boolean43 = strList17.retainAll((java.util.Collection<java.lang.String>) strList30);
        int int44 = strList2.lastIndexOf((java.lang.Object) boolean43);
        boolean boolean45 = strList2.isEmpty();
        int int46 = strList2.size();
        boolean boolean47 = strList2.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = strList2.remove(32769);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32769, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strStream38);
        org.junit.Assert.assertNotNull(strSpliterator40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test20222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20222");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale9.getDisplayName();
        java.lang.String str11 = locale9.getDisplayCountry();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone7, locale9);
        calendar12.set(31, (int) (byte) 100, (int) (byte) 10, (int) (short) 100, 9, 8);
        java.util.Date date23 = new java.util.Date((-1), 32772, (int) (short) 10);
        java.lang.String str24 = date23.toLocaleString();
        calendar12.setTime(date23);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale29.getDisplayName();
        java.lang.String str31 = locale29.getDisplayCountry();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone27, locale29);
        int int34 = calendar32.getActualMinimum(2);
        java.util.TimeZone timeZone35 = calendar32.getTimeZone();
        boolean boolean36 = timeZone35.observesDaylightTime();
        calendar12.setTimeZone(timeZone35);
        boolean boolean38 = timeZone5.hasSameRules(timeZone35);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getTimeZone("java.text.ParsePosition[index=16,errorIndex=-1]");
        boolean boolean41 = timeZone5.hasSameRules(timeZone40);
        java.lang.String str42 = timeZone5.getID();
        java.lang.String str43 = timeZone5.getID();
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        java.lang.String str48 = locale47.getLanguage();
        java.util.Locale locale49 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str50 = locale47.getDisplayScript(locale49);
        java.util.Locale locale54 = new java.util.Locale("DEU", "java.util.GregorianCalendar[time=1644572075684,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=15,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=684,ZONE_OFFSET=0,DST_OFFSET=0]", "\u65e5\u6587");
        java.lang.String str55 = locale47.getDisplayVariant(locale54);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getInstance("4630-1-10 0:00:00", locale54);
        java.util.Locale.setDefault(locale54);
        java.lang.String str58 = locale54.getLanguage();
        java.lang.String str59 = locale54.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = timeZone5.getDisplayName(true, 1914, locale54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 1914");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "tedesco" + "'", str10, "tedesco");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=83942265599900,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=4630,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date23.toString(), "Sun Jan 10 00:00:00 GMT+00:00 4630");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "4630-1-10 0:00:00" + "'", str24, "4630-1-10 0:00:00");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "tedesco" + "'", str30, "tedesco");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1644572640505,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=0,MILLISECOND=605,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Chinesisch" + "'", str42, "Chinesisch");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Chinesisch" + "'", str43, "Chinesisch");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "zh" + "'", str48, "zh");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
// flaky:         org.junit.Assert.assertEquals(locale54.toString(), "deu_JAVA.UTIL.GREGORIANCALENDAR[TIME=1644572075684,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\"\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "deu" + "'", str58, "deu");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "deu" + "'", str59, "deu");
    }

    @Test
    public void test20223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20223");
        java.util.Locale locale2 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale3 = locale2.stripExtensions();
        java.lang.String[] strArray5 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.stream.Stream<java.lang.String> strStream8 = strList6.stream();
        boolean boolean10 = strList6.add("hi!");
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale11.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.lang.String str16 = locale11.getDisplayVariant(locale15);
        boolean boolean17 = strList6.contains((java.lang.Object) locale11);
        java.lang.String str18 = locale11.getVariant();
        boolean boolean19 = locale11.hasExtensions();
        java.lang.String str20 = locale3.getDisplayCountry(locale11);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale11);
        calendar21.clear();
        // The following exception was thrown during execution in test generation
        try {
            int int24 = calendar21.getGreatestMinimum(166);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 166");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh" + "'", str12, "zh");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "TUE JAN 11 09:34:31 UTC 2022" + "'", str20, "TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test20224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20224");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getWeeksInWeekYear();
        java.time.Instant instant2 = calendar0.toInstant();
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.setTimeInMillis(1644572085058L);
        boolean boolean6 = calendar0.isWeekDateSupported();
        java.util.Date date7 = calendar0.getTime();
        calendar0.set(292269054, 18, 26, 32772, 1914, 10);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=292269054,MONTH=18,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=26,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=32772,MINUTE=1914,SECOND=10,MILLISECOND=158,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 53 + "'", int1 == 53);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Feb 11 09:34:45 GMT+00:00 2022");
    }

    @Test
    public void test20225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20225");
        java.util.Date date5 = new java.util.Date(1200000, 39, 24356589, 0, 0);
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getTimezoneOffset();
        date6.setMonth(0);
        int int10 = date6.getSeconds();
        date6.setTime((long) 'a');
        java.time.Instant instant13 = date6.toInstant();
        java.util.Date date14 = java.util.Date.from(instant13);
        java.time.Instant instant15 = date14.toInstant();
        java.time.Instant instant16 = date14.toInstant();
        boolean boolean17 = date5.after(date14);
        org.junit.Assert.assertEquals(date5.toString(), "Sun Apr 26 00:00:00 GMT+00:00 1268589");
        org.junit.Assert.assertEquals(date6.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test20226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20226");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("", (double) 1644572388593L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.644572388593E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test20227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20227");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(34);
        int int2 = parsePosition1.getIndex();
        java.lang.String str3 = parsePosition1.toString();
        int int4 = parsePosition1.getErrorIndex();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 34 + "'", int2 == 34);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.ParsePosition[index=34,errorIndex=-1]" + "'", str3, "java.text.ParsePosition[index=34,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test20228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20228");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor8 = strList2.listIterator(0);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        boolean boolean15 = strList11.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor17 = strList11.listIterator(0);
        java.lang.String[] strArray19 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.stream.Stream<java.lang.String> strStream22 = strList20.stream();
        java.util.ListIterator<java.lang.String> strItor23 = strList20.listIterator();
        boolean boolean24 = strList11.removeAll((java.util.Collection<java.lang.String>) strList20);
        boolean boolean25 = strList2.containsAll((java.util.Collection<java.lang.String>) strList11);
        int int26 = strList2.size();
        boolean boolean27 = strList2.isEmpty();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test20229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20229");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category6, locale9);
        java.lang.String str11 = locale9.toLanguageTag();
        java.util.Calendar.Builder builder12 = builder0.setLocale(locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        java.text.ParsePosition parsePosition20 = new java.text.ParsePosition(16);
        int int21 = parsePosition20.getErrorIndex();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        boolean boolean24 = parsePosition20.equals((java.lang.Object) locale22);
        java.lang.String str25 = locale22.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15, locale22);
        int int27 = timeZone15.getRawOffset();
        java.util.Calendar.Builder builder28 = builder12.setTimeZone(timeZone15);
        java.util.Calendar calendar29 = builder12.build();
        java.util.Calendar.Builder builder33 = builder12.setTimeOfDay(0, 59, 58);
        java.util.Calendar.Builder builder35 = builder33.setLenient(false);
        java.util.Calendar.Builder builder39 = builder35.setWeekDate(47, 0, (int) 'a');
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        boolean boolean42 = calendar41.isWeekDateSupported();
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale43.getDisplayVariant(locale45);
        boolean boolean47 = calendar41.before((java.lang.Object) str46);
        int int48 = calendar41.getFirstDayOfWeek();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone49.hasSameRules(timeZone50);
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone49);
        calendar41.setTimeZone(timeZone49);
        java.util.Locale locale55 = new java.util.Locale("");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat56 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08", timeZone49, locale55);
        java.util.Calendar.Builder builder57 = builder39.setTimeZone(timeZone49);
        // The following exception was thrown during execution in test generation
        try {
            int int64 = timeZone49.getOffset((-46800000), 11, 47, 50400000, 29, 22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "deu_JAVA.UTIL.GREGORIANCALENDAR[TIME=1644572075684,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\"\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "deu" + "'", str11, "deu");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1644572640627,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=0,MILLISECOND=727,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Korean" + "'", str25, "Korean");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1644572640627,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=0,MILLISECOND=727,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "zh" + "'", str44, "zh");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1644572640627,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=0,MILLISECOND=727,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(fastDateFormat56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test20230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20230");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("it");
        java.util.Locale.Builder builder7 = builder2.setExtension('x', "de");
        java.util.Locale locale8 = builder2.build();
        java.util.Locale locale9 = java.util.Locale.UK;
        java.lang.String str10 = locale9.toLanguageTag();
        java.util.Locale.Builder builder11 = builder2.setLocale(locale9);
        java.util.Locale.Builder builder13 = builder11.setLanguageTag("ko");
        java.util.Locale.Builder builder14 = builder11.clear();
        java.util.Locale locale15 = builder11.build();
        java.util.Locale.Builder builder16 = builder11.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder16.setVariant("\uc624\uc804\uc2dc\ubd84\ucd08");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ????? 9?? 43??? 01?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it__#x-de");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "en-GB" + "'", str10, "en-GB");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test20231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20231");
        java.util.Locale locale3 = new java.util.Locale("\uc624\uc804\uc2dc\ubd84\ucd08", "Feb 7, 2022 9:40:00 AM", "4:53:00 AM UTC");
        org.junit.Assert.assertEquals(locale3.toString(), "\uc624\uc804\uc2dc\ubd84\ucd08_FEB 7, 2022 9:40:00 AM_4:53:00 AM UTC");
    }

    @Test
    public void test20232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20232");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale locale4 = builder0.build();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale locale8 = builder5.build();
        java.util.Locale locale10 = new java.util.Locale("de");
        java.lang.String str11 = locale10.toLanguageTag();
        java.lang.String str12 = locale10.getCountry();
        java.lang.String str13 = locale10.getDisplayCountry();
        java.util.Locale.setDefault(locale10);
        java.lang.String str15 = locale8.getDisplayVariant(locale10);
        java.lang.String str16 = locale4.getDisplayLanguage(locale10);
        java.lang.String str17 = locale4.getScript();
        java.lang.String str18 = locale4.toLanguageTag();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
    }

    @Test
    public void test20233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20233");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("12/15/10 12:00 AM");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=12/15/1012:00am");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test20234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20234");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.Object obj12 = fastDateFormat2.parseObject("FastDateFormat[h:mm:ss a z]", parsePosition7);
        java.lang.String str13 = fastDateFormat2.toString();
        java.util.TimeZone timeZone14 = fastDateFormat2.getTimeZone();
        java.lang.Object obj15 = fastDateFormat2.clone();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str13, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "FastDateFormat[h:mm:ss a z]");
    }

    @Test
    public void test20235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20235");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        boolean boolean1 = locale0.hasExtensions();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = locale4.hasExtensions();
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale4);
        java.util.Set<java.lang.String> strSet8 = locale4.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale4.getDisplayLanguage();
        java.util.Locale locale13 = new java.util.Locale("4-mar-1910 1.00.00", "7-feb-2022 9.35.19", "11 Jan 2022 09:35:07 GMT");
        java.lang.String str14 = locale4.getDisplayLanguage(locale13);
        java.lang.String str15 = locale0.getDisplayVariant(locale4);
        java.lang.String str16 = locale0.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals(locale13.toString(), "4-mar-1910 1.00.00_7-FEB-2022 9.35.19_11 Jan 2022 09:35:07 GMT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test20236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20236");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = fastDateFormat2.getLocale();
        boolean boolean7 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str8 = fastDateFormat2.getPattern();
        java.lang.String str9 = fastDateFormat2.toString();
        java.lang.String str10 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.lang.String str14 = fastDateFormat13.toString();
        java.lang.String str15 = fastDateFormat13.toString();
        java.util.TimeZone timeZone16 = fastDateFormat13.getTimeZone();
        java.util.Locale locale17 = fastDateFormat13.getLocale();
        java.util.TimeZone timeZone18 = fastDateFormat13.getTimeZone();
        java.lang.String str19 = fastDateFormat13.toString();
        java.util.Date date21 = new java.util.Date((long) 2);
        date21.setDate(4);
        date21.setDate((int) (byte) 0);
        java.lang.String str26 = fastDateFormat13.format(date21);
        java.lang.String str27 = fastDateFormat2.format(date21);
        date21.setMinutes(2030);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "h:mm:ss a z" + "'", str8, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str9, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "h:mm:ss a z" + "'", str10, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str14, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str15, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_US");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str19, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(date21.toString(), "Thu Jan 01 09:50:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str26, "12:00:00 AM GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str27, "12:00:00 AM GMT+00:00");
    }

    @Test
    public void test20237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20237");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor8 = strList2.listIterator(0);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        boolean boolean15 = strList11.add("hi!");
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale16.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale16.getDisplayVariant(locale20);
        boolean boolean22 = strList11.contains((java.lang.Object) locale16);
        boolean boolean23 = strList2.removeAll((java.util.Collection<java.lang.String>) strList11);
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone25);
        java.util.Date date27 = new java.util.Date();
        int int28 = date27.getTimezoneOffset();
        int int29 = date27.getSeconds();
        java.lang.StringBuffer stringBuffer30 = null;
        java.text.Format.Field field31 = null;
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition(field31, 1);
        fieldPosition33.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer36 = fastDateFormat26.format((java.lang.Object) date27, stringBuffer30, fieldPosition33);
        int int37 = strList2.lastIndexOf((java.lang.Object) fieldPosition33);
        java.lang.String[] strArray39 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.util.stream.Stream<java.lang.String> strStream42 = strList40.stream();
        boolean boolean44 = strList40.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor46 = strList40.listIterator(0);
        java.lang.String[] strArray48 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        java.util.stream.Stream<java.lang.String> strStream51 = strList49.stream();
        boolean boolean53 = strList49.add("hi!");
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = locale54.getLanguage();
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.lang.String str57 = locale54.getDisplayVariant(locale56);
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.lang.String str59 = locale54.getDisplayVariant(locale58);
        boolean boolean60 = strList49.contains((java.lang.Object) locale54);
        boolean boolean61 = strList40.removeAll((java.util.Collection<java.lang.String>) strList49);
        java.lang.String[] strArray63 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        java.util.stream.Stream<java.lang.String> strStream66 = strList64.stream();
        strList64.clear();
        boolean boolean68 = strList64.isEmpty();
        boolean boolean69 = strList64.isEmpty();
        java.util.ListIterator<java.lang.String> strItor70 = strList64.listIterator();
        boolean boolean71 = strList40.retainAll((java.util.Collection<java.lang.String>) strList64);
        boolean boolean72 = strList64.isEmpty();
        boolean boolean73 = strList2.retainAll((java.util.Collection<java.lang.String>) strList64);
        int int74 = strList64.size();
        java.util.Spliterator<java.lang.String> strSpliterator75 = strList64.spliterator();
        java.lang.Object[] objArray76 = strList64.toArray();
        int int77 = strList64.size();
        java.lang.String[] strArray79 = java.util.TimeZone.getAvailableIDs(50);
        java.lang.String[] strArray80 = strList64.toArray(strArray79);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(fastDateFormat26);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Fri Feb 11 09:44:00 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(stringBuffer36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strStream42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strItor46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strStream51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "zh" + "'", str55, "zh");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strStream66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strItor70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(strSpliterator75);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertNotNull(strArray80);
    }

    @Test
    public void test20238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20238");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getTimezoneOffset();
        date0.setYear(11);
        int int4 = date0.getDate();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getSeconds();
        date5.setMinutes((int) (short) 1);
        boolean boolean9 = date0.after(date5);
        java.util.Date date11 = new java.util.Date("Fri Feb 11 09:34:53 GMT 2022");
        java.time.Instant instant12 = date11.toInstant();
        date11.setDate(17);
        date11.setYear(34);
        boolean boolean17 = date0.after(date11);
        int int18 = date11.getMinutes();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Sat Feb 11 09:44:00 GMT+00:00 1911");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 11 + "'", int4 == 11);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Feb 11 09:01:00 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Feb 17 09:34:53 GMT+00:00 1934");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 34 + "'", int18 == 34);
    }

    @Test
    public void test20239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20239");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        java.lang.Object obj3 = fastDateFormat2.clone();
        java.lang.Object obj4 = fastDateFormat2.clone();
        boolean boolean5 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.StringBuffer stringBuffer7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer8 = fastDateFormat2.format(1644572463448L, stringBuffer7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "FastDateFormat[zh]");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "FastDateFormat[zh]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test20240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20240");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.add("hi!");
        strList2.clear();
        java.util.stream.Stream<java.lang.String> strStream8 = strList2.parallelStream();
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        boolean boolean15 = strList11.equals((java.lang.Object) (-1.0d));
        java.util.stream.Stream<java.lang.String> strStream16 = strList11.stream();
        boolean boolean18 = strList11.add("Tue Jan 11 09:34:31 UTC 2022");
        boolean boolean19 = strList2.retainAll((java.util.Collection<java.lang.String>) strList11);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test20241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20241");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("GBR");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test20242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20242");
        java.util.Date date5 = new java.util.Date(45, 43, 122, 41, 47);
        int int6 = date5.getYear();
        int int7 = date5.getTimezoneOffset();
        org.junit.Assert.assertEquals(date5.toString(), "Wed Dec 01 17:47:00 GMT+00:00 1948");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 48 + "'", int6 == 48);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test20243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20243");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        long long19 = calendar18.getTimeInMillis();
        java.lang.String str20 = fastDateFormat13.format(calendar18);
        java.lang.String str22 = fastDateFormat13.format(1644572075768L);
        java.lang.String str23 = fastDateFormat13.getPattern();
        java.util.TimeZone timeZone24 = fastDateFormat13.getTimeZone();
        int int26 = timeZone24.getOffset(1644572215220L);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644572640958,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=1,MILLISECOND=58,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Koreanisch" + "'", str12, "Koreanisch");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1644572640958,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=1,MILLISECOND=58,ZONE_OFFSET=100,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644572640958L + "'", long19 == 1644572640958L);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc624\uc804\uc2dc\ubd84\ucd08" + "'", str20, "\uc624\uc804\uc2dc\ubd84\ucd08");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc624\uc804\uc2dc\ubd84\ucd08" + "'", str22, "\uc624\uc804\uc2dc\ubd84\ucd08");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc2dc\ubd84\ucd08'" + "'", str23, "\uc2dc\ubd84\ucd08'");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
    }

    @Test
    public void test20244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20244");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("it");
        java.util.Locale.Builder builder7 = builder2.setExtension('x', "de");
        java.util.Locale.Builder builder9 = builder2.setLanguage("fra");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder2.addUnicodeLocaleAttribute("java.text.ParsePosition[index=4,errorIndex=22]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: java.text.ParsePosition[index=4,errorIndex=22] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test20245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20245");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = locale6.getLanguage();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale6.getDisplayVariant(locale8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone5, locale6);
        java.time.Instant instant11 = calendar10.toInstant();
        boolean boolean12 = calendar10.isWeekDateSupported();
        int int13 = calendar10.getFirstDayOfWeek();
        java.text.AttributedCharacterIterator.Attribute attribute14 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str15 = attribute14.toString();
        java.lang.String str16 = attribute14.toString();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str19 = fastDateFormat17.format((long) 100);
        boolean boolean20 = attribute14.equals((java.lang.Object) str19);
        java.util.TimeZone timeZone22 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22);
        java.lang.String str24 = fastDateFormat23.getPattern();
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition(16);
        java.util.Date date28 = new java.util.Date();
        int int29 = date28.getDay();
        java.util.Date date30 = new java.util.Date();
        date30.setMinutes((int) '#');
        boolean boolean33 = date28.before(date30);
        boolean boolean34 = parsePosition27.equals((java.lang.Object) boolean33);
        java.lang.Object obj35 = fastDateFormat23.parseObject("eng", parsePosition27);
        boolean boolean36 = fastDateFormat23.getTimeZoneOverridesCalendar();
        boolean boolean37 = attribute14.equals((java.lang.Object) fastDateFormat23);
        java.util.Date date38 = new java.util.Date();
        int int39 = date38.getTimezoneOffset();
        long long40 = date38.getTime();
        int int41 = date38.getMinutes();
        int int42 = date38.getDay();
        boolean boolean43 = attribute14.equals((java.lang.Object) int42);
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.util.Locale locale45 = locale44.stripExtensions();
        java.lang.String str46 = locale45.getISO3Country();
        boolean boolean47 = attribute14.equals((java.lang.Object) str46);
        java.util.Locale locale48 = java.util.Locale.PRC;
        java.lang.String str49 = locale48.getDisplayLanguage();
        java.lang.String str50 = locale48.getDisplayName();
        boolean boolean51 = attribute14.equals((java.lang.Object) str50);
        java.util.Locale locale52 = java.util.Locale.PRC;
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(locale52);
        int int55 = calendar53.getActualMinimum(0);
        calendar53.setFirstDayOfWeek((int) (short) 0);
        calendar53.setLenient(true);
        calendar53.set(0, (int) (short) 100, (int) (short) 10, 120, 3);
        calendar53.clear();
        boolean boolean67 = attribute14.equals((java.lang.Object) calendar53);
        boolean boolean68 = calendar10.after((java.lang.Object) calendar53);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh" + "'", str7, "zh");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1644572641032,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=1,MILLISECOND=132,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(attribute14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str15, "java.text.AttributedCharacterIterator$Attribute(language)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str16, "java.text.AttributedCharacterIterator$Attribute(language)");
        org.junit.Assert.assertNotNull(fastDateFormat17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1/1/70 12:00 AM" + "'", str19, "1/1/70 12:00 AM");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "h:mm:ss a z" + "'", str24, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Fri Feb 11 09:44:01 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Fri Feb 11 09:35:01 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Fri Feb 11 09:44:01 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1644572641032L + "'", long40 == 1644572641032L);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 44 + "'", int41 == 44);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 5 + "'", int42 == 5);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinesisch" + "'", str49, "Chinesisch");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Chinesisch (China)" + "'", str50, "Chinesisch (China)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test20246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20246");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder11 = builder0.setLenient(false);
        java.util.Calendar calendar12 = builder0.build();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13);
        int int18 = calendar16.getActualMaximum(0);
        java.util.TimeZone timeZone19 = calendar16.getTimeZone();
        java.util.Calendar.Builder builder20 = builder0.setTimeZone(timeZone19);
        java.util.Calendar.Builder builder25 = builder20.setTimeOfDay(100061, (int) 'a', 42, 42);
        java.util.Locale locale29 = new java.util.Locale("2022-2-7 9:36:11", "\u5e74\u6708\u65e5\u661f\u671f\u4e8c", "9:37:24 AM UTC");
        java.util.Calendar.Builder builder30 = builder25.setLocale(locale29);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(calendar12);
        org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-62131449600100,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=51,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644572641066,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=1,MILLISECOND=166,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder25);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "\u5e74\u6708\u65e5\u661f\u671f\u4e8c_9:37:24 AM UTC");
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test20247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20247");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setMinimalDaysInFirstWeek(15);
        calendar0.setMinimalDaysInFirstWeek(0);
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone6);
        java.lang.StringBuffer stringBuffer9 = null;
        java.lang.StringBuffer stringBuffer10 = fastDateFormat7.format((long) 32772, stringBuffer9);
        java.util.Date date11 = new java.util.Date();
        int int12 = date11.getTimezoneOffset();
        long long13 = date11.getTime();
        int int14 = date11.getMinutes();
        java.lang.String str15 = fastDateFormat7.format(date11);
        java.util.TimeZone timeZone16 = fastDateFormat7.getTimeZone();
        int int18 = timeZone16.getOffset((long) 36);
        calendar0.setTimeZone(timeZone16);
        timeZone16.setID("Sun Nov 11 09:35:40 GMT+00:00 1934");
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572641083,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Sun Nov 11 09:35:40 GMT+00:00 1934\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=0,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=1,MILLISECOND=183,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertNull(stringBuffer10);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Fri Feb 11 09:44:01 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1644572641083L + "'", long13 == 1644572641083L);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 44 + "'", int14 == 44);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
    }

    @Test
    public void test20248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20248");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getSeconds();
        long long2 = date0.getTime();
        date0.setTime((long) ' ');
        int int5 = date0.getTimezoneOffset();
        date0.setSeconds(7);
        date0.setMinutes(32772);
        org.junit.Assert.assertEquals(date0.toString(), "Fri Jan 23 18:12:07 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1644572641106L + "'", long2 == 1644572641106L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test20249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20249");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Locale.Category category4 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category4, locale5);
        java.util.Locale locale7 = java.util.Locale.getDefault(category4);
        boolean boolean8 = fastDateFormat2.equals((java.lang.Object) locale7);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone12);
        java.util.Locale locale15 = fastDateFormat14.getLocale();
        java.text.ParsePosition parsePosition18 = new java.text.ParsePosition(16);
        int int19 = parsePosition18.getErrorIndex();
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone21);
        java.lang.String str23 = fastDateFormat22.getPattern();
        boolean boolean24 = parsePosition18.equals((java.lang.Object) fastDateFormat22);
        int int25 = parsePosition18.getIndex();
        java.lang.String str26 = parsePosition18.toString();
        java.lang.Object obj27 = fastDateFormat14.parseObject("\uc624\uc804\uc2dc\ubd84\ucd08", parsePosition18);
        java.lang.Object obj28 = fastDateFormat2.parseObject("\uc2dc\ubd84\ucd08'", parsePosition18);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        boolean boolean31 = timeZone29.hasSameRules(timeZone30);
        java.util.Locale locale32 = java.util.Locale.ROOT;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone30, locale32);
        long long34 = calendar33.getTimeInMillis();
        calendar33.set((int) (short) 100, 8, (int) '4');
        java.lang.String str39 = calendar33.getCalendarType();
        java.util.TimeZone timeZone40 = calendar33.getTimeZone();
        java.lang.String str41 = fastDateFormat2.format(calendar33);
        java.lang.Object obj42 = fastDateFormat2.clone();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category4.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "h:mm:ss a z" + "'", str23, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 16 + "'", int25 == 16);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str26, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=100,MONTH=8,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=52,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=1,MILLISECOND=217,ZONE_OFFSET=100,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1644572641117L + "'", long34 == 1644572641117L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "gregory" + "'", str39, "gregory");
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "FastDateFormat[]");
    }

    @Test
    public void test20250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20250");
        java.util.Date date1 = new java.util.Date((-1995956580043L));
        org.junit.Assert.assertEquals(date1.toString(), "Tue Oct 02 15:37:00 GMT+00:00 1906");
    }

    @Test
    public void test20251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20251");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String[] strArray10 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        int int15 = strList11.lastIndexOf((java.lang.Object) locale14);
        java.lang.String str16 = locale3.getDisplayVariant(locale14);
        java.lang.String str17 = locale14.getVariant();
        java.lang.String str18 = locale14.getISO3Country();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale14);
        calendar19.add((int) (byte) 10, 122);
        java.util.Date date23 = calendar19.getTime();
        int int24 = date23.getSeconds();
        int int25 = date23.getSeconds();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1645011841159,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=16,DAY_OF_YEAR=47,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=44,SECOND=1,MILLISECOND=259,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Wed Feb 16 11:44:01 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test20252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20252");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.TimeZone timeZone3 = fastDateFormat2.getTimeZone();
        java.util.Locale locale4 = fastDateFormat2.getLocale();
        java.lang.String str5 = locale4.getDisplayCountry();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test20253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20253");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder11 = builder0.setLenient(false);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay(15, 0, 32770);
        java.util.Calendar.Builder builder18 = builder15.setWeekDefinition(7, 7);
        java.util.Calendar.Builder builder20 = builder15.setLenient(true);
        java.util.Calendar.Builder builder24 = builder20.setWeekDate(0, 53, 31);
        java.util.Calendar.Builder builder29 = builder24.setTimeOfDay(31, (-1), 39, 52);
        java.util.Calendar.Builder builder30 = new java.util.Calendar.Builder();
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = locale31.getLanguage();
        boolean boolean33 = locale31.hasExtensions();
        java.lang.String str34 = locale31.getDisplayCountry();
        java.util.Calendar.Builder builder35 = builder30.setLocale(locale31);
        java.util.Calendar.Builder builder39 = builder30.setWeekDate(38, 41, 11);
        java.util.Locale locale42 = new java.util.Locale("java.text.ParsePosition[index=100,errorIndex=-1]", "Jan 10, 4630 12:00:00 AM");
        java.util.Calendar.Builder builder43 = builder39.setLocale(locale42);
        java.util.Calendar.Builder builder44 = new java.util.Calendar.Builder();
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale45.getLanguage();
        boolean boolean47 = locale45.hasExtensions();
        java.lang.String str48 = locale45.getDisplayCountry();
        java.util.Calendar.Builder builder49 = builder44.setLocale(locale45);
        java.util.Calendar.Builder builder53 = builder44.setWeekDate((int) (short) 1, 9, 1);
        int[] intArray56 = new int[] { 14, ' ' };
        java.util.Calendar.Builder builder57 = builder53.setFields(intArray56);
        java.util.Calendar.Builder builder58 = builder43.setFields(intArray56);
        java.util.Calendar.Builder builder59 = builder24.setFields(intArray56);
        java.util.Calendar.Builder builder63 = builder59.setDate((int) (short) 0, 122, 6);
        java.util.Calendar.Builder builder65 = builder63.setLenient(false);
        java.util.TimeZone timeZone67 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone68.hasSameRules(timeZone69);
        boolean boolean71 = timeZone67.hasSameRules(timeZone69);
        boolean boolean72 = timeZone69.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone69);
        timeZone69.setRawOffset(32772);
        java.util.Calendar.Builder builder77 = builder63.setTimeZone(timeZone69);
        boolean boolean78 = timeZone69.useDaylightTime();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zh" + "'", str32, "zh");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals(locale42.toString(), "java.text.parseposition[index=100,errorindex=-1]_JAN 10, 4630 12:00:00 AM");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zh" + "'", str46, "zh");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[14, 32]");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(fastDateFormat74);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test20254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20254");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = fastDateFormat2.getLocale();
        boolean boolean7 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str8 = fastDateFormat2.getPattern();
        java.lang.String str9 = fastDateFormat2.toString();
        java.lang.String str10 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone11 = fastDateFormat2.getTimeZone();
        java.lang.String str12 = timeZone11.getID();
        java.util.Locale locale16 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale16);
        java.lang.String str18 = locale16.getLanguage();
        java.lang.String str19 = locale16.getVariant();
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = locale20.getLanguage();
        boolean boolean22 = locale20.hasExtensions();
        java.lang.String str23 = locale16.getDisplayCountry(locale20);
        java.util.Locale locale24 = locale20.stripExtensions();
        java.lang.String str25 = locale20.getCountry();
        java.lang.String str26 = locale20.getScript();
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder27.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder30 = builder27.clear();
        java.util.Locale locale31 = builder30.build();
        java.util.Locale locale32 = builder30.build();
        java.lang.String str33 = locale20.getDisplayLanguage(locale32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = timeZone11.getDisplayName(false, 32771, locale20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 32771");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "h:mm:ss a z" + "'", str8, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str9, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "h:mm:ss a z" + "'", str10, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinesisch" + "'", str12, "Chinesisch");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh" + "'", str18, "zh");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh" + "'", str21, "zh");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u4e2d\u56fd" + "'", str23, "\u4e2d\u56fd");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Chinese" + "'", str33, "Chinese");
    }

    @Test
    public void test20255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20255");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate(38, 41, 11);
        java.util.Calendar.Builder builder11 = builder0.setLenient(false);
        java.util.Calendar.Builder builder15 = builder0.setWeekDate(1970, 27, 56);
        java.util.Calendar.Builder builder19 = builder15.setDate(27, 31, 0);
        java.util.Calendar.Builder builder23 = builder15.setTimeOfDay(28, 22, 41);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test20256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20256");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        java.lang.String str11 = locale8.getDisplayLanguage(locale9);
        java.lang.String str12 = locale6.getDisplayLanguage(locale8);
        java.util.Locale.Builder builder13 = builder3.setLocale(locale8);
        java.util.Locale locale14 = builder3.build();
        java.util.Locale locale15 = builder3.build();
        java.lang.String str16 = locale15.toLanguageTag();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh" + "'", str10, "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str11, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "coreano" + "'", str12, "coreano");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it" + "'", str16, "it");
    }

    @Test
    public void test20257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20257");
        long long6 = java.util.Date.UTC(16, 131, 25, 11, (int) '#', 2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1357561498000L) + "'", long6 == (-1357561498000L));
    }

    @Test
    public void test20258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20258");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getDay();
        java.time.Instant instant2 = date0.toInstant();
        int int3 = date0.getSeconds();
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getDate();
        java.lang.String str6 = date4.toGMTString();
        boolean boolean7 = date0.before(date4);
        date0.setTime(1644226501210L);
        int int10 = date0.getDate();
        boolean boolean12 = date0.equals((java.lang.Object) 1644486004482L);
        org.junit.Assert.assertEquals(date0.toString(), "Mon Feb 07 09:35:33 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 5 + "'", int1 == 5);
        org.junit.Assert.assertNotNull(instant2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 34 + "'", int3 == 34);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Fri Feb 11 09:44:34 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 11 + "'", int5 == 11);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "11 Feb 2022 09:44:01 GMT" + "'", str6, "11 Feb 2022 09:44:01 GMT");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test20259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20259");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale locale7 = builder6.build();
        java.util.Locale.Builder builder8 = builder6.clear();
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale.Builder builder10 = builder9.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test20260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20260");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getTimezoneOffset();
        int int2 = date0.getSeconds();
        date0.setDate(7);
        java.time.Instant instant5 = date0.toInstant();
        java.util.Date date6 = java.util.Date.from(instant5);
        java.lang.String str7 = date6.toLocaleString();
        java.util.Date date8 = new java.util.Date();
        int int9 = date8.getTimezoneOffset();
        int int10 = date8.getSeconds();
        date8.setDate(7);
        java.time.Instant instant13 = date8.toInstant();
        boolean boolean14 = date6.before(date8);
        int int15 = date8.getDate();
        date8.setMonth((-1893));
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Mon Feb 07 09:44:34 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 34 + "'", int2 == 34);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 07 09:44:34 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "07.02.2022 09:44:34" + "'", str7, "07.02.2022 09:44:34");
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Thu Apr 07 09:44:34 GMT+00:00 1864");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 34 + "'", int10 == 34);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
    }

    @Test
    public void test20261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20261");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder11 = builder0.setLenient(false);
        java.util.Calendar.Builder builder15 = builder11.setTimeOfDay(50, 0, 7200000);
        java.util.Calendar.Builder builder18 = builder11.set(12, 266);
        java.util.Date date24 = new java.util.Date((int) ' ', 32769, 18, 17, 45);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder25 = builder11.setInstant(date24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals(date24.toString(), "Sat Oct 18 17:45:00 GMT+00:00 4662");
    }

    @Test
    public void test20262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20262");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        boolean boolean3 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str4 = fastDateFormat2.getPattern();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(9);
        parsePosition7.setIndex((int) 'a');
        java.lang.Object obj10 = fastDateFormat2.parseObject("UTC9", parsePosition7);
        java.lang.Object obj11 = fastDateFormat2.clone();
        java.text.ParsePosition parsePosition14 = new java.text.ParsePosition(100);
        java.lang.String str15 = parsePosition14.toString();
        parsePosition14.setIndex(1);
        java.util.Locale locale20 = new java.util.Locale("9:34:37 AM UTC", "Fri Feb 11 09:34:34 UTC 2022");
        java.text.ParsePosition parsePosition22 = new java.text.ParsePosition(16);
        int int23 = parsePosition22.getErrorIndex();
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone25);
        java.lang.String str27 = fastDateFormat26.getPattern();
        boolean boolean28 = parsePosition22.equals((java.lang.Object) fastDateFormat26);
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        boolean boolean30 = parsePosition22.equals((java.lang.Object) locale29);
        java.lang.String str31 = locale29.getDisplayScript();
        java.lang.String str32 = locale20.getDisplayLanguage(locale29);
        boolean boolean33 = parsePosition14.equals((java.lang.Object) str32);
        java.lang.Object obj34 = fastDateFormat2.parseObject("30 April 0007", parsePosition14);
        int int35 = parsePosition14.getErrorIndex();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "FastDateFormat[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.text.ParsePosition[index=100,errorIndex=-1]" + "'", str15, "java.text.ParsePosition[index=100,errorIndex=-1]");
        org.junit.Assert.assertEquals(locale20.toString(), "9:34:37 am utc_FRI FEB 11 09:34:34 UTC 2022");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "h:mm:ss a z" + "'", str27, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "9:34:37 am utc" + "'", str32, "9:34:37 am utc");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test20263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20263");
        java.util.Date date5 = new java.util.Date(365, 0, 32768, (-405), 0);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Sep 02 03:00:00 GMT+00:00 2354");
    }

    @Test
    public void test20264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20264");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.time.Instant instant2 = calendar1.toInstant();
        calendar1.set((int) (short) 1, 37, 44, (int) (short) 10, 0);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale12);
        int int16 = timeZone9.getOffset((long) 2);
        java.util.Locale.Category category17 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category17, locale18);
        java.util.Locale locale20 = java.util.Locale.getDefault(category17);
        java.util.Locale locale21 = java.util.Locale.getDefault(category17);
        java.util.Locale locale22 = null;
        java.lang.String str23 = locale21.getDisplayCountry(locale22);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone9, locale21);
        calendar24.roll(0, 39);
        boolean boolean28 = calendar1.before((java.lang.Object) 39);
        java.util.TimeZone timeZone29 = calendar1.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1);
        java.text.ParsePosition parsePosition34 = new java.text.ParsePosition(1);
        java.lang.String str35 = parsePosition34.toString();
        java.lang.Object obj36 = fastDateFormat31.parseObject("GMT+00:009", parsePosition34);
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone37.hasSameRules(timeZone38);
        int int41 = timeZone38.getOffset(1644572071852L);
        boolean boolean42 = parsePosition34.equals((java.lang.Object) timeZone38);
        timeZone38.setRawOffset(27);
        calendar1.setTimeZone(timeZone38);
        boolean boolean46 = calendar1.isLenient();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=27,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=37,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=44,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=10,MINUTE=0,SECOND=34,MILLISECOND=183,ZONE_OFFSET=32772,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572641411,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=34,MILLISECOND=183,ZONE_OFFSET=32772,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 32772 + "'", int16 == 32772);
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category17.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=34,MILLISECOND=183,ZONE_OFFSET=32772,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "java.text.ParsePosition[index=1,errorIndex=-1]" + "'", str35, "java.text.ParsePosition[index=1,errorIndex=-1]");
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 32772 + "'", int41 == 32772);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test20265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20265");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.util.TimeZone timeZone4 = fastDateFormat2.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone9);
        java.lang.String str11 = fastDateFormat10.toString();
        java.lang.String str12 = fastDateFormat10.toString();
        java.util.TimeZone timeZone13 = fastDateFormat10.getTimeZone();
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone13, locale14);
        boolean boolean19 = calendar18.isWeekDateSupported();
        calendar18.set(7, 4, 0);
        java.util.Date date24 = calendar18.getTime();
        java.lang.String str25 = fastDateFormat7.format(calendar18);
        java.util.TimeZone timeZone26 = fastDateFormat7.getTimeZone();
        java.lang.Object obj27 = null;
        boolean boolean28 = fastDateFormat7.equals(obj27);
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition(16);
        int int32 = parsePosition31.getErrorIndex();
        int int33 = parsePosition31.getErrorIndex();
        java.lang.Object obj34 = fastDateFormat7.parseObject("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", parsePosition31);
        parsePosition31.setIndex(0);
        parsePosition31.setIndex((int) 'a');
        java.lang.String str39 = parsePosition31.toString();
        java.lang.Object obj40 = fastDateFormat2.parseObject("2022-2-7 9:39:15", parsePosition31);
        java.util.TimeZone timeZone42 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone42);
        java.lang.String str44 = fastDateFormat43.toString();
        java.text.ParsePosition parsePosition47 = new java.text.ParsePosition(16);
        java.util.Date date48 = new java.util.Date();
        int int49 = date48.getDay();
        java.util.Date date50 = new java.util.Date();
        date50.setMinutes((int) '#');
        boolean boolean53 = date48.before(date50);
        boolean boolean54 = parsePosition47.equals((java.lang.Object) boolean53);
        parsePosition47.setErrorIndex(0);
        java.lang.Object obj57 = fastDateFormat43.parseObject("tedesco", parsePosition47);
        java.util.Locale.Builder builder58 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder60 = builder58.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder61 = builder58.clear();
        boolean boolean62 = parsePosition47.equals((java.lang.Object) builder61);
        java.util.Locale.Builder builder64 = builder61.setLanguageTag("China");
        java.util.Locale.Builder builder66 = builder61.setLanguageTag("und");
        java.util.Locale.Builder builder67 = builder66.clear();
        java.util.Locale.Builder builder68 = builder66.clearExtensions();
        java.util.Locale.Builder builder69 = builder68.clearExtensions();
        boolean boolean70 = parsePosition31.equals((java.lang.Object) builder69);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str11, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str12, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=-61936150558557,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=1,MILLISECOND=543,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Sat Apr 30 09:44:34 GMT+00:00 7");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "30. April 0007" + "'", str25, "30. April 0007");
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "java.text.ParsePosition[index=97,errorIndex=0]" + "'", str39, "java.text.ParsePosition[index=97,errorIndex=0]");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str44, "FastDateFormat[h:mm:ss a z]");
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Fri Feb 11 09:44:34 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
// flaky:         org.junit.Assert.assertEquals(date50.toString(), "Fri Feb 11 09:35:34 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(obj57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test20266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20266");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = fastDateFormat2.getLocale();
        java.util.TimeZone timeZone7 = fastDateFormat2.getTimeZone();
        java.lang.String str9 = fastDateFormat2.format((long) 9);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition(16);
        int int13 = parsePosition12.getErrorIndex();
        java.lang.String str14 = parsePosition12.toString();
        boolean boolean16 = parsePosition12.equals((java.lang.Object) "9:34:49 AM UTC");
        parsePosition12.setIndex(56);
        java.lang.Object obj19 = fastDateFormat2.parseObject("", parsePosition12);
        boolean boolean20 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.util.Date date26 = new java.util.Date(0, 8, 35, 46, (int) '4');
        int int27 = date26.getMonth();
        date26.setMinutes(24);
        java.lang.String str30 = fastDateFormat2.format(date26);
        java.lang.String str31 = date26.toLocaleString();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance();
        boolean boolean33 = calendar32.isWeekDateSupported();
        calendar32.setLenient(true);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str38 = locale37.getDisplayName();
        boolean boolean39 = fastDateFormat36.equals((java.lang.Object) str38);
        int int40 = fastDateFormat36.getMaxLengthEstimate();
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition(16);
        int int44 = parsePosition43.getErrorIndex();
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone46);
        java.lang.String str48 = fastDateFormat47.getPattern();
        boolean boolean49 = parsePosition43.equals((java.lang.Object) fastDateFormat47);
        int int50 = parsePosition43.getIndex();
        int int51 = parsePosition43.getIndex();
        java.util.Calendar.Builder builder52 = new java.util.Calendar.Builder();
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.lang.String str54 = locale53.getLanguage();
        boolean boolean55 = locale53.hasExtensions();
        java.lang.String str56 = locale53.getDisplayCountry();
        java.util.Calendar.Builder builder57 = builder52.setLocale(locale53);
        java.util.Calendar.Builder builder61 = builder52.setWeekDate((int) (short) 1, 9, 1);
        int[] intArray64 = new int[] { 14, ' ' };
        java.util.Calendar.Builder builder65 = builder61.setFields(intArray64);
        boolean boolean66 = parsePosition43.equals((java.lang.Object) builder61);
        int int67 = parsePosition43.getErrorIndex();
        parsePosition43.setErrorIndex(22);
        java.lang.Object obj70 = fastDateFormat36.parseObject("\u65e5\u6587", parsePosition43);
        boolean boolean71 = calendar32.after(obj70);
        int int72 = calendar32.getWeekYear();
        boolean boolean73 = date26.equals((java.lang.Object) calendar32);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str9, "12:00:00 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str14, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals(date26.toString(), "Sat Oct 06 22:24:00 GMT+00:00 1900");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 9 + "'", int27 == 9);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "10:23:27 PM GMT+00:00" + "'", str30, "10:23:27 PM GMT+00:00");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "06.10.1900 22:24:00" + "'", str31, "06.10.1900 22:24:00");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1644572641474,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=34,MILLISECOND=246,ZONE_OFFSET=32772,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "tedesco" + "'", str38, "tedesco");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 21 + "'", int40 == 21);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "h:mm:ss a z" + "'", str48, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 16 + "'", int50 == 16);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 16 + "'", int51 == 16);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "zh" + "'", str54, "zh");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[14, 32]");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2022 + "'", int72 == 2022);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test20267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20267");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(9);
        parsePosition1.setIndex((int) 'a');
        parsePosition1.setErrorIndex(16);
        parsePosition1.setIndex(58);
        int int8 = parsePosition1.getIndex();
        parsePosition1.setIndex(102);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 58 + "'", int8 == 58);
    }

    @Test
    public void test20268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20268");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("Chinese (China)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test20269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20269");
        java.util.Date date3 = new java.util.Date(11, 11, 3);
        date3.setSeconds((int) (byte) -1);
        java.time.Instant instant6 = date3.toInstant();
        java.lang.String str7 = date3.toGMTString();
        int int8 = date3.getMinutes();
        date3.setSeconds(45);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Dec 02 23:59:45 GMT+00:00 1911");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2 Dec 1911 23:59:26 GMT" + "'", str7, "2 Dec 1911 23:59:26 GMT");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
    }

    @Test
    public void test20270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20270");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("gregory", strMap1);
        java.lang.String[] strArray4 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList5 = new java.util.ArrayList<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList5, strArray4);
        java.util.stream.Stream<java.lang.String> strStream7 = strList5.stream();
        boolean boolean9 = strList5.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor11 = strList5.listIterator(0);
        java.lang.String[] strArray13 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.stream.Stream<java.lang.String> strStream16 = strList14.stream();
        boolean boolean18 = strList14.add("hi!");
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale19.getDisplayVariant(locale21);
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.lang.String str24 = locale19.getDisplayVariant(locale23);
        boolean boolean25 = strList14.contains((java.lang.Object) locale19);
        boolean boolean26 = strList5.removeAll((java.util.Collection<java.lang.String>) strList14);
        java.util.TimeZone timeZone28 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone28);
        java.util.Date date30 = new java.util.Date();
        int int31 = date30.getTimezoneOffset();
        int int32 = date30.getSeconds();
        java.lang.StringBuffer stringBuffer33 = null;
        java.text.Format.Field field34 = null;
        java.text.FieldPosition fieldPosition36 = new java.text.FieldPosition(field34, 1);
        fieldPosition36.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer39 = fastDateFormat29.format((java.lang.Object) date30, stringBuffer33, fieldPosition36);
        int int40 = strList5.lastIndexOf((java.lang.Object) fieldPosition36);
        java.lang.String[] strArray42 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList43 = new java.util.ArrayList<java.lang.String>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList43, strArray42);
        java.util.stream.Stream<java.lang.String> strStream45 = strList43.stream();
        java.util.ListIterator<java.lang.String> strItor46 = strList43.listIterator();
        java.util.Locale locale47 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleKeys();
        boolean boolean49 = strList43.removeAll((java.util.Collection<java.lang.String>) strSet48);
        java.util.Calendar.Builder builder50 = new java.util.Calendar.Builder();
        java.util.Locale locale51 = java.util.Locale.CHINESE;
        java.lang.String str52 = locale51.getLanguage();
        boolean boolean53 = locale51.hasExtensions();
        java.lang.String str54 = locale51.getDisplayCountry();
        java.util.Calendar.Builder builder55 = builder50.setLocale(locale51);
        java.util.Calendar.Builder builder59 = builder50.setWeekDate((int) (short) 1, 9, 1);
        boolean boolean60 = strList43.remove((java.lang.Object) 9);
        boolean boolean61 = strList5.containsAll((java.util.Collection<java.lang.String>) strList43);
        java.util.ListIterator<java.lang.String> strItor62 = strList5.listIterator();
        boolean boolean63 = strList5.isEmpty();
        java.lang.String str64 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strList5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap65 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList66 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap65);
        java.lang.String[] strArray68 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.util.stream.Stream<java.lang.String> strStream71 = strList69.stream();
        boolean boolean73 = strList69.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor75 = strList69.listIterator(0);
        java.lang.String[] strArray77 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        java.util.stream.Stream<java.lang.String> strStream80 = strList78.stream();
        java.util.ListIterator<java.lang.String> strItor81 = strList78.listIterator();
        boolean boolean82 = strList69.removeAll((java.util.Collection<java.lang.String>) strList78);
        java.lang.String str83 = java.util.Locale.lookupTag(languageRangeList66, (java.util.Collection<java.lang.String>) strList78);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strStream7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strItor11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh" + "'", str20, "zh");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(fastDateFormat29);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Fri Feb 11 09:44:34 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 34 + "'", int32 == 34);
        org.junit.Assert.assertNull(stringBuffer39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(strStream45);
        org.junit.Assert.assertNotNull(strItor46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "zh" + "'", str52, "zh");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strItor62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(languageRangeList66);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strStream71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strItor75);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strStream80);
        org.junit.Assert.assertNotNull(strItor81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(str83);
    }

    @Test
    public void test20271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20271");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.StringBuffer stringBuffer4 = null;
        java.lang.StringBuffer stringBuffer5 = fastDateFormat2.format((long) 32772, stringBuffer4);
        java.lang.StringBuffer stringBuffer7 = null;
        java.lang.StringBuffer stringBuffer8 = fastDateFormat2.format((long) 97, stringBuffer7);
        java.lang.String str9 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone10 = fastDateFormat2.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone14);
        java.lang.String str16 = fastDateFormat15.toString();
        java.lang.String str17 = fastDateFormat15.toString();
        java.util.TimeZone timeZone18 = fastDateFormat15.getTimeZone();
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale19.getDisplayVariant(locale21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone18, locale19);
        boolean boolean24 = calendar23.isWeekDateSupported();
        calendar23.set(7, 4, 0);
        java.util.Date date29 = calendar23.getTime();
        java.lang.String str30 = fastDateFormat12.format(calendar23);
        java.util.TimeZone timeZone31 = fastDateFormat12.getTimeZone();
        java.lang.Object obj32 = null;
        boolean boolean33 = fastDateFormat12.equals(obj32);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance();
        int int35 = calendar34.getWeeksInWeekYear();
        java.time.Instant instant36 = calendar34.toInstant();
        int int38 = calendar34.getMinimum(4);
        java.lang.String str39 = fastDateFormat12.format(calendar34);
        int int41 = calendar34.getLeastMaximum(3);
        java.lang.StringBuffer stringBuffer42 = null;
        java.lang.StringBuffer stringBuffer43 = fastDateFormat2.format(calendar34, stringBuffer42);
        int int44 = fastDateFormat2.getMaxLengthEstimate();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        java.util.Locale locale48 = java.util.Locale.ROOT;
        java.util.Calendar calendar49 = java.util.Calendar.getInstance(timeZone46, locale48);
        long long50 = calendar49.getTimeInMillis();
        calendar49.set(2022, (int) 'a', 8);
        calendar49.roll(9, true);
        int int58 = calendar49.getWeeksInWeekYear();
        calendar49.setTimeInMillis(1644572091641L);
        calendar49.setMinimalDaysInFirstWeek((int) (byte) 100);
        boolean boolean63 = calendar49.isWeekDateSupported();
        java.lang.StringBuffer stringBuffer64 = null;
        java.lang.StringBuffer stringBuffer65 = fastDateFormat2.format(calendar49, stringBuffer64);
        int int66 = calendar49.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNull(stringBuffer5);
        org.junit.Assert.assertNull(stringBuffer8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str16, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str17, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh" + "'", str20, "zh");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-61936150558397,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=1,MILLISECOND=703,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Sat Apr 30 09:44:34 GMT+00:00 7");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "30. April 0007" + "'", str30, "30. April 0007");
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1644572641603,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=34,MILLISECOND=375,ZONE_OFFSET=32772,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "11. Februar 2022" + "'", str39, "11. Februar 2022");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 51 + "'", int41 == 51);
        org.junit.Assert.assertNull(stringBuffer43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=1644572091641,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=100,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=35,SECOND=24,MILLISECOND=413,ZONE_OFFSET=32772,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1644572641603L + "'", long50 == 1644572641603L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(stringBuffer65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test20272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20272");
        java.util.Date date6 = new java.util.Date(42, (int) (short) 1, 292278994, 5, 17, (int) 'x');
        date6.setMinutes(32);
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition(17);
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        java.util.TimeZone timeZone15 = fastDateFormat13.getTimeZone();
        java.util.Date date16 = new java.util.Date();
        int int17 = date16.getTimezoneOffset();
        long long18 = date16.getTime();
        date16.setDate((int) (byte) 10);
        long long21 = date16.getTime();
        date16.setHours(32769);
        java.lang.String str24 = fastDateFormat13.format(date16);
        int int25 = date16.getHours();
        date16.setMinutes(13);
        boolean boolean28 = parsePosition10.equals((java.lang.Object) date16);
        boolean boolean29 = date6.before(date16);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Oct 15 05:32:00 GMT+00:00 802174");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "h:mm:ss a z" + "'", str14, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Thu Nov 06 09:13:34 GMT+00:00 2025");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1644572641634L + "'", long18 == 1644572641634L);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1644486241634L + "'", long21 == 1644486241634L);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "9:44:01 AM GMT+00:00" + "'", str24, "9:44:01 AM GMT+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test20273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20273");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.lang.String str3 = locale2.getLanguage();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale2.getDisplayVariant(locale4);
        boolean boolean6 = calendar0.before((java.lang.Object) str5);
        int int7 = calendar0.getFirstDayOfWeek();
        int int8 = calendar0.getWeekYear();
        int int9 = calendar0.getWeekYear();
        java.util.Date date10 = calendar0.getTime();
        java.util.TimeZone timeZone11 = calendar0.getTimeZone();
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone11);
        java.util.TimeZone timeZone13 = calendar12.getTimeZone();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572641657,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=34,MILLISECOND=429,ZONE_OFFSET=32772,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh" + "'", str3, "zh");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Fri Feb 11 09:44:34 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644572641657,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=34,MILLISECOND=429,ZONE_OFFSET=32772,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test20274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20274");
        java.util.Calendar.Builder builder1 = new java.util.Calendar.Builder();
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.lang.String str3 = locale2.getLanguage();
        boolean boolean4 = locale2.hasExtensions();
        java.lang.String str5 = locale2.getDisplayCountry();
        java.util.Calendar.Builder builder6 = builder1.setLocale(locale2);
        java.util.Calendar.Builder builder10 = builder1.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder12 = builder1.setLenient(false);
        java.util.Calendar calendar13 = builder1.build();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14);
        int int19 = calendar17.getActualMaximum(0);
        java.util.TimeZone timeZone20 = calendar17.getTimeZone();
        java.util.Calendar.Builder builder21 = builder1.setTimeZone(timeZone20);
        java.util.Locale locale22 = java.util.Locale.ROOT;
        boolean boolean23 = locale22.hasExtensions();
        java.lang.String str24 = locale22.getDisplayLanguage();
        java.util.Locale.setDefault(locale22);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("25.02.1919 00:00:00", timeZone20, locale22);
        java.util.Locale.Category category27 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category27, locale28);
        java.util.Locale locale30 = java.util.Locale.getDefault(category27);
        boolean boolean31 = locale30.hasExtensions();
        java.lang.String[] strArray37 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.stream.Stream<java.lang.String> strStream40 = strList38.stream();
        java.util.Locale locale41 = java.util.Locale.JAPANESE;
        int int42 = strList38.lastIndexOf((java.lang.Object) locale41);
        java.lang.String str43 = locale30.getDisplayVariant(locale41);
        java.util.Set<java.lang.String> strSet44 = locale30.getUnicodeLocaleAttributes();
        java.util.Calendar calendar45 = java.util.Calendar.getInstance(timeZone20, locale30);
        // The following exception was thrown during execution in test generation
        try {
            int int47 = calendar45.getLeastMaximum(48);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 48");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh" + "'", str3, "zh");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=-62131449632772,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=51,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=32772,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1644572641695,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=34,MILLISECOND=467,ZONE_OFFSET=32772,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertTrue("'" + category27 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category27.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strStream40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=1644572641695,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=34,MILLISECOND=467,ZONE_OFFSET=32772,DST_OFFSET=0]");
    }

    @Test
    public void test20275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20275");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) ' ');
        java.util.Calendar.Builder builder3 = new java.util.Calendar.Builder();
        java.util.Locale locale6 = new java.util.Locale("9:34:38 AM UTC", "9:34:37 AM UTC");
        java.util.Calendar.Builder builder7 = builder3.setLocale(locale6);
        java.util.Calendar.Builder builder9 = builder3.setLenient(true);
        java.util.Calendar.Builder builder11 = builder3.setLenient(false);
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        boolean boolean14 = timeZone12.hasSameRules(timeZone13);
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone13, locale15);
        long long17 = calendar16.getTimeInMillis();
        calendar16.set(2022, (int) 'a', 8);
        boolean boolean23 = calendar16.after((java.lang.Object) "9:34:49 AM UTC");
        calendar16.setTimeInMillis(1644572124358L);
        int int27 = calendar16.getGreatestMinimum((int) (short) 10);
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition(16);
        int int30 = parsePosition29.getErrorIndex();
        java.util.TimeZone timeZone32 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone32);
        java.lang.String str34 = fastDateFormat33.getPattern();
        boolean boolean35 = parsePosition29.equals((java.lang.Object) fastDateFormat33);
        int int36 = parsePosition29.getIndex();
        int int37 = parsePosition29.getIndex();
        java.util.Calendar.Builder builder38 = new java.util.Calendar.Builder();
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = locale39.getLanguage();
        boolean boolean41 = locale39.hasExtensions();
        java.lang.String str42 = locale39.getDisplayCountry();
        java.util.Calendar.Builder builder43 = builder38.setLocale(locale39);
        java.util.Calendar.Builder builder47 = builder38.setWeekDate((int) (short) 1, 9, 1);
        int[] intArray50 = new int[] { 14, ' ' };
        java.util.Calendar.Builder builder51 = builder47.setFields(intArray50);
        boolean boolean52 = parsePosition29.equals((java.lang.Object) builder47);
        java.util.Calendar.Builder builder56 = builder47.setTimeOfDay(32770, 50, 38);
        java.util.Calendar.Builder builder58 = builder56.setLenient(true);
        java.util.Calendar.Builder builder59 = new java.util.Calendar.Builder();
        java.util.Locale locale60 = java.util.Locale.CHINESE;
        java.lang.String str61 = locale60.getLanguage();
        boolean boolean62 = locale60.hasExtensions();
        java.lang.String str63 = locale60.getDisplayCountry();
        java.util.Calendar.Builder builder64 = builder59.setLocale(locale60);
        java.util.Calendar.Builder builder68 = builder59.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale70 = new java.util.Locale("de");
        java.lang.String str71 = locale70.toLanguageTag();
        java.lang.String str72 = locale70.getCountry();
        java.util.Calendar.Builder builder73 = builder59.setLocale(locale70);
        java.util.Calendar calendar74 = builder73.build();
        int[] intArray75 = new int[] {};
        java.util.Calendar.Builder builder76 = builder73.setFields(intArray75);
        java.util.Calendar.Builder builder77 = builder56.setFields(intArray75);
        boolean boolean78 = calendar16.after((java.lang.Object) intArray75);
        java.util.Calendar.Builder builder79 = builder11.setFields(intArray75);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder80 = builder0.setFields(intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: instant has been set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale6.toString(), "9:34:38 am utc_9:34:37 AM UTC");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(calendar16);
        org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644572124358,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=35,SECOND=57,MILLISECOND=130,ZONE_OFFSET=32772,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1644572641721L + "'", long17 == 1644572641721L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "h:mm:ss a z" + "'", str34, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 16 + "'", int36 == 16);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 16 + "'", int37 == 16);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "zh" + "'", str40, "zh");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[14, 32]");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "zh" + "'", str61, "zh");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals(locale70.toString(), "de");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "de" + "'", str71, "de");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(calendar74);
        org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=-62130240032772,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=6,DAY_OF_YEAR=65,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=32772,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[]");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test20276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20276");
        java.util.Locale locale2 = new java.util.Locale("9:42:18 AM UTC", "Friday, 11 February 2022");
        org.junit.Assert.assertEquals(locale2.toString(), "9:42:18 am utc_FRIDAY, 11 FEBRUARY 2022");
    }

    @Test
    public void test20277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20277");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getWeeksInWeekYear();
        java.time.Instant instant2 = calendar0.toInstant();
        boolean boolean3 = calendar0.isWeekDateSupported();
        int int4 = calendar0.getWeekYear();
        int int5 = calendar0.getWeekYear();
        calendar0.setFirstDayOfWeek(27);
        int int8 = calendar0.getWeeksInWeekYear();
        int int10 = calendar0.getGreatestMinimum(8);
        long long11 = calendar0.getTimeInMillis();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572641759,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=27,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=34,MILLISECOND=531,ZONE_OFFSET=32772,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 53 + "'", int1 == 53);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1644572641759L + "'", long11 == 1644572641759L);
    }

    @Test
    public void test20278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20278");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229\u6587");
        timeZone1.setRawOffset(42);
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId4);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Ora media di Greenwich");
    }

    @Test
    public void test20279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20279");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("de");
        double double2 = languageRange1.getWeight();
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] { languageRange7 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone12, locale14);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.lang.String str21 = locale18.getDisplayLanguage(locale19);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale25);
        java.util.Locale locale27 = java.util.Locale.FRANCE;
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone31);
        java.util.Locale locale34 = fastDateFormat33.getLocale();
        java.util.Locale locale35 = java.util.Locale.FRANCE;
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.lang.String str41 = locale36.getDisplayVariant(locale40);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.util.Locale locale44 = java.util.Locale.ENGLISH;
        java.util.Locale locale45 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        boolean boolean49 = timeZone47.hasSameRules(timeZone48);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat50 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone48);
        java.util.Locale locale51 = fastDateFormat50.getLocale();
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone54.hasSameRules(timeZone55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone55);
        java.util.Locale locale58 = fastDateFormat57.getLocale();
        java.util.Locale locale59 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale60 = java.util.Locale.UK;
        java.util.Locale[] localeArray61 = new java.util.Locale[] { locale14, locale18, locale22, locale25, locale27, locale28, locale34, locale35, locale40, locale42, locale43, locale44, locale45, locale51, locale52, locale58, locale59, locale60 };
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.Locale locale64 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList62);
        java.util.Locale locale65 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList62);
        java.lang.String[] strArray67 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        java.util.stream.Stream<java.lang.String> strStream70 = strList68.stream();
        strList68.clear();
        java.lang.String[] strArray73 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.util.stream.Stream<java.lang.String> strStream76 = strList74.stream();
        boolean boolean77 = strList68.containsAll((java.util.Collection<java.lang.String>) strList74);
        java.util.Locale.FilteringMode filteringMode78 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList68, filteringMode78);
        java.lang.String[] strArray81 = java.util.TimeZone.getAvailableIDs(3);
        int int82 = strList79.indexOf((java.lang.Object) strArray81);
        strList79.clear();
        boolean boolean85 = strList79.equals((java.lang.Object) 1644572396650L);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tedesco" + "'", str15, "tedesco");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1644572641784,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=34,MILLISECOND=556,ZONE_OFFSET=32772,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh" + "'", str20, "zh");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str21, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertNotNull(locale34);
// flaky:         org.junit.Assert.assertEquals(locale34.toString(), "2022-2-11 9:34:44_9:34:49 AM UTC_9:34:46 AM UTC");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "zh" + "'", str37, "zh");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(fastDateFormat50);
        org.junit.Assert.assertNotNull(locale51);
// flaky:         org.junit.Assert.assertEquals(locale51.toString(), "2022-2-11 9:34:44_9:34:49 AM UTC_9:34:46 AM UTC");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertNotNull(locale58);
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "2022-2-11 9:34:44_9:34:49 AM UTC_9:34:46 AM UTC");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strStream70);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strStream76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + filteringMode78 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode78.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test20280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20280");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        java.lang.String str3 = locale1.getLanguage();
        java.lang.String str4 = locale1.getVariant();
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        boolean boolean7 = locale5.hasExtensions();
        java.lang.String str8 = locale1.getDisplayCountry(locale5);
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category9, locale10);
        java.util.Locale locale12 = java.util.Locale.getDefault(category9);
        boolean boolean13 = locale12.hasExtensions();
        java.lang.String[] strArray19 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.stream.Stream<java.lang.String> strStream22 = strList20.stream();
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        int int24 = strList20.lastIndexOf((java.lang.Object) locale23);
        java.lang.String str25 = locale12.getDisplayVariant(locale23);
        java.lang.String str26 = locale1.getDisplayCountry(locale12);
        java.util.TimeZone timeZone29 = java.util.TimeZone.getTimeZone("9:34:37 AM UTC");
        java.util.TimeZone timeZone31 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229\u6587");
        boolean boolean32 = timeZone29.hasSameRules(timeZone31);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone29);
        java.util.Locale locale34 = fastDateFormat33.getLocale();
        java.lang.String str35 = locale1.getDisplayCountry(locale34);
        java.lang.String str36 = locale1.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh" + "'", str3, "zh");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh" + "'", str6, "zh");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u4e2d\u56fd" + "'", str8, "\u4e2d\u56fd");
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Cina" + "'", str26, "Cina");
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "China" + "'", str35, "China");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "cinese" + "'", str36, "cinese");
    }

    @Test
    public void test20281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20281");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor8 = strList2.listIterator(0);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        boolean boolean15 = strList11.add("hi!");
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale16.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale16.getDisplayVariant(locale20);
        boolean boolean22 = strList11.contains((java.lang.Object) locale16);
        boolean boolean23 = strList2.removeAll((java.util.Collection<java.lang.String>) strList11);
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone25);
        java.util.Date date27 = new java.util.Date();
        int int28 = date27.getTimezoneOffset();
        int int29 = date27.getSeconds();
        java.lang.StringBuffer stringBuffer30 = null;
        java.text.Format.Field field31 = null;
        java.text.FieldPosition fieldPosition33 = new java.text.FieldPosition(field31, 1);
        fieldPosition33.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer36 = fastDateFormat26.format((java.lang.Object) date27, stringBuffer30, fieldPosition33);
        int int37 = strList2.lastIndexOf((java.lang.Object) fieldPosition33);
        java.util.Date date38 = new java.util.Date();
        int int39 = date38.getDay();
        java.util.Date date40 = new java.util.Date();
        date40.setMinutes((int) '#');
        boolean boolean43 = date38.before(date40);
        boolean boolean44 = fieldPosition33.equals((java.lang.Object) date40);
        int int45 = date40.getMinutes();
        date40.setMinutes((int) '4');
        int int48 = date40.getDay();
        java.util.Date date52 = new java.util.Date(16, 30, 32771);
        int int53 = date52.getMonth();
        boolean boolean54 = date40.before(date52);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(fastDateFormat26);
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Fri Feb 11 09:44:34 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 34 + "'", int29 == 34);
        org.junit.Assert.assertNull(stringBuffer36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Fri Feb 11 09:44:34 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 5 + "'", int39 == 5);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Fri Feb 11 09:52:34 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 35 + "'", int45 == 35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertEquals(date52.toString(), "Thu Mar 20 00:00:00 GMT+00:00 2008");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test20282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20282");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String[] strArray10 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        int int15 = strList11.lastIndexOf((java.lang.Object) locale14);
        java.lang.String str16 = locale3.getDisplayVariant(locale14);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        java.util.Locale locale21 = java.util.Locale.ROOT;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone19, locale21);
        java.text.ParsePosition parsePosition24 = new java.text.ParsePosition(16);
        int int25 = parsePosition24.getErrorIndex();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet27 = locale26.getExtensionKeys();
        boolean boolean28 = parsePosition24.equals((java.lang.Object) locale26);
        java.lang.String str29 = locale26.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone19, locale26);
        int int31 = timeZone19.getRawOffset();
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = locale32.getLanguage();
        boolean boolean34 = locale32.hasExtensions();
        java.lang.String str35 = locale32.getDisplayScript();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale32);
        java.util.Calendar calendar37 = java.util.Calendar.getInstance(timeZone19, locale32);
        java.lang.String str38 = locale32.getDisplayCountry();
        java.util.Locale locale39 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str40 = locale32.getDisplayScript(locale39);
        java.lang.String str41 = locale14.getDisplayName(locale39);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(locale14);
        java.lang.Object obj43 = calendar42.clone();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1644572641919,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=34,MILLISECOND=691,ZONE_OFFSET=32772,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "coreano" + "'", str29, "coreano");
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 32772 + "'", int31 == 32772);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "zh" + "'", str33, "zh");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1644572641919,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=34,MILLISECOND=691,ZONE_OFFSET=32772,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1644572641919,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=34,MILLISECOND=691,ZONE_OFFSET=32772,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u65e5\u6587" + "'", str41, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1644572641919,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=34,MILLISECOND=691,ZONE_OFFSET=32772,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(obj43);
// flaky:         org.junit.Assert.assertEquals(obj43.toString(), "java.util.GregorianCalendar[time=1644572641919,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=34,MILLISECOND=691,ZONE_OFFSET=32772,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "java.util.GregorianCalendar[time=1644572641919,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=34,MILLISECOND=691,ZONE_OFFSET=32772,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "java.util.GregorianCalendar[time=1644572641919,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=34,MILLISECOND=691,ZONE_OFFSET=32772,DST_OFFSET=0]");
    }

    @Test
    public void test20283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20283");
        java.lang.String[] strArray5 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.stream.Stream<java.lang.String> strStream8 = strList6.stream();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        int int10 = strList6.lastIndexOf((java.lang.Object) locale9);
        java.util.stream.Stream<java.lang.String> strStream11 = strList6.stream();
        java.lang.String[] strArray13 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.stream.Stream<java.lang.String> strStream16 = strList14.stream();
        strList14.clear();
        java.util.Spliterator<java.lang.String> strSpliterator18 = strList14.spliterator();
        int int19 = strList6.lastIndexOf((java.lang.Object) strSpliterator18);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder20.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder23 = builder20.clear();
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder25 = builder23.setLocale(locale24);
        java.util.Locale.Builder builder26 = builder25.clearExtensions();
        java.util.Locale.Category category27 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        boolean boolean30 = timeZone28.hasSameRules(timeZone29);
        java.util.Locale locale31 = java.util.Locale.GERMAN;
        java.lang.String str32 = locale31.getDisplayName();
        java.lang.String str33 = locale31.getDisplayCountry();
        java.util.Calendar calendar34 = java.util.Calendar.getInstance(timeZone29, locale31);
        java.util.Locale.setDefault(category27, locale31);
        java.util.Locale locale36 = java.util.Locale.getDefault(category27);
        java.util.Locale.Builder builder37 = builder26.setLocale(locale36);
        java.util.Locale.Builder builder38 = builder26.clearExtensions();
        boolean boolean39 = strList6.equals((java.lang.Object) builder26);
        java.util.Locale.Builder builder40 = builder26.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder42 = builder26.setLanguage("9:36:45 AM UTC");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 9:36:45 AM UTC [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertNotNull(strSpliterator18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + category27 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category27.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "tedesco" + "'", str32, "tedesco");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=1644572641973,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=34,MILLISECOND=745,ZONE_OFFSET=32772,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test20284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20284");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(15);
        int int2 = parsePosition1.getErrorIndex();
        parsePosition1.setErrorIndex(58);
        int int5 = parsePosition1.getErrorIndex();
        int int6 = parsePosition1.getErrorIndex();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 58 + "'", int5 == 58);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 58 + "'", int6 == 58);
    }

    @Test
    public void test20285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20285");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.lang.String str3 = locale2.getLanguage();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale2.getDisplayVariant(locale4);
        boolean boolean6 = calendar0.before((java.lang.Object) str5);
        int int7 = calendar0.getFirstDayOfWeek();
        int int8 = calendar0.getWeekYear();
        calendar0.setFirstDayOfWeek(22);
        calendar0.set(24, 31, (int) (byte) 0, (int) ' ', 2, 24356589);
        java.util.Date date18 = calendar0.getTime();
        int int19 = date18.getMinutes();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61304148922995,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=22,minimalDaysInFirstWeek=1,ERA=1,YEAR=27,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=130,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=45,SECOND=9,MILLISECOND=777,ZONE_OFFSET=32772,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh" + "'", str3, "zh");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Sat May 10 05:45:09 GMT+00:00 27");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 45 + "'", int19 == 45);
    }

    @Test
    public void test20286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20286");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("5:59:10 AM UTC");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance((int) (short) 100, 292269054, timeZone3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 292269054");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Greenwich Zeit");
    }

    @Test
    public void test20287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20287");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone2);
        java.lang.StringBuffer stringBuffer5 = null;
        java.lang.StringBuffer stringBuffer6 = fastDateFormat3.format((long) 32772, stringBuffer5);
        java.util.TimeZone timeZone7 = fastDateFormat3.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone7);
        java.util.Calendar.Builder builder9 = new java.util.Calendar.Builder();
        java.util.Calendar calendar10 = builder9.build();
        int int11 = calendar10.getWeekYear();
        calendar10.setLenient(true);
        java.lang.String str14 = fastDateFormat8.format(calendar10);
        calendar10.clear();
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertNull(stringBuffer6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "January 1, 1970" + "'", str14, "January 1, 1970");
    }

    @Test
    public void test20288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20288");
        java.util.TimeZone timeZone2 = null;
        java.util.Locale locale6 = new java.util.Locale("Freitag, 11. Februar 2022", "9:37:36 AM UTC", "11 Feb 2022 09:37:32 GMT");
        java.util.Locale locale10 = new java.util.Locale("it", "", "United States");
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = locale12.getLanguage();
        boolean boolean14 = locale12.hasExtensions();
        java.lang.String str15 = locale10.getDisplayName(locale12);
        java.lang.String str16 = locale6.getDisplayVariant(locale10);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone2, locale10);
        java.util.TimeZone timeZone18 = fastDateFormat17.getTimeZone();
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = locale20.getLanguage();
        java.lang.String str22 = locale19.getDisplayLanguage(locale20);
        java.lang.String str23 = locale19.getCountry();
        java.util.Locale locale24 = locale19.stripExtensions();
        java.util.Locale locale25 = locale24.stripExtensions();
        java.lang.String str26 = locale24.getDisplayVariant();
        java.util.Locale locale30 = new java.util.Locale("it", "", "United States");
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        java.lang.String str32 = locale24.getDisplayName(locale30);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 1, timeZone18, locale30);
        org.junit.Assert.assertEquals(locale6.toString(), "freitag, 11. februar 2022_9:37:36 AM UTC_11 Feb 2022 09:37:32 GMT");
        org.junit.Assert.assertEquals(locale10.toString(), "it__United States");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh" + "'", str13, "zh");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u610f\u5927\u5229\u6587 (United States)" + "'", str15, "\u610f\u5927\u5229\u6587 (United States)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "11 Feb 2022 09:37:32 GMT" + "'", str16, "11 Feb 2022 09:37:32 GMT");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh" + "'", str21, "zh");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str22, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals(locale30.toString(), "it__United States");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "italiano" + "'", str32, "italiano");
        org.junit.Assert.assertNotNull(fastDateFormat33);
    }

    @Test
    public void test20289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20289");
        java.util.Locale locale2 = new java.util.Locale("und", "\uc911\uad6d\uc5b4");
        java.lang.String str3 = locale2.toLanguageTag();
        java.lang.String str4 = locale2.getDisplayScript();
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "und" + "'", str3, "und");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test20290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20290");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getTimezoneOffset();
        long long2 = date0.getTime();
        date0.setDate((int) (byte) 10);
        long long5 = date0.getTime();
        date0.setHours(32769);
        java.util.Date date8 = new java.util.Date();
        int int9 = date8.getTimezoneOffset();
        date8.setMonth(0);
        boolean boolean12 = date0.before(date8);
        date8.setHours(0);
        int int15 = date8.getMonth();
        int int16 = date8.getHours();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Thu Nov 06 09:44:34 GMT+00:00 2025");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1644572642140L + "'", long2 == 1644572642140L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1644486242140L + "'", long5 == 1644486242140L);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Jan 11 00:44:34 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test20291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20291");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.set(12, 10);
        java.util.Calendar.Builder builder4 = new java.util.Calendar.Builder();
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        boolean boolean7 = locale5.hasExtensions();
        java.lang.String str8 = locale5.getDisplayCountry();
        java.util.Calendar.Builder builder9 = builder4.setLocale(locale5);
        java.util.Date date11 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder12 = builder9.setInstant(date11);
        boolean boolean13 = calendar0.before((java.lang.Object) date11);
        int int14 = date11.getMinutes();
        java.lang.String str15 = date11.toLocaleString();
        date11.setHours((int) 'a');
        int int18 = date11.getHours();
        java.util.Date date20 = new java.util.Date(1644226478002L);
        int int21 = date20.getMinutes();
        date20.setMinutes(45);
        int int24 = date20.getMonth();
        java.time.Instant instant25 = date20.toInstant();
        boolean boolean26 = date11.after(date20);
        date20.setHours((int) '4');
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=10,SECOND=34,MILLISECOND=923,ZONE_OFFSET=32772,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh" + "'", str6, "zh");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(date11.toString(), "Sat Jan 15 01:35:03 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Jan 11, 2022 9:35:03 AM" + "'", str15, "Jan 11, 2022 9:35:03 AM");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertEquals(date20.toString(), "Wed Feb 09 04:45:10 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test20292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20292");
        java.util.Date date5 = new java.util.Date(32, 51, 120, (int) 'u', 0);
        long long6 = date5.getTime();
        date5.setMinutes((-46800000));
        date5.setSeconds(0);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Aug 09 21:00:00 GMT+00:00 1847");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1054436432772L) + "'", long6 == (-1054436432772L));
    }

    @Test
    public void test20293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20293");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        boolean boolean3 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale5);
        java.lang.String str7 = locale5.getLanguage();
        java.lang.String str8 = locale5.getVariant();
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        boolean boolean11 = locale9.hasExtensions();
        java.lang.String str12 = locale5.getDisplayCountry(locale9);
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category13, locale14);
        java.util.Locale locale16 = java.util.Locale.getDefault(category13);
        boolean boolean17 = locale16.hasExtensions();
        java.lang.String[] strArray23 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.util.stream.Stream<java.lang.String> strStream26 = strList24.stream();
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        int int28 = strList24.lastIndexOf((java.lang.Object) locale27);
        java.lang.String str29 = locale16.getDisplayVariant(locale27);
        java.lang.String str30 = locale5.getDisplayCountry(locale16);
        java.lang.String str31 = locale5.getDisplayName();
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition(16);
        int int34 = parsePosition33.getErrorIndex();
        java.util.TimeZone timeZone36 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone36);
        java.lang.String str38 = fastDateFormat37.getPattern();
        boolean boolean39 = parsePosition33.equals((java.lang.Object) fastDateFormat37);
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        boolean boolean41 = parsePosition33.equals((java.lang.Object) locale40);
        java.lang.String str42 = locale40.getDisplayScript();
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder45 = builder43.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder46 = builder43.clear();
        java.util.Locale locale47 = builder46.build();
        java.lang.String str48 = locale40.getDisplayVariant(locale47);
        java.lang.String str49 = locale5.getDisplayVariant(locale40);
        java.util.Calendar calendar50 = java.util.Calendar.getInstance(locale5);
        int int52 = calendar50.getLeastMaximum(0);
        java.util.Locale locale56 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale56);
        java.lang.String str58 = locale56.getLanguage();
        java.lang.String str59 = locale56.getVariant();
        java.util.Locale locale60 = java.util.Locale.CHINESE;
        java.lang.String str61 = locale60.getLanguage();
        boolean boolean62 = locale60.hasExtensions();
        java.lang.String str63 = locale56.getDisplayCountry(locale60);
        java.lang.String str64 = locale56.getDisplayCountry();
        java.util.Locale locale65 = java.util.Locale.CHINESE;
        java.util.Locale locale66 = locale65.stripExtensions();
        java.lang.String str67 = locale65.getISO3Country();
        java.lang.String str68 = locale56.getDisplayName(locale65);
        java.lang.String str69 = locale56.getDisplayVariant();
        java.util.Map<java.lang.String, java.lang.Integer> strMap70 = calendar50.getDisplayNames(13, 1, locale56);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = fastDateFormat2.format((java.lang.Object) 13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Unknown class: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh" + "'", str7, "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh" + "'", str10, "zh");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u56fd" + "'", str12, "\u4e2d\u56fd");
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strStream26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Cina" + "'", str30, "Cina");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "cinese (Cina)" + "'", str31, "cinese (Cina)");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "h:mm:ss a z" + "'", str38, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=1644572642175,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=34,MILLISECOND=947,ZONE_OFFSET=32772,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "zh" + "'", str58, "zh");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "zh" + "'", str61, "zh");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u4e2d\u56fd" + "'", str63, "\u4e2d\u56fd");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Cina" + "'", str64, "Cina");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\u4e2d\u6587\u4e2d\u56fd)" + "'", str68, "\u4e2d\u6587\u4e2d\u56fd)");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNull(strMap70);
    }

    @Test
    public void test20294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20294");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getWeeksInWeekYear();
        java.time.Instant instant2 = calendar0.toInstant();
        int int4 = calendar0.getMinimum(4);
        calendar0.setFirstDayOfWeek(13);
        calendar0.clear();
        int int9 = calendar0.getMaximum(12);
        java.lang.String str10 = calendar0.getCalendarType();
        java.time.Instant instant11 = calendar0.toInstant();
        int int13 = calendar0.getMaximum((int) (short) 0);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-32772,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=13,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 53 + "'", int1 == 53);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 59 + "'", int9 == 59);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gregory" + "'", str10, "gregory");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test20295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20295");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale8.getDisplayCountry();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale8);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale12.getDisplayLanguage(locale13);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale19);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone25);
        java.util.Locale locale28 = fastDateFormat27.getLocale();
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale30.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.lang.String str35 = locale30.getDisplayVariant(locale34);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone42);
        java.util.Locale locale45 = fastDateFormat44.getLocale();
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone49);
        java.util.Locale locale52 = fastDateFormat51.getLocale();
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale54 = java.util.Locale.UK;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale8, locale12, locale16, locale19, locale21, locale22, locale28, locale29, locale34, locale36, locale37, locale38, locale39, locale45, locale46, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale locale58 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList56);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap59);
        java.util.Set<java.lang.String> strSet61 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str62 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet61);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap63 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList64 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap63);
        java.lang.String[] strArray66 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        java.util.stream.Stream<java.lang.String> strStream69 = strList67.stream();
        strList67.clear();
        java.lang.String[] strArray72 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        java.util.stream.Stream<java.lang.String> strStream75 = strList73.stream();
        boolean boolean76 = strList67.containsAll((java.util.Collection<java.lang.String>) strList73);
        java.util.Spliterator<java.lang.String> strSpliterator77 = strList67.spliterator();
        java.util.stream.Stream<java.lang.String> strStream78 = strList67.stream();
        java.lang.String str79 = java.util.Locale.lookupTag(languageRangeList64, (java.util.Collection<java.lang.String>) strList67);
        java.util.ListIterator<java.lang.String> strItor80 = strList67.listIterator();
        java.lang.String[] strArray82 = java.util.TimeZone.getAvailableIDs(1910);
        java.lang.String[] strArray83 = strList67.toArray(strArray82);
        java.util.stream.Stream<java.lang.String> strStream84 = strList67.parallelStream();
        boolean boolean85 = strList67.isEmpty();
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tedesco" + "'", str9, "tedesco");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644572642219,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=32772,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=34,MILLISECOND=991,ZONE_OFFSET=32772,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str15, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "2022-2-11 9:34:44_9:34:49 AM UTC_9:34:46 AM UTC");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zh" + "'", str31, "zh");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "2022-2-11 9:34:44_9:34:49 AM UTC_9:34:46 AM UTC");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertNotNull(locale52);
// flaky:         org.junit.Assert.assertEquals(locale52.toString(), "2022-2-11 9:34:44_9:34:49 AM UTC_9:34:46 AM UTC");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(languageRangeList64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strStream69);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strStream75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(strSpliterator77);
        org.junit.Assert.assertNotNull(strStream78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(strItor80);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertNotNull(strStream84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test20296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20296");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("4-mar-1910 1.00.00");
        java.util.TimeZone.setDefault(timeZone1);
        java.lang.String str3 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Ora media di Greenwich" + "'", str3, "Ora media di Greenwich");
    }

    @Test
    public void test20297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20297");
        java.util.Locale locale1 = new java.util.Locale("Wed Dec 31 23:58:59 GMT 1969");
        org.junit.Assert.assertEquals(locale1.toString(), "wed dec 31 23:58:59 gmt 1969");
    }

    @Test
    public void test20298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20298");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.Locale locale2 = java.util.Locale.PRC;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1, locale2);
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getTimezoneOffset();
        date4.setMonth(0);
        int int8 = date4.getSeconds();
        int int9 = date4.getDay();
        java.text.AttributedCharacterIterator attributedCharacterIterator10 = fastDateFormat3.formatToCharacterIterator((java.lang.Object) date4);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.ROOT;
        java.util.Calendar calendar15 = java.util.Calendar.getInstance(timeZone12, locale14);
        long long16 = calendar15.getTimeInMillis();
        calendar15.set(2022, (int) 'a', 8);
        int int22 = calendar15.getGreatestMinimum(5);
        java.time.Instant instant23 = calendar15.toInstant();
        calendar15.setLenient(false);
        java.lang.StringBuffer stringBuffer26 = null;
        java.lang.StringBuffer stringBuffer27 = fastDateFormat3.format(calendar15, stringBuffer26);
        calendar15.set(6, 43, (int) (short) 0);
        int int33 = calendar15.getGreatestMinimum(0);
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder34.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder37 = builder34.clear();
        java.util.Locale locale38 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder39 = builder37.setLocale(locale38);
        java.util.Locale.Builder builder40 = builder39.clearExtensions();
        java.util.Locale.Category category41 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        boolean boolean44 = timeZone42.hasSameRules(timeZone43);
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale45.getDisplayName();
        java.lang.String str47 = locale45.getDisplayCountry();
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone43, locale45);
        java.util.Locale.setDefault(category41, locale45);
        java.util.Locale locale50 = java.util.Locale.getDefault(category41);
        java.util.Locale.Builder builder51 = builder40.setLocale(locale50);
        java.util.Locale locale52 = builder40.build();
        boolean boolean53 = calendar15.before((java.lang.Object) locale52);
        boolean boolean54 = calendar15.isWeekDateSupported();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat3);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Jan 11 09:44:02 GMT 2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(attributedCharacterIterator10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=6,MONTH=43,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=0,DAY_OF_YEAR=39,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=2,MILLISECOND=303,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1644572642303L + "'", long16 == 1644572642303L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNull(stringBuffer27);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category41.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tedesco" + "'", str46, "tedesco");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1644572642303,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=2,MILLISECOND=303,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test20299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20299");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str1 = attribute0.toString();
        java.util.Locale locale4 = new java.util.Locale("Tue Jan 11 09:34:31 UTC 2022", "java.text.ParsePosition[index=100,errorIndex=-1]");
        boolean boolean5 = attribute0.equals((java.lang.Object) locale4);
        java.lang.String str6 = attribute0.toString();
        java.lang.String str7 = attribute0.toString();
        java.util.Date date8 = new java.util.Date();
        int int9 = date8.getSeconds();
        long long10 = date8.getTime();
        date8.setTime((long) ' ');
        int int13 = date8.getTimezoneOffset();
        int int14 = date8.getMinutes();
        date8.setSeconds((-1));
        java.lang.String str17 = date8.toGMTString();
        long long18 = date8.getTime();
        int int19 = date8.getMonth();
        java.util.Date date20 = new java.util.Date();
        int int21 = date20.getTimezoneOffset();
        int int22 = date20.getSeconds();
        date20.setDate(7);
        long long25 = date20.getTime();
        long long26 = date20.getTime();
        date20.setSeconds((int) 'x');
        int int29 = date20.getDate();
        java.lang.String str30 = date20.toGMTString();
        boolean boolean31 = date8.before(date20);
        boolean boolean32 = attribute0.equals((java.lang.Object) boolean31);
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str1, "java.text.AttributedCharacterIterator$Attribute(language)");
        org.junit.Assert.assertEquals(locale4.toString(), "tue jan 11 09:34:31 utc 2022_JAVA.TEXT.PARSEPOSITION[INDEX=100,ERRORINDEX=-1]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str6, "java.text.AttributedCharacterIterator$Attribute(language)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str7, "java.text.AttributedCharacterIterator$Attribute(language)");
        org.junit.Assert.assertEquals(date8.toString(), "Wed Dec 31 23:59:59 GMT 1969");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644572642333L + "'", long10 == 1644572642333L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "31 Dec 1969 23:59:59 GMT" + "'", str17, "31 Dec 1969 23:59:59 GMT");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-968L) + "'", long18 == (-968L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 11 + "'", int19 == 11);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Mon Feb 07 09:46:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1644227042333L + "'", long25 == 1644227042333L);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1644227042333L + "'", long26 == 1644227042333L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "7 Feb 2022 09:46:00 GMT" + "'", str30, "7 Feb 2022 09:46:00 GMT");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test20300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20300");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.setDefault(locale1);
        java.lang.String str7 = locale1.getDisplayName();
        java.util.Set<java.lang.Character> charSet8 = locale1.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u4e2d\u6587" + "'", str7, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(charSet8);
    }

    @Test
    public void test20301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20301");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("it");
        java.util.Locale.Builder builder7 = builder2.setExtension('x', "de");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        java.lang.String str11 = locale9.getDisplayLanguage();
        java.util.Locale locale12 = locale9.stripExtensions();
        java.util.Locale locale15 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale16 = locale15.stripExtensions();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(locale16);
        java.util.Locale locale18 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale18);
        java.lang.String str20 = locale16.getDisplayName(locale18);
        java.lang.String str21 = locale12.getDisplayName(locale16);
        java.lang.String str22 = locale8.getDisplayScript(locale12);
        java.lang.String str23 = locale12.getVariant();
        java.lang.String str24 = locale12.toLanguageTag();
        java.lang.String str25 = locale12.getDisplayCountry();
        java.util.Locale.Category category26 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category26, locale27);
        java.util.Locale locale29 = java.util.Locale.getDefault(category26);
        java.util.Locale locale30 = java.util.Locale.getDefault(category26);
        java.util.Locale locale31 = java.util.Locale.getDefault(category26);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone33, locale35);
        java.lang.String str37 = locale35.getDisplayLanguage();
        java.util.Locale.setDefault(category26, locale35);
        java.lang.String str39 = locale35.getDisplayCountry();
        java.lang.String str40 = locale12.getDisplayName(locale35);
        java.util.Set<java.lang.Character> charSet41 = locale12.getExtensionKeys();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it__#x-de");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh" + "'", str10, "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u6587" + "'", str11, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertEquals(locale15.toString(), "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1644572642363,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=2,MILLISECOND=363,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1644572642363,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=2,MILLISECOND=363,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0] (TUE JAN 11 09:34:31 UTC 2022)" + "'", str20, "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0] (TUE JAN 11 09:34:31 UTC 2022)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Chinese" + "'", str21, "Chinese");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh" + "'", str24, "zh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category26.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1644572642363,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=2,MILLISECOND=363,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Chinese" + "'", str40, "Chinese");
        org.junit.Assert.assertNotNull(charSet41);
    }

    @Test
    public void test20302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20302");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        boolean boolean3 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str4 = fastDateFormat2.getPattern();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(9);
        parsePosition7.setIndex((int) 'a');
        java.lang.Object obj10 = fastDateFormat2.parseObject("UTC9", parsePosition7);
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale12);
        boolean boolean14 = fastDateFormat13.getTimeZoneOverridesCalendar();
        java.lang.String str15 = fastDateFormat13.toString();
        java.util.TimeZone timeZone17 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone17);
        java.util.Date date19 = new java.util.Date();
        int int20 = date19.getTimezoneOffset();
        int int21 = date19.getSeconds();
        java.lang.StringBuffer stringBuffer22 = null;
        java.text.Format.Field field23 = null;
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition(field23, 1);
        fieldPosition25.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer28 = fastDateFormat18.format((java.lang.Object) date19, stringBuffer22, fieldPosition25);
        java.lang.String str29 = fastDateFormat13.format(date19);
        java.lang.String str30 = fastDateFormat2.format(date19);
        java.util.Calendar.Builder builder31 = new java.util.Calendar.Builder();
        java.util.Date date32 = new java.util.Date();
        int int33 = date32.getTimezoneOffset();
        date32.setYear(32769);
        int int36 = date32.getYear();
        java.util.Calendar.Builder builder37 = builder31.setInstant(date32);
        java.util.Calendar calendar38 = builder37.build();
        long long39 = calendar38.getTimeInMillis();
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone41);
        java.lang.String str43 = fastDateFormat42.getPattern();
        java.lang.Object obj44 = fastDateFormat42.clone();
        java.lang.String str45 = fastDateFormat42.toString();
        boolean boolean46 = calendar38.after((java.lang.Object) fastDateFormat42);
        java.text.AttributedCharacterIterator attributedCharacterIterator47 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) calendar38);
        java.lang.String str48 = fastDateFormat2.getPattern();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FastDateFormat[zh]" + "'", str15, "FastDateFormat[zh]");
        org.junit.Assert.assertNotNull(fastDateFormat18);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Fri Feb 11 09:44:02 GMT 2022");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNull(stringBuffer28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "GMT9" + "'", str29, "GMT9");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Thu Feb 11 09:44:02 GMT 34669");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 32769 + "'", int36 == 32769);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1031884393442388,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=34669,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=2,MILLISECOND=388,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1031884393442388L + "'", long39 == 1031884393442388L);
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "h:mm:ss a z" + "'", str43, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str45, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(attributedCharacterIterator47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test20303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20303");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone3, locale5);
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition(16);
        int int9 = parsePosition8.getErrorIndex();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        boolean boolean12 = parsePosition8.equals((java.lang.Object) locale10);
        java.lang.String str13 = locale10.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone3, locale10);
        int int15 = timeZone3.getRawOffset();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        boolean boolean18 = locale16.hasExtensions();
        java.lang.String str19 = locale16.getDisplayScript();
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale16);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone3, locale16);
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition(16);
        java.util.Date date24 = new java.util.Date();
        int int25 = date24.getDay();
        java.util.Date date26 = new java.util.Date();
        date26.setMinutes((int) '#');
        boolean boolean29 = date24.before(date26);
        boolean boolean30 = parsePosition23.equals((java.lang.Object) boolean29);
        parsePosition23.setErrorIndex((int) (short) 10);
        int int33 = parsePosition23.getIndex();
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.lang.String str35 = locale34.getLanguage();
        boolean boolean36 = locale34.hasExtensions();
        java.lang.String str37 = locale34.getDisplayScript();
        java.lang.String str38 = locale34.getDisplayScript();
        boolean boolean39 = parsePosition23.equals((java.lang.Object) locale34);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone3, locale34);
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.lang.String str44 = locale43.getLanguage();
        boolean boolean45 = locale43.hasExtensions();
        java.lang.String str46 = locale43.getDisplayScript();
        java.lang.String str47 = locale43.getDisplayScript();
        java.util.Locale.Category category48 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale49 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category48, locale49);
        java.util.Locale locale51 = java.util.Locale.getDefault(category48);
        java.lang.String str52 = locale43.getDisplayLanguage(locale51);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (byte) 1, locale43);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(locale43);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, locale43);
        java.lang.String str56 = locale34.getDisplayName(locale43);
        java.util.Locale.Builder builder57 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder59 = builder57.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder60 = builder57.clear();
        java.util.Locale locale61 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder62 = builder60.setLocale(locale61);
        java.util.Locale.Builder builder63 = builder62.clearExtensions();
        java.util.Locale locale64 = builder62.build();
        java.lang.String str65 = locale34.getDisplayName(locale64);
        java.util.Set<java.lang.Character> charSet66 = locale34.getExtensionKeys();
        java.util.Locale.Category category67 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale68 = java.util.Locale.getDefault(category67);
        java.text.Format.Field field69 = null;
        java.text.FieldPosition fieldPosition71 = new java.text.FieldPosition(field69, 3);
        int int72 = fieldPosition71.getBeginIndex();
        java.util.Locale locale73 = java.util.Locale.CHINESE;
        java.util.Locale locale74 = locale73.stripExtensions();
        java.lang.String str75 = locale74.getVariant();
        java.util.Set<java.lang.Character> charSet76 = locale74.getExtensionKeys();
        boolean boolean77 = fieldPosition71.equals((java.lang.Object) locale74);
        java.util.Locale.setDefault(category67, locale74);
        java.lang.String str79 = locale34.getDisplayCountry(locale74);
        java.lang.String str80 = locale74.getISO3Country();
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572642414,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=2,MILLISECOND=414,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Korean" + "'", str13, "Korean");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1644572642414,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=2,MILLISECOND=414,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1644572642414,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=2,MILLISECOND=414,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Fri Feb 11 09:44:02 GMT 2022");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Fri Feb 11 09:35:02 GMT 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16 + "'", int33 == 16);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "zh" + "'", str35, "zh");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "zh" + "'", str44, "zh");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + category48 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category48.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "cinese" + "'", str52, "cinese");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=1644572642414,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=2,MILLISECOND=414,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u4e2d\u6587" + "'", str56, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u4e2d\u6587" + "'", str65, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(charSet66);
        org.junit.Assert.assertTrue("'" + category67 + "' != '" + java.util.Locale.Category.FORMAT + "'", category67.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(charSet76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test20304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20304");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        strList2.clear();
        boolean boolean6 = strList2.isEmpty();
        boolean boolean7 = strList2.isEmpty();
        java.util.ListIterator<java.lang.String> strItor8 = strList2.listIterator();
        java.util.Date date9 = new java.util.Date();
        int int10 = date9.getTimezoneOffset();
        date9.setYear(32769);
        int int13 = date9.getYear();
        int int14 = strList2.indexOf((java.lang.Object) int13);
        int int15 = strList2.size();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.parse("tedesco");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList17, strMap18);
        java.lang.String[] strArray25 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        java.util.stream.Stream<java.lang.String> strStream28 = strList26.stream();
        java.util.stream.Stream<java.lang.String> strStream29 = strList26.parallelStream();
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags(languageRangeList19, (java.util.Collection<java.lang.String>) strList26);
        boolean boolean31 = strList2.addAll((java.util.Collection<java.lang.String>) strList30);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = strList30.set(1, "7-feb-2022");
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strItor8);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Thu Feb 11 09:44:02 GMT 34669");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 32769 + "'", int13 == 32769);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strStream28);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test20305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20305");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(0);
        fieldPosition1.setBeginIndex(7);
        int int4 = fieldPosition1.getBeginIndex();
        int int5 = fieldPosition1.getBeginIndex();
        fieldPosition1.setBeginIndex(6);
        java.lang.Object obj8 = null;
        boolean boolean9 = fieldPosition1.equals(obj8);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 7 + "'", int5 == 7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test20306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20306");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        int int2 = calendar1.getWeeksInWeekYear();
        java.time.Instant instant3 = calendar1.toInstant();
        int int5 = calendar1.getMinimum(4);
        calendar1.setFirstDayOfWeek(13);
        calendar1.clear();
        calendar1.set((int) (byte) 100, 34, 8, 1, 4);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.Locale locale17 = java.util.Locale.PRC;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone16, locale17);
        calendar1.setTimeZone(timeZone16);
        java.util.Calendar.Builder builder20 = new java.util.Calendar.Builder();
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.lang.String str22 = locale21.getLanguage();
        boolean boolean23 = locale21.hasExtensions();
        java.lang.String str24 = locale21.getDisplayCountry();
        java.util.Calendar.Builder builder25 = builder20.setLocale(locale21);
        java.util.Locale.Category category26 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category26, locale27);
        java.util.Locale locale29 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category26, locale29);
        java.lang.String str31 = locale29.toLanguageTag();
        java.util.Calendar.Builder builder32 = builder20.setLocale(locale29);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc", timeZone16, locale29);
        java.text.Format.Field field35 = null;
        java.text.FieldPosition fieldPosition37 = new java.text.FieldPosition(field35, 3);
        fieldPosition37.setEndIndex(12);
        java.util.TimeZone timeZone41 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat42 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone41);
        java.lang.StringBuffer stringBuffer44 = null;
        java.lang.StringBuffer stringBuffer45 = fastDateFormat42.format((long) 32772, stringBuffer44);
        java.util.TimeZone timeZone46 = fastDateFormat42.getTimeZone();
        boolean boolean47 = fieldPosition37.equals((java.lang.Object) fastDateFormat42);
        java.text.ParsePosition parsePosition50 = new java.text.ParsePosition(31);
        java.lang.Object obj51 = fastDateFormat42.parseObject("00:00 Uhr GMT+00:00", parsePosition50);
        java.lang.Object obj52 = fastDateFormat33.parseObject("GMT1", parsePosition50);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=13,minimalDaysInFirstWeek=1,ERA=?,YEAR=100,MONTH=34,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=8,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=1,MINUTE=4,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 53 + "'", int2 == 53);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh" + "'", str22, "zh");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + category26 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category26.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zh" + "'", str31, "zh");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertNotNull(fastDateFormat42);
        org.junit.Assert.assertNull(stringBuffer45);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj52);
    }

    @Test
    public void test20307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20307");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition(16);
        java.util.Date date7 = new java.util.Date();
        int int8 = date7.getDay();
        java.util.Date date9 = new java.util.Date();
        date9.setMinutes((int) '#');
        boolean boolean12 = date7.before(date9);
        boolean boolean13 = parsePosition6.equals((java.lang.Object) boolean12);
        parsePosition6.setErrorIndex(0);
        java.lang.Object obj16 = fastDateFormat2.parseObject("tedesco", parsePosition6);
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder17.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder20 = builder17.clear();
        boolean boolean21 = parsePosition6.equals((java.lang.Object) builder20);
        java.util.Locale.Builder builder23 = builder20.setLanguageTag("China");
        java.util.Locale.Builder builder25 = builder20.setLanguageTag("und");
        java.util.Locale.Builder builder26 = builder25.clear();
        java.util.Locale.Builder builder27 = builder25.clearExtensions();
        java.util.Locale.Category category28 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category28, locale29);
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category28, locale31);
        java.util.Locale locale33 = java.util.Locale.getDefault(category28);
        java.util.Locale locale34 = java.util.Locale.UK;
        java.lang.String str35 = locale34.toLanguageTag();
        java.util.Locale.setDefault(locale34);
        java.util.Locale.setDefault(category28, locale34);
        java.util.Locale.Builder builder38 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder40 = builder38.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder41 = builder38.clear();
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder43 = builder41.setLocale(locale42);
        java.util.Locale.Builder builder44 = builder43.clearExtensions();
        java.util.Locale.Category category45 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.lang.String str50 = locale49.getDisplayName();
        java.lang.String str51 = locale49.getDisplayCountry();
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone47, locale49);
        java.util.Locale.setDefault(category45, locale49);
        java.util.Locale locale54 = java.util.Locale.getDefault(category45);
        java.util.Locale.Builder builder55 = builder44.setLocale(locale54);
        java.util.Locale.setDefault(category28, locale54);
        boolean boolean57 = locale54.hasExtensions();
        java.util.Locale.Builder builder58 = builder25.setLocale(locale54);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder61 = builder25.setUnicodeLocaleKeyword("\uc624\uc804\uc2dc\ubd84\ucd08", "\uc624\uc804\uc2dc\ubd84\ucd08");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: ????? 9?? 38??? 10?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Fri Feb 11 09:44:02 GMT 2022");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Feb 11 09:35:02 GMT 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category28.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "en-GB" + "'", str35, "en-GB");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + category45 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category45.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "German" + "'", str50, "German");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1644572642538,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=2,MILLISECOND=538,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test20308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20308");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder11 = builder0.setLenient(false);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay(15, 0, 32770);
        java.util.Locale locale16 = java.util.Locale.UK;
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.lang.String str19 = locale16.getISO3Language();
        java.lang.String str21 = locale16.getExtension('x');
        java.lang.String str22 = locale16.getLanguage();
        java.lang.String str23 = locale16.getLanguage();
        java.util.Calendar.Builder builder24 = builder0.setLocale(locale16);
        java.util.Calendar.Builder builder26 = builder24.setLenient(false);
        java.util.Calendar.Builder builder28 = builder24.setLenient(true);
        java.util.Calendar.Builder builder33 = builder24.setTimeOfDay(58, 292278994, 15, 10);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone36 = fastDateFormat35.getTimeZone();
        timeZone36.setRawOffset(3);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat39 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (byte) 1, timeZone36);
        java.util.Calendar.Builder builder40 = builder33.setTimeZone(timeZone36);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Vereinigtes K\366nigreich" + "'", str18, "Vereinigtes K\366nigreich");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "eng" + "'", str19, "eng");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "en" + "'", str22, "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "en" + "'", str23, "en");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(fastDateFormat39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test20309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20309");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category6, locale9);
        java.lang.String str11 = locale9.toLanguageTag();
        java.util.Calendar.Builder builder12 = builder0.setLocale(locale9);
        java.util.Calendar.Builder builder16 = builder12.setWeekDate(97, 0, 37);
        java.util.Calendar.Builder builder20 = builder12.setWeekDate(20, 22, 5);
        java.util.Calendar.Builder builder21 = new java.util.Calendar.Builder();
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        boolean boolean24 = locale22.hasExtensions();
        java.lang.String str25 = locale22.getDisplayCountry();
        java.util.Calendar.Builder builder26 = builder21.setLocale(locale22);
        java.util.Calendar.Builder builder30 = builder21.setWeekDate(38, 41, 11);
        java.util.TimeZone timeZone32 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone32);
        java.lang.String str34 = fastDateFormat33.toString();
        java.lang.String str35 = fastDateFormat33.toString();
        java.util.TimeZone timeZone36 = fastDateFormat33.getTimeZone();
        java.util.Calendar.Builder builder37 = builder30.setTimeZone(timeZone36);
        java.util.Calendar.Builder builder38 = new java.util.Calendar.Builder();
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = locale39.getLanguage();
        boolean boolean41 = locale39.hasExtensions();
        java.lang.String str42 = locale39.getDisplayCountry();
        java.util.Calendar.Builder builder43 = builder38.setLocale(locale39);
        java.util.Calendar.Builder builder47 = builder38.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder49 = builder38.setLenient(false);
        java.util.Calendar.Builder builder53 = builder38.setTimeOfDay(15, 0, 32770);
        java.util.Calendar.Builder builder56 = builder53.setWeekDefinition(7, 7);
        java.util.Calendar.Builder builder57 = new java.util.Calendar.Builder();
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.lang.String str59 = locale58.getLanguage();
        boolean boolean60 = locale58.hasExtensions();
        java.lang.String str61 = locale58.getDisplayCountry();
        java.util.Calendar.Builder builder62 = builder57.setLocale(locale58);
        java.util.Calendar.Builder builder66 = builder57.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale68 = new java.util.Locale("de");
        java.lang.String str69 = locale68.toLanguageTag();
        java.lang.String str70 = locale68.getCountry();
        java.util.Calendar.Builder builder71 = builder57.setLocale(locale68);
        java.util.Calendar calendar72 = builder71.build();
        int[] intArray73 = new int[] {};
        java.util.Calendar.Builder builder74 = builder71.setFields(intArray73);
        java.util.Calendar.Builder builder75 = builder56.setFields(intArray73);
        java.util.Calendar.Builder builder76 = builder30.setFields(intArray73);
        java.util.Calendar.Builder builder77 = builder12.setFields(intArray73);
        java.util.Calendar.Builder builder81 = builder77.setTimeOfDay(39, 1970, 0);
        java.util.Calendar.Builder builder83 = builder81.setLenient(true);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en-GB" + "'", str11, "en-GB");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh" + "'", str23, "zh");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str34, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str35, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "zh" + "'", str40, "zh");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zh" + "'", str59, "zh");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals(locale68.toString(), "de");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "de" + "'", str69, "de");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(calendar72);
        org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=-62130240000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=6,DAY_OF_YEAR=65,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[]");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test20310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20310");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor8 = strList2.listIterator(0);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        java.util.ListIterator<java.lang.String> strItor14 = strList11.listIterator();
        boolean boolean15 = strList2.removeAll((java.util.Collection<java.lang.String>) strList11);
        java.lang.String[] strArray17 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.util.stream.Stream<java.lang.String> strStream20 = strList18.stream();
        strList18.clear();
        boolean boolean22 = strList18.isEmpty();
        boolean boolean23 = strList18.isEmpty();
        java.util.ListIterator<java.lang.String> strItor24 = strList18.listIterator();
        java.util.Date date25 = new java.util.Date();
        int int26 = date25.getTimezoneOffset();
        date25.setYear(32769);
        int int29 = date25.getYear();
        int int30 = strList18.indexOf((java.lang.Object) int29);
        int int31 = strList18.size();
        boolean boolean32 = strList2.retainAll((java.util.Collection<java.lang.String>) strList18);
        java.lang.Object[] objArray33 = strList18.toArray();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strItor24);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Thu Feb 11 09:44:02 GMT 34669");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 32769 + "'", int29 == 32769);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
    }

    @Test
    public void test20311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20311");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone2);
        java.util.Locale locale5 = fastDateFormat4.getLocale();
        java.lang.String str6 = fastDateFormat4.toString();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition(16);
        int int10 = parsePosition9.getErrorIndex();
        java.lang.Object obj11 = fastDateFormat4.parseObject("Vereinigtes K\366nigreich", parsePosition9);
        java.lang.String[] strArray13 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.stream.Stream<java.lang.String> strStream16 = strList14.stream();
        boolean boolean18 = strList14.add("hi!");
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale19.getDisplayVariant(locale21);
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.lang.String str24 = locale19.getDisplayVariant(locale23);
        boolean boolean25 = strList14.contains((java.lang.Object) locale19);
        boolean boolean26 = parsePosition9.equals((java.lang.Object) strList14);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        java.util.Locale locale30 = java.util.Locale.ROOT;
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone28, locale30);
        int int32 = timeZone28.getRawOffset();
        boolean boolean33 = strList14.equals((java.lang.Object) int32);
        java.lang.String[] strArray35 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.util.stream.Stream<java.lang.String> strStream38 = strList36.stream();
        boolean boolean40 = strList36.add("hi!");
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = locale41.getLanguage();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale41.getDisplayVariant(locale43);
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        java.lang.String str46 = locale41.getDisplayVariant(locale45);
        boolean boolean47 = strList36.contains((java.lang.Object) locale41);
        strList36.clear();
        java.lang.String[] strArray54 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList55 = new java.util.ArrayList<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList55, strArray54);
        java.util.stream.Stream<java.lang.String> strStream57 = strList55.stream();
        java.util.stream.Stream<java.lang.String> strStream58 = strList55.parallelStream();
        int int59 = strList36.lastIndexOf((java.lang.Object) strList55);
        java.lang.String[] strArray61 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.util.stream.Stream<java.lang.String> strStream64 = strList62.stream();
        boolean boolean66 = strList62.equals((java.lang.Object) (-1.0d));
        boolean boolean67 = strList62.isEmpty();
        java.lang.String str69 = strList62.get(0);
        strList62.clear();
        boolean boolean71 = strList36.removeAll((java.util.Collection<java.lang.String>) strList62);
        int int73 = strList36.lastIndexOf((java.lang.Object) 1644572483400L);
        boolean boolean74 = strList14.addAll((java.util.Collection<java.lang.String>) strList36);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FastDateFormat[HH:mm' Uhr 'z]" + "'", str6, "FastDateFormat[HH:mm' Uhr 'z]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh" + "'", str20, "zh");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644572642648,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=2,MILLISECOND=648,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strStream38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zh" + "'", str42, "zh");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strStream57);
        org.junit.Assert.assertNotNull(strStream58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strStream64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Tue Jan 11 09:34:31 UTC 2022" + "'", str69, "Tue Jan 11 09:34:31 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test20312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20312");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance();
        int int3 = calendar2.getWeeksInWeekYear();
        java.time.Instant instant4 = calendar2.toInstant();
        int int6 = calendar2.getMinimum(4);
        calendar2.setFirstDayOfWeek(13);
        calendar2.clear();
        calendar2.set((int) (byte) 100, 34, 8, 1, 4);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        java.util.Locale locale18 = java.util.Locale.PRC;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat19 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone17, locale18);
        calendar2.setTimeZone(timeZone17);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08", timeZone17);
        java.util.Locale.Builder builder22 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder22.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder25 = builder22.clear();
        java.util.Locale.Builder builder26 = builder25.clear();
        java.util.Locale.Builder builder29 = builder26.setExtension('x', "GMT4");
        java.util.Locale.Builder builder30 = builder26.clear();
        java.util.Locale locale31 = java.util.Locale.GERMANY;
        java.util.Locale.Builder builder32 = builder26.setLocale(locale31);
        java.util.Locale locale33 = builder26.build();
        java.util.Locale.Builder builder34 = builder26.clear();
        java.util.Locale locale35 = builder26.build();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat36 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone17, locale35);
        java.time.ZoneId zoneId37 = timeZone17.toZoneId();
        org.junit.Assert.assertNotNull(calendar2);
        org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=13,minimalDaysInFirstWeek=4,ERA=?,YEAR=100,MONTH=34,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=8,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=1,MINUTE=4,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat19);
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(fastDateFormat36);
        org.junit.Assert.assertNotNull(zoneId37);
    }

    @Test
    public void test20313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20313");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("eng", strMap1);
        java.util.Locale.LanguageRange languageRange4 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] { languageRange4 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale11);
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.lang.String str18 = locale15.getDisplayLanguage(locale16);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet20 = locale19.getExtensionKeys();
        java.util.Locale locale22 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat23 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale22);
        java.util.Locale locale24 = java.util.Locale.FRANCE;
        java.util.Locale locale25 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone28);
        java.util.Locale locale31 = fastDateFormat30.getLocale();
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale33.getLanguage();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale33.getDisplayVariant(locale35);
        java.util.Locale locale37 = java.util.Locale.GERMANY;
        java.lang.String str38 = locale33.getDisplayVariant(locale37);
        java.util.Locale locale39 = java.util.Locale.ENGLISH;
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone44.hasSameRules(timeZone45);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone45);
        java.util.Locale locale48 = fastDateFormat47.getLocale();
        java.util.Locale locale49 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        boolean boolean53 = timeZone51.hasSameRules(timeZone52);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat54 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone52);
        java.util.Locale locale55 = fastDateFormat54.getLocale();
        java.util.Locale locale56 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale57 = java.util.Locale.UK;
        java.util.Locale[] localeArray58 = new java.util.Locale[] { locale11, locale15, locale19, locale22, locale24, locale25, locale31, locale32, locale37, locale39, locale40, locale41, locale42, locale48, locale49, locale55, locale56, locale57 };
        java.util.ArrayList<java.util.Locale> localeList59 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList59, localeArray58);
        java.util.Locale locale61 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList59);
        java.util.List<java.util.Locale> localeList62 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList59);
        java.lang.String[] strArray64 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList65 = new java.util.ArrayList<java.lang.String>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList65, strArray64);
        java.util.stream.Stream<java.lang.String> strStream67 = strList65.stream();
        boolean boolean69 = strList65.add("hi!");
        strList65.clear();
        java.lang.String str71 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strList65);
        boolean boolean72 = strList65.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream73 = strList65.parallelStream();
        java.util.Iterator<java.lang.String> strItor74 = strList65.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str76 = strList65.get(120);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 120, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "German" + "'", str12, "German");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572642709,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=2,MILLISECOND=709,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str18, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh" + "'", str34, "zh");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertNotNull(locale48);
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(fastDateFormat54);
        org.junit.Assert.assertNotNull(locale55);
// flaky:         org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(localeList62);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strStream67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strStream73);
        org.junit.Assert.assertNotNull(strItor74);
    }

    @Test
    public void test20314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20314");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        boolean boolean7 = strList2.isEmpty();
        java.lang.Object[] objArray8 = strList2.toArray();
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        int int10 = calendar9.getWeeksInWeekYear();
        java.time.Instant instant11 = calendar9.toInstant();
        boolean boolean12 = strList2.equals((java.lang.Object) instant11);
        boolean boolean14 = strList2.add("11.02.2022 09:34:59");
        java.lang.String[] strArray20 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.stream.Stream<java.lang.String> strStream23 = strList21.stream();
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        int int25 = strList21.lastIndexOf((java.lang.Object) locale24);
        java.util.stream.Stream<java.lang.String> strStream26 = strList21.stream();
        java.util.Iterator<java.lang.String> strItor27 = strList21.iterator();
        java.util.ListIterator<java.lang.String> strItor28 = strList21.listIterator();
        strList21.clear();
        boolean boolean31 = strList21.add("java.text.FieldPosition[field=15,attribute=null,beginIndex=0,endIndex=0]");
        java.util.Locale locale33 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat34 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale33);
        boolean boolean35 = fastDateFormat34.getTimeZoneOverridesCalendar();
        java.lang.Object obj36 = fastDateFormat34.clone();
        java.text.ParsePosition parsePosition39 = new java.text.ParsePosition(16);
        java.lang.Object obj40 = fastDateFormat34.parseObject("\uc624\uc804\uc2dc\ubd84\ucd08", parsePosition39);
        java.util.TimeZone timeZone41 = fastDateFormat34.getTimeZone();
        boolean boolean42 = strList21.remove((java.lang.Object) timeZone41);
        java.util.Locale locale44 = new java.util.Locale("9:37:28 AM GMT+00:00");
        boolean boolean45 = strList21.equals((java.lang.Object) "9:37:28 AM GMT+00:00");
        boolean boolean46 = strList2.addAll((java.util.Collection<java.lang.String>) strList21);
        java.util.stream.Stream<java.lang.String> strStream47 = strList2.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            strList2.add(1938, "Feb 7, 2022 9:38:32 AM");
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1938, Size: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[Tue Jan 11 09:34:31 UTC 2022]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[Tue Jan 11 09:34:31 UTC 2022]");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644572642752,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=2,MILLISECOND=752,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(strStream26);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(strItor28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "FastDateFormat[zh]");
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals(locale44.toString(), "9:37:28 am gmt+00:00");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strStream47);
    }

    @Test
    public void test20315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20315");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        timeZone1.setRawOffset(40);
        boolean boolean7 = timeZone1.observesDaylightTime();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance();
        int int10 = calendar9.getWeeksInWeekYear();
        java.time.Instant instant11 = calendar9.toInstant();
        boolean boolean12 = calendar9.isWeekDateSupported();
        calendar9.setTimeInMillis(1644572085058L);
        boolean boolean15 = calendar9.isWeekDateSupported();
        java.lang.String str16 = calendar9.getCalendarType();
        java.lang.String str17 = fastDateFormat8.format(calendar9);
        java.util.Date date18 = calendar9.getTime();
        int int19 = date18.getDay();
        java.lang.String str20 = date18.toGMTString();
        java.lang.String str21 = date18.toLocaleString();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572642782,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=2,MILLISECOND=782,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1644572085058,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=45,MILLISECOND=58,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gregory" + "'", str16, "gregory");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "09:34:45 GMT" + "'", str17, "09:34:45 GMT");
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Fri Feb 11 09:34:45 GMT 2022");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "11 Feb 2022 09:34:45 GMT" + "'", str20, "11 Feb 2022 09:34:45 GMT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "11-Feb-2022 09:34:45" + "'", str21, "11-Feb-2022 09:34:45");
    }

    @Test
    public void test20316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20316");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("tedesco");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.lang.String[] strArray9 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.util.stream.Stream<java.lang.String> strStream12 = strList10.stream();
        java.util.stream.Stream<java.lang.String> strStream13 = strList10.parallelStream();
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags(languageRangeList3, (java.util.Collection<java.lang.String>) strList10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList3, strMap15);
        java.lang.String[] strArray18 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.util.stream.Stream<java.lang.String> strStream21 = strList19.stream();
        strList19.clear();
        java.lang.String[] strArray24 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.stream.Stream<java.lang.String> strStream27 = strList25.stream();
        boolean boolean28 = strList19.containsAll((java.util.Collection<java.lang.String>) strList25);
        java.util.Spliterator<java.lang.String> strSpliterator29 = strList19.spliterator();
        java.lang.String[] strArray65 = new java.lang.String[] { "eng", "Jan 10, 4630 12:00:00 AM", "2022-2-11 9:34:42", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "java.util.GregorianCalendar[time=1644572075684,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=15,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=684,ZONE_OFFSET=0,DST_OFFSET=0]", "zh", "java.text.ParsePosition[index=100,errorIndex=-1]", "9:34:41 AM UTC", "Greenwich Mean Time", "Chinese", "\uc624\uc804\uc2dc\ubd84\ucd08", "9:34:37 AM UTC", "9:34:38 AM UTC", "9:34:41 AM UTC", "9:34:37 AM UTC", "Chinese", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "\u4e2d\u6587", "FastDateFormat[h:mm:ss a z]", "Jan 10, 4630 12:00:00 AM", "9:34:41 AM UTC", "it", "\u610f\u5927\u5229\u6587", "Tue Jan 11 09:34:31 UTC 2022", "9:34:38 AM UTC", "", "de", "tedesco", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "\uc624\uc804\uc2dc\ubd84\ucd08", "12:00:00 AM UTC", "eng", "\uc624\uc804\uc2dc\ubd84\ucd08", "\u5e74\u6708\u65e5", "\u610f\u5927\u5229\u6587" };
        java.util.ArrayList<java.lang.String> strList66 = new java.util.ArrayList<java.lang.String>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList66, strArray65);
        java.lang.String str69 = strList66.remove(0);
        boolean boolean70 = strList19.containsAll((java.util.Collection<java.lang.String>) strList66);
        java.lang.Object[] objArray71 = strList19.toArray();
        java.util.stream.Stream<java.lang.String> strStream72 = strList19.parallelStream();
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags(languageRangeList3, (java.util.Collection<java.lang.String>) strList19);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strStream27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSpliterator29);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "eng" + "'", str69, "eng");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(strStream72);
        org.junit.Assert.assertNotNull(strList73);
    }

    @Test
    public void test20317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20317");
        java.util.Date date1 = new java.util.Date("11 Jan 2022 09:37:02 GMT");
        int int2 = date1.getDate();
        date1.setHours(26);
        org.junit.Assert.assertEquals(date1.toString(), "Wed Jan 12 02:37:02 GMT 2022");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 11 + "'", int2 == 11);
    }

    @Test
    public void test20318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20318");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate(38, 41, 11);
        java.util.Locale locale12 = new java.util.Locale("java.text.ParsePosition[index=100,errorIndex=-1]", "Jan 10, 4630 12:00:00 AM");
        java.util.Calendar.Builder builder13 = builder9.setLocale(locale12);
        java.util.Calendar.Builder builder14 = new java.util.Calendar.Builder();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        boolean boolean17 = locale15.hasExtensions();
        java.lang.String str18 = locale15.getDisplayCountry();
        java.util.Calendar.Builder builder19 = builder14.setLocale(locale15);
        java.util.Calendar.Builder builder23 = builder14.setWeekDate((int) (short) 1, 9, 1);
        int[] intArray26 = new int[] { 14, ' ' };
        java.util.Calendar.Builder builder27 = builder23.setFields(intArray26);
        java.util.Calendar.Builder builder28 = builder13.setFields(intArray26);
        java.util.TimeZone timeZone30 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone30);
        java.lang.String str32 = fastDateFormat31.toString();
        java.lang.String str33 = fastDateFormat31.toString();
        java.util.TimeZone timeZone34 = fastDateFormat31.getTimeZone();
        timeZone34.setRawOffset((int) (short) 100);
        int int37 = timeZone34.getRawOffset();
        java.util.TimeZone.setDefault(timeZone34);
        java.util.Calendar.Builder builder39 = builder13.setTimeZone(timeZone34);
        java.util.Calendar.Builder builder41 = builder13.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar42 = builder41.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 11");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale12.toString(), "java.text.parseposition[index=100,errorindex=-1]_JAN 10, 4630 12:00:00 AM");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh" + "'", str16, "zh");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[14, 32]");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str32, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str33, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test20319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20319");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.Object obj12 = fastDateFormat2.parseObject("FastDateFormat[h:mm:ss a z]", parsePosition7);
        java.lang.String str13 = fastDateFormat2.toString();
        boolean boolean14 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.util.Locale locale15 = fastDateFormat2.getLocale();
        java.util.Calendar calendar16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = fastDateFormat2.format(calendar16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str13, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_US");
    }

    @Test
    public void test20320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20320");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale11);
        java.util.Locale.setDefault(category7, locale11);
        java.util.Locale locale16 = java.util.Locale.getDefault(category7);
        java.util.Locale.Builder builder17 = builder6.setLocale(locale16);
        java.util.Locale locale18 = builder6.build();
        boolean boolean19 = locale18.hasExtensions();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone22);
        java.util.Locale locale25 = fastDateFormat24.getLocale();
        java.lang.String str26 = fastDateFormat24.toString();
        java.util.Locale locale27 = fastDateFormat24.getLocale();
        java.lang.String str28 = locale27.getDisplayName();
        java.lang.String str29 = locale18.getDisplayScript(locale27);
        java.lang.String str30 = locale18.getISO3Country();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "German" + "'", str12, "German");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572642887,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=2,MILLISECOND=987,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u65f6\u5206\u79d2' z]" + "'", str26, "\u65f6\u5206\u79d2' z]");
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Chinesisch" + "'", str28, "Chinesisch");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test20321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20321");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone.setDefault(timeZone2);
        boolean boolean5 = timeZone2.observesDaylightTime();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(41, timeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 41");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test20322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20322");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("11.12.2021 09:35:35");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=11.12.202109:35:35");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test20323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20323");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] { languageRange3 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = locale10.getDisplayCountry();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone8, locale10);
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = locale14.getDisplayLanguage(locale15);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale21);
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone26.hasSameRules(timeZone27);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat29 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone27);
        java.util.Locale locale30 = fastDateFormat29.getLocale();
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = locale32.getLanguage();
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale32.getDisplayVariant(locale34);
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale32.getDisplayVariant(locale36);
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone43 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        boolean boolean45 = timeZone43.hasSameRules(timeZone44);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone44);
        java.util.Locale locale47 = fastDateFormat46.getLocale();
        java.util.Locale locale48 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone51 = java.util.TimeZone.getDefault();
        boolean boolean52 = timeZone50.hasSameRules(timeZone51);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone51);
        java.util.Locale locale54 = fastDateFormat53.getLocale();
        java.util.Locale locale55 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale56 = java.util.Locale.UK;
        java.util.Locale[] localeArray57 = new java.util.Locale[] { locale10, locale14, locale18, locale21, locale23, locale24, locale30, locale31, locale36, locale38, locale39, locale40, locale41, locale47, locale48, locale54, locale55, locale56 };
        java.util.ArrayList<java.util.Locale> localeList58 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList58, localeArray57);
        java.util.Locale locale60 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.util.Locale>) localeList58);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap61 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList62 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strMap61);
        java.lang.String[] strArray68 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022", "FastDateFormat[h:mm:ss a z]", "zh", "java.text.ParsePosition[index=16,errorIndex=-1]", "de" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.lang.Object[] objArray71 = strList69.toArray();
        strList69.clear();
        java.lang.String[] strArray74 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList75 = new java.util.ArrayList<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList75, strArray74);
        java.util.stream.Stream<java.lang.String> strStream77 = strList75.stream();
        strList75.clear();
        java.util.Spliterator<java.lang.String> strSpliterator79 = strList75.spliterator();
        boolean boolean80 = strList69.containsAll((java.util.Collection<java.lang.String>) strList75);
        java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList75);
        java.lang.String[] strArray83 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        java.util.stream.Stream<java.lang.String> strStream86 = strList84.stream();
        boolean boolean88 = strList84.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor90 = strList84.listIterator(0);
        java.util.Locale.FilteringMode filteringMode91 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList92 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList84, filteringMode91);
        java.util.Locale.FilteringMode filteringMode93 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList94 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strList92, filteringMode93);
        java.util.stream.Stream<java.lang.String> strStream95 = strList92.parallelStream();
        java.util.function.UnaryOperator<java.lang.String> strUnaryOperator96 = null;
        // The following exception was thrown during execution in test generation
        try {
            strList92.replaceAll(strUnaryOperator96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Deutsch" + "'", str11, "Deutsch");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1644572642941,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=41,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh" + "'", str16, "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str17, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(fastDateFormat29);
        org.junit.Assert.assertNotNull(locale30);
// flaky:         org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "zh" + "'", str33, "zh");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertNotNull(locale47);
// flaky:         org.junit.Assert.assertEquals(locale47.toString(), "zh");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertNotNull(locale54);
// flaky:         org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertNotNull(languageRangeList62);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(strStream77);
        org.junit.Assert.assertNotNull(strSpliterator79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(strStream86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(strItor90);
        org.junit.Assert.assertTrue("'" + filteringMode91 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode91.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertTrue("'" + filteringMode93 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode93.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList94);
        org.junit.Assert.assertNotNull(strStream95);
    }

    @Test
    public void test20324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20324");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone2);
        java.lang.Object obj5 = fastDateFormat4.clone();
        java.lang.String str6 = fastDateFormat4.getPattern();
        java.util.Date date7 = new java.util.Date();
        int int8 = date7.getTimezoneOffset();
        long long9 = date7.getTime();
        int int10 = date7.getMonth();
        date7.setSeconds(7);
        java.util.Date date13 = new java.util.Date();
        int int14 = date13.getDay();
        java.util.Date date15 = new java.util.Date();
        date15.setMinutes((int) '#');
        boolean boolean18 = date13.before(date15);
        int int19 = date15.getMinutes();
        boolean boolean20 = date7.before(date15);
        java.lang.String str21 = fastDateFormat4.format(date15);
        int int22 = date15.getDate();
        int int23 = date15.getDay();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "\u65f6\u5206\u79d2' z]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "\u65f6\u5206\u79d2' z]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "\u65f6\u5206\u79d2' z]");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u65f6\u5206\u79d2' z" + "'", str6, "\u65f6\u5206\u79d2' z");
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Fri Feb 11 09:44:07 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1644572642985L + "'", long9 == 1644572642985L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Fri Feb 11 09:44:03 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Fri Feb 11 09:35:03 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00" + "'", str21, "\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 11 + "'", int22 == 11);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
    }

    @Test
    public void test20325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20325");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int8 = calendar6.getActualMinimum(2);
        java.util.TimeZone timeZone9 = calendar6.getTimeZone();
        java.util.TimeZone timeZone10 = calendar6.getTimeZone();
        java.lang.String str11 = calendar6.getCalendarType();
        calendar6.set(0, 0);
        calendar6.set(97, (-46800000), 25, 1938, 44);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Deutsch" + "'", str4, "Deutsch");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=97,MONTH=-46800000,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=25,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=1938,MINUTE=44,SECOND=3,MILLISECOND=111,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gregory" + "'", str11, "gregory");
    }

    @Test
    public void test20326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20326");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("FR");
        java.lang.String[] strArray7 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.stream.Stream<java.lang.String> strStream10 = strList8.stream();
        java.util.Locale locale11 = java.util.Locale.JAPANESE;
        int int12 = strList8.lastIndexOf((java.lang.Object) locale11);
        java.util.stream.Stream<java.lang.String> strStream13 = strList8.stream();
        java.util.Iterator<java.lang.String> strItor14 = strList8.iterator();
        java.util.ListIterator<java.lang.String> strItor15 = strList8.listIterator();
        boolean boolean16 = strList8.isEmpty();
        java.lang.String[] strArray18 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.util.stream.Stream<java.lang.String> strStream21 = strList19.stream();
        strList19.clear();
        java.util.stream.Stream<java.lang.String> strStream23 = strList19.stream();
        int int24 = strList19.size();
        strList19.clear();
        java.lang.String[] strArray61 = new java.lang.String[] { "\uc624\uc804\uc2dc\ubd84\ucd08", "FastDateFormat[zh]", "java.text.FieldPosition[field=5,attribute=null,beginIndex=0,endIndex=0]", "UTC", "java.text.ParsePosition[index=16,errorIndex=-1]", "java.text.FieldPosition[field=15,attribute=null,beginIndex=0,endIndex=0]", "java.util.GregorianCalendar[time=1644572085165,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=45,MILLISECOND=165,ZONE_OFFSET=0,DST_OFFSET=0]", "\u5e74\u6708\u65e5", "\u4e2d\u56fd", "java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "31 May 1909 18:40:08 GMT", "tedesco (Germania)", "\u5fb7\u6587", "UTC9", "Chinese", "de", "9:34:41 AM UTC", "\u610f\u5927\u5229\u6587", "UTC9", "German", "\uc624\uc804\uc2dc\ubd84\ucd08", "9:34:46 AM UTC", "java.util.GregorianCalendar[time=1644572085165,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=45,MILLISECOND=165,ZONE_OFFSET=0,DST_OFFSET=0]", "\uc624\uc804\uc2dc\ubd84\ucd08", "java.text.FieldPosition[field=15,attribute=null,beginIndex=0,endIndex=0]", "\u610f\u5927\u5229\u6587", "\u5fb7\u6587", "Deutsch", "tedesco", "9:34:44 AM UTC", "de", "Chinese", "Vereinigtes K\366nigreich", "9:34:41 AM UTC", "UTC9" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        strList62.clear();
        boolean boolean65 = strList19.retainAll((java.util.Collection<java.lang.String>) strList62);
        boolean boolean66 = strList8.addAll((java.util.Collection<java.lang.String>) strList62);
        java.lang.String str67 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strList62);
        boolean boolean68 = strList62.isEmpty();
        boolean boolean70 = strList62.add("Mar 9, 1997 3:03:00 PM");
        int int71 = strList62.size();
        java.util.TimeZone timeZone72 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        boolean boolean74 = timeZone72.hasSameRules(timeZone73);
        java.util.Locale locale75 = java.util.Locale.GERMAN;
        java.lang.String str76 = locale75.getDisplayName();
        java.lang.String str77 = locale75.getDisplayCountry();
        java.util.Calendar calendar78 = java.util.Calendar.getInstance(timeZone73, locale75);
        calendar78.set(31, (int) (byte) 100, (int) (byte) 10, (int) (short) 100, 9, 8);
        java.util.Date date89 = new java.util.Date((-1), 32772, (int) (short) 10);
        java.lang.String str90 = date89.toLocaleString();
        calendar78.setTime(date89);
        int int93 = calendar78.getActualMinimum((int) (short) 10);
        java.time.Instant instant94 = calendar78.toInstant();
        boolean boolean95 = strList62.equals((java.lang.Object) calendar78);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strStream10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strStream21);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(timeZone72);
        org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone73);
        org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "de");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Deutsch" + "'", str76, "Deutsch");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(calendar78);
        org.junit.Assert.assertEquals(calendar78.toString(), "java.util.GregorianCalendar[time=83942265599900,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=4630,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date89.toString(), "Sun Jan 10 00:00:00 GMT+00:00 4630");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "10-Jan-4630 00:00:00" + "'", str90, "10-Jan-4630 00:00:00");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(instant94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test20327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20327");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.setDefault(locale1);
        java.lang.String str7 = locale1.getVariant();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test20328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20328");
        java.util.Locale locale1 = new java.util.Locale("\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00");
        java.lang.String str2 = locale1.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale1.getUnicodeLocaleType("FEB 7, 2022 9:37:12 AM");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: FEB 7, 2022 9:37:12 AM");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "\u4e0a\u5348\u65f6\u5206\u79d2 gmt+00:00");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u4e0a\u5348\u65f6\u5206\u79d2 gmt+00:00" + "'", str2, "\u4e0a\u5348\u65f6\u5206\u79d2 gmt+00:00");
    }

    @Test
    public void test20329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20329");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.time.Instant instant2 = calendar1.toInstant();
        java.util.TimeZone timeZone3 = calendar1.getTimeZone();
        java.util.Date date7 = new java.util.Date(11, 0, (int) 'a');
        calendar1.setTime(date7);
        java.lang.String str9 = date7.toLocaleString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-1853625600100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1911,MONTH=3,WEEK_OF_YEAR=14,WEEK_OF_MONTH=2,DAY_OF_MONTH=7,DAY_OF_YEAR=97,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals(date7.toString(), "Fri Apr 07 00:00:00 GMT+00:00 1911");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1911-4-7 0:00:00" + "'", str9, "1911-4-7 0:00:00");
    }

    @Test
    public void test20330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20330");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("java.util.GregorianCalendar[time=-100,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.util.gregoriancalendar[time=-100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test20331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20331");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = java.util.Locale.CHINESE;
        java.lang.String str7 = locale6.getLanguage();
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale6.getDisplayVariant(locale8);
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone5, locale6);
        int int12 = calendar10.getActualMinimum(0);
        int int13 = calendar10.getWeekYear();
        java.time.Instant instant14 = calendar10.toInstant();
        java.lang.String str15 = calendar10.getCalendarType();
        calendar10.set((-26), 14, (int) (short) 100, 130, (-1969));
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zh" + "'", str7, "zh");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=-26,MONTH=14,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=100,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=130,MINUTE=-1969,SECOND=3,MILLISECOND=213,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "gregory" + "'", str15, "gregory");
    }

    @Test
    public void test20332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20332");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("10 Feb 2022 09:39:46 GMT", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=10feb202209:39:46gmt");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test20333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20333");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(2022);
        fieldPosition1.setEndIndex(47);
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        boolean boolean6 = fieldPosition1.equals((java.lang.Object) category4);
        java.util.Locale locale7 = java.util.Locale.getDefault(category4);
        java.text.AttributedCharacterIterator.Attribute attribute8 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str9 = attribute8.toString();
        java.lang.String str10 = attribute8.toString();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str13 = fastDateFormat11.format((long) 100);
        boolean boolean14 = attribute8.equals((java.lang.Object) str13);
        java.util.Calendar calendar15 = java.util.Calendar.getInstance();
        int int16 = calendar15.getWeeksInWeekYear();
        java.time.Instant instant17 = calendar15.toInstant();
        int int19 = calendar15.getMinimum(4);
        calendar15.setFirstDayOfWeek(13);
        boolean boolean22 = attribute8.equals((java.lang.Object) 13);
        java.util.Locale locale23 = java.util.Locale.UK;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = locale23.getDisplayCountry(locale24);
        java.util.Locale locale26 = locale23.stripExtensions();
        java.lang.String str27 = locale23.getDisplayScript();
        boolean boolean28 = attribute8.equals((java.lang.Object) locale23);
        java.util.Locale.setDefault(category4, locale23);
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder32 = builder30.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder34 = builder32.setLanguageTag("it");
        java.util.Locale.Builder builder37 = builder32.setExtension('x', "de");
        java.util.Locale locale38 = builder37.build();
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category4, locale38);
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition(16);
        int int44 = parsePosition43.getErrorIndex();
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone46);
        java.lang.String str48 = fastDateFormat47.getPattern();
        boolean boolean49 = parsePosition43.equals((java.lang.Object) fastDateFormat47);
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        boolean boolean51 = parsePosition43.equals((java.lang.Object) locale50);
        java.lang.String str52 = locale50.toLanguageTag();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale50);
        java.util.Set<java.lang.String> strSet54 = locale50.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category4, locale50);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertNotNull(attribute8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str9, "java.text.AttributedCharacterIterator$Attribute(language)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str10, "java.text.AttributedCharacterIterator$Attribute(language)");
        org.junit.Assert.assertNotNull(fastDateFormat11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u4e0a\u5348" + "'", str13, "\u4e0a\u5348");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=1644572643150,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=13,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=250,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Vereinigtes K\366nigreich" + "'", str25, "Vereinigtes K\366nigreich");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it__#x-de");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "h:mm:ss a z" + "'", str48, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "fr-FR" + "'", str52, "fr-FR");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertNotNull(strSet54);
    }

    @Test
    public void test20334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20334");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        timeZone2.setID("coreano");
        boolean boolean16 = timeZone2.observesDaylightTime();
        boolean boolean17 = timeZone2.observesDaylightTime();
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone2);
        int int20 = calendar18.getMinimum(0);
        calendar18.set(0, 12, 1914, 0, 130, 1);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644572643179,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"coreano\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=279,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u671d\u9c9c\u6587" + "'", str12, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"coreano\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=0,MONTH=12,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=1914,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=0,MINUTE=130,SECOND=1,MILLISECOND=279,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test20335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20335");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.util.Locale.setDefault(locale5);
        java.util.Locale.setDefault(category0, locale5);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone11);
        java.util.Locale locale14 = fastDateFormat13.getLocale();
        java.lang.String str15 = fastDateFormat13.toString();
        java.lang.Object obj16 = fastDateFormat13.clone();
        java.util.Locale locale17 = fastDateFormat13.getLocale();
        java.lang.String str18 = locale17.getVariant();
        java.util.Locale.setDefault(category0, locale17);
        java.util.Locale locale23 = new java.util.Locale("10.01.4630 00:00:00", "\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00", "11-feb-2022 9.37.07");
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.Locale locale28 = java.util.Locale.ROOT;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone26, locale28);
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition(16);
        int int32 = parsePosition31.getErrorIndex();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet34 = locale33.getExtensionKeys();
        boolean boolean35 = parsePosition31.equals((java.lang.Object) locale33);
        java.lang.String str36 = locale33.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone26, locale33);
        int int38 = timeZone26.getRawOffset();
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = locale39.getLanguage();
        boolean boolean41 = locale39.hasExtensions();
        java.lang.String str42 = locale39.getDisplayScript();
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(locale39);
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone26, locale39);
        java.lang.String str45 = locale39.getDisplayCountry();
        java.util.Locale locale46 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str47 = locale39.getDisplayScript(locale46);
        java.lang.String str48 = locale23.getDisplayScript(locale46);
        java.util.Locale.setDefault(category0, locale46);
        java.util.TimeZone timeZone51 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat52 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone51);
        java.lang.String str53 = fastDateFormat52.toString();
        java.lang.String str54 = fastDateFormat52.toString();
        java.util.TimeZone timeZone55 = fastDateFormat52.getTimeZone();
        java.util.Locale locale56 = fastDateFormat52.getLocale();
        java.lang.String str57 = locale56.getLanguage();
        java.util.Locale.setDefault(category0, locale56);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh" + "'", str6, "zh");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u65f6\u5206\u79d2' z]" + "'", str15, "\u65f6\u5206\u79d2' z]");
        org.junit.Assert.assertNotNull(obj16);
// flaky:         org.junit.Assert.assertEquals(obj16.toString(), "\u65f6\u5206\u79d2' z]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "\u65f6\u5206\u79d2' z]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "\u65f6\u5206\u79d2' z]");
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
// flaky:         org.junit.Assert.assertEquals(locale23.toString(), "\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00_11-feb-2022 9.37.07");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1644572643201,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=301,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u671d\u9c9c\u6587" + "'", str36, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "zh" + "'", str40, "zh");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1644572643201,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=301,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1644572643201,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=301,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(fastDateFormat52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str53, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str54, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "en" + "'", str57, "en");
    }

    @Test
    public void test20336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20336");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder5 = builder0.addUnicodeLocaleAttribute("Deutsch");
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("04.02.1919 02:07:00");
        java.util.Locale.Builder builder8 = builder5.setLocale(locale7);
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.clearExtensions();
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder11.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder15 = builder13.setLanguageTag("it");
        java.util.Locale.Builder builder18 = builder13.setExtension('x', "de");
        java.util.Locale locale19 = builder13.build();
        java.util.Locale.setDefault(locale19);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = locale24.getDisplayName();
        java.lang.String str26 = locale24.getDisplayCountry();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone22, locale24);
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = locale28.getVariant();
        java.lang.String str31 = locale24.getDisplayScript(locale28);
        java.lang.String str32 = locale19.getDisplayScript(locale28);
        java.util.Locale.Builder builder33 = builder10.setLocale(locale28);
        java.util.Locale.Builder builder34 = builder10.clear();
        java.util.Locale.Builder builder35 = builder34.clear();
        java.util.Locale.Builder builder37 = builder35.setVariant("English");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it__#x-de");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tedesco" + "'", str25, "tedesco");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644572643238,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=338,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test20337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20337");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        timeZone1.setID("9:36:17 AM UTC");
        int int10 = timeZone1.getOffset(1L);
        java.util.Locale locale13 = new java.util.Locale("\u4e0a\u5348", "9:34:38 am utc");
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone1, locale13);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap16 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList17 = java.util.Locale.LanguageRange.parse("eng", strMap16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList17, strMap18);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap20 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList21 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList17, strMap20);
        boolean boolean22 = calendar14.after((java.lang.Object) languageRangeList21);
        java.lang.Object obj23 = calendar14.clone();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tedesco" + "'", str4, "tedesco");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572643256,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"9:36:17 AM UTC\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=356,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals(locale13.toString(), "\u4e0a\u5348_9:34:38 AM UTC");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572643256,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"9:36:17 AM UTC\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=356,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(languageRangeList17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(languageRangeList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
// flaky:         org.junit.Assert.assertEquals(obj23.toString(), "java.util.GregorianCalendar[time=1644572643256,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"9:36:17 AM UTC\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=356,ZONE_OFFSET=100,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "java.util.GregorianCalendar[time=1644572643256,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"9:36:17 AM UTC\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=356,ZONE_OFFSET=100,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "java.util.GregorianCalendar[time=1644572643256,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"9:36:17 AM UTC\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=356,ZONE_OFFSET=100,DST_OFFSET=0]");
    }

    @Test
    public void test20338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20338");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        java.lang.String str11 = locale8.getDisplayLanguage(locale9);
        java.lang.String str12 = locale6.getDisplayLanguage(locale8);
        java.util.Locale.Builder builder13 = builder3.setLocale(locale8);
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder16 = builder13.setLocale(locale14);
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder17.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder20 = builder17.clear();
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder22 = builder20.setLocale(locale21);
        java.util.Locale.Builder builder23 = builder22.clearExtensions();
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getDisplayName();
        java.lang.String str30 = locale28.getDisplayCountry();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone26, locale28);
        java.util.Locale.setDefault(category24, locale28);
        java.util.Locale locale33 = java.util.Locale.getDefault(category24);
        java.util.Locale.Builder builder34 = builder23.setLocale(locale33);
        java.util.Locale.Builder builder35 = builder23.clearExtensions();
        java.util.Locale.Category category36 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category36, locale37);
        java.lang.String str39 = locale37.getDisplayName();
        java.util.Locale.Builder builder40 = builder23.setLocale(locale37);
        java.util.Locale locale41 = locale37.stripExtensions();
        boolean boolean42 = locale41.hasExtensions();
        java.util.Locale.Builder builder43 = builder13.setLocale(locale41);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder45 = builder13.setScript("\uc624\uc804\uc2dc\ubd84\ucd08");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ????? 9?? 37??? 29?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh" + "'", str10, "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str11, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "coreano" + "'", str12, "coreano");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "tedesco" + "'", str29, "tedesco");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644572643274,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=374,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + category36 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category36.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "italiano" + "'", str39, "italiano");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test20339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20339");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getTimezoneOffset();
        int int2 = date0.getSeconds();
        date0.setDate(7);
        java.time.Instant instant5 = date0.toInstant();
        java.util.Date date6 = java.util.Date.from(instant5);
        java.lang.String str7 = date6.toLocaleString();
        date6.setSeconds(50400000);
        java.lang.String str10 = date6.toGMTString();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Mon Feb 07 09:44:03 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Wed Sep 13 17:44:00 GMT+00:00 2023");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7-feb-2022 9.44.03" + "'", str7, "7-feb-2022 9.44.03");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "13 Sep 2023 17:44:00 GMT" + "'", str10, "13 Sep 2023 17:44:00 GMT");
    }

    @Test
    public void test20340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20340");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("und");
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale3.getISO3Country();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc911\uad6d\uc5b4", timeZone2, locale3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = fastDateFormat6.parseObject("java.text.FieldPosition[field=32768,attribute=null,beginIndex=0,endIndex=47]");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(fastDateFormat6);
    }

    @Test
    public void test20341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20341");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(34);
        int int2 = parsePosition1.getIndex();
        parsePosition1.setIndex(19);
        parsePosition1.setIndex((int) (byte) 100);
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.util.Locale locale10 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str11 = locale8.getDisplayScript(locale10);
        java.util.Locale locale15 = new java.util.Locale("DEU", "java.util.GregorianCalendar[time=1644572075684,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=15,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=684,ZONE_OFFSET=0,DST_OFFSET=0]", "\u65e5\u6587");
        java.lang.String str16 = locale8.getDisplayVariant(locale15);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("4630-1-10 0:00:00", locale15);
        java.util.Locale locale18 = fastDateFormat17.getLocale();
        java.util.Locale.setDefault(locale18);
        java.lang.String str20 = locale18.getDisplayVariant();
        boolean boolean21 = parsePosition1.equals((java.lang.Object) str20);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 34 + "'", int2 == 34);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh" + "'", str9, "zh");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "deu_JAVA.UTIL.GREGORIANCALENDAR[TIME=1644572075684,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\"\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "deu_JAVA.UTIL.GREGORIANCALENDAR[TIME=1644572075684,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\"\u65e5\u6587");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u65e5\u6587" + "'", str20, "\u65e5\u6587");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test20342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20342");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.String str12 = locale9.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2, locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        timeZone14.setRawOffset((-1));
        boolean boolean17 = timeZone2.hasSameRules(timeZone14);
        java.util.TimeZone timeZone18 = null;
        boolean boolean19 = timeZone14.hasSameRules(timeZone18);
        java.util.Locale locale22 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        java.lang.String str28 = locale26.getDisplayLanguage();
        java.lang.String str30 = locale26.getUnicodeLocaleType("zh");
        java.lang.String str31 = locale22.getDisplayScript(locale26);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone33, locale35);
        java.lang.String str37 = locale35.getDisplayLanguage();
        java.lang.String str39 = locale35.getUnicodeLocaleType("zh");
        java.lang.String str40 = locale26.getDisplayScript(locale35);
        java.lang.String str41 = locale26.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = timeZone14.getDisplayName(true, 13, locale26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 13");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644572643352,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=452,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Korean" + "'", str12, "Korean");
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644572643352,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=452,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1644572643352,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=452,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test20343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20343");
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category1, locale2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category1, locale4);
        java.util.Locale locale6 = java.util.Locale.getDefault(category1);
        java.util.Locale locale7 = java.util.Locale.UK;
        java.lang.String str8 = locale7.toLanguageTag();
        java.util.Locale.setDefault(locale7);
        java.util.Locale.setDefault(category1, locale7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u30c9\u30a4\u30c4\u8a9e", locale7);
        java.text.AttributedCharacterIterator attributedCharacterIterator13 = fastDateFormat11.formatToCharacterIterator((java.lang.Object) (-62165540991858L));
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "deu_JAVA.UTIL.GREGORIANCALENDAR[TIME=1644572075684,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\"\u65e5\u6587");
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "deu_JAVA.UTIL.GREGORIANCALENDAR[TIME=1644572075684,AREFIELDSSET=TRUE,AREALLFIELDSSET=TRUE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"ETC/UTC\"\u65e5\u6587");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "en-GB" + "'", str8, "en-GB");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertNotNull(attributedCharacterIterator13);
    }

    @Test
    public void test20344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20344");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition((int) (byte) 100);
        java.util.Date date8 = new java.util.Date(23, 26, 32, (int) (byte) 10, 33, 24356589);
        boolean boolean9 = parsePosition1.equals((java.lang.Object) date8);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Jan 08 08:16:09 GMT+00:00 1926");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test20345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20345");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale8.getDisplayCountry();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale8);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale12.getDisplayLanguage(locale13);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale19);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone25);
        java.util.Locale locale28 = fastDateFormat27.getLocale();
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale30.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.lang.String str35 = locale30.getDisplayVariant(locale34);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone42);
        java.util.Locale locale45 = fastDateFormat44.getLocale();
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone49);
        java.util.Locale locale52 = fastDateFormat51.getLocale();
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale54 = java.util.Locale.UK;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale8, locale12, locale16, locale19, locale21, locale22, locale28, locale29, locale34, locale36, locale37, locale38, locale39, locale45, locale46, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale locale58 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList56);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap59);
        java.util.Set<java.lang.String> strSet61 = java.util.Calendar.getAvailableCalendarTypes();
        java.lang.String str62 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strSet61);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap63 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList64 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap63);
        java.lang.String[] strArray66 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        java.util.stream.Stream<java.lang.String> strStream69 = strList67.stream();
        boolean boolean71 = strList67.equals((java.lang.Object) (-1.0d));
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags(languageRangeList64, (java.util.Collection<java.lang.String>) strList67);
        java.text.FieldPosition fieldPosition74 = new java.text.FieldPosition((int) '#');
        boolean boolean75 = strList72.remove((java.lang.Object) fieldPosition74);
        java.util.Iterator<java.lang.String> strItor76 = strList72.iterator();
        boolean boolean78 = strList72.equals((java.lang.Object) 1644572439199L);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "German" + "'", str9, "German");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644572643409,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=509,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str15, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zh" + "'", str31, "zh");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertNotNull(locale52);
// flaky:         org.junit.Assert.assertEquals(locale52.toString(), "zh");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(languageRangeList64);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strStream69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strItor76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test20346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20346");
        java.lang.String[] strArray35 = new java.lang.String[] { "eng", "Jan 10, 4630 12:00:00 AM", "2022-2-11 9:34:42", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "java.util.GregorianCalendar[time=1644572075684,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=15,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=684,ZONE_OFFSET=0,DST_OFFSET=0]", "zh", "java.text.ParsePosition[index=100,errorIndex=-1]", "9:34:41 AM UTC", "Greenwich Mean Time", "Chinese", "\uc624\uc804\uc2dc\ubd84\ucd08", "9:34:37 AM UTC", "9:34:38 AM UTC", "9:34:41 AM UTC", "9:34:37 AM UTC", "Chinese", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "\u4e2d\u6587", "FastDateFormat[h:mm:ss a z]", "Jan 10, 4630 12:00:00 AM", "9:34:41 AM UTC", "it", "\u610f\u5927\u5229\u6587", "Tue Jan 11 09:34:31 UTC 2022", "9:34:38 AM UTC", "", "de", "tedesco", "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "\uc624\uc804\uc2dc\ubd84\ucd08", "12:00:00 AM UTC", "eng", "\uc624\uc804\uc2dc\ubd84\ucd08", "\u5e74\u6708\u65e5", "\u610f\u5927\u5229\u6587" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.lang.String str39 = strList36.remove(0);
        boolean boolean41 = strList36.add("Koordinierte Universalzeit");
        java.util.Iterator<java.lang.String> strItor42 = strList36.iterator();
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "eng" + "'", str39, "eng");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strItor42);
    }

    @Test
    public void test20347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20347");
        java.util.Locale locale2 = new java.util.Locale("07.02.2022 09:39:01", "6:40:08 PM");
        org.junit.Assert.assertEquals(locale2.toString(), "07.02.2022 09:39:01_6:40:08 PM");
    }

    @Test
    public void test20348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20348");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale0.getUnicodeLocaleType("9:36:34 AM GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 9:36:34 AM GMT");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test20349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20349");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = locale4.getDisplayCountry();
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition(16);
        int int10 = parsePosition9.getErrorIndex();
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone12);
        java.lang.String str14 = fastDateFormat13.getPattern();
        boolean boolean15 = parsePosition9.equals((java.lang.Object) fastDateFormat13);
        java.util.Locale locale16 = java.util.Locale.FRANCE;
        boolean boolean17 = parsePosition9.equals((java.lang.Object) locale16);
        java.lang.String str18 = locale4.getDisplayCountry(locale16);
        java.util.Locale.Category category19 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category19, locale20);
        java.util.Locale locale22 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category19, locale22);
        java.lang.String str24 = locale22.getVariant();
        java.lang.String str25 = locale22.toLanguageTag();
        java.lang.String str26 = locale16.getDisplayName(locale22);
        java.lang.String str27 = locale22.getDisplayScript();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale22);
        boolean boolean29 = fastDateFormat28.getTimeZoneOverridesCalendar();
        java.lang.String str31 = fastDateFormat28.format(1644572301221L);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "German" + "'", str5, "German");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1644572643493,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=593,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "h:mm:ss a z" + "'", str14, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category19.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "en-GB" + "'", str25, "en-GB");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "French (France)" + "'", str26, "French (France)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Friday, 11 February 2022" + "'", str31, "Friday, 11 February 2022");
    }

    @Test
    public void test20350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20350");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\uc911\uad6d\uc5b4");
        java.lang.String str2 = timeZone1.getID();
        java.lang.String str3 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Greenwich Mean Time" + "'", str3, "Greenwich Mean Time");
    }

    @Test
    public void test20351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20351");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getTimezoneOffset();
        long long6 = date4.getTime();
        int int7 = date4.getMonth();
        date4.setSeconds(7);
        date4.setSeconds(1);
        java.util.Date date12 = new java.util.Date();
        int int13 = date12.getTimezoneOffset();
        long long14 = date12.getTime();
        int int15 = date12.getMonth();
        date12.setSeconds(7);
        date12.setSeconds(1);
        boolean boolean20 = date4.before(date12);
        long long21 = date4.getTime();
        java.text.AttributedCharacterIterator attributedCharacterIterator22 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) date4);
        date4.setYear((-1893));
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Fri Feb 11 09:44:01 GMT+00:00 7");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1644572643526L + "'", long6 == 1644572643526L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Fri Feb 11 09:44:01 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1644572643526L + "'", long14 == 1644572643526L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1644572641526L + "'", long21 == 1644572641526L);
        org.junit.Assert.assertNotNull(attributedCharacterIterator22);
    }

    @Test
    public void test20352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20352");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        calendar4.clear(0);
        calendar4.setFirstDayOfWeek(51);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone11, locale13);
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition(16);
        int int17 = parsePosition16.getErrorIndex();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet19 = locale18.getExtensionKeys();
        boolean boolean20 = parsePosition16.equals((java.lang.Object) locale18);
        java.lang.String str21 = locale18.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone11, locale18);
        java.util.TimeZone timeZone23 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        boolean boolean25 = timeZone23.hasSameRules(timeZone24);
        java.util.Locale locale26 = java.util.Locale.ROOT;
        java.util.Calendar calendar27 = java.util.Calendar.getInstance(timeZone24, locale26);
        long long28 = calendar27.getTimeInMillis();
        java.lang.String str29 = fastDateFormat22.format(calendar27);
        java.util.Date date30 = calendar27.getTime();
        calendar4.setTime(date30);
        calendar4.setFirstDayOfWeek(32770);
        calendar4.setMinimalDaysInFirstWeek(53);
        // The following exception was thrown during execution in test generation
        try {
            int int37 = calendar4.getActualMaximum(3064);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 3064");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572643545,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=32770,minimalDaysInFirstWeek=53,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=645,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572643545,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=645,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Korean" + "'", str21, "Korean");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644572643545,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=645,ZONE_OFFSET=100,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1644572643545L + "'", long28 == 1644572643545L);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\uc624\uc804\uc2dc\ubd84\ucd08" + "'", str29, "\uc624\uc804\uc2dc\ubd84\ucd08");
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Fri Feb 11 09:44:03 GMT+00:00 2022");
    }

    @Test
    public void test20353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20353");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("");
        java.util.TimeZone timeZone8 = fastDateFormat7.getTimeZone();
        java.util.Locale locale11 = new java.util.Locale("h:mm:ss a z", "coreano");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone8, locale11);
        int int14 = timeZone8.getOffset((-1767951822000L));
        boolean boolean15 = timeZone2.hasSameRules(timeZone8);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        boolean boolean18 = locale17.hasExtensions();
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale17);
        java.util.Set<java.lang.String> strSet21 = locale17.getUnicodeLocaleAttributes();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(locale17);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone8, locale17);
        java.util.TimeZone timeZone24 = calendar23.getTimeZone();
        java.lang.String str25 = timeZone24.getID();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals(locale11.toString(), "h:mm:ss a z_COREANO");
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1644572643569,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=669,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1644572643569,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=669,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Chinesisch" + "'", str25, "Chinesisch");
    }

    @Test
    public void test20354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20354");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("de");
        timeZone1.setID("Chinese");
        java.lang.String str4 = timeZone1.getID();
        java.lang.String str5 = timeZone1.getID();
        timeZone1.setID("11.01.2022 09:46:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Chinese" + "'", str4, "Chinese");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Chinese" + "'", str5, "Chinese");
    }

    @Test
    public void test20355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20355");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone2);
        java.util.Locale locale5 = fastDateFormat4.getLocale();
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition(16);
        int int9 = parsePosition8.getErrorIndex();
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone11);
        java.lang.String str13 = fastDateFormat12.getPattern();
        boolean boolean14 = parsePosition8.equals((java.lang.Object) fastDateFormat12);
        int int15 = parsePosition8.getIndex();
        java.lang.String str16 = parsePosition8.toString();
        java.lang.Object obj17 = fastDateFormat4.parseObject("\uc624\uc804\uc2dc\ubd84\ucd08", parsePosition8);
        java.lang.String str19 = fastDateFormat4.format((long) 38);
        int int20 = fastDateFormat4.getMaxLengthEstimate();
        java.util.TimeZone timeZone23 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone23);
        boolean boolean25 = fastDateFormat24.getTimeZoneOverridesCalendar();
        java.lang.String str26 = fastDateFormat24.getPattern();
        java.text.ParsePosition parsePosition29 = new java.text.ParsePosition(9);
        parsePosition29.setIndex((int) 'a');
        java.lang.Object obj32 = fastDateFormat24.parseObject("UTC9", parsePosition29);
        java.lang.Object obj33 = fastDateFormat24.clone();
        java.text.ParsePosition parsePosition36 = new java.text.ParsePosition(100);
        java.lang.String str37 = parsePosition36.toString();
        parsePosition36.setIndex(1);
        java.util.Locale locale42 = new java.util.Locale("9:34:37 AM UTC", "Fri Feb 11 09:34:34 UTC 2022");
        java.text.ParsePosition parsePosition44 = new java.text.ParsePosition(16);
        int int45 = parsePosition44.getErrorIndex();
        java.util.TimeZone timeZone47 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat48 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone47);
        java.lang.String str49 = fastDateFormat48.getPattern();
        boolean boolean50 = parsePosition44.equals((java.lang.Object) fastDateFormat48);
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        boolean boolean52 = parsePosition44.equals((java.lang.Object) locale51);
        java.lang.String str53 = locale51.getDisplayScript();
        java.lang.String str54 = locale42.getDisplayLanguage(locale51);
        boolean boolean55 = parsePosition36.equals((java.lang.Object) str54);
        java.lang.Object obj56 = fastDateFormat24.parseObject("30 April 0007", parsePosition36);
        java.util.TimeZone timeZone58 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat59 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone58);
        java.lang.String str60 = fastDateFormat59.toString();
        java.lang.String str61 = fastDateFormat59.toString();
        java.util.TimeZone timeZone62 = fastDateFormat59.getTimeZone();
        timeZone62.setRawOffset((int) (short) 100);
        int int65 = timeZone62.getRawOffset();
        java.text.Format.Field field66 = null;
        java.text.FieldPosition fieldPosition68 = new java.text.FieldPosition(field66, 3);
        fieldPosition68.setEndIndex(49);
        boolean boolean72 = fieldPosition68.equals((java.lang.Object) 8);
        java.util.TimeZone timeZone75 = java.util.TimeZone.getTimeZone("9:34:37 AM UTC");
        java.util.TimeZone timeZone77 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229\u6587");
        boolean boolean78 = timeZone75.hasSameRules(timeZone77);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat79 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(2, timeZone75);
        boolean boolean80 = fieldPosition68.equals((java.lang.Object) timeZone75);
        boolean boolean81 = timeZone62.hasSameRules(timeZone75);
        boolean boolean82 = parsePosition36.equals((java.lang.Object) timeZone62);
        boolean boolean84 = parsePosition36.equals((java.lang.Object) 1644572173404L);
        int int85 = parsePosition36.getIndex();
        java.lang.Object obj86 = fastDateFormat4.parseObject("tue jan 11 09:34:31 utc 2022 (JAVA.TEXT.PARSEPOSITION[INDEX=100,ERRORINDEX=-1])", parsePosition36);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "h:mm:ss a z" + "'", str13, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.text.ParsePosition[index=16,errorIndex=-1]" + "'", str16, "java.text.ParsePosition[index=16,errorIndex=-1]");
        org.junit.Assert.assertNull(obj17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00" + "'", str19, "\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 21 + "'", int20 == 21);
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "FastDateFormat[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "java.text.ParsePosition[index=100,errorIndex=-1]" + "'", str37, "java.text.ParsePosition[index=100,errorIndex=-1]");
        org.junit.Assert.assertEquals(locale42.toString(), "9:34:37 am utc_FRI FEB 11 09:34:34 UTC 2022");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "h:mm:ss a z" + "'", str49, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "9:34:37 am utc" + "'", str54, "9:34:37 am utc");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(obj56);
        org.junit.Assert.assertNotNull(fastDateFormat59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str60, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str61, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 100 + "'", int65 == 100);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(timeZone75);
        org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone77);
        org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(fastDateFormat79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNull(obj86);
    }

    @Test
    public void test20356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20356");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition(16);
        java.util.Date date7 = new java.util.Date();
        int int8 = date7.getDay();
        java.util.Date date9 = new java.util.Date();
        date9.setMinutes((int) '#');
        boolean boolean12 = date7.before(date9);
        boolean boolean13 = parsePosition6.equals((java.lang.Object) boolean12);
        parsePosition6.setErrorIndex(0);
        java.lang.Object obj16 = fastDateFormat2.parseObject("tedesco", parsePosition6);
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder17.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder20 = builder17.clear();
        boolean boolean21 = parsePosition6.equals((java.lang.Object) builder20);
        java.util.Locale.Builder builder23 = builder20.setLanguageTag("China");
        java.util.Locale.Builder builder25 = builder20.setLanguageTag("und");
        java.util.Locale.Builder builder26 = builder25.clear();
        java.util.Locale.Builder builder27 = builder25.clearExtensions();
        java.util.Locale.Category category28 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category28, locale29);
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category28, locale31);
        java.util.Locale locale33 = java.util.Locale.getDefault(category28);
        java.util.Locale locale34 = java.util.Locale.UK;
        java.lang.String str35 = locale34.toLanguageTag();
        java.util.Locale.setDefault(locale34);
        java.util.Locale.setDefault(category28, locale34);
        java.util.Locale.Builder builder38 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder40 = builder38.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder41 = builder38.clear();
        java.util.Locale locale42 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder43 = builder41.setLocale(locale42);
        java.util.Locale.Builder builder44 = builder43.clearExtensions();
        java.util.Locale.Category category45 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone47 = java.util.TimeZone.getDefault();
        boolean boolean48 = timeZone46.hasSameRules(timeZone47);
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.lang.String str50 = locale49.getDisplayName();
        java.lang.String str51 = locale49.getDisplayCountry();
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone47, locale49);
        java.util.Locale.setDefault(category45, locale49);
        java.util.Locale locale54 = java.util.Locale.getDefault(category45);
        java.util.Locale.Builder builder55 = builder44.setLocale(locale54);
        java.util.Locale.setDefault(category28, locale54);
        boolean boolean57 = locale54.hasExtensions();
        java.util.Locale.Builder builder58 = builder25.setLocale(locale54);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder61 = builder58.setExtension('a', "4:53:00 AM GMT+00:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 4:53:00 AM GMT+00:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Fri Feb 11 09:44:03 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Feb 11 09:35:03 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category28.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "en-GB" + "'", str35, "en-GB");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + category45 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category45.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "German" + "'", str50, "German");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1644572643665,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=765,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder58);
    }

    @Test
    public void test20357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20357");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.stream.Stream<java.lang.String> strStream7 = strList2.stream();
        int int8 = strList2.size();
        java.util.Calendar.Builder builder9 = new java.util.Calendar.Builder();
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getLanguage();
        boolean boolean12 = locale10.hasExtensions();
        java.lang.String str13 = locale10.getDisplayCountry();
        java.util.Calendar.Builder builder14 = builder9.setLocale(locale10);
        java.util.Calendar.Builder builder18 = builder9.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale21 = new java.util.Locale("java.text.ParsePosition[index=100,errorIndex=-1]", "Jan 10, 4630 12:00:00 AM");
        java.lang.String str22 = locale21.toLanguageTag();
        java.util.Calendar.Builder builder23 = builder18.setLocale(locale21);
        int int24 = strList2.indexOf((java.lang.Object) builder18);
        java.util.Iterator<java.lang.String> strItor25 = strList2.iterator();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strStream7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zh" + "'", str11, "zh");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals(locale21.toString(), "java.text.parseposition[index=100,errorindex=-1]_JAN 10, 4630 12:00:00 AM");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "und" + "'", str22, "und");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(strItor25);
    }

    @Test
    public void test20358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20358");
        java.util.Date date1 = new java.util.Date(1644485795885L);
        java.lang.String str2 = date1.toString();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Feb 10 09:36:35 GMT+00:00 2022");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Thu Feb 10 09:36:35 GMT+00:00 2022" + "'", str2, "Thu Feb 10 09:36:35 GMT+00:00 2022");
    }

    @Test
    public void test20359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20359");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.lang.String str10 = locale7.getDisplayVariant(locale9);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale7);
        java.util.Locale locale12 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.lang.String str18 = locale16.getDisplayLanguage();
        java.lang.String str20 = locale16.getUnicodeLocaleType("zh");
        java.lang.String str21 = locale12.getDisplayScript(locale16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone6, locale16);
        java.util.TimeZone timeZone23 = fastDateFormat22.getTimeZone();
        java.lang.String[] strArray29 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.util.stream.Stream<java.lang.String> strStream32 = strList30.stream();
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        int int34 = strList30.lastIndexOf((java.lang.Object) locale33);
        java.util.stream.Stream<java.lang.String> strStream35 = strList30.stream();
        java.lang.String[] strArray37 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.stream.Stream<java.lang.String> strStream40 = strList38.stream();
        strList38.clear();
        java.util.Spliterator<java.lang.String> strSpliterator42 = strList38.spliterator();
        int int43 = strList30.lastIndexOf((java.lang.Object) strSpliterator42);
        java.util.TimeZone timeZone45 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat46 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone45);
        java.lang.String str47 = fastDateFormat46.getPattern();
        boolean boolean48 = strList30.contains((java.lang.Object) str47);
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone50 = java.util.TimeZone.getDefault();
        boolean boolean51 = timeZone49.hasSameRules(timeZone50);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.util.Calendar calendar53 = java.util.Calendar.getInstance(timeZone50, locale52);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone56 = java.util.TimeZone.getDefault();
        boolean boolean57 = timeZone55.hasSameRules(timeZone56);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat58 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone56);
        timeZone56.setRawOffset(3);
        java.util.TimeZone timeZone62 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat63 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone62);
        java.lang.String str64 = fastDateFormat63.getPattern();
        java.util.TimeZone timeZone65 = fastDateFormat63.getTimeZone();
        boolean boolean66 = timeZone56.hasSameRules(timeZone65);
        boolean boolean67 = timeZone50.hasSameRules(timeZone65);
        java.util.TimeZone.setDefault(timeZone65);
        boolean boolean69 = strList30.contains((java.lang.Object) timeZone65);
        int int71 = timeZone65.getOffset(1644485708862L);
        boolean boolean72 = fastDateFormat22.equals((java.lang.Object) 1644485708862L);
        java.text.ParsePosition parsePosition75 = new java.text.ParsePosition(16);
        int int76 = parsePosition75.getErrorIndex();
        java.util.TimeZone timeZone78 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat79 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone78);
        java.lang.String str80 = fastDateFormat79.getPattern();
        boolean boolean81 = parsePosition75.equals((java.lang.Object) fastDateFormat79);
        int int82 = parsePosition75.getErrorIndex();
        java.lang.Object obj83 = fastDateFormat22.parseObject("9:34:55 AM UTC", parsePosition75);
        parsePosition75.setErrorIndex(19);
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str5, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zh" + "'", str8, "zh");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644572643717,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=817,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1644572643717,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=817,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strStream32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(strStream35);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strStream40);
        org.junit.Assert.assertNotNull(strSpliterator42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1644572643717,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=817,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(fastDateFormat58);
        org.junit.Assert.assertNotNull(fastDateFormat63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "h:mm:ss a z" + "'", str64, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "h:mm:ss a z" + "'", str80, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNull(obj83);
    }

    @Test
    public void test20360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20360");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("9:34:37 AM UTC");
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229\u6587");
        boolean boolean5 = timeZone2.hasSameRules(timeZone4);
        int int6 = timeZone2.getRawOffset();
        java.util.Calendar.Builder builder7 = new java.util.Calendar.Builder();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        boolean boolean10 = locale8.hasExtensions();
        java.lang.String str11 = locale8.getDisplayCountry();
        java.util.Calendar.Builder builder12 = builder7.setLocale(locale8);
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category13, locale14);
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category13, locale16);
        java.lang.String str18 = locale16.toLanguageTag();
        java.util.Calendar.Builder builder19 = builder7.setLocale(locale16);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition(16);
        int int28 = parsePosition27.getErrorIndex();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        boolean boolean31 = parsePosition27.equals((java.lang.Object) locale29);
        java.lang.String str32 = locale29.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22, locale29);
        int int34 = timeZone22.getRawOffset();
        java.util.Calendar.Builder builder35 = builder19.setTimeZone(timeZone22);
        java.util.Calendar calendar36 = builder19.build();
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = locale37.getLanguage();
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.lang.String str40 = locale37.getDisplayVariant(locale39);
        java.util.Locale locale41 = java.util.Locale.GERMANY;
        java.lang.String str42 = locale37.getDisplayVariant(locale41);
        java.util.Locale locale43 = java.util.Locale.PRC;
        java.lang.String str44 = locale41.getDisplayScript(locale43);
        java.util.Locale locale45 = locale41.stripExtensions();
        boolean boolean46 = calendar36.before((java.lang.Object) locale41);
        boolean boolean47 = locale41.hasExtensions();
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        java.util.Locale locale51 = java.util.Locale.ROOT;
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(timeZone49, locale51);
        java.lang.String str53 = locale51.getDisplayLanguage();
        java.lang.String str55 = locale51.getUnicodeLocaleType("zh");
        java.util.Locale locale56 = locale51.stripExtensions();
        java.util.TimeZone timeZone57 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone58 = java.util.TimeZone.getDefault();
        boolean boolean59 = timeZone57.hasSameRules(timeZone58);
        java.util.Locale locale60 = java.util.Locale.ROOT;
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(timeZone58, locale60);
        java.lang.String str63 = locale60.getExtension('a');
        java.lang.String str64 = locale56.getDisplayName(locale60);
        java.util.Locale locale65 = locale56.stripExtensions();
        java.lang.String str66 = locale41.getDisplayVariant(locale56);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat67 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(120, timeZone2, locale56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal date style 120");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh" + "'", str9, "zh");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "en-GB" + "'", str18, "en-GB");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1644572643755,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=855,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Korean" + "'", str32, "Korean");
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zh" + "'", str38, "zh");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1644572643755,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=855,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone58);
        org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertNotNull(calendar61);
// flaky:         org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=1644572643755,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=855,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
    }

    @Test
    public void test20361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20361");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder5 = builder0.addUnicodeLocaleAttribute("Deutsch");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = builder5.clear();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale locale9 = builder7.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
    }

    @Test
    public void test20362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20362");
        long long6 = java.util.Date.UTC(42, (int) (byte) 1, 9, 44, 20, 28);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-880083572000L) + "'", long6 == (-880083572000L));
    }

    @Test
    public void test20363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20363");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.lang.String str1 = attribute0.toString();
        java.lang.String str2 = attribute0.toString();
        java.util.Calendar.Builder builder3 = new java.util.Calendar.Builder();
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.lang.String str5 = locale4.getLanguage();
        boolean boolean6 = locale4.hasExtensions();
        java.lang.String str7 = locale4.getDisplayCountry();
        java.util.Calendar.Builder builder8 = builder3.setLocale(locale4);
        boolean boolean9 = attribute0.equals((java.lang.Object) builder8);
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        boolean boolean13 = locale11.hasExtensions();
        java.lang.String str14 = locale11.getDisplayCountry();
        java.util.Calendar.Builder builder15 = builder10.setLocale(locale11);
        java.util.Date date17 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder18 = builder15.setInstant(date17);
        java.util.Calendar.Builder builder22 = builder18.setWeekDate((int) (short) -1, (int) '4', 35);
        int[] intArray23 = new int[] {};
        java.util.Calendar.Builder builder24 = builder22.setFields(intArray23);
        java.util.Calendar.Builder builder25 = builder8.setFields(intArray23);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        boolean boolean29 = timeZone27.hasSameRules(timeZone28);
        boolean boolean30 = timeZone26.hasSameRules(timeZone28);
        java.util.TimeZone timeZone32 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone33 = java.util.TimeZone.getDefault();
        boolean boolean34 = timeZone32.hasSameRules(timeZone33);
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone33, locale35);
        java.text.ParsePosition parsePosition38 = new java.text.ParsePosition(16);
        int int39 = parsePosition38.getErrorIndex();
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet41 = locale40.getExtensionKeys();
        boolean boolean42 = parsePosition38.equals((java.lang.Object) locale40);
        java.lang.String str43 = locale40.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone33, locale40);
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        timeZone45.setRawOffset((-1));
        boolean boolean48 = timeZone33.hasSameRules(timeZone45);
        java.util.TimeZone timeZone49 = null;
        boolean boolean50 = timeZone45.hasSameRules(timeZone49);
        int int51 = timeZone45.getRawOffset();
        boolean boolean52 = timeZone26.hasSameRules(timeZone45);
        java.lang.String str53 = timeZone45.getID();
        java.util.Calendar.Builder builder54 = builder25.setTimeZone(timeZone45);
        // The following exception was thrown during execution in test generation
        try {
            int int61 = timeZone45.getOffset(121, (int) (short) -1, 54, 365, (int) (byte) 100, 47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(input_method_segment)" + "'", str1, "java.text.AttributedCharacterIterator$Attribute(input_method_segment)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(input_method_segment)" + "'", str2, "java.text.AttributedCharacterIterator$Attribute(input_method_segment)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh" + "'", str5, "zh");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh" + "'", str12, "zh");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals(date17.toString(), "Tue Jan 11 09:34:31 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1644572643816,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=916,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Korean" + "'", str43, "Korean");
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Chinesisch" + "'", str53, "Chinesisch");
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test20364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20364");
        java.util.Locale locale2 = new java.util.Locale("4:45:01 AM GMT+00:00", "");
        org.junit.Assert.assertEquals(locale2.toString(), "4:45:01 am gmt+00:00");
    }

    @Test
    public void test20365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20365");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getFirstDayOfWeek();
        calendar1.setLenient(false);
        calendar1.set(3, 10, 1200000);
        int int10 = calendar1.getMaximum(13);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.setWeekDate(63, 2, 66697);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 66697");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=3,MONTH=10,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=1200000,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=960,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
    }

    @Test
    public void test20366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20366");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        strList2.clear();
        java.lang.String[] strArray7 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.stream.Stream<java.lang.String> strStream10 = strList8.stream();
        boolean boolean11 = strList2.containsAll((java.util.Collection<java.lang.String>) strList8);
        java.util.Spliterator<java.lang.String> strSpliterator12 = strList2.spliterator();
        java.util.stream.Stream<java.lang.String> strStream13 = strList2.stream();
        java.util.Calendar.Builder builder14 = new java.util.Calendar.Builder();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        boolean boolean17 = locale15.hasExtensions();
        java.lang.String str18 = locale15.getDisplayCountry();
        java.util.Calendar.Builder builder19 = builder14.setLocale(locale15);
        java.util.Locale.LanguageRange languageRange21 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] { languageRange21 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getDisplayName();
        java.lang.String str30 = locale28.getDisplayCountry();
        java.util.Calendar calendar31 = java.util.Calendar.getInstance(timeZone26, locale28);
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        java.util.Locale locale33 = java.util.Locale.CHINESE;
        java.lang.String str34 = locale33.getLanguage();
        java.lang.String str35 = locale32.getDisplayLanguage(locale33);
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet37 = locale36.getExtensionKeys();
        java.util.Locale locale39 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale39);
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.util.Locale locale42 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        boolean boolean46 = timeZone44.hasSameRules(timeZone45);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone45);
        java.util.Locale locale48 = fastDateFormat47.getLocale();
        java.util.Locale locale49 = java.util.Locale.FRANCE;
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = locale50.getLanguage();
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str53 = locale50.getDisplayVariant(locale52);
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.lang.String str55 = locale50.getDisplayVariant(locale54);
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.util.Locale locale57 = java.util.Locale.CHINESE;
        java.util.Locale locale58 = java.util.Locale.ENGLISH;
        java.util.Locale locale59 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone62 = java.util.TimeZone.getDefault();
        boolean boolean63 = timeZone61.hasSameRules(timeZone62);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone62);
        java.util.Locale locale65 = fastDateFormat64.getLocale();
        java.util.Locale locale66 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone68 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone69 = java.util.TimeZone.getDefault();
        boolean boolean70 = timeZone68.hasSameRules(timeZone69);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat71 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone69);
        java.util.Locale locale72 = fastDateFormat71.getLocale();
        java.util.Locale locale73 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale74 = java.util.Locale.UK;
        java.util.Locale[] localeArray75 = new java.util.Locale[] { locale28, locale32, locale36, locale39, locale41, locale42, locale48, locale49, locale54, locale56, locale57, locale58, locale59, locale65, locale66, locale72, locale73, locale74 };
        java.util.ArrayList<java.util.Locale> localeList76 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList76, localeArray75);
        java.util.Locale locale78 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList76);
        java.lang.String str79 = locale15.getDisplayName(locale78);
        java.util.Set<java.lang.Character> charSet80 = locale15.getExtensionKeys();
        boolean boolean81 = strList2.remove((java.lang.Object) charSet80);
        boolean boolean83 = strList2.equals((java.lang.Object) 21);
        strList2.clear();
        int int85 = strList2.size();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSpliterator12);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh" + "'", str16, "zh");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "German" + "'", str29, "German");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1644572643873,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=3,MILLISECOND=973,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh" + "'", str34, "zh");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str35, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertNotNull(locale48);
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "zh");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "zh" + "'", str51, "zh");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertNotNull(locale65);
// flaky:         org.junit.Assert.assertEquals(locale65.toString(), "zh");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(fastDateFormat71);
        org.junit.Assert.assertNotNull(locale72);
// flaky:         org.junit.Assert.assertEquals(locale72.toString(), "zh");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "de");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Chinesisch" + "'", str79, "Chinesisch");
        org.junit.Assert.assertNotNull(charSet80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test20367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20367");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale11 = new java.util.Locale("de");
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale11.getCountry();
        java.util.Calendar.Builder builder14 = builder0.setLocale(locale11);
        java.util.Calendar calendar15 = builder14.build();
        calendar15.set(100, 2, 44, (int) (byte) 100, 45, (int) (short) 1);
        boolean boolean23 = calendar15.isWeekDateSupported();
        calendar15.set(0, 292278994, 0);
        calendar15.set((int) (short) 100, 0, 24356589, 292269054, 35);
        java.util.Calendar.Builder builder34 = new java.util.Calendar.Builder();
        java.util.Calendar calendar35 = builder34.build();
        int int36 = calendar35.getWeekYear();
        calendar35.setLenient(true);
        calendar35.set((int) (byte) 0, 56, 100, 2022, (int) '#');
        calendar35.setFirstDayOfWeek(44);
        calendar35.setFirstDayOfWeek((int) (byte) 100);
        java.util.TimeZone timeZone49 = calendar35.getTimeZone();
        calendar15.setTimeZone(timeZone49);
        int int51 = timeZone49.getRawOffset();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone52.hasSameRules(timeZone53);
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.lang.String str56 = locale55.getDisplayName();
        java.lang.String str57 = locale55.getDisplayCountry();
        java.util.Calendar calendar58 = java.util.Calendar.getInstance(timeZone53, locale55);
        int int60 = calendar58.getActualMinimum(2);
        java.util.TimeZone timeZone61 = calendar58.getTimeZone();
        java.util.Calendar.Builder builder62 = new java.util.Calendar.Builder();
        java.util.Locale locale63 = java.util.Locale.CHINESE;
        java.lang.String str64 = locale63.getLanguage();
        boolean boolean65 = locale63.hasExtensions();
        java.lang.String str66 = locale63.getDisplayCountry();
        java.util.Calendar.Builder builder67 = builder62.setLocale(locale63);
        java.util.Calendar.Builder builder71 = builder62.setWeekDate(38, 41, 11);
        java.util.TimeZone timeZone73 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat74 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone73);
        java.lang.String str75 = fastDateFormat74.toString();
        java.lang.String str76 = fastDateFormat74.toString();
        java.util.TimeZone timeZone77 = fastDateFormat74.getTimeZone();
        java.util.Calendar.Builder builder78 = builder71.setTimeZone(timeZone77);
        boolean boolean79 = timeZone61.hasSameRules(timeZone77);
        boolean boolean80 = timeZone49.hasSameRules(timeZone61);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "de" + "'", str12, "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=100,MONTH=0,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=24356589,DAY_OF_YEAR=65,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=292269054,MINUTE=35,SECOND=1,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(calendar35);
        org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=100,minimalDaysInFirstWeek=4,ERA=1,YEAR=0,MONTH=56,WEEK_OF_YEAR=10,WEEK_OF_MONTH=1,DAY_OF_MONTH=100,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=2022,MINUTE=35,SECOND=0,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "German" + "'", str56, "German");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1644572643926,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=26,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "zh" + "'", str64, "zh");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(fastDateFormat74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str75, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str76, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone77);
        org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test20368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20368");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Date date7 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder8 = builder5.setInstant(date7);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate(17, (int) (byte) -1, 49);
        java.util.Calendar.Builder builder15 = builder8.set(4, 59);
        java.util.Calendar.Builder builder19 = builder15.setWeekDate(58, 50, 7200000);
        java.util.TimeZone timeZone21 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone21);
        java.lang.StringBuffer stringBuffer24 = null;
        java.lang.StringBuffer stringBuffer25 = fastDateFormat22.format((long) 32772, stringBuffer24);
        java.util.TimeZone timeZone26 = fastDateFormat22.getTimeZone();
        int int27 = timeZone26.getRawOffset();
        java.util.TimeZone timeZone29 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone29);
        java.lang.String str31 = fastDateFormat30.toString();
        java.lang.String str32 = fastDateFormat30.toString();
        java.util.TimeZone timeZone33 = fastDateFormat30.getTimeZone();
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.lang.String str35 = locale34.getLanguage();
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale34.getDisplayVariant(locale36);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(timeZone33, locale34);
        boolean boolean39 = timeZone26.hasSameRules(timeZone33);
        java.util.Calendar.Builder builder40 = builder15.setTimeZone(timeZone33);
        java.util.Locale locale42 = new java.util.Locale("de");
        java.lang.String str43 = locale42.toLanguageTag();
        java.lang.String str44 = locale42.getCountry();
        java.util.Set<java.lang.String> strSet45 = locale42.getUnicodeLocaleAttributes();
        java.util.Calendar.Builder builder46 = builder40.setLocale(locale42);
        java.lang.String str47 = locale42.getISO3Language();
        java.util.Locale locale50 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale51 = locale50.stripExtensions();
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(locale51);
        boolean boolean53 = locale42.equals((java.lang.Object) calendar52);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals(date7.toString(), "Tue Jan 11 09:34:31 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertNull(stringBuffer25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str31, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str32, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone33);
        org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "zh" + "'", str35, "zh");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1644572643955,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=55,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "de" + "'", str43, "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "deu" + "'", str47, "deu");
        org.junit.Assert.assertEquals(locale50.toString(), "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1644572643955,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=55,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test20369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20369");
        java.util.Date date6 = new java.util.Date((int) (byte) 0, 40, 1970, 34, (int) (byte) 100, (int) 'x');
        java.util.Calendar calendar7 = java.util.Calendar.getInstance();
        calendar7.setMinimalDaysInFirstWeek((int) (short) 10);
        java.util.Date date10 = calendar7.getTime();
        java.util.TimeZone timeZone12 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat13 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone12);
        java.util.Date date14 = new java.util.Date();
        int int15 = date14.getTimezoneOffset();
        int int16 = date14.getSeconds();
        date14.setDate(7);
        java.time.Instant instant19 = date14.toInstant();
        java.util.Date date20 = java.util.Date.from(instant19);
        java.lang.String str21 = date20.toLocaleString();
        java.lang.StringBuffer stringBuffer22 = null;
        java.lang.StringBuffer stringBuffer23 = fastDateFormat13.format(date20, stringBuffer22);
        calendar7.setTime(date20);
        java.util.Date date25 = calendar7.getTime();
        date25.setMinutes(7);
        boolean boolean28 = date6.equals((java.lang.Object) 7);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Sep 21 11:42:00 GMT+00:00 1908");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1644227043983,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=10,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=7,DAY_OF_YEAR=38,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=83,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Fri Feb 11 09:44:04 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(fastDateFormat13);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Mon Feb 07 09:44:04 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Mon Feb 07 09:44:04 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "07-Feb-2022 09:44:04" + "'", str21, "07-Feb-2022 09:44:04");
        org.junit.Assert.assertNull(stringBuffer23);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Mon Feb 07 09:07:04 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test20370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20370");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder8 = builder5.clear();
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder10 = builder8.setLocale(locale9);
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale16.getDisplayName();
        java.lang.String str18 = locale16.getDisplayCountry();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(timeZone14, locale16);
        java.util.Locale.setDefault(category12, locale16);
        java.util.Locale locale21 = java.util.Locale.getDefault(category12);
        java.util.Locale.Builder builder22 = builder11.setLocale(locale21);
        java.util.Locale.setDefault(category0, locale21);
        java.util.Locale locale24 = java.util.Locale.getDefault(category0);
        java.lang.String str25 = locale24.getDisplayLanguage();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str28 = fastDateFormat26.format((long) 100);
        java.lang.Object obj29 = fastDateFormat26.clone();
        boolean boolean30 = fastDateFormat26.getTimeZoneOverridesCalendar();
        java.util.Locale locale31 = fastDateFormat26.getLocale();
        java.lang.String str32 = locale24.getDisplayScript(locale31);
        java.lang.String str33 = locale31.toString();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category12.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "German" + "'", str17, "German");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1644572644008,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=108,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Deutsch" + "'", str25, "Deutsch");
        org.junit.Assert.assertNotNull(fastDateFormat26);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1/1/70 12:00 AM" + "'", str28, "1/1/70 12:00 AM");
        org.junit.Assert.assertNotNull(obj29);
// flaky:         org.junit.Assert.assertEquals(obj29.toString(), "FastDateFormat[M/d/yy h:mm a]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "FastDateFormat[M/d/yy h:mm a]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "FastDateFormat[M/d/yy h:mm a]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "en_GB" + "'", str33, "en_GB");
    }

    @Test
    public void test20371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20371");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, 19750);
    }

    @Test
    public void test20372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20372");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("FastDateFormat[zh]");
        java.util.Locale locale3 = new java.util.Locale("Giappone");
        java.lang.String str4 = locale3.getCountry();
        java.lang.String str5 = locale3.getScript();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.lang.String str7 = locale3.getDisplayScript();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertEquals(locale3.toString(), "giappone");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572644047,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=47,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test20373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20373");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getTimezoneOffset();
        date0.setMonth(0);
        int int4 = date0.getSeconds();
        date0.setTime((long) 'a');
        java.time.Instant instant7 = date0.toInstant();
        date0.setTime(1644572231646L);
        java.lang.String str10 = date0.toLocaleString();
        org.junit.Assert.assertEquals(date0.toString(), "Fri Feb 11 09:37:11 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "11-Feb-2022 09:37:11" + "'", str10, "11-Feb-2022 09:37:11");
    }

    @Test
    public void test20374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20374");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat0 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.util.TimeZone timeZone1 = fastDateFormat0.getTimeZone();
        java.lang.String str2 = timeZone1.getDisplayName();
        org.junit.Assert.assertNotNull(fastDateFormat0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT+00:00" + "'", str2, "GMT+00:00");
    }

    @Test
    public void test20375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20375");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate(38, 41, 11);
        java.util.Locale locale12 = new java.util.Locale("java.text.ParsePosition[index=100,errorIndex=-1]", "Jan 10, 4630 12:00:00 AM");
        java.util.Calendar.Builder builder13 = builder9.setLocale(locale12);
        java.util.Calendar.Builder builder17 = builder13.setTimeOfDay(4, 100, (int) (short) 0);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("coreano");
        java.util.Calendar.Builder builder20 = builder13.setLocale(locale19);
        java.util.Calendar.Builder builder24 = builder20.setDate(1200000, 37, 20);
        java.util.Date date28 = new java.util.Date(15, 122, 16);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder29 = builder24.setInstant(date28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale12.toString(), "java.text.parseposition[index=100,errorindex=-1]_JAN 10, 4630 12:00:00 AM");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "coreano");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals(date28.toString(), "Mon Mar 16 00:00:00 GMT+00:00 1925");
    }

    @Test
    public void test20376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20376");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getWeeksInWeekYear();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        boolean boolean6 = timeZone2.hasSameRules(timeZone4);
        calendar0.setTimeZone(timeZone2);
        calendar0.set((int) (byte) 100, (int) (byte) 1, 0, 6, (-1));
        calendar0.set(35, (int) (short) 1, 97, (int) ' ', 8);
        calendar0.setMinimalDaysInFirstWeek(55);
        calendar0.setFirstDayOfWeek((-405));
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder24.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder27 = builder24.clear();
        java.util.Locale.Builder builder29 = builder24.addUnicodeLocaleAttribute("Deutsch");
        java.util.Locale.Builder builder30 = builder29.clear();
        java.util.Locale.Builder builder31 = builder30.clear();
        boolean boolean32 = calendar0.after((java.lang.Object) builder31);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-405,minimalDaysInFirstWeek=55,ERA=1,YEAR=35,MONTH=1,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=97,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=32,MINUTE=8,SECOND=4,MILLISECOND=200,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 52 + "'", int1 == 52);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test20377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20377");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"\u5e74\u6708\u65e5\",offset=2,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=42,minimalDaysInFirstWeek=4,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test20378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20378");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.time.Instant instant5 = calendar4.toInstant();
        java.util.Date date6 = java.util.Date.from(instant5);
        int int7 = date6.getSeconds();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone9);
        java.lang.String str11 = fastDateFormat10.toString();
        java.lang.String str12 = fastDateFormat10.toString();
        java.util.TimeZone timeZone13 = fastDateFormat10.getTimeZone();
        java.util.Locale locale14 = fastDateFormat10.getLocale();
        boolean boolean15 = fastDateFormat10.getTimeZoneOverridesCalendar();
        java.lang.String str16 = fastDateFormat10.getPattern();
        java.lang.String str17 = fastDateFormat10.toString();
        java.lang.Object obj18 = fastDateFormat10.clone();
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale19);
        java.time.Instant instant21 = calendar20.toInstant();
        java.time.Instant instant22 = calendar20.toInstant();
        java.time.Instant instant23 = calendar20.toInstant();
        java.lang.String str24 = fastDateFormat10.format(calendar20);
        calendar20.set(32, 24, 166, 4, 34, 48);
        java.util.Date date32 = calendar20.getTime();
        int int33 = date32.getSeconds();
        int int34 = date6.compareTo(date32);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572644126,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=226,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Feb 11 09:44:04 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str11, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str12, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "h:mm:ss a z" + "'", str16, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str17, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-61080117911874,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=34,MONTH=5,WEEK_OF_YEAR=25,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=166,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=34,SECOND=48,MILLISECOND=226,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(instant23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "9:44:04 AM GMT+00:00" + "'", str24, "9:44:04 AM GMT+00:00");
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Tue Jun 15 04:34:48 GMT+00:00 34");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 48 + "'", int33 == 48);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
    }

    @Test
    public void test20379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20379");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(0);
        java.lang.String str2 = parsePosition1.toString();
        parsePosition1.setIndex(102);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.ParsePosition[index=0,errorIndex=-1]" + "'", str2, "java.text.ParsePosition[index=0,errorIndex=-1]");
    }

    @Test
    public void test20380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20380");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str1 = attribute0.toString();
        java.util.Date date2 = new java.util.Date();
        int int3 = date2.getTimezoneOffset();
        long long4 = date2.getTime();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getSeconds();
        long long7 = date5.getTime();
        date5.setTime((long) ' ');
        int int10 = date5.getTimezoneOffset();
        boolean boolean11 = date2.before(date5);
        boolean boolean12 = attribute0.equals((java.lang.Object) date2);
        java.util.Date date18 = new java.util.Date(9, (int) 'x', (int) '#', 2, 7);
        int int19 = date18.getTimezoneOffset();
        date18.setYear(1970);
        date18.setSeconds(0);
        int int24 = date18.getSeconds();
        boolean boolean25 = attribute0.equals((java.lang.Object) int24);
        java.util.Locale locale27 = java.util.Locale.ROOT;
        boolean boolean28 = locale27.hasExtensions();
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale27);
        java.util.Set<java.lang.String> strSet31 = locale27.getUnicodeLocaleAttributes();
        java.lang.String str32 = locale27.getDisplayLanguage();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(locale27);
        calendar33.clear();
        java.util.Calendar.Builder builder35 = new java.util.Calendar.Builder();
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        boolean boolean38 = locale36.hasExtensions();
        java.lang.String str39 = locale36.getDisplayCountry();
        java.util.Calendar.Builder builder40 = builder35.setLocale(locale36);
        java.util.Calendar.Builder builder44 = builder35.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder46 = builder35.setLenient(false);
        java.util.Calendar.Builder builder50 = builder35.setTimeOfDay(15, 0, 32770);
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("04.02.1919 02:07:00");
        java.lang.String str53 = locale52.getDisplayName();
        java.util.Calendar.Builder builder54 = builder50.setLocale(locale52);
        boolean boolean55 = calendar33.after((java.lang.Object) locale52);
        boolean boolean56 = attribute0.equals((java.lang.Object) calendar33);
        calendar33.roll(32772, 0);
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str1, "java.text.AttributedCharacterIterator$Attribute(language)");
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Fri Feb 11 09:44:04 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1644572644165L + "'", long4 == 1644572644165L);
        org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1644572644165L + "'", long7 == 1644572644165L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals(date18.toString(), "Fri Feb 04 02:07:00 GMT+00:00 3870");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(calendar33);
        org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "zh" + "'", str37, "zh");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test20381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20381");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(16);
        int int8 = parsePosition7.getErrorIndex();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet10 = locale9.getExtensionKeys();
        boolean boolean11 = parsePosition7.equals((java.lang.Object) locale9);
        java.lang.Object obj12 = fastDateFormat2.parseObject("FastDateFormat[h:mm:ss a z]", parsePosition7);
        java.lang.String str13 = fastDateFormat2.toString();
        java.lang.String str14 = fastDateFormat2.toString();
        java.util.TimeZone timeZone15 = fastDateFormat2.getTimeZone();
        java.text.ParsePosition parsePosition18 = new java.text.ParsePosition(45);
        int int19 = parsePosition18.getIndex();
        parsePosition18.setIndex((-99));
        int int22 = parsePosition18.getErrorIndex();
        parsePosition18.setErrorIndex((-1893));
        java.lang.Object obj25 = fastDateFormat2.parseObject("11 Feb 2022 09:38:12 GMT", parsePosition18);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str13, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str14, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 45 + "'", int19 == 45);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test20382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20382");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        java.util.Locale locale7 = fastDateFormat3.getLocale();
        java.util.TimeZone timeZone8 = fastDateFormat3.getTimeZone();
        java.util.Locale locale11 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String[] strArray14 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.stream.Stream<java.lang.String> strStream17 = strList15.stream();
        boolean boolean19 = strList15.add("hi!");
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = locale20.getLanguage();
        java.util.Locale locale22 = java.util.Locale.GERMAN;
        java.lang.String str23 = locale20.getDisplayVariant(locale22);
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.lang.String str25 = locale20.getDisplayVariant(locale24);
        boolean boolean26 = strList15.contains((java.lang.Object) locale20);
        java.lang.String str27 = locale20.getVariant();
        boolean boolean28 = locale20.hasExtensions();
        java.lang.String str29 = locale12.getDisplayCountry(locale20);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat30 = org.apache.commons.lang3.time.FastDateFormat.getInstance("d. MMMM yyyy", timeZone8, locale12);
        java.lang.String str31 = locale12.getDisplayScript();
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str5, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals(locale11.toString(), "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strStream17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh" + "'", str21, "zh");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "TUE JAN 11 09:34:31 UTC 2022" + "'", str29, "TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(fastDateFormat30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test20383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20383");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone("Feb 7, 2022 9:35:05 AM");
        int int3 = timeZone2.getRawOffset();
        timeZone2.setRawOffset(43);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"9:36:03 AM GMT+00:00\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=46,ERA=1,YEAR=2022,MONTH=97,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=8,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=18,MILLISECOND=62,ZONE_OFFSET=100,DST_OFFSET=0]", timeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: j");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test20384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20384");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("java.util.GregorianCalendar[time=1644572255340,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"francese (Francia)\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=35,MILLISECOND=380,ZONE_OFFSET=40,DST_OFFSET=0]", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.util.gregoriancalendar[time=1644572255340");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test20385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20385");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set(14, 2022);
        calendar1.clear();
        calendar1.roll(0, false);
        calendar1.set(1970, 1910, 5);
        java.util.TimeZone timeZone13 = calendar1.getTimeZone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1970,MONTH=1910,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=5,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test20386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20386");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getWeeksInWeekYear();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone3.hasSameRules(timeZone4);
        boolean boolean6 = timeZone2.hasSameRules(timeZone4);
        calendar0.setTimeZone(timeZone2);
        calendar0.set((int) (byte) 100, (int) (byte) 1, 0, 6, (-1));
        java.util.Date date14 = calendar0.getTime();
        date14.setHours(40);
        date14.setMonth(27);
        int int19 = date14.getDate();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-59009018455732,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=100,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=59,SECOND=4,MILLISECOND=368,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 52 + "'", int1 == 52);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Mon May 02 16:59:04 GMT+00:00 102");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
    }

    @Test
    public void test20387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20387");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        int int2 = calendar1.getWeekYear();
        calendar1.add(0, (int) (short) -1);
        java.time.Instant instant6 = calendar1.toInstant();
        boolean boolean7 = calendar1.isWeekDateSupported();
        calendar1.set(36, 120, (-99), 52, 40, (int) 'u');
        boolean boolean15 = calendar1.isWeekDateSupported();
        calendar1.roll(11, 122);
        calendar1.set((-99), 102, 66697);
        int int23 = calendar1.getWeeksInWeekYear();
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=-99,MONTH=102,WEEK_OF_YEAR=39,WEEK_OF_MONTH=4,DAY_OF_MONTH=66697,DAY_OF_YEAR=268,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=6,HOUR_OF_DAY=6,MINUTE=41,SECOND=57,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1970 + "'", int2 == 1970);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
    }

    @Test
    public void test20388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20388");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getWeeksInWeekYear();
        java.time.Instant instant2 = calendar0.toInstant();
        boolean boolean3 = calendar0.isWeekDateSupported();
        calendar0.setTimeInMillis(1644572085058L);
        boolean boolean7 = calendar0.before((java.lang.Object) "German");
        // The following exception was thrown during execution in test generation
        try {
            int int9 = calendar0.getLeastMaximum((-99));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -99");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572085058,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=45,MILLISECOND=158,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 52 + "'", int1 == 52);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test20389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20389");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        timeZone1.setRawOffset(40);
        boolean boolean7 = timeZone1.observesDaylightTime();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.util.TimeZone.setDefault(timeZone1);
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = locale10.getLanguage();
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str13 = locale10.getDisplayScript(locale12);
        java.util.Locale locale14 = locale12.stripExtensions();
        java.lang.String str15 = locale14.getDisplayVariant();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone1, locale14);
        boolean boolean17 = timeZone1.observesDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572644302,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=402,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "zh" + "'", str11, "zh");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644572644303,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=343,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test20390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20390");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        java.util.Locale locale7 = fastDateFormat3.getLocale();
        boolean boolean8 = fastDateFormat3.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone9 = fastDateFormat3.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1, timeZone9);
        java.util.Date date12 = new java.util.Date((long) 2);
        java.lang.String str13 = fastDateFormat10.format(date12);
        java.lang.String str14 = fastDateFormat10.getPattern();
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str5, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "01 January 1970" + "'", str13, "01 January 1970");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "dd MMMM yyyy" + "'", str14, "dd MMMM yyyy");
    }

    @Test
    public void test20391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20391");
        java.util.Date date1 = new java.util.Date(1644572446303L);
        org.junit.Assert.assertEquals(date1.toString(), "Fri Feb 11 09:40:46 GMT+00:00 2022");
    }

    @Test
    public void test20392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20392");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.LANGUAGE;
        java.lang.String str1 = attribute0.toString();
        java.lang.String str2 = attribute0.toString();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str5 = fastDateFormat3.format((long) 100);
        boolean boolean6 = attribute0.equals((java.lang.Object) str5);
        java.util.TimeZone timeZone8 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone8);
        java.lang.String str10 = fastDateFormat9.getPattern();
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition(16);
        java.util.Date date14 = new java.util.Date();
        int int15 = date14.getDay();
        java.util.Date date16 = new java.util.Date();
        date16.setMinutes((int) '#');
        boolean boolean19 = date14.before(date16);
        boolean boolean20 = parsePosition13.equals((java.lang.Object) boolean19);
        java.lang.Object obj21 = fastDateFormat9.parseObject("eng", parsePosition13);
        boolean boolean22 = fastDateFormat9.getTimeZoneOverridesCalendar();
        boolean boolean23 = attribute0.equals((java.lang.Object) fastDateFormat9);
        java.lang.String str24 = attribute0.toString();
        java.util.Date date25 = new java.util.Date();
        int int26 = date25.getTimezoneOffset();
        long long27 = date25.getTime();
        date25.setDate((int) (byte) 10);
        long long30 = date25.getTime();
        boolean boolean31 = attribute0.equals((java.lang.Object) long30);
        java.lang.String str32 = attribute0.toString();
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        boolean boolean36 = timeZone34.hasSameRules(timeZone35);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone35);
        java.util.Locale locale38 = fastDateFormat37.getLocale();
        java.lang.String str39 = fastDateFormat37.toString();
        java.text.ParsePosition parsePosition42 = new java.text.ParsePosition(16);
        int int43 = parsePosition42.getErrorIndex();
        java.lang.Object obj44 = fastDateFormat37.parseObject("Vereinigtes K\366nigreich", parsePosition42);
        java.lang.String[] strArray46 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        java.util.stream.Stream<java.lang.String> strStream49 = strList47.stream();
        boolean boolean51 = strList47.add("hi!");
        java.util.Locale locale52 = java.util.Locale.CHINESE;
        java.lang.String str53 = locale52.getLanguage();
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.lang.String str55 = locale52.getDisplayVariant(locale54);
        java.util.Locale locale56 = java.util.Locale.GERMANY;
        java.lang.String str57 = locale52.getDisplayVariant(locale56);
        boolean boolean58 = strList47.contains((java.lang.Object) locale52);
        boolean boolean59 = parsePosition42.equals((java.lang.Object) strList47);
        java.util.Iterator<java.lang.String> strItor60 = strList47.iterator();
        boolean boolean61 = attribute0.equals((java.lang.Object) strItor60);
        java.util.Locale locale64 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale65 = locale64.stripExtensions();
        java.util.Locale locale66 = locale64.stripExtensions();
        boolean boolean67 = attribute0.equals((java.lang.Object) locale64);
        java.util.Calendar calendar68 = java.util.Calendar.getInstance(locale64);
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str1, "java.text.AttributedCharacterIterator$Attribute(language)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str2, "java.text.AttributedCharacterIterator$Attribute(language)");
        org.junit.Assert.assertNotNull(fastDateFormat3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1/1/70 12:00 AM" + "'", str5, "1/1/70 12:00 AM");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "h:mm:ss a z" + "'", str10, "h:mm:ss a z");
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Fri Feb 11 09:44:04 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Fri Feb 11 09:35:04 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str24, "java.text.AttributedCharacterIterator$Attribute(language)");
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Thu Feb 10 09:44:04 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1644572644383L + "'", long27 == 1644572644383L);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1644486244383L + "'", long30 == 1644486244383L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.text.AttributedCharacterIterator$Attribute(language)" + "'", str32, "java.text.AttributedCharacterIterator$Attribute(language)");
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertNotNull(locale38);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "FastDateFormat[HH:mm' Uhr 'z]" + "'", str39, "FastDateFormat[HH:mm' Uhr 'z]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strStream49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "zh" + "'", str53, "zh");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strItor60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals(locale64.toString(), "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(calendar68);
// flaky:         org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=1644572644383,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=423,ZONE_OFFSET=40,DST_OFFSET=0]");
    }

    @Test
    public void test20393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20393");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("11 Feb 2022 09:35:10 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=11 feb 2022 09:35:10 gmt");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test20394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20394");
        java.util.Date date5 = new java.util.Date(56, 97, 32768, 0, 36);
        org.junit.Assert.assertEquals(date5.toString(), "Sat Oct 18 00:36:00 GMT+00:00 2053");
    }

    @Test
    public void test20395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20395");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("tedesco");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.parse("CAN", strMap5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList6, strMap7);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.parse("tedesco");
        java.util.Locale.LanguageRange languageRange12 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] { languageRange12 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale19.getDisplayName();
        java.lang.String str21 = locale19.getDisplayCountry();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone17, locale19);
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = locale24.getLanguage();
        java.lang.String str26 = locale23.getDisplayLanguage(locale24);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet28 = locale27.getExtensionKeys();
        java.util.Locale locale30 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat31 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale30);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.util.Locale locale33 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone35 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        boolean boolean37 = timeZone35.hasSameRules(timeZone36);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat38 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone36);
        java.util.Locale locale39 = fastDateFormat38.getLocale();
        java.util.Locale locale40 = java.util.Locale.FRANCE;
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = locale41.getLanguage();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale41.getDisplayVariant(locale43);
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        java.lang.String str46 = locale41.getDisplayVariant(locale45);
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.util.Locale locale50 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone53 = java.util.TimeZone.getDefault();
        boolean boolean54 = timeZone52.hasSameRules(timeZone53);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat55 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone53);
        java.util.Locale locale56 = fastDateFormat55.getLocale();
        java.util.Locale locale57 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone59 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        boolean boolean61 = timeZone59.hasSameRules(timeZone60);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat62 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone60);
        java.util.Locale locale63 = fastDateFormat62.getLocale();
        java.util.Locale locale64 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale65 = java.util.Locale.UK;
        java.util.Locale[] localeArray66 = new java.util.Locale[] { locale19, locale23, locale27, locale30, locale32, locale33, locale39, locale40, locale45, locale47, locale48, locale49, locale50, locale56, locale57, locale63, locale64, locale65 };
        java.util.ArrayList<java.util.Locale> localeList67 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList67, localeArray66);
        java.util.Locale locale69 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.Locale locale70 = java.util.Locale.lookup(languageRangeList10, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.List<java.util.Locale> localeList71 = java.util.Locale.filter(languageRangeList6, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter(languageRangeList3, (java.util.Collection<java.util.Locale>) localeList67);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Deutsch" + "'", str20, "Deutsch");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1644572644457,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=497,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh" + "'", str25, "zh");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str26, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(fastDateFormat38);
        org.junit.Assert.assertNotNull(locale39);
// flaky:         org.junit.Assert.assertEquals(locale39.toString(), "de");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zh" + "'", str42, "zh");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(fastDateFormat55);
        org.junit.Assert.assertNotNull(locale56);
// flaky:         org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(fastDateFormat62);
        org.junit.Assert.assertNotNull(locale63);
// flaky:         org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de");
        org.junit.Assert.assertNull(locale70);
        org.junit.Assert.assertNotNull(localeList71);
        org.junit.Assert.assertNotNull(localeList72);
    }

    @Test
    public void test20396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20396");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, 37);
        java.lang.String str3 = fieldPosition2.toString();
        int int4 = fieldPosition2.getField();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=37,attribute=null,beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=37,attribute=null,beginIndex=0,endIndex=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 37 + "'", int4 == 37);
    }

    @Test
    public void test20397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20397");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone2);
        java.lang.StringBuffer stringBuffer5 = null;
        java.lang.StringBuffer stringBuffer6 = fastDateFormat3.format((long) 32772, stringBuffer5);
        java.util.TimeZone timeZone7 = fastDateFormat3.getTimeZone();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat8 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance((int) (short) 1, timeZone7);
        java.util.Calendar.Builder builder9 = new java.util.Calendar.Builder();
        java.util.Calendar calendar10 = builder9.build();
        int int11 = calendar10.getWeekYear();
        calendar10.setLenient(true);
        java.lang.String str14 = fastDateFormat8.format(calendar10);
        calendar10.setFirstDayOfWeek(30);
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertNull(stringBuffer6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(fastDateFormat8);
        org.junit.Assert.assertNotNull(calendar10);
        org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=-40,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=30,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "01 January 1970" + "'", str14, "01 January 1970");
    }

    @Test
    public void test20398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20398");
        java.util.Date date3 = new java.util.Date(40, 32, 41);
        java.util.Date date9 = new java.util.Date(21, 22, 1910, (int) (byte) 0, 16);
        boolean boolean10 = date3.before(date9);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone14 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat15 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone14);
        java.lang.String str16 = fastDateFormat15.toString();
        java.lang.String str17 = fastDateFormat15.toString();
        java.util.TimeZone timeZone18 = fastDateFormat15.getTimeZone();
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale19.getDisplayVariant(locale21);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone18, locale19);
        boolean boolean24 = calendar23.isWeekDateSupported();
        calendar23.set(7, 4, 0);
        java.util.Date date29 = calendar23.getTime();
        java.lang.String str30 = fastDateFormat12.format(calendar23);
        java.util.TimeZone timeZone31 = fastDateFormat12.getTimeZone();
        java.lang.Object obj32 = null;
        boolean boolean33 = fastDateFormat12.equals(obj32);
        java.util.Calendar calendar34 = java.util.Calendar.getInstance();
        int int35 = calendar34.getWeeksInWeekYear();
        java.time.Instant instant36 = calendar34.toInstant();
        int int38 = calendar34.getMinimum(4);
        java.lang.String str39 = fastDateFormat12.format(calendar34);
        java.util.Date date46 = new java.util.Date(45, (int) (byte) 100, (int) '#', 50, 100, 36);
        calendar34.setTime(date46);
        java.util.TimeZone timeZone48 = calendar34.getTimeZone();
        calendar34.clear();
        calendar34.clear();
        java.util.Date date52 = new java.util.Date(857876580001L);
        int int53 = date52.getDay();
        java.util.Date date59 = new java.util.Date(11, (int) 'a', 0, 2, (int) (short) -1);
        boolean boolean60 = date52.before(date59);
        calendar34.setTime(date59);
        date59.setSeconds(1);
        boolean boolean64 = date3.before(date59);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Oct 11 00:00:00 GMT+00:00 1942");
        org.junit.Assert.assertEquals(date9.toString(), "Mon Jan 23 00:16:00 GMT+00:00 1928");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNotNull(fastDateFormat15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str16, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str17, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh" + "'", str20, "zh");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=-61936150555442,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=658,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Sat Apr 30 09:44:04 GMT+00:00 7");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "30 April 0007" + "'", str30, "30 April 0007");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(calendar34);
        org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=-1606860060040,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1919,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=59,SECOND=0,MILLISECOND=0,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 52 + "'", int35 == 52);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "11 February 2022" + "'", str39, "11 February 2022");
        org.junit.Assert.assertEquals(date46.toString(), "Sat Jun 06 03:40:36 GMT+00:00 1953");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals(date52.toString(), "Sun Mar 09 03:03:00 GMT+00:00 1997");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertEquals(date59.toString(), "Fri Jan 31 01:59:01 GMT+00:00 1919");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test20399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20399");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Deutsch");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.parse("cina", strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.parse("eng", strMap6);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList9 = java.util.Locale.LanguageRange.parse("zh");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.parse("eng", strMap11);
        java.util.Locale.LanguageRange languageRange14 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] { languageRange14 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        boolean boolean20 = timeZone18.hasSameRules(timeZone19);
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.lang.String str23 = locale21.getDisplayCountry();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone19, locale21);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        java.lang.String str27 = locale26.getLanguage();
        java.lang.String str28 = locale25.getDisplayLanguage(locale26);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        java.util.Locale locale32 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale32);
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.util.Locale locale35 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone38 = java.util.TimeZone.getDefault();
        boolean boolean39 = timeZone37.hasSameRules(timeZone38);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone38);
        java.util.Locale locale41 = fastDateFormat40.getLocale();
        java.util.Locale locale42 = java.util.Locale.FRANCE;
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.lang.String str44 = locale43.getLanguage();
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale43.getDisplayVariant(locale45);
        java.util.Locale locale47 = java.util.Locale.GERMANY;
        java.lang.String str48 = locale43.getDisplayVariant(locale47);
        java.util.Locale locale49 = java.util.Locale.ENGLISH;
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.util.Locale locale51 = java.util.Locale.ENGLISH;
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone54 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone55 = java.util.TimeZone.getDefault();
        boolean boolean56 = timeZone54.hasSameRules(timeZone55);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone55);
        java.util.Locale locale58 = fastDateFormat57.getLocale();
        java.util.Locale locale59 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone62 = java.util.TimeZone.getDefault();
        boolean boolean63 = timeZone61.hasSameRules(timeZone62);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat64 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone62);
        java.util.Locale locale65 = fastDateFormat64.getLocale();
        java.util.Locale locale66 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale67 = java.util.Locale.UK;
        java.util.Locale[] localeArray68 = new java.util.Locale[] { locale21, locale25, locale29, locale32, locale34, locale35, locale41, locale42, locale47, locale49, locale50, locale51, locale52, locale58, locale59, locale65, locale66, locale67 };
        java.util.ArrayList<java.util.Locale> localeList69 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList69, localeArray68);
        java.util.Locale locale71 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList69);
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter(languageRangeList12, (java.util.Collection<java.util.Locale>) localeList69);
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter(languageRangeList9, (java.util.Collection<java.util.Locale>) localeList69);
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter(languageRangeList7, (java.util.Collection<java.util.Locale>) localeList73);
        java.util.Locale locale75 = java.util.Locale.lookup(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList73);
        java.util.Locale locale76 = java.util.Locale.lookup(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList73);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap77 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList78 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap77);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeList9);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Deutsch" + "'", str22, "Deutsch");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572644586,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=626,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "zh" + "'", str27, "zh");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str28, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertNotNull(locale41);
// flaky:         org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "zh" + "'", str44, "zh");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(timeZone54);
        org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertNotNull(locale58);
// flaky:         org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone62);
        org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(fastDateFormat64);
        org.junit.Assert.assertNotNull(locale65);
// flaky:         org.junit.Assert.assertEquals(locale65.toString(), "de");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de");
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertNotNull(localeList74);
        org.junit.Assert.assertNull(locale75);
        org.junit.Assert.assertNull(locale76);
        org.junit.Assert.assertNotNull(languageRangeList78);
    }

    @Test
    public void test20400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20400");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, (int) '#');
        int int3 = fieldPosition2.getField();
        fieldPosition2.setEndIndex(292278994);
        int int6 = fieldPosition2.getBeginIndex();
        int int7 = fieldPosition2.getEndIndex();
        int int8 = fieldPosition2.getField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278994 + "'", int7 == 292278994);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
    }

    @Test
    public void test20401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20401");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("it");
        java.util.Locale.Builder builder7 = builder2.setExtension('x', "de");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder7.setVariant("20-Jul-1903 13:28:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 20-Jul-1903 13:28:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test20402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20402");
        java.lang.String[] strArray5 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.stream.Stream<java.lang.String> strStream8 = strList6.stream();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        int int10 = strList6.lastIndexOf((java.lang.Object) locale9);
        java.util.stream.Stream<java.lang.String> strStream11 = strList6.stream();
        java.util.Iterator<java.lang.String> strItor12 = strList6.iterator();
        int int13 = strList6.size();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        boolean boolean17 = timeZone15.hasSameRules(timeZone16);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat18 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone16);
        java.util.Locale locale19 = fastDateFormat18.getLocale();
        java.lang.String str20 = fastDateFormat18.toString();
        java.text.ParsePosition parsePosition23 = new java.text.ParsePosition(16);
        int int24 = parsePosition23.getErrorIndex();
        java.lang.Object obj25 = fastDateFormat18.parseObject("Vereinigtes K\366nigreich", parsePosition23);
        java.util.Locale locale26 = fastDateFormat18.getLocale();
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        boolean boolean28 = strList6.addAll((java.util.Collection<java.lang.String>) strSet27);
        boolean boolean30 = strList6.add("fra");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNotNull(strItor12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(fastDateFormat18);
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "FastDateFormat[HH:mm' Uhr 'z]" + "'", str20, "FastDateFormat[HH:mm' Uhr 'z]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test20403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20403");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition((-1));
        int int2 = fieldPosition1.getEndIndex();
        java.lang.String str3 = fieldPosition1.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]" + "'", str3, "java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]");
    }

    @Test
    public void test20404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20404");
        java.util.Locale locale3 = new java.util.Locale("Thu Nov 06 09:35:31 GMT+00:00 2025", "\uc624\uc804\uc2dc\ubd84\ucd08", "deu");
        java.lang.String str4 = locale3.getVariant();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\uc624\uc804\uc2dc\ubd84\ucd08_deu");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "deu" + "'", str4, "deu");
    }

    @Test
    public void test20405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20405");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setMinimalDaysInFirstWeek((int) (short) 10);
        java.util.Date date3 = calendar0.getTime();
        java.util.TimeZone timeZone5 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone5);
        java.util.Date date7 = new java.util.Date();
        int int8 = date7.getTimezoneOffset();
        int int9 = date7.getSeconds();
        date7.setDate(7);
        java.time.Instant instant12 = date7.toInstant();
        java.util.Date date13 = java.util.Date.from(instant12);
        java.lang.String str14 = date13.toLocaleString();
        java.lang.StringBuffer stringBuffer15 = null;
        java.lang.StringBuffer stringBuffer16 = fastDateFormat6.format(date13, stringBuffer15);
        calendar0.setTime(date13);
        java.util.Date date18 = calendar0.getTime();
        date18.setMinutes(7);
        int int21 = date18.getMinutes();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644227044706,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=10,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=7,DAY_OF_YEAR=38,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=746,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Fri Feb 11 09:44:04 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(fastDateFormat6);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Mon Feb 07 09:44:04 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Mon Feb 07 09:44:04 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "07-Feb-2022 09:44:04" + "'", str14, "07-Feb-2022 09:44:04");
        org.junit.Assert.assertNull(stringBuffer16);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Mon Feb 07 09:07:04 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 7 + "'", int21 == 7);
    }

    @Test
    public void test20406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20406");
        java.util.Locale locale3 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat6 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc911\uad6d\uc5b4\uc911\uad6d)", locale3);
        java.lang.Object obj7 = fastDateFormat6.clone();
        java.util.TimeZone timeZone8 = fastDateFormat6.getTimeZone();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getTimeZone("vendredi 11 f\351vrier 2022");
        java.time.ZoneId zoneId11 = timeZone10.toZoneId();
        boolean boolean12 = timeZone10.observesDaylightTime();
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10);
        boolean boolean14 = timeZone8.hasSameRules(timeZone10);
        org.junit.Assert.assertEquals(locale3.toString(), "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(fastDateFormat6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "\uc911\uad6d\uc5b4\uc911\uad6d)]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "\uc911\uad6d\uc5b4\uc911\uad6d)]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "\uc911\uad6d\uc5b4\uc911\uad6d)]");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(zoneId11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1644572644728,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=728,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test20407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20407");
        java.util.Date date3 = new java.util.Date(2730, 131, (int) 'x');
        org.junit.Assert.assertEquals(date3.toString(), "Tue Mar 30 00:00:00 GMT+00:00 4641");
    }

    @Test
    public void test20408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20408");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        java.lang.String str11 = locale8.getDisplayLanguage(locale9);
        java.lang.String str12 = locale6.getDisplayLanguage(locale8);
        java.util.Locale.Builder builder13 = builder3.setLocale(locale8);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder17 = builder14.clear();
        java.util.Locale locale18 = builder17.build();
        java.util.Locale locale19 = builder17.build();
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder21 = builder3.setLocale(locale19);
        java.util.Locale locale22 = builder3.build();
        java.util.Locale.Builder builder24 = builder3.setVariant("");
        java.util.Locale.Builder builder25 = builder3.clearExtensions();
        java.util.Locale.Builder builder26 = builder25.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh" + "'", str10, "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str11, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "coreano" + "'", str12, "coreano");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test20409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20409");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale11 = new java.util.Locale("de");
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale11.getCountry();
        java.util.Calendar.Builder builder14 = builder0.setLocale(locale11);
        java.util.Calendar calendar15 = builder14.build();
        calendar15.set(100, 2, 44, (int) (byte) 100, 45, (int) (short) 1);
        calendar15.setFirstDayOfWeek(40);
        calendar15.clear();
        int int27 = calendar15.getActualMinimum((int) (short) 10);
        calendar15.set(34, 1969, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = calendar15.getMaximum(33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 33");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "de" + "'", str12, "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=40,minimalDaysInFirstWeek=4,ERA=?,YEAR=34,MONTH=1969,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test20410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20410");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor8 = strList2.listIterator(0);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        boolean boolean15 = strList11.add("hi!");
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale16.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale16.getDisplayVariant(locale20);
        boolean boolean22 = strList11.contains((java.lang.Object) locale16);
        boolean boolean23 = strList2.removeAll((java.util.Collection<java.lang.String>) strList11);
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale25);
        java.lang.String str27 = locale25.getLanguage();
        java.lang.String str28 = locale25.getVariant();
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(locale25);
        calendar29.setLenient(false);
        boolean boolean32 = strList11.contains((java.lang.Object) false);
        boolean boolean33 = strList11.isEmpty();
        int int35 = strList11.indexOf((java.lang.Object) 1644572151556L);
        java.util.ListIterator<java.lang.String> strItor36 = strList11.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str38 = strList11.get((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "zh" + "'", str27, "zh");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1644572644780,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=820,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(strItor36);
    }

    @Test
    public void test20411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20411");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale locale6 = builder5.build();
        java.lang.Object obj7 = locale6.clone();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "zh_CN");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "zh_CN");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "zh_CN");
    }

    @Test
    public void test20412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20412");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.text.ParsePosition parsePosition7 = new java.text.ParsePosition(100);
        java.lang.String str8 = parsePosition7.toString();
        java.lang.Object obj9 = fastDateFormat2.parseObject("de", parsePosition7);
        java.lang.String str11 = fastDateFormat2.format((long) 11);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone13);
        java.lang.StringBuffer stringBuffer16 = null;
        java.lang.StringBuffer stringBuffer17 = fastDateFormat14.format((long) 32772, stringBuffer16);
        java.lang.StringBuffer stringBuffer19 = null;
        java.lang.StringBuffer stringBuffer20 = fastDateFormat14.format((long) 97, stringBuffer19);
        java.lang.Object obj21 = fastDateFormat14.clone();
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category22, locale23);
        java.util.Locale locale25 = java.util.Locale.getDefault(category22);
        boolean boolean26 = locale25.hasExtensions();
        java.lang.String[] strArray32 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.util.stream.Stream<java.lang.String> strStream35 = strList33.stream();
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        int int37 = strList33.lastIndexOf((java.lang.Object) locale36);
        java.lang.String str38 = locale25.getDisplayVariant(locale36);
        java.lang.String str39 = locale36.getVariant();
        java.lang.String str40 = locale36.getISO3Country();
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(locale36);
        int int42 = calendar41.getWeeksInWeekYear();
        java.lang.String str43 = fastDateFormat14.format(calendar41);
        int int44 = calendar41.getMinimalDaysInFirstWeek();
        java.lang.String str45 = fastDateFormat2.format(calendar41);
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition(10);
        java.lang.String str49 = parsePosition48.toString();
        int int50 = parsePosition48.getIndex();
        java.lang.String str51 = parsePosition48.toString();
        java.lang.Object obj52 = fastDateFormat2.parseObject("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=0,MONTH=59,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=-1,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=55,MINUTE=44,SECOND=28,MILLISECOND=987,ZONE_OFFSET=100,DST_OFFSET=0]", parsePosition48);
        java.lang.String str53 = parsePosition48.toString();
        parsePosition48.setIndex(97);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.text.ParsePosition[index=100,errorIndex=-1]" + "'", str8, "java.text.ParsePosition[index=100,errorIndex=-1]");
        org.junit.Assert.assertNull(obj9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "12:00:00 AM GMT+00:00" + "'", str11, "12:00:00 AM GMT+00:00");
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertNull(stringBuffer17);
        org.junit.Assert.assertNull(stringBuffer20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "FastDateFormat[]");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strStream35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1644572644821,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=861,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 53 + "'", int42 == 53);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "9:44:04 AM GMT+00:00" + "'", str45, "9:44:04 AM GMT+00:00");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=-1]" + "'", str49, "java.text.ParsePosition[index=10,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 10 + "'", int50 == 10);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "java.text.ParsePosition[index=10,errorIndex=-1]" + "'", str51, "java.text.ParsePosition[index=10,errorIndex=-1]");
        org.junit.Assert.assertNull(obj52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "java.text.ParsePosition[index=0,errorIndex=0]" + "'", str53, "java.text.ParsePosition[index=0,errorIndex=0]");
    }

    @Test
    public void test20413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20413");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("11 Nov 2022 09:35:49 GMT");
        int int3 = timeZone1.getOffset(1644572380170L);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test20414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20414");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getTimezoneOffset();
        long long2 = date0.getTime();
        int int3 = date0.getMinutes();
        int int4 = date0.getDay();
        int int5 = date0.getMonth();
        date0.setDate(0);
        int int8 = date0.getDay();
        int int9 = date0.getSeconds();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Mon Jan 31 09:44:04 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1644572644859L + "'", long2 == 1644572644859L);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 44 + "'", int3 == 44);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 5 + "'", int4 == 5);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
    }

    @Test
    public void test20415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20415");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.toString();
        java.lang.String str4 = fastDateFormat2.toString();
        java.util.TimeZone timeZone5 = fastDateFormat2.getTimeZone();
        java.util.Locale locale6 = fastDateFormat2.getLocale();
        java.util.TimeZone timeZone7 = fastDateFormat2.getTimeZone();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone7);
        int int10 = calendar8.getActualMinimum((int) (short) 10);
        boolean boolean12 = calendar8.before((java.lang.Object) 1644572098072L);
        calendar8.set(22, 8, 36, 2, 21, 27);
        calendar8.set(0, 45, 0);
        calendar8.setMinimalDaysInFirstWeek((int) (byte) 100);
        boolean boolean26 = calendar8.isWeekDateSupported();
        java.lang.String str27 = calendar8.getCalendarType();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str3, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=100,ERA=1,YEAR=0,MONTH=45,WEEK_OF_YEAR=39,WEEK_OF_MONTH=4,DAY_OF_MONTH=0,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=2,MINUTE=21,SECOND=27,MILLISECOND=970,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "gregory" + "'", str27, "gregory");
    }

    @Test
    public void test20416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20416");
        java.util.Locale locale3 = new java.util.Locale("1 May 1952 11:18:39 GMT", "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=39,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=30,ERA=1,YEAR=54,MONTH=41,WEEK_OF_YEAR=24,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=32,MINUTE=45,SECOND=-1,MILLISECOND=978,ZONE_OFFSET=39,DST_OFFSET=0]", "Thu May 01 11:18:40 GMT+00:00 1952");
        org.junit.Assert.assertEquals(locale3.toString(), "1 may 1952 11:18:39 gmt_JAVA.UTIL.GREGORIANCALENDAR[TIME=?,AREFIELDSSET=FALSE,AREALLFIELDSSET=FALSE,LENIENT=TRUE,ZONE=SUN.UTIL.CALENDAR.ZONEINFO[ID=\"CHINESISCH\",OFFSET=39,DSTSAVINGS=0,USEDAYLIGHT=FALSE,TRANSITIONS=0,LASTRULE=NULL],FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=30,ERA=1,YEAR=54,MONTH=41,WEEK_OF_YEAR=24,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=32,MINUTE=45,SECOND=-1,MILLISECOND=978,ZONE_OFFSET=39,DST_OFFSET=0]_Thu May 01 11:18:40 GMT+00:00 1952");
    }

    @Test
    public void test20417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20417");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("java.text.ParsePosition[index=0,errorIndex=15]", (double) 1644486042606L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.644486042606E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test20418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20418");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, 3);
        fieldPosition2.setEndIndex(12);
        java.util.TimeZone timeZone6 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat7 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone6);
        java.lang.StringBuffer stringBuffer9 = null;
        java.lang.StringBuffer stringBuffer10 = fastDateFormat7.format((long) 32772, stringBuffer9);
        java.util.TimeZone timeZone11 = fastDateFormat7.getTimeZone();
        boolean boolean12 = fieldPosition2.equals((java.lang.Object) fastDateFormat7);
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition(31);
        java.lang.Object obj16 = fastDateFormat7.parseObject("00:00 Uhr GMT+00:00", parsePosition15);
        java.util.Date date18 = new java.util.Date((long) 2);
        date18.setDate(4);
        date18.setDate((int) (byte) 0);
        java.lang.StringBuffer stringBuffer23 = null;
        java.lang.StringBuffer stringBuffer24 = fastDateFormat7.format(date18, stringBuffer23);
        java.util.TimeZone timeZone27 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone27);
        java.lang.String str29 = fastDateFormat28.toString();
        java.lang.String str30 = fastDateFormat28.toString();
        java.util.TimeZone timeZone31 = fastDateFormat28.getTimeZone();
        java.util.Locale locale32 = fastDateFormat28.getLocale();
        boolean boolean33 = fastDateFormat28.getTimeZoneOverridesCalendar();
        java.lang.String str34 = fastDateFormat28.getPattern();
        java.lang.String str35 = fastDateFormat28.toString();
        java.lang.Object obj36 = fastDateFormat28.clone();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale37);
        java.time.Instant instant39 = calendar38.toInstant();
        java.time.Instant instant40 = calendar38.toInstant();
        java.time.Instant instant41 = calendar38.toInstant();
        java.lang.String str42 = fastDateFormat28.format(calendar38);
        java.text.ParsePosition parsePosition45 = new java.text.ParsePosition((int) (short) 10);
        java.lang.Object obj46 = fastDateFormat28.parseObject("9:36:06 AM UTC", parsePosition45);
        parsePosition45.setErrorIndex(58);
        java.util.Locale locale50 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale50);
        java.lang.String str52 = locale50.getLanguage();
        java.lang.String str53 = locale50.getVariant();
        java.util.Locale locale54 = java.util.Locale.CHINESE;
        java.lang.String str55 = locale54.getLanguage();
        boolean boolean56 = locale54.hasExtensions();
        java.lang.String str57 = locale50.getDisplayCountry(locale54);
        java.util.Locale.Category category58 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale59 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category58, locale59);
        java.util.Locale locale61 = java.util.Locale.getDefault(category58);
        boolean boolean62 = locale61.hasExtensions();
        java.lang.String[] strArray68 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.util.stream.Stream<java.lang.String> strStream71 = strList69.stream();
        java.util.Locale locale72 = java.util.Locale.JAPANESE;
        int int73 = strList69.lastIndexOf((java.lang.Object) locale72);
        java.lang.String str74 = locale61.getDisplayVariant(locale72);
        java.lang.String str75 = locale50.getDisplayCountry(locale61);
        java.util.Locale locale77 = new java.util.Locale("de");
        java.lang.String str78 = locale77.toLanguageTag();
        java.lang.String[] strArray80 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList81 = new java.util.ArrayList<java.lang.String>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList81, strArray80);
        java.util.stream.Stream<java.lang.String> strStream83 = strList81.stream();
        boolean boolean85 = strList81.add("hi!");
        java.util.Locale locale86 = java.util.Locale.CHINESE;
        java.lang.String str87 = locale86.getLanguage();
        java.util.Locale locale88 = java.util.Locale.GERMAN;
        java.lang.String str89 = locale86.getDisplayVariant(locale88);
        java.util.Locale locale90 = java.util.Locale.GERMANY;
        java.lang.String str91 = locale86.getDisplayVariant(locale90);
        boolean boolean92 = strList81.contains((java.lang.Object) locale86);
        java.lang.String str93 = locale77.getDisplayScript(locale86);
        java.util.Set<java.lang.Character> charSet94 = locale77.getExtensionKeys();
        java.lang.String str95 = locale61.getDisplayCountry(locale77);
        boolean boolean96 = parsePosition45.equals((java.lang.Object) locale61);
        java.lang.Object obj97 = fastDateFormat7.parseObject("", parsePosition45);
        java.lang.String str98 = parsePosition45.toString();
        org.junit.Assert.assertNotNull(fastDateFormat7);
        org.junit.Assert.assertNull(stringBuffer10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 GMT+00:00 1969");
        org.junit.Assert.assertNull(stringBuffer24);
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str29, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str30, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "h:mm:ss a z" + "'", str34, "h:mm:ss a z");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str35, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1644572644904,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=944,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(instant41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "9:44:04 AM GMT+00:00" + "'", str42, "9:44:04 AM GMT+00:00");
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "zh" + "'", str52, "zh");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "zh" + "'", str55, "zh");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u4e2d\u56fd" + "'", str57, "\u4e2d\u56fd");
        org.junit.Assert.assertTrue("'" + category58 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category58.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "it");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strStream71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Cina" + "'", str75, "Cina");
        org.junit.Assert.assertEquals(locale77.toString(), "de");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "de" + "'", str78, "de");
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(strStream83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "zh" + "'", str87, "zh");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "de");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(charSet94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(obj97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "java.text.ParsePosition[index=0,errorIndex=0]" + "'", str98, "java.text.ParsePosition[index=0,errorIndex=0]");
    }

    @Test
    public void test20419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20419");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        boolean boolean3 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.util.Calendar.Builder builder4 = new java.util.Calendar.Builder();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getTimezoneOffset();
        date5.setYear(32769);
        int int9 = date5.getYear();
        java.util.Calendar.Builder builder10 = builder4.setInstant(date5);
        int int11 = date5.getSeconds();
        java.lang.String str12 = fastDateFormat2.format(date5);
        boolean boolean13 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str14 = fastDateFormat2.toString();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(locale15);
        java.time.Instant instant17 = calendar16.toInstant();
        calendar16.set((int) (short) 1, 37, 44, (int) (short) 10, 0);
        java.util.Date date24 = calendar16.getTime();
        java.lang.StringBuffer stringBuffer25 = null;
        java.lang.StringBuffer stringBuffer26 = fastDateFormat2.format(calendar16, stringBuffer25);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Feb 11 09:44:04 GMT+00:00 34669");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32769 + "'", int9 == 32769);
        org.junit.Assert.assertNotNull(builder10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "FastDateFormat[]" + "'", str14, "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=-62034731995055,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=4,MONTH=2,WEEK_OF_YEAR=11,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=75,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=0,SECOND=4,MILLISECOND=985,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(date24);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Sat Mar 15 10:00:04 GMT+00:00 4");
        org.junit.Assert.assertNull(stringBuffer26);
    }

    @Test
    public void test20420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20420");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date1 = new java.util.Date();
        int int2 = date1.getTimezoneOffset();
        date1.setYear(32769);
        int int5 = date1.getYear();
        java.util.Calendar.Builder builder6 = builder0.setInstant(date1);
        java.util.Calendar calendar7 = builder6.build();
        java.util.Calendar.Builder builder9 = builder6.setInstant((long) 13);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        java.lang.String str13 = locale10.getDisplayLanguage(locale11);
        java.util.Calendar.Builder builder14 = builder9.setLocale(locale11);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone16 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getDefault();
        boolean boolean18 = timeZone16.hasSameRules(timeZone17);
        boolean boolean19 = timeZone15.hasSameRules(timeZone17);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.util.Calendar calendar25 = java.util.Calendar.getInstance(timeZone22, locale24);
        java.text.ParsePosition parsePosition27 = new java.text.ParsePosition(16);
        int int28 = parsePosition27.getErrorIndex();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet30 = locale29.getExtensionKeys();
        boolean boolean31 = parsePosition27.equals((java.lang.Object) locale29);
        java.lang.String str32 = locale29.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat33 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone22, locale29);
        java.util.TimeZone timeZone34 = java.util.TimeZone.getDefault();
        timeZone34.setRawOffset((-1));
        boolean boolean37 = timeZone22.hasSameRules(timeZone34);
        java.util.TimeZone timeZone38 = null;
        boolean boolean39 = timeZone34.hasSameRules(timeZone38);
        int int40 = timeZone34.getRawOffset();
        boolean boolean41 = timeZone15.hasSameRules(timeZone34);
        int int43 = timeZone34.getOffset(1644572205839L);
        java.util.Calendar.Builder builder44 = builder9.setTimeZone(timeZone34);
        java.util.Calendar.Builder builder48 = builder44.setWeekDate((int) (short) 100, 50, 10);
        java.util.Calendar.Builder builder52 = builder48.setDate(10, 126, 24356589);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Feb 11 09:44:05 GMT+00:00 34669");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 32769 + "'", int5 == 32769);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1031884393444968,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=34669,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=8,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh" + "'", str12, "zh");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str13, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1644572644968,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=8,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "coreano" + "'", str32, "coreano");
        org.junit.Assert.assertNotNull(fastDateFormat33);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test20421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20421");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        calendar6.set(31, (int) (byte) 100, (int) (byte) 10, (int) (short) 100, 9, 8);
        java.util.Date date17 = new java.util.Date((-1), 32772, (int) (short) 10);
        java.lang.String str18 = date17.toLocaleString();
        calendar6.setTime(date17);
        int int21 = calendar6.getActualMinimum((int) (short) 10);
        int int22 = calendar6.getWeeksInWeekYear();
        calendar6.setFirstDayOfWeek(56);
        int int25 = calendar6.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tedesco" + "'", str4, "tedesco");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=83942265599960,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=56,minimalDaysInFirstWeek=4,ERA=1,YEAR=4630,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date17.toString(), "Sun Jan 10 00:00:00 GMT+00:00 4630");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "10-Jan-4630 00:00:00" + "'", str18, "10-Jan-4630 00:00:00");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 56 + "'", int25 == 56);
    }

    @Test
    public void test20422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20422");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        boolean boolean5 = locale3.hasExtensions();
        java.lang.String str6 = locale1.getDisplayVariant(locale3);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(locale1);
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone9);
        java.lang.String str11 = fastDateFormat10.toString();
        java.lang.String str12 = fastDateFormat10.toString();
        java.util.TimeZone timeZone13 = fastDateFormat10.getTimeZone();
        java.util.Locale locale14 = fastDateFormat10.getLocale();
        java.util.TimeZone timeZone15 = fastDateFormat10.getTimeZone();
        int int16 = timeZone15.getRawOffset();
        calendar7.setTimeZone(timeZone15);
        java.util.Date date18 = calendar7.getTime();
        // The following exception was thrown during execution in test generation
        try {
            calendar7.roll((-1893), true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Vereinigtes K\366nigreich" + "'", str2, "Vereinigtes K\366nigreich");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh" + "'", str4, "zh");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1644572645012,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=52,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str11, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str12, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Fri Feb 11 09:44:05 GMT+00:00 2022");
    }

    @Test
    public void test20423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20423");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        calendar0.setLenient(true);
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getTimezoneOffset();
        date4.setMonth(0);
        int int8 = date4.getSeconds();
        int int9 = date4.getMonth();
        int int10 = date4.getSeconds();
        calendar0.setTime(date4);
        calendar0.set((int) '4', 4, 21, 59, 47, 27);
        long long19 = calendar0.getTimeInMillis();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone22);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getInstance("");
        java.util.TimeZone timeZone28 = fastDateFormat27.getTimeZone();
        java.util.Locale locale31 = new java.util.Locale("h:mm:ss a z", "coreano");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat32 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone28, locale31);
        int int34 = timeZone28.getOffset((-1767951822000L));
        boolean boolean35 = timeZone22.hasSameRules(timeZone28);
        java.util.Locale locale37 = java.util.Locale.ROOT;
        boolean boolean38 = locale37.hasExtensions();
        java.util.Set<java.lang.String> strSet39 = locale37.getUnicodeLocaleAttributes();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat40 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, locale37);
        java.util.Set<java.lang.String> strSet41 = locale37.getUnicodeLocaleAttributes();
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(locale37);
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone28, locale37);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getDefault();
        boolean boolean47 = timeZone45.hasSameRules(timeZone46);
        boolean boolean48 = timeZone44.hasSameRules(timeZone46);
        timeZone44.setID("10.01.4630 00:00:00");
        timeZone44.setRawOffset((int) (short) 10);
        int int54 = timeZone44.getOffset(1644572100197L);
        boolean boolean55 = timeZone28.hasSameRules(timeZone44);
        calendar0.setTimeZone(timeZone44);
        calendar0.setLenient(true);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-60513999152957,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"10.01.4630 00:00:00\",offset=10,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=52,MONTH=4,WEEK_OF_YEAR=21,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=144,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=11,HOUR_OF_DAY=11,MINUTE=47,SECOND=27,MILLISECOND=83,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Jan 11 09:44:05 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-60513999152957L) + "'", long19 == (-60513999152957L));
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals(locale31.toString(), "h:mm:ss a z_COREANO");
        org.junit.Assert.assertNotNull(fastDateFormat32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 40 + "'", int34 == 40);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(fastDateFormat40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1644572645043,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=83,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1644572645043,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=83,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 10 + "'", int54 == 10);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test20424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20424");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        boolean boolean3 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.util.Calendar.Builder builder4 = new java.util.Calendar.Builder();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getTimezoneOffset();
        date5.setYear(32769);
        int int9 = date5.getYear();
        java.util.Calendar.Builder builder10 = builder4.setInstant(date5);
        int int11 = date5.getSeconds();
        java.lang.String str12 = fastDateFormat2.format(date5);
        boolean boolean13 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.lang.String str14 = fastDateFormat2.toString();
        java.util.Locale locale15 = fastDateFormat2.getLocale();
        java.text.FieldPosition fieldPosition17 = new java.text.FieldPosition(2022);
        fieldPosition17.setEndIndex(47);
        java.util.Locale.Category category20 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale21 = java.util.Locale.getDefault(category20);
        boolean boolean22 = fieldPosition17.equals((java.lang.Object) category20);
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.lang.String str25 = locale23.getISO3Country();
        java.util.Locale.setDefault(category20, locale23);
        java.util.Locale locale27 = java.util.Locale.getDefault(category20);
        java.util.Locale locale29 = new java.util.Locale("12:00:00 AM UTC");
        java.util.Locale.setDefault(category20, locale29);
        java.lang.String str31 = locale15.getDisplayLanguage(locale29);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Feb 11 09:44:05 GMT+00:00 34669");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 32769 + "'", int9 == 32769);
        org.junit.Assert.assertNotNull(builder10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "FastDateFormat[]" + "'", str14, "FastDateFormat[]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + category20 + "' != '" + java.util.Locale.Category.FORMAT + "'", category20.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh");
        org.junit.Assert.assertEquals(locale29.toString(), "12:00:00 am utc");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "English" + "'", str31, "English");
    }

    @Test
    public void test20425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20425");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("it");
        java.util.Locale.Builder builder7 = builder2.setExtension('x', "de");
        java.util.Locale locale8 = builder7.build();
        java.lang.String str9 = locale8.getCountry();
        java.lang.String str10 = locale8.getDisplayName();
        java.util.Set<java.lang.String> strSet11 = locale8.getUnicodeLocaleAttributes();
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.lang.String str14 = locale12.toLanguageTag();
        java.lang.String str15 = locale8.getDisplayLanguage(locale12);
        java.util.Locale locale17 = new java.util.Locale("de");
        java.lang.String str18 = locale17.toLanguageTag();
        java.lang.String[] strArray20 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.stream.Stream<java.lang.String> strStream23 = strList21.stream();
        boolean boolean25 = strList21.add("hi!");
        java.util.Locale locale26 = java.util.Locale.CHINESE;
        java.lang.String str27 = locale26.getLanguage();
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale26.getDisplayVariant(locale28);
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        java.lang.String str31 = locale26.getDisplayVariant(locale30);
        boolean boolean32 = strList21.contains((java.lang.Object) locale26);
        java.lang.String str33 = locale17.getDisplayScript(locale26);
        java.util.Set<java.lang.Character> charSet34 = locale17.getExtensionKeys();
        java.util.Locale locale38 = new java.util.Locale("java.text.FieldPosition[field=1,attribute=null,beginIndex=0,endIndex=0]", "\u4e0a\u5348", "h:mm:ss a z");
        java.util.Locale locale39 = java.util.Locale.PRC;
        java.lang.String str40 = locale39.getDisplayLanguage();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale44.getDisplayName();
        java.lang.String str46 = locale44.getDisplayCountry();
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone42, locale44);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.util.Locale locale49 = locale48.stripExtensions();
        java.lang.String str50 = locale48.getVariant();
        java.lang.String str51 = locale44.getDisplayScript(locale48);
        java.util.Set<java.lang.String> strSet52 = locale44.getUnicodeLocaleKeys();
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale.Category category54 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale55 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category54, locale55);
        java.lang.String str57 = locale55.getScript();
        java.lang.String str58 = locale53.getDisplayCountry(locale55);
        java.lang.String str59 = locale44.getDisplayCountry(locale55);
        java.lang.String str60 = locale39.getDisplayCountry(locale55);
        java.lang.String str61 = locale38.getDisplayScript(locale39);
        java.lang.String str62 = locale17.getDisplayScript(locale38);
        java.lang.String str63 = locale8.getDisplayVariant(locale17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = locale8.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it__#x-de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "italiano" + "'", str10, "italiano");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "de-DE" + "'", str14, "de-DE");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Italienisch" + "'", str15, "Italienisch");
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "de" + "'", str18, "de");
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "zh" + "'", str27, "zh");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(charSet34);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "\u4e0a\u5348_h:mm:ss a z");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "cinese" + "'", str40, "cinese");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tedesco" + "'", str45, "tedesco");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1644572645089,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=129,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
        org.junit.Assert.assertTrue("'" + category54 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category54.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Cina" + "'", str60, "Cina");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test20426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20426");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        timeZone1.setRawOffset(40);
        timeZone1.setID("francese (Francia)");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.text.ParsePosition parsePosition12 = new java.text.ParsePosition(16);
        int int13 = parsePosition12.getErrorIndex();
        java.util.TimeZone timeZone15 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15);
        java.lang.String str17 = fastDateFormat16.getPattern();
        boolean boolean18 = parsePosition12.equals((java.lang.Object) fastDateFormat16);
        int int19 = parsePosition12.getIndex();
        int int20 = parsePosition12.getIndex();
        java.util.Calendar.Builder builder21 = new java.util.Calendar.Builder();
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = locale22.getLanguage();
        boolean boolean24 = locale22.hasExtensions();
        java.lang.String str25 = locale22.getDisplayCountry();
        java.util.Calendar.Builder builder26 = builder21.setLocale(locale22);
        java.util.Calendar.Builder builder30 = builder21.setWeekDate((int) (short) 1, 9, 1);
        int[] intArray33 = new int[] { 14, ' ' };
        java.util.Calendar.Builder builder34 = builder30.setFields(intArray33);
        boolean boolean35 = parsePosition12.equals((java.lang.Object) builder30);
        parsePosition12.setIndex((int) (byte) 100);
        int int38 = parsePosition12.getIndex();
        java.lang.Object obj39 = fastDateFormat9.parseObject("31 Dec 1969 23:59:59 GMT", parsePosition12);
        java.lang.String str40 = parsePosition12.toString();
        int int41 = parsePosition12.getIndex();
        int int42 = parsePosition12.getIndex();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572645115,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"francese (Francia)\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=155,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "h:mm:ss a z" + "'", str17, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh" + "'", str23, "zh");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[14, 32]");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.text.ParsePosition[index=0,errorIndex=0]" + "'", str40, "java.text.ParsePosition[index=0,errorIndex=0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
    }

    @Test
    public void test20427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20427");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        int int8 = calendar6.getActualMinimum(2);
        int int9 = calendar6.getWeeksInWeekYear();
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = locale14.getDisplayCountry();
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone12, locale14);
        int int19 = calendar17.getActualMinimum(2);
        java.util.TimeZone timeZone20 = calendar17.getTimeZone();
        java.util.TimeZone timeZone21 = calendar17.getTimeZone();
        java.util.Calendar.Builder builder22 = builder10.setTimeZone(timeZone21);
        calendar6.setTimeZone(timeZone21);
        java.util.TimeZone timeZone25 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone25);
        java.lang.StringBuffer stringBuffer28 = null;
        java.lang.StringBuffer stringBuffer29 = fastDateFormat26.format((long) 32772, stringBuffer28);
        java.util.Date date30 = new java.util.Date();
        int int31 = date30.getTimezoneOffset();
        long long32 = date30.getTime();
        int int33 = date30.getMinutes();
        java.lang.String str34 = fastDateFormat26.format(date30);
        java.util.TimeZone timeZone35 = fastDateFormat26.getTimeZone();
        int int37 = timeZone35.getOffset((long) 36);
        calendar6.setTimeZone(timeZone35);
        int int40 = calendar6.getActualMinimum((int) (byte) 1);
        java.lang.String str41 = calendar6.getCalendarType();
        java.util.TimeZone timeZone42 = calendar6.getTimeZone();
        int int43 = timeZone42.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tedesco" + "'", str4, "tedesco");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1644572645145,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=185,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "tedesco" + "'", str15, "tedesco");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1644572645145,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=185,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertNull(stringBuffer29);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Fri Feb 11 09:44:05 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1644572645145L + "'", long32 == 1644572645145L);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 44 + "'", int33 == 44);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 40 + "'", int37 == 40);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "gregory" + "'", str41, "gregory");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test20428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20428");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        int int2 = calendar1.getWeekYear();
        calendar1.setLenient(true);
        calendar1.set((int) (byte) 0, 56, 100, 2022, (int) '#');
        int int11 = calendar1.getMinimalDaysInFirstWeek();
        java.text.Format.Field field12 = null;
        java.text.FieldPosition fieldPosition14 = new java.text.FieldPosition(field12, 1);
        int int15 = fieldPosition14.getBeginIndex();
        java.text.Format.Field field16 = fieldPosition14.getFieldAttribute();
        java.text.Format.Field field17 = fieldPosition14.getFieldAttribute();
        fieldPosition14.setBeginIndex(35);
        int int20 = fieldPosition14.getField();
        java.text.Format.Field field21 = fieldPosition14.getFieldAttribute();
        int int22 = fieldPosition14.getBeginIndex();
        boolean boolean23 = calendar1.before((java.lang.Object) fieldPosition14);
        int int24 = fieldPosition14.getField();
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=0,MONTH=56,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=100,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=2022,MINUTE=35,SECOND=0,MILLISECOND=0,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1970 + "'", int2 == 1970);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(field16);
        org.junit.Assert.assertNull(field17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNull(field21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 35 + "'", int22 == 35);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test20429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20429");
        java.util.Date date6 = new java.util.Date(32772, 4, 50, (-405), 59, 46);
        date6.setMinutes(131);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Jun 02 05:11:46 GMT+00:00 34672");
    }

    @Test
    public void test20430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20430");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Calendar.Builder builder6 = new java.util.Calendar.Builder();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        java.lang.String str8 = locale7.getLanguage();
        boolean boolean9 = locale7.hasExtensions();
        java.lang.String str10 = locale7.getDisplayCountry();
        java.util.Calendar.Builder builder11 = builder6.setLocale(locale7);
        java.util.Calendar.Builder builder15 = builder6.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale17 = new java.util.Locale("de");
        java.lang.String str18 = locale17.toLanguageTag();
        java.lang.String str19 = locale17.getCountry();
        java.util.Calendar.Builder builder20 = builder6.setLocale(locale17);
        java.lang.String str21 = locale17.getISO3Language();
        java.util.Locale.setDefault(category0, locale17);
        java.util.Locale locale23 = java.util.Locale.getDefault(category0);
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale25);
        java.lang.String str27 = locale25.getLanguage();
        java.lang.String str28 = locale25.getVariant();
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.lang.String str30 = locale29.getLanguage();
        boolean boolean31 = locale29.hasExtensions();
        java.lang.String str32 = locale25.getDisplayCountry(locale29);
        java.util.Locale.Category category33 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category33, locale34);
        java.util.Locale locale36 = java.util.Locale.getDefault(category33);
        boolean boolean37 = locale36.hasExtensions();
        java.lang.String[] strArray43 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList44 = new java.util.ArrayList<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList44, strArray43);
        java.util.stream.Stream<java.lang.String> strStream46 = strList44.stream();
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        int int48 = strList44.lastIndexOf((java.lang.Object) locale47);
        java.lang.String str49 = locale36.getDisplayVariant(locale47);
        java.lang.String str50 = locale25.getDisplayCountry(locale36);
        java.lang.String str51 = locale25.getDisplayName();
        java.text.ParsePosition parsePosition53 = new java.text.ParsePosition(16);
        int int54 = parsePosition53.getErrorIndex();
        java.util.TimeZone timeZone56 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone56);
        java.lang.String str58 = fastDateFormat57.getPattern();
        boolean boolean59 = parsePosition53.equals((java.lang.Object) fastDateFormat57);
        java.util.Locale locale60 = java.util.Locale.FRANCE;
        boolean boolean61 = parsePosition53.equals((java.lang.Object) locale60);
        java.lang.String str62 = locale60.getDisplayScript();
        java.util.Locale.Builder builder63 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder65 = builder63.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder66 = builder63.clear();
        java.util.Locale locale67 = builder66.build();
        java.lang.String str68 = locale60.getDisplayVariant(locale67);
        java.lang.String str69 = locale25.getDisplayVariant(locale60);
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone71 = java.util.TimeZone.getDefault();
        boolean boolean72 = timeZone70.hasSameRules(timeZone71);
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet74 = locale73.getExtensionKeys();
        java.util.Calendar calendar75 = java.util.Calendar.getInstance(timeZone70, locale73);
        java.lang.String str76 = locale73.getCountry();
        java.lang.String str77 = locale25.getDisplayName(locale73);
        java.lang.String str78 = locale23.getDisplayVariant(locale73);
        boolean boolean80 = locale73.equals((java.lang.Object) 1644486198785L);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zh" + "'", str8, "zh");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "de" + "'", str18, "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "deu" + "'", str21, "deu");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "zh" + "'", str27, "zh");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "zh" + "'", str30, "zh");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\u4e2d\u56fd" + "'", str32, "\u4e2d\u56fd");
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category33.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strStream46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Cina" + "'", str50, "Cina");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "cinese (Cina)" + "'", str51, "cinese (Cina)");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "h:mm:ss a z" + "'", str58, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet74);
        org.junit.Assert.assertNotNull(calendar75);
// flaky:         org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=1644572645202,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=242,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str77, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test20431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20431");
        java.util.Date date3 = new java.util.Date(11, 11, 3);
        date3.setSeconds((int) (byte) -1);
        java.time.Instant instant6 = date3.toInstant();
        java.lang.String str7 = date3.toGMTString();
        int int8 = date3.getYear();
        java.lang.String str9 = date3.toGMTString();
        org.junit.Assert.assertEquals(date3.toString(), "Sat Dec 02 23:59:59 GMT+00:00 1911");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2 Dec 1911 23:59:58 GMT" + "'", str7, "2 Dec 1911 23:59:58 GMT");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2 Dec 1911 23:59:58 GMT" + "'", str9, "2 Dec 1911 23:59:58 GMT");
    }

    @Test
    public void test20432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20432");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("Thu Jan 01 00:17:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
    }

    @Test
    public void test20433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20433");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale8.getDisplayCountry();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale8);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale12.getDisplayLanguage(locale13);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale19);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone25);
        java.util.Locale locale28 = fastDateFormat27.getLocale();
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale30.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.lang.String str35 = locale30.getDisplayVariant(locale34);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone42);
        java.util.Locale locale45 = fastDateFormat44.getLocale();
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone49);
        java.util.Locale locale52 = fastDateFormat51.getLocale();
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale54 = java.util.Locale.UK;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale8, locale12, locale16, locale19, locale21, locale22, locale28, locale29, locale34, locale36, locale37, locale38, locale39, locale45, locale46, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale locale58 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList56);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap59);
        java.lang.String[] strArray66 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022", "FastDateFormat[h:mm:ss a z]", "zh", "java.text.ParsePosition[index=16,errorIndex=-1]", "de" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        java.lang.Object[] objArray69 = strList67.toArray();
        strList67.clear();
        java.lang.String[] strArray72 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        java.util.stream.Stream<java.lang.String> strStream75 = strList73.stream();
        strList73.clear();
        java.util.Spliterator<java.lang.String> strSpliterator77 = strList73.spliterator();
        boolean boolean78 = strList67.containsAll((java.util.Collection<java.lang.String>) strList73);
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList73);
        boolean boolean80 = strList73.isEmpty();
        java.util.Locale.Builder builder81 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder83 = builder81.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder84 = builder81.clear();
        java.util.Locale locale85 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder86 = builder84.setLocale(locale85);
        java.util.Locale.Builder builder87 = builder86.clear();
        int int88 = strList73.indexOf((java.lang.Object) builder87);
        java.util.Locale.Builder builder90 = builder87.setRegion("it");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder93 = builder90.setUnicodeLocaleKeyword("09:41 Uhr GMT+00:00", "11:41:40 AM GMT+00:00");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 09:41 Uhr GMT+00:00 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "tedesco" + "'", str9, "tedesco");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644572645267,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=307,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str15, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zh" + "'", str31, "zh");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertNotNull(locale52);
// flaky:         org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strStream75);
        org.junit.Assert.assertNotNull(strSpliterator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test20434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20434");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08");
        java.lang.Object obj2 = fastDateFormat1.clone();
        java.lang.String str3 = fastDateFormat1.getPattern();
        java.lang.Object obj4 = fastDateFormat1.clone();
        java.lang.String str6 = fastDateFormat1.format(1644572265082L);
        java.lang.StringBuffer stringBuffer8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer9 = fastDateFormat1.format(1644572527857L, stringBuffer8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat1);
        org.junit.Assert.assertNotNull(obj2);
// flaky:         org.junit.Assert.assertEquals(obj2.toString(), "\uc624\uc804\uc2dc\ubd84\ucd08]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "\uc624\uc804\uc2dc\ubd84\ucd08]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "\uc624\uc804\uc2dc\ubd84\ucd08]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc624\uc804\uc2dc\ubd84\ucd08" + "'", str3, "\uc624\uc804\uc2dc\ubd84\ucd08");
        org.junit.Assert.assertNotNull(obj4);
// flaky:         org.junit.Assert.assertEquals(obj4.toString(), "\uc624\uc804\uc2dc\ubd84\ucd08]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "\uc624\uc804\uc2dc\ubd84\ucd08]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "\uc624\uc804\uc2dc\ubd84\ucd08]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc624\uc804\uc2dc\ubd84\ucd08" + "'", str6, "\uc624\uc804\uc2dc\ubd84\ucd08");
    }

    @Test
    public void test20435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20435");
        java.lang.String[] strArray15 = new java.lang.String[] { "Vereinigtes K\366nigreich", "tedesco (Germania)", "Jan 10, 4630 12:00:00 AM", "Chinese", "", "Tue Jan 11 09:34:31 UTC 2022", "", "Greenwich Mean Time", "Coordinated Universal Time", "", "Greenwich Mean Time", "h:mm:ss a z", "", "coreano", "Greenwich Mean Time" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.stream.Stream<java.lang.String> strStream22 = strList20.stream();
        java.util.ListIterator<java.lang.String> strItor23 = strList20.listIterator();
        int int24 = strList16.lastIndexOf((java.lang.Object) strItor23);
        java.lang.String[] strArray26 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        java.util.stream.Stream<java.lang.String> strStream29 = strList27.stream();
        boolean boolean31 = strList27.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor33 = strList27.listIterator(0);
        java.lang.String[] strArray35 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.util.stream.Stream<java.lang.String> strStream38 = strList36.stream();
        boolean boolean40 = strList36.add("hi!");
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = locale41.getLanguage();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale41.getDisplayVariant(locale43);
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        java.lang.String str46 = locale41.getDisplayVariant(locale45);
        boolean boolean47 = strList36.contains((java.lang.Object) locale41);
        boolean boolean48 = strList27.removeAll((java.util.Collection<java.lang.String>) strList36);
        java.lang.String[] strArray50 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.util.stream.Stream<java.lang.String> strStream53 = strList51.stream();
        strList51.clear();
        boolean boolean55 = strList51.isEmpty();
        boolean boolean56 = strList51.isEmpty();
        java.util.ListIterator<java.lang.String> strItor57 = strList51.listIterator();
        boolean boolean58 = strList27.retainAll((java.util.Collection<java.lang.String>) strList51);
        boolean boolean59 = strList16.containsAll((java.util.Collection<java.lang.String>) strList27);
        java.util.Spliterator<java.lang.String> strSpliterator60 = strList16.spliterator();
        java.util.Iterator<java.lang.String> strItor61 = strList16.iterator();
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strStream38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zh" + "'", str42, "zh");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strStream53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strSpliterator60);
        org.junit.Assert.assertNotNull(strItor61);
    }

    @Test
    public void test20436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20436");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder11 = builder0.setLenient(false);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay(15, 0, 32770);
        java.util.Calendar.Builder builder18 = builder15.setWeekDefinition(7, 7);
        java.util.Calendar.Builder builder20 = builder15.setLenient(true);
        java.util.Calendar.Builder builder24 = builder20.setWeekDate(0, 53, 31);
        java.util.Calendar.Builder builder29 = builder24.setTimeOfDay(31, (-1), 39, 52);
        java.util.Calendar.Builder builder30 = new java.util.Calendar.Builder();
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = locale31.getLanguage();
        boolean boolean33 = locale31.hasExtensions();
        java.lang.String str34 = locale31.getDisplayCountry();
        java.util.Calendar.Builder builder35 = builder30.setLocale(locale31);
        java.util.Calendar.Builder builder39 = builder30.setWeekDate(38, 41, 11);
        java.util.Locale locale42 = new java.util.Locale("java.text.ParsePosition[index=100,errorIndex=-1]", "Jan 10, 4630 12:00:00 AM");
        java.util.Calendar.Builder builder43 = builder39.setLocale(locale42);
        java.util.Calendar.Builder builder44 = new java.util.Calendar.Builder();
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = locale45.getLanguage();
        boolean boolean47 = locale45.hasExtensions();
        java.lang.String str48 = locale45.getDisplayCountry();
        java.util.Calendar.Builder builder49 = builder44.setLocale(locale45);
        java.util.Calendar.Builder builder53 = builder44.setWeekDate((int) (short) 1, 9, 1);
        int[] intArray56 = new int[] { 14, ' ' };
        java.util.Calendar.Builder builder57 = builder53.setFields(intArray56);
        java.util.Calendar.Builder builder58 = builder43.setFields(intArray56);
        java.util.Calendar.Builder builder59 = builder24.setFields(intArray56);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder61 = builder24.setCalendarType("1911-12-2 23:59:59");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown calendar type: 1911-12-2 23:59:59");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zh" + "'", str32, "zh");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertEquals(locale42.toString(), "java.text.parseposition[index=100,errorindex=-1]_JAN 10, 4630 12:00:00 AM");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zh" + "'", str46, "zh");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[14, 32]");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test20437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20437");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.lang.StringBuffer stringBuffer4 = null;
        java.lang.StringBuffer stringBuffer5 = fastDateFormat2.format((long) 32772, stringBuffer4);
        java.util.TimeZone timeZone6 = fastDateFormat2.getTimeZone();
        java.lang.String str7 = timeZone6.getID();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNull(stringBuffer5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Chinesisch" + "'", str7, "Chinesisch");
    }

    @Test
    public void test20438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20438");
        java.util.Date date1 = new java.util.Date(1644485896708L);
        date1.setSeconds(46);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Feb 10 09:38:46 GMT+00:00 2022");
    }

    @Test
    public void test20439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20439");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getInstance();
        java.lang.String str5 = fastDateFormat3.format((long) 100);
        boolean boolean6 = calendar2.after((java.lang.Object) 100);
        java.util.TimeZone timeZone7 = calendar2.getTimeZone();
        calendar2.clear();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Ora media di Greenwich");
        org.junit.Assert.assertNotNull(calendar2);
        org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(fastDateFormat3);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1/1/70 12:00 AM" + "'", str5, "1/1/70 12:00 AM");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Ora media di Greenwich");
    }

    @Test
    public void test20440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20440");
        java.util.Locale locale1 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale1);
        java.lang.Object obj3 = fastDateFormat2.clone();
        java.text.ParsePosition parsePosition6 = new java.text.ParsePosition(16);
        int int7 = parsePosition6.getErrorIndex();
        java.util.TimeZone timeZone9 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat10 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone9);
        java.lang.String str11 = fastDateFormat10.getPattern();
        boolean boolean12 = parsePosition6.equals((java.lang.Object) fastDateFormat10);
        java.util.Locale locale13 = java.util.Locale.FRANCE;
        boolean boolean14 = parsePosition6.equals((java.lang.Object) locale13);
        java.util.Locale locale16 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale16);
        java.lang.String str18 = locale16.getLanguage();
        java.lang.String str19 = locale16.getVariant();
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = locale20.getLanguage();
        boolean boolean22 = locale20.hasExtensions();
        java.lang.String str23 = locale16.getDisplayCountry(locale20);
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category24, locale25);
        java.util.Locale locale27 = java.util.Locale.getDefault(category24);
        boolean boolean28 = locale27.hasExtensions();
        java.lang.String[] strArray34 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.util.stream.Stream<java.lang.String> strStream37 = strList35.stream();
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        int int39 = strList35.lastIndexOf((java.lang.Object) locale38);
        java.lang.String str40 = locale27.getDisplayVariant(locale38);
        java.lang.String str41 = locale16.getDisplayCountry(locale27);
        java.lang.Class<?> wildcardClass42 = locale27.getClass();
        boolean boolean43 = parsePosition6.equals((java.lang.Object) locale27);
        java.util.Locale.Category category44 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category44, locale45);
        java.lang.String str47 = locale45.getScript();
        boolean boolean48 = parsePosition6.equals((java.lang.Object) str47);
        java.lang.Object obj49 = fastDateFormat2.parseObject("11. Februar 2022", parsePosition6);
        java.util.Locale locale52 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat53 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale52);
        java.lang.Object obj54 = fastDateFormat53.clone();
        java.util.Calendar.Builder builder55 = new java.util.Calendar.Builder();
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.lang.String str57 = locale56.getLanguage();
        boolean boolean58 = locale56.hasExtensions();
        java.lang.String str59 = locale56.getDisplayCountry();
        java.util.Calendar.Builder builder60 = builder55.setLocale(locale56);
        java.util.Date date62 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder63 = builder60.setInstant(date62);
        java.lang.String str64 = fastDateFormat53.format(date62);
        java.lang.String str65 = fastDateFormat53.getPattern();
        java.text.ParsePosition parsePosition68 = new java.text.ParsePosition(34);
        int int69 = parsePosition68.getIndex();
        java.lang.Object obj70 = fastDateFormat53.parseObject("German", parsePosition68);
        java.lang.Object obj71 = fastDateFormat2.parseObject("9:34:45 AM UTC", parsePosition68);
        int int72 = fastDateFormat2.getMaxLengthEstimate();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj74 = fastDateFormat2.parseObject("9:40:27 AM GMT+00:00");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Format.parseObject(String) failed");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "FastDateFormat[zh]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "h:mm:ss a z" + "'", str11, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh" + "'", str18, "zh");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh" + "'", str21, "zh");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u4e2d\u56fd" + "'", str23, "\u4e2d\u56fd");
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Cina" + "'", str41, "Cina");
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + category44 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category44.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(obj49);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat53);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "FastDateFormat[zh]");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "zh" + "'", str57, "zh");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Jan 11 09:34:31 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "GMT+00:009" + "'", str64, "GMT+00:009");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "zh" + "'", str65, "zh");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 34 + "'", int69 == 34);
        org.junit.Assert.assertNull(obj70);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 8 + "'", int72 == 8);
    }

    @Test
    public void test20441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20441");
        java.util.Date date6 = new java.util.Date(58, 0, 292278994, 100061, 46, 19);
        org.junit.Assert.assertEquals(date6.toString(), "Sat Feb 13 05:46:19 GMT+00:00 802202");
    }

    @Test
    public void test20442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20442");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getWeeksInWeekYear();
        java.time.Instant instant2 = calendar0.toInstant();
        java.util.Date date3 = java.util.Date.from(instant2);
        date3.setYear(16);
        java.lang.String str6 = date3.toLocaleString();
        java.lang.Object obj7 = null;
        boolean boolean8 = date3.equals(obj7);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572645475,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=515,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 53 + "'", int1 == 53);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(date3);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Fri Feb 11 09:44:05 GMT+00:00 1916");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Feb 11, 1916 9:44:05 AM" + "'", str6, "Feb 11, 1916 9:44:05 AM");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test20443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20443");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("cina", strMap1);
        java.lang.String[] strArray38 = new java.lang.String[] { "\uc624\uc804\uc2dc\ubd84\ucd08", "FastDateFormat[zh]", "java.text.FieldPosition[field=5,attribute=null,beginIndex=0,endIndex=0]", "UTC", "java.text.ParsePosition[index=16,errorIndex=-1]", "java.text.FieldPosition[field=15,attribute=null,beginIndex=0,endIndex=0]", "java.util.GregorianCalendar[time=1644572085165,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=45,MILLISECOND=165,ZONE_OFFSET=0,DST_OFFSET=0]", "\u5e74\u6708\u65e5", "\u4e2d\u56fd", "java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "31 May 1909 18:40:08 GMT", "tedesco (Germania)", "\u5fb7\u6587", "UTC9", "Chinese", "de", "9:34:41 AM UTC", "\u610f\u5927\u5229\u6587", "UTC9", "German", "\uc624\uc804\uc2dc\ubd84\ucd08", "9:34:46 AM UTC", "java.util.GregorianCalendar[time=1644572085165,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=45,MILLISECOND=165,ZONE_OFFSET=0,DST_OFFSET=0]", "\uc624\uc804\uc2dc\ubd84\ucd08", "java.text.FieldPosition[field=15,attribute=null,beginIndex=0,endIndex=0]", "\u610f\u5927\u5229\u6587", "\u5fb7\u6587", "Deutsch", "tedesco", "9:34:44 AM UTC", "de", "Chinese", "Vereinigtes K\366nigreich", "9:34:41 AM UTC", "UTC9" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        strList39.clear();
        java.util.Spliterator<java.lang.String> strSpliterator42 = strList39.spliterator();
        java.util.stream.Stream<java.lang.String> strStream43 = strList39.stream();
        java.util.Date date49 = new java.util.Date((int) 'a', (int) (byte) 1, 36, 39, 3);
        int int50 = date49.getSeconds();
        java.util.Date date51 = new java.util.Date();
        int int52 = date51.getDay();
        java.util.Date date53 = new java.util.Date();
        date53.setMinutes((int) '#');
        boolean boolean56 = date51.before(date53);
        date53.setSeconds(122);
        boolean boolean59 = date49.before(date53);
        boolean boolean60 = strList39.contains((java.lang.Object) date49);
        java.util.List<java.lang.String> strList61 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strList39);
        int int62 = strList39.size();
        java.lang.String[] strArray68 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022", "FastDateFormat[h:mm:ss a z]", "zh", "java.text.ParsePosition[index=16,errorIndex=-1]", "de" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.lang.Object[] objArray71 = strList69.toArray();
        strList69.clear();
        java.lang.Object[] objArray73 = strList69.toArray();
        java.lang.Object[] objArray74 = strList69.toArray();
        boolean boolean75 = strList39.containsAll((java.util.Collection<java.lang.String>) strList69);
        java.util.Iterator<java.lang.String> strItor76 = strList39.iterator();
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strSpliterator42);
        org.junit.Assert.assertNotNull(strStream43);
        org.junit.Assert.assertEquals(date49.toString(), "Sun Mar 09 15:03:00 GMT+00:00 1997");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
// flaky:         org.junit.Assert.assertEquals(date51.toString(), "Fri Feb 11 09:44:05 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Fri Feb 11 09:37:02 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strItor76);
    }

    @Test
    public void test20444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20444");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        long long5 = calendar4.getTimeInMillis();
        calendar4.set(2022, (int) 'a', 8);
        int int11 = calendar4.getGreatestMinimum(5);
        java.time.Instant instant12 = calendar4.toInstant();
        int int13 = calendar4.getMinimalDaysInFirstWeek();
        calendar4.setLenient(false);
        long long16 = calendar4.getTimeInMillis();
        int int17 = calendar4.getMinimalDaysInFirstWeek();
        calendar4.roll(2, true);
        // The following exception was thrown during execution in test generation
        try {
            calendar4.roll(56, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2030,MONTH=2,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=39,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=545,ZONE_OFFSET=40,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1644572645505L + "'", long5 == 1644572645505L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1896774245505L + "'", long16 == 1896774245505L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test20445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20445");
        java.util.Calendar calendar1 = java.util.Calendar.getInstance();
        boolean boolean2 = calendar1.isWeekDateSupported();
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = locale3.getLanguage();
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.lang.String str6 = locale3.getDisplayVariant(locale5);
        boolean boolean7 = calendar1.before((java.lang.Object) str6);
        int int8 = calendar1.getFirstDayOfWeek();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone9);
        calendar1.setTimeZone(timeZone9);
        java.util.Locale locale15 = new java.util.Locale("");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat16 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\uc624\uc804\uc2dc\ubd84\ucd08", timeZone9, locale15);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone9);
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale19);
        boolean boolean21 = fastDateFormat20.getTimeZoneOverridesCalendar();
        java.lang.Object obj22 = fastDateFormat20.clone();
        java.lang.Object obj23 = fastDateFormat20.clone();
        java.lang.Object obj24 = fastDateFormat20.clone();
        java.util.Date date25 = new java.util.Date();
        int int26 = date25.getTimezoneOffset();
        long long27 = date25.getTime();
        java.util.Date date28 = new java.util.Date();
        int int29 = date28.getSeconds();
        long long30 = date28.getTime();
        date28.setTime((long) ' ');
        int int33 = date28.getTimezoneOffset();
        boolean boolean34 = date25.before(date28);
        java.util.Date date38 = new java.util.Date(11, 11, 3);
        boolean boolean39 = date25.before(date38);
        java.util.Date date40 = new java.util.Date();
        int int41 = date40.getDay();
        java.util.Date date42 = new java.util.Date();
        date42.setMinutes((int) '#');
        boolean boolean45 = date40.before(date42);
        int int46 = date42.getHours();
        boolean boolean47 = date25.before(date42);
        java.time.Instant instant48 = date25.toInstant();
        java.util.Date date49 = java.util.Date.from(instant48);
        int int50 = date49.getSeconds();
        java.lang.String str51 = fastDateFormat20.format(date49);
        int int52 = date49.getTimezoneOffset();
        calendar17.setTime(date49);
        calendar17.setTimeInMillis(1644486129870L);
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572645522,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=562,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh" + "'", str4, "zh");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1644572645522,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=562,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(fastDateFormat16);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1644486129870,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=41,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=42,SECOND=9,MILLISECOND=910,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "FastDateFormat[zh]");
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "FastDateFormat[zh]");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "FastDateFormat[zh]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "FastDateFormat[zh]");
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Fri Feb 11 09:44:05 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1644572645522L + "'", long27 == 1644572645522L);
        org.junit.Assert.assertEquals(date28.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1644572645522L + "'", long30 == 1644572645522L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals(date38.toString(), "Sun Dec 03 00:00:00 GMT+00:00 1911");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Fri Feb 11 09:44:05 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 5 + "'", int41 == 5);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Fri Feb 11 09:35:05 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Fri Feb 11 09:44:05 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "GMT+00:009" + "'", str51, "GMT+00:009");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test20446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20446");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone2);
        java.lang.String str4 = fastDateFormat3.toString();
        java.lang.String str5 = fastDateFormat3.toString();
        java.util.TimeZone timeZone6 = fastDateFormat3.getTimeZone();
        java.util.Locale locale7 = fastDateFormat3.getLocale();
        boolean boolean8 = fastDateFormat3.getTimeZoneOverridesCalendar();
        java.util.TimeZone timeZone9 = fastDateFormat3.getTimeZone();
        boolean boolean10 = timeZone9.observesDaylightTime();
        java.lang.String str11 = timeZone9.getID();
        timeZone9.setID("java.text.FieldPosition[field=3,attribute=null,beginIndex=0,endIndex=42]");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(122, timeZone9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 122");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str4, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str5, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Chinesisch" + "'", str11, "Chinesisch");
    }

    @Test
    public void test20447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20447");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("9:38:07 AM UTC", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=9:38:07amutc");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test20448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20448");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        calendar6.set(31, (int) (byte) 100, (int) (byte) 10, (int) (short) 100, 9, 8);
        java.util.Date date17 = new java.util.Date((-1), 32772, (int) (short) 10);
        java.lang.String str18 = date17.toLocaleString();
        calendar6.setTime(date17);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone21, locale23);
        calendar6.setTimeZone(timeZone21);
        calendar6.add(9, 1970);
        java.util.Date date29 = new java.util.Date();
        int int30 = date29.getTimezoneOffset();
        long long31 = date29.getTime();
        java.util.Date date32 = new java.util.Date();
        int int33 = date32.getSeconds();
        long long34 = date32.getTime();
        date32.setTime((long) ' ');
        int int37 = date32.getTimezoneOffset();
        boolean boolean38 = date29.before(date32);
        java.util.Date date42 = new java.util.Date(11, 11, 3);
        boolean boolean43 = date29.before(date42);
        java.util.Date date44 = new java.util.Date();
        int int45 = date44.getDay();
        java.util.Date date46 = new java.util.Date();
        date46.setMinutes((int) '#');
        boolean boolean49 = date44.before(date46);
        int int50 = date46.getHours();
        boolean boolean51 = date29.before(date46);
        java.time.Instant instant52 = date29.toInstant();
        java.util.Date date53 = java.util.Date.from(instant52);
        boolean boolean54 = calendar6.before((java.lang.Object) instant52);
        calendar6.roll(5, 7);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "tedesco" + "'", str4, "tedesco");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=4632,MONTH=8,WEEK_OF_YEAR=38,WEEK_OF_MONTH=3,DAY_OF_MONTH=28,DAY_OF_YEAR=265,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date17.toString(), "Sun Jan 10 00:00:00 GMT+00:00 4630");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Jan 10, 4630 12:00:00 AM" + "'", str18, "Jan 10, 4630 12:00:00 AM");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572645594,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=634,ZONE_OFFSET=40,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Fri Feb 11 09:44:05 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1644572645594L + "'", long31 == 1644572645594L);
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 5 + "'", int33 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1644572645594L + "'", long34 == 1644572645594L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals(date42.toString(), "Sun Dec 03 00:00:00 GMT+00:00 1911");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Fri Feb 11 09:44:05 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Fri Feb 11 09:35:05 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 9 + "'", int50 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(date53);
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Fri Feb 11 09:44:05 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test20449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20449");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, 372);
    }

    @Test
    public void test20450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20450");
        java.util.Locale locale3 = new java.util.Locale("it", "", "United States");
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getLanguage();
        boolean boolean7 = locale5.hasExtensions();
        java.lang.String str8 = locale3.getDisplayName(locale5);
        boolean boolean9 = locale3.hasExtensions();
        java.lang.String str10 = locale3.getLanguage();
        java.lang.String str11 = locale3.getDisplayCountry();
        java.lang.Object obj12 = locale3.clone();
        org.junit.Assert.assertEquals(locale3.toString(), "it__United States");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh" + "'", str6, "zh");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u610f\u5927\u5229\u6587 (United States)" + "'", str8, "\u610f\u5927\u5229\u6587 (United States)");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "it" + "'", str10, "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "it__United States");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "it__United States");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "it__United States");
    }

    @Test
    public void test20451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20451");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat5 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale4);
        java.lang.String str6 = locale4.getLanguage();
        java.lang.String str7 = locale4.getVariant();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        boolean boolean10 = locale8.hasExtensions();
        java.lang.String str11 = locale4.getDisplayCountry(locale8);
        java.util.Locale locale12 = locale8.stripExtensions();
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale16 = new java.util.Locale("de");
        java.lang.String str17 = locale16.toLanguageTag();
        java.lang.String[] strArray19 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.stream.Stream<java.lang.String> strStream22 = strList20.stream();
        boolean boolean24 = strList20.add("hi!");
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = locale25.getLanguage();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.lang.String str28 = locale25.getDisplayVariant(locale27);
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.lang.String str30 = locale25.getDisplayVariant(locale29);
        boolean boolean31 = strList20.contains((java.lang.Object) locale25);
        java.lang.String str32 = locale16.getDisplayScript(locale25);
        java.util.Set<java.lang.Character> charSet33 = locale16.getExtensionKeys();
        java.lang.String str34 = locale16.getISO3Language();
        java.util.Calendar.Builder builder35 = new java.util.Calendar.Builder();
        java.util.Locale locale36 = java.util.Locale.CHINESE;
        java.lang.String str37 = locale36.getLanguage();
        boolean boolean38 = locale36.hasExtensions();
        java.lang.String str39 = locale36.getDisplayCountry();
        java.util.Calendar.Builder builder40 = builder35.setLocale(locale36);
        java.util.Calendar.Builder builder42 = builder35.setLenient(false);
        java.util.Calendar.Builder builder44 = builder42.setInstant(1644485752836L);
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet46 = locale45.getExtensionKeys();
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = locale48.getLanguage();
        java.lang.String str50 = locale47.getDisplayLanguage(locale48);
        java.lang.String str51 = locale45.getDisplayLanguage(locale47);
        boolean boolean52 = locale47.hasExtensions();
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.lang.String str54 = locale53.getLanguage();
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.lang.String str56 = locale53.getDisplayVariant(locale55);
        java.util.Locale locale57 = java.util.Locale.GERMANY;
        java.lang.String str58 = locale53.getDisplayVariant(locale57);
        java.util.Locale locale59 = java.util.Locale.PRC;
        java.lang.String str60 = locale57.getDisplayScript(locale59);
        java.lang.String str61 = locale47.getDisplayName(locale57);
        java.util.Calendar.Builder builder62 = builder44.setLocale(locale57);
        java.lang.String str63 = locale16.getDisplayCountry(locale57);
        boolean boolean64 = locale16.hasExtensions();
        java.util.Locale locale66 = new java.util.Locale("lundi 7 f\351vrier 2022");
        java.lang.String str67 = locale16.getDisplayCountry(locale66);
        java.util.Locale.setDefault(category0, locale16);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "zh" + "'", str6, "zh");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh" + "'", str9, "zh");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u56fd" + "'", str11, "\u4e2d\u56fd");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "de" + "'", str17, "de");
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zh" + "'", str26, "zh");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "deu" + "'", str34, "deu");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "zh" + "'", str37, "zh");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "zh" + "'", str49, "zh");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str50, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "coreano" + "'", str51, "coreano");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "zh" + "'", str54, "zh");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Italienisch" + "'", str61, "Italienisch");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals(locale66.toString(), "lundi 7 f\351vrier 2022");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test20452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20452");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale1 = java.util.Locale.GERMAN;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getLanguage();
        java.lang.String str6 = locale0.getExtension('a');
        java.util.Locale locale9 = new java.util.Locale("tue jan 11 09:34:31 utc 2022", "ko");
        java.lang.String str10 = locale0.getDisplayName(locale9);
        java.lang.String str11 = locale9.getVariant();
        java.text.ParsePosition parsePosition13 = new java.text.ParsePosition(16);
        int int14 = parsePosition13.getErrorIndex();
        java.util.TimeZone timeZone16 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat17 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone16);
        java.lang.String str18 = fastDateFormat17.getPattern();
        boolean boolean19 = parsePosition13.equals((java.lang.Object) fastDateFormat17);
        java.util.Locale locale20 = java.util.Locale.FRANCE;
        boolean boolean21 = parsePosition13.equals((java.lang.Object) locale20);
        java.lang.String str22 = locale20.getDisplayScript();
        java.util.Locale locale23 = locale20.stripExtensions();
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = locale24.getLanguage();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale24.getDisplayVariant(locale26);
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleKeys();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.lang.String str31 = locale28.getISO3Country();
        java.lang.String str33 = locale28.getExtension('u');
        java.lang.String str34 = locale20.getDisplayLanguage(locale28);
        java.lang.String str35 = locale28.getCountry();
        java.lang.String str36 = locale9.getDisplayVariant(locale28);
        java.util.Locale locale40 = new java.util.Locale("it", "", "United States");
        java.util.Set<java.lang.Character> charSet41 = locale40.getExtensionKeys();
        java.util.Locale locale42 = java.util.Locale.CHINESE;
        java.lang.String str43 = locale42.getLanguage();
        boolean boolean44 = locale42.hasExtensions();
        java.lang.String str45 = locale40.getDisplayName(locale42);
        java.lang.String str46 = locale42.getVariant();
        java.lang.String str47 = locale9.getDisplayScript(locale42);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "de");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Vereinigtes K\366nigreich" + "'", str2, "Vereinigtes K\366nigreich");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "en" + "'", str4, "en");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals(locale9.toString(), "tue jan 11 09:34:31 utc 2022_KO");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English (United Kingdom)" + "'", str10, "English (United Kingdom)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "h:mm:ss a z" + "'", str18, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh" + "'", str25, "zh");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "DEU" + "'", str31, "DEU");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Franz\366sisch" + "'", str34, "Franz\366sisch");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "DE" + "'", str35, "DE");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals(locale40.toString(), "it__United States");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "zh" + "'", str43, "zh");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u610f\u5927\u5229\u6587 (United States)" + "'", str45, "\u610f\u5927\u5229\u6587 (United States)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test20453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20453");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("de");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] { languageRange1 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone5.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale8.getDisplayCountry();
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone6, locale8);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = locale13.getLanguage();
        java.lang.String str15 = locale12.getDisplayLanguage(locale13);
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet17 = locale16.getExtensionKeys();
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat20 = org.apache.commons.lang3.time.FastDateFormat.getInstance("zh", locale19);
        java.util.Locale locale21 = java.util.Locale.FRANCE;
        java.util.Locale locale22 = java.util.Locale.ROOT;
        java.util.TimeZone timeZone24 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        boolean boolean26 = timeZone24.hasSameRules(timeZone25);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat27 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone25);
        java.util.Locale locale28 = fastDateFormat27.getLocale();
        java.util.Locale locale29 = java.util.Locale.FRANCE;
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = locale30.getLanguage();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale30.getDisplayVariant(locale32);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        java.lang.String str35 = locale30.getDisplayVariant(locale34);
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.util.Locale locale39 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone42 = java.util.TimeZone.getDefault();
        boolean boolean43 = timeZone41.hasSameRules(timeZone42);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat44 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone42);
        java.util.Locale locale45 = fastDateFormat44.getLocale();
        java.util.Locale locale46 = java.util.Locale.ITALIAN;
        java.util.TimeZone timeZone48 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone49 = java.util.TimeZone.getDefault();
        boolean boolean50 = timeZone48.hasSameRules(timeZone49);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat51 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone49);
        java.util.Locale locale52 = fastDateFormat51.getLocale();
        java.util.Locale locale53 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale54 = java.util.Locale.UK;
        java.util.Locale[] localeArray55 = new java.util.Locale[] { locale8, locale12, locale16, locale19, locale21, locale22, locale28, locale29, locale34, locale36, locale37, locale38, locale39, locale45, locale46, locale52, locale53, locale54 };
        java.util.ArrayList<java.util.Locale> localeList56 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList56, localeArray55);
        java.util.Locale locale58 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList56);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap59 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList60 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap59);
        java.lang.String[] strArray66 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022", "FastDateFormat[h:mm:ss a z]", "zh", "java.text.ParsePosition[index=16,errorIndex=-1]", "de" };
        java.util.ArrayList<java.lang.String> strList67 = new java.util.ArrayList<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList67, strArray66);
        java.lang.Object[] objArray69 = strList67.toArray();
        strList67.clear();
        java.lang.String[] strArray72 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList73 = new java.util.ArrayList<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList73, strArray72);
        java.util.stream.Stream<java.lang.String> strStream75 = strList73.stream();
        strList73.clear();
        java.util.Spliterator<java.lang.String> strSpliterator77 = strList73.spliterator();
        boolean boolean78 = strList67.containsAll((java.util.Collection<java.lang.String>) strList73);
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList73);
        java.lang.String[] strArray81 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        java.util.stream.Stream<java.lang.String> strStream84 = strList82.stream();
        boolean boolean86 = strList82.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor88 = strList82.listIterator(0);
        java.util.Locale.FilteringMode filteringMode89 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList82, filteringMode89);
        int int92 = strList82.indexOf((java.lang.Object) 1644572098619L);
        java.lang.String str94 = strList82.remove(0);
        java.lang.String[] strArray96 = java.util.TimeZone.getAvailableIDs(21);
        java.lang.CharSequence[] charSequenceArray97 = strList82.toArray((java.lang.CharSequence[]) strArray96);
        boolean boolean99 = strList82.add("2/11/22 9:39 AM");
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Deutsch" + "'", str9, "Deutsch");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1644572645724,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=764,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str15, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(fastDateFormat20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(fastDateFormat27);
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zh" + "'", str31, "zh");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(fastDateFormat44);
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone48);
        org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(fastDateFormat51);
        org.junit.Assert.assertNotNull(locale52);
// flaky:         org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertNotNull(languageRangeList60);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(strStream75);
        org.junit.Assert.assertNotNull(strSpliterator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(strStream84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(strItor88);
        org.junit.Assert.assertTrue("'" + filteringMode89 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode89.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "Tue Jan 11 09:34:31 UTC 2022" + "'", str94, "Tue Jan 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(strArray96);
        org.junit.Assert.assertNotNull(charSequenceArray97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test20454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20454");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale locale4 = builder0.build();
        java.util.Locale.Category category5 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category5, locale6);
        java.util.Locale locale8 = java.util.Locale.getDefault(category5);
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        boolean boolean11 = timeZone9.hasSameRules(timeZone10);
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone10, locale12);
        java.lang.String str14 = locale12.getDisplayLanguage();
        java.lang.String str15 = locale8.getDisplayCountry(locale12);
        java.lang.String str16 = locale12.getLanguage();
        java.util.Locale.Category category17 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category17, locale18);
        java.util.Locale locale20 = java.util.Locale.getDefault(category17);
        boolean boolean21 = locale20.hasExtensions();
        java.lang.String[] strArray27 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.stream.Stream<java.lang.String> strStream30 = strList28.stream();
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        int int32 = strList28.lastIndexOf((java.lang.Object) locale31);
        java.lang.String str33 = locale20.getDisplayVariant(locale31);
        java.util.Locale locale34 = java.util.Locale.CHINESE;
        java.lang.String str35 = locale34.getLanguage();
        java.lang.String str36 = locale20.getDisplayVariant(locale34);
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = locale37.getLanguage();
        boolean boolean39 = locale37.hasExtensions();
        java.lang.String str40 = locale37.getDisplayScript();
        java.lang.String str41 = locale34.getDisplayCountry(locale37);
        java.lang.String str42 = locale12.getDisplayVariant(locale34);
        java.util.Set<java.lang.String> strSet43 = locale34.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder44 = builder0.setLocale(locale34);
        java.util.Locale locale48 = new java.util.Locale("", "", "Sun Oct 11 09:41:57 GMT+00:00 2026");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder49 = builder0.setLocale(locale48);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: Sun Oct 11 09:41:57 GMT+00:00 2026 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category5.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1644572645786,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=826,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category17.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strStream30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "zh" + "'", str35, "zh");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zh" + "'", str38, "zh");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals(locale48.toString(), "");
    }

    @Test
    public void test20455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20455");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category6, locale9);
        java.lang.String str11 = locale9.toLanguageTag();
        java.util.Calendar.Builder builder12 = builder0.setLocale(locale9);
        java.util.Calendar.Builder builder16 = builder12.setDate((int) (byte) 100, 53, 45);
        java.util.Calendar calendar17 = builder12.build();
        java.util.Calendar.Builder builder18 = new java.util.Calendar.Builder();
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        boolean boolean21 = locale19.hasExtensions();
        java.lang.String str22 = locale19.getDisplayCountry();
        java.util.Calendar.Builder builder23 = builder18.setLocale(locale19);
        java.util.Calendar.Builder builder27 = builder18.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder29 = builder18.setLenient(false);
        java.util.Calendar.Builder builder33 = builder18.setTimeOfDay(15, 0, 32770);
        java.util.Calendar.Builder builder36 = builder33.setWeekDefinition(7, 7);
        java.util.Calendar.Builder builder38 = builder33.setLenient(true);
        java.util.Calendar.Builder builder43 = builder38.setTimeOfDay(41, 45, 13, 11);
        java.util.Calendar.Builder builder45 = builder43.setLenient(false);
        java.util.Calendar.Builder builder49 = builder45.setDate((int) ' ', 4, 20);
        java.util.Calendar.Builder builder51 = builder49.setLenient(true);
        java.util.Calendar.Builder builder52 = new java.util.Calendar.Builder();
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.lang.String str54 = locale53.getLanguage();
        boolean boolean55 = locale53.hasExtensions();
        java.lang.String str56 = locale53.getDisplayCountry();
        java.util.Calendar.Builder builder57 = builder52.setLocale(locale53);
        java.util.Calendar.Builder builder61 = builder52.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale63 = new java.util.Locale("de");
        java.lang.String str64 = locale63.toLanguageTag();
        java.lang.String str65 = locale63.getCountry();
        java.util.Calendar.Builder builder66 = builder52.setLocale(locale63);
        java.util.Calendar calendar67 = builder66.build();
        int[] intArray68 = new int[] {};
        java.util.Calendar.Builder builder69 = builder66.setFields(intArray68);
        java.util.Calendar.Builder builder70 = builder49.setFields(intArray68);
        java.util.Calendar.Builder builder71 = builder12.setFields(intArray68);
        java.util.TimeZone timeZone73 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone74 = java.util.TimeZone.getDefault();
        boolean boolean75 = timeZone73.hasSameRules(timeZone74);
        java.util.Calendar calendar76 = java.util.Calendar.getInstance(timeZone73);
        java.text.ParsePosition parsePosition78 = new java.text.ParsePosition(16);
        int int79 = parsePosition78.getErrorIndex();
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet81 = locale80.getExtensionKeys();
        boolean boolean82 = parsePosition78.equals((java.lang.Object) locale80);
        java.lang.String str83 = locale80.getDisplayName();
        boolean boolean84 = calendar76.before((java.lang.Object) str83);
        calendar76.setTimeInMillis(1644572088149L);
        java.util.TimeZone timeZone88 = java.util.TimeZone.getTimeZone("\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00");
        calendar76.setTimeZone(timeZone88);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat90 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(0, timeZone88);
        java.lang.String str91 = timeZone88.getID();
        java.util.Calendar.Builder builder92 = builder12.setTimeZone(timeZone88);
        java.util.Calendar calendar93 = builder12.build();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en-GB" + "'", str11, "en-GB");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-58868467200040,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=104,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=197,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh" + "'", str20, "zh");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "zh" + "'", str54, "zh");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "de" + "'", str64, "de");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-62130240000040,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=6,DAY_OF_YEAR=65,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(timeZone73);
        org.junit.Assert.assertEquals(timeZone73.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone74);
        org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(calendar76);
        org.junit.Assert.assertEquals(calendar76.toString(), "java.util.GregorianCalendar[time=1644572088149,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=48,MILLISECOND=189,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Korean" + "'", str83, "Korean");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(timeZone88);
        org.junit.Assert.assertEquals(timeZone88.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(fastDateFormat90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "GMT" + "'", str91, "GMT");
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(calendar93);
        org.junit.Assert.assertEquals(calendar93.toString(), "java.util.GregorianCalendar[time=-58868467200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=104,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=197,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test20456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20456");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.stream.Stream<java.lang.String> strStream7 = strList2.stream();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.ROOT;
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone9, locale11);
        java.util.Date date13 = new java.util.Date();
        int int14 = date13.getTimezoneOffset();
        date13.setMonth(0);
        int int17 = date13.getSeconds();
        int int18 = date13.getDay();
        int int19 = date13.getDay();
        date13.setSeconds((int) 'x');
        calendar12.setTime(date13);
        java.util.Calendar.Builder builder23 = new java.util.Calendar.Builder();
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = locale24.getLanguage();
        boolean boolean26 = locale24.hasExtensions();
        java.lang.String str27 = locale24.getDisplayCountry();
        java.util.Calendar.Builder builder28 = builder23.setLocale(locale24);
        java.util.Calendar.Builder builder32 = builder23.setWeekDate(38, 41, 11);
        java.util.Calendar.Builder builder36 = builder23.setDate(100, (int) 'x', (int) 'u');
        java.util.Calendar.Builder builder40 = builder36.setDate((int) (byte) -1, 30, 4);
        java.util.TimeZone timeZone42 = java.util.TimeZone.getTimeZone("\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00");
        java.util.Calendar.Builder builder43 = builder40.setTimeZone(timeZone42);
        calendar12.setTimeZone(timeZone42);
        calendar12.setFirstDayOfWeek((int) (short) 1);
        int int47 = strList2.indexOf((java.lang.Object) calendar12);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strStream7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1641894360856,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=11,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=46,SECOND=0,MILLISECOND=896,ZONE_OFFSET=40,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Tue Jan 11 09:46:00 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh" + "'", str25, "zh");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test20457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20457");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String[] strArray10 = new java.lang.String[] { "de", "FastDateFormat[h:mm:ss a z]", "FastDateFormat[h:mm:ss a z]", "Chinese", "Coordinated Universal Time" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        java.util.Locale locale14 = java.util.Locale.JAPANESE;
        int int15 = strList11.lastIndexOf((java.lang.Object) locale14);
        java.lang.String str16 = locale3.getDisplayVariant(locale14);
        java.lang.String str17 = locale14.getVariant();
        java.lang.String str18 = locale14.getISO3Country();
        java.util.Calendar calendar19 = java.util.Calendar.getInstance(locale14);
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.lang.String str22 = locale21.getLanguage();
        java.lang.String str23 = locale20.getDisplayLanguage(locale21);
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = locale24.getLanguage();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale24.getDisplayVariant(locale26);
        java.lang.String str28 = locale21.getDisplayLanguage(locale24);
        java.lang.String str29 = locale24.getISO3Country();
        boolean boolean30 = calendar19.after((java.lang.Object) locale24);
        calendar19.clear(12);
        calendar19.setTimeInMillis(1644572251994L);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(calendar19);
        org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1644572251994,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=32,MILLISECOND=34,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh" + "'", str22, "zh");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str23, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh" + "'", str25, "zh");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u4e2d\u6587" + "'", str28, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test20458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20458");
        java.util.Date date5 = new java.util.Date(53, (int) (byte) 1, 121, 4, 34);
        date5.setSeconds(51);
        org.junit.Assert.assertEquals(date5.toString(), "Mon Jun 01 04:34:51 GMT+00:00 1953");
    }

    @Test
    public void test20459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20459");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.lang.String str3 = locale2.getLanguage();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale2.getDisplayVariant(locale4);
        boolean boolean6 = calendar0.before((java.lang.Object) str5);
        int int7 = calendar0.getFirstDayOfWeek();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale11);
        int int16 = calendar14.getActualMinimum(2);
        java.util.TimeZone timeZone17 = calendar14.getTimeZone();
        boolean boolean18 = calendar0.before((java.lang.Object) timeZone17);
        int int20 = calendar0.getMaximum((int) (short) 10);
        int int21 = calendar0.getFirstDayOfWeek();
        boolean boolean22 = calendar0.isWeekDateSupported();
        java.util.Date date23 = calendar0.getTime();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572645909,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=949,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh" + "'", str3, "zh");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "tedesco" + "'", str12, "tedesco");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572645909,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=949,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 11 + "'", int20 == 11);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Fri Feb 11 09:44:05 GMT+00:00 2022");
    }

    @Test
    public void test20460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20460");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(16);
        int int2 = parsePosition1.getErrorIndex();
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        boolean boolean5 = parsePosition1.equals((java.lang.Object) locale3);
        java.lang.String[] strArray21 = new java.lang.String[] { "Vereinigtes K\366nigreich", "tedesco (Germania)", "Jan 10, 4630 12:00:00 AM", "Chinese", "", "Tue Jan 11 09:34:31 UTC 2022", "", "Greenwich Mean Time", "Coordinated Universal Time", "", "Greenwich Mean Time", "h:mm:ss a z", "", "coreano", "Greenwich Mean Time" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.lang.String[] strArray25 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        java.util.stream.Stream<java.lang.String> strStream28 = strList26.stream();
        java.util.ListIterator<java.lang.String> strItor29 = strList26.listIterator();
        int int30 = strList22.lastIndexOf((java.lang.Object) strItor29);
        java.util.stream.Stream<java.lang.String> strStream31 = strList22.stream();
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = locale32.getLanguage();
        java.lang.String str34 = locale32.getDisplayLanguage();
        boolean boolean35 = strList22.equals((java.lang.Object) locale32);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone37 = java.util.TimeZone.getDefault();
        boolean boolean38 = timeZone36.hasSameRules(timeZone37);
        java.util.Locale locale39 = java.util.Locale.ROOT;
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone37, locale39);
        java.lang.String str41 = locale32.getDisplayCountry(locale39);
        java.lang.String str42 = locale3.getDisplayVariant(locale39);
        java.lang.String str43 = locale39.getLanguage();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strStream28);
        org.junit.Assert.assertNotNull(strItor29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(strStream31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "zh" + "'", str33, "zh");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cinese" + "'", str34, "cinese");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(timeZone36);
        org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1644572645930,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=970,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test20461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20461");
        java.util.Locale.Category category1 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category1, locale2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category1, locale4);
        java.util.Locale locale6 = java.util.Locale.getDefault(category1);
        java.util.Locale locale7 = java.util.Locale.UK;
        java.lang.String str8 = locale7.toLanguageTag();
        java.util.Locale.setDefault(locale7);
        java.util.Locale.setDefault(category1, locale7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat11 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u30c9\u30a4\u30c4\u8a9e", locale7);
        java.lang.String str12 = locale7.getLanguage();
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category1.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "en-GB" + "'", str8, "en-GB");
        org.junit.Assert.assertNotNull(fastDateFormat11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "en" + "'", str12, "en");
    }

    @Test
    public void test20462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20462");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone2);
        java.util.Locale locale5 = fastDateFormat4.getLocale();
        java.lang.String str6 = fastDateFormat4.toString();
        java.text.ParsePosition parsePosition9 = new java.text.ParsePosition(16);
        int int10 = parsePosition9.getErrorIndex();
        java.lang.Object obj11 = fastDateFormat4.parseObject("Vereinigtes K\366nigreich", parsePosition9);
        java.lang.String[] strArray13 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        java.util.stream.Stream<java.lang.String> strStream16 = strList14.stream();
        boolean boolean18 = strList14.add("hi!");
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale19.getDisplayVariant(locale21);
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.lang.String str24 = locale19.getDisplayVariant(locale23);
        boolean boolean25 = strList14.contains((java.lang.Object) locale19);
        boolean boolean26 = parsePosition9.equals((java.lang.Object) strList14);
        boolean boolean28 = strList14.remove((java.lang.Object) "\u4e0a\u5348\u65f6\u5206\u79d2 GMT+00:00");
        java.lang.String[] strArray34 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022", "FastDateFormat[h:mm:ss a z]", "zh", "java.text.ParsePosition[index=16,errorIndex=-1]", "de" };
        java.util.ArrayList<java.lang.String> strList35 = new java.util.ArrayList<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList35, strArray34);
        java.lang.Object[] objArray37 = strList35.toArray();
        java.util.stream.Stream<java.lang.String> strStream38 = strList35.parallelStream();
        boolean boolean40 = strList35.equals((java.lang.Object) 1644572109348L);
        boolean boolean41 = strList14.containsAll((java.util.Collection<java.lang.String>) strList35);
        java.util.function.UnaryOperator<java.lang.String> strUnaryOperator42 = null;
        // The following exception was thrown during execution in test generation
        try {
            strList14.replaceAll(strUnaryOperator42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FastDateFormat[HH:mm' Uhr 'z]" + "'", str6, "FastDateFormat[HH:mm' Uhr 'z]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh" + "'", str20, "zh");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertNotNull(strStream38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test20463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20463");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getDefault();
        boolean boolean10 = timeZone8.hasSameRules(timeZone9);
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.lang.String str12 = locale11.getDisplayName();
        java.lang.String str13 = locale11.getDisplayCountry();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale11);
        java.util.Locale.setDefault(category7, locale11);
        java.util.Locale locale16 = java.util.Locale.getDefault(category7);
        java.util.Locale.Builder builder17 = builder6.setLocale(locale16);
        java.util.Locale locale18 = builder6.build();
        boolean boolean19 = locale18.hasExtensions();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone22 = java.util.TimeZone.getDefault();
        boolean boolean23 = timeZone21.hasSameRules(timeZone22);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat24 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone22);
        java.util.Locale locale25 = fastDateFormat24.getLocale();
        java.lang.String str26 = fastDateFormat24.toString();
        java.util.Locale locale27 = fastDateFormat24.getLocale();
        java.lang.String str28 = locale27.getDisplayName();
        java.lang.String str29 = locale18.getDisplayScript(locale27);
        java.text.ParsePosition parsePosition31 = new java.text.ParsePosition(16);
        int int32 = parsePosition31.getErrorIndex();
        java.util.TimeZone timeZone34 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat35 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone34);
        java.lang.String str36 = fastDateFormat35.getPattern();
        boolean boolean37 = parsePosition31.equals((java.lang.Object) fastDateFormat35);
        java.util.TimeZone timeZone40 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone41 = java.util.TimeZone.getDefault();
        boolean boolean42 = timeZone40.hasSameRules(timeZone41);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat43 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone41);
        java.util.Locale locale44 = fastDateFormat43.getLocale();
        java.lang.String str45 = fastDateFormat43.toString();
        java.text.ParsePosition parsePosition48 = new java.text.ParsePosition(16);
        int int49 = parsePosition48.getErrorIndex();
        java.lang.Object obj50 = fastDateFormat43.parseObject("Vereinigtes K\366nigreich", parsePosition48);
        java.lang.Object obj51 = fastDateFormat35.parseObject("\uc624\uc804\uc2dc\ubd84\ucd08", parsePosition48);
        java.text.ParsePosition parsePosition54 = new java.text.ParsePosition((int) (short) 100);
        java.lang.Object obj55 = fastDateFormat35.parseObject("11 Jan 2022 09:36:59 GMT", parsePosition54);
        java.util.Locale locale56 = fastDateFormat35.getLocale();
        java.lang.String str57 = locale27.getDisplayScript(locale56);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "German" + "'", str12, "German");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572646007,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=6,MILLISECOND=47,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(fastDateFormat24);
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "FastDateFormat[HH:mm' Uhr 'z]" + "'", str26, "FastDateFormat[HH:mm' Uhr 'z]");
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Deutsch" + "'", str28, "Deutsch");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "h:mm:ss a z" + "'", str36, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(fastDateFormat43);
        org.junit.Assert.assertNotNull(locale44);
// flaky:         org.junit.Assert.assertEquals(locale44.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "FastDateFormat[HH:mm' Uhr 'z]" + "'", str45, "FastDateFormat[HH:mm' Uhr 'z]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
    }

    @Test
    public void test20464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20464");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        strList2.clear();
        java.util.stream.Stream<java.lang.String> strStream6 = strList2.stream();
        int int7 = strList2.size();
        strList2.clear();
        java.lang.String[] strArray44 = new java.lang.String[] { "\uc624\uc804\uc2dc\ubd84\ucd08", "FastDateFormat[zh]", "java.text.FieldPosition[field=5,attribute=null,beginIndex=0,endIndex=0]", "UTC", "java.text.ParsePosition[index=16,errorIndex=-1]", "java.text.FieldPosition[field=15,attribute=null,beginIndex=0,endIndex=0]", "java.util.GregorianCalendar[time=1644572085165,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=45,MILLISECOND=165,ZONE_OFFSET=0,DST_OFFSET=0]", "\u5e74\u6708\u65e5", "\u4e2d\u56fd", "java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "31 May 1909 18:40:08 GMT", "tedesco (Germania)", "\u5fb7\u6587", "UTC9", "Chinese", "de", "9:34:41 AM UTC", "\u610f\u5927\u5229\u6587", "UTC9", "German", "\uc624\uc804\uc2dc\ubd84\ucd08", "9:34:46 AM UTC", "java.util.GregorianCalendar[time=1644572085165,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=45,MILLISECOND=165,ZONE_OFFSET=0,DST_OFFSET=0]", "\uc624\uc804\uc2dc\ubd84\ucd08", "java.text.FieldPosition[field=15,attribute=null,beginIndex=0,endIndex=0]", "\u610f\u5927\u5229\u6587", "\u5fb7\u6587", "Deutsch", "tedesco", "9:34:44 AM UTC", "de", "Chinese", "Vereinigtes K\366nigreich", "9:34:41 AM UTC", "UTC9" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        strList45.clear();
        boolean boolean48 = strList2.retainAll((java.util.Collection<java.lang.String>) strList45);
        java.lang.Object obj49 = null;
        boolean boolean50 = strList2.remove(obj49);
        java.text.AttributedCharacterIterator[] attributedCharacterIteratorArray51 = new java.text.AttributedCharacterIterator[] {};
        java.text.AttributedCharacterIterator[] attributedCharacterIteratorArray52 = strList2.toArray(attributedCharacterIteratorArray51);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(strStream6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(attributedCharacterIteratorArray51);
        org.junit.Assert.assertNotNull(attributedCharacterIteratorArray52);
    }

    @Test
    public void test20465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20465");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone2);
        java.util.Locale locale5 = fastDateFormat4.getLocale();
        java.util.Date date6 = new java.util.Date();
        int int7 = date6.getTimezoneOffset();
        date6.setMonth(0);
        int int10 = date6.getSeconds();
        date6.setMinutes(32770);
        date6.setYear(0);
        java.lang.String[] strArray16 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        java.util.stream.Stream<java.lang.String> strStream19 = strList17.stream();
        boolean boolean21 = strList17.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor23 = strList17.listIterator(0);
        java.lang.String[] strArray25 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        java.util.stream.Stream<java.lang.String> strStream28 = strList26.stream();
        boolean boolean30 = strList26.add("hi!");
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = locale31.getLanguage();
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale31.getDisplayVariant(locale33);
        java.util.Locale locale35 = java.util.Locale.GERMANY;
        java.lang.String str36 = locale31.getDisplayVariant(locale35);
        boolean boolean37 = strList26.contains((java.lang.Object) locale31);
        boolean boolean38 = strList17.removeAll((java.util.Collection<java.lang.String>) strList26);
        java.util.TimeZone timeZone40 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat41 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone40);
        java.util.Date date42 = new java.util.Date();
        int int43 = date42.getTimezoneOffset();
        int int44 = date42.getSeconds();
        java.lang.StringBuffer stringBuffer45 = null;
        java.text.Format.Field field46 = null;
        java.text.FieldPosition fieldPosition48 = new java.text.FieldPosition(field46, 1);
        fieldPosition48.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer51 = fastDateFormat41.format((java.lang.Object) date42, stringBuffer45, fieldPosition48);
        int int52 = strList17.lastIndexOf((java.lang.Object) fieldPosition48);
        java.util.Date date53 = new java.util.Date();
        int int54 = date53.getDay();
        java.util.Date date55 = new java.util.Date();
        date55.setMinutes((int) '#');
        boolean boolean58 = date53.before(date55);
        boolean boolean59 = fieldPosition48.equals((java.lang.Object) date55);
        int int60 = date55.getMinutes();
        int int61 = date55.getMinutes();
        boolean boolean62 = date6.after(date55);
        int int63 = date55.getDay();
        int int64 = date55.getMinutes();
        java.lang.String str65 = fastDateFormat4.format((java.lang.Object) date55);
        boolean boolean67 = fastDateFormat4.equals((java.lang.Object) 1644572191297L);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "de");
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Sat Feb 03 03:10:06 GMT+00:00 1900");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strStream28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zh" + "'", str32, "zh");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(fastDateFormat41);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Fri Feb 11 09:44:06 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 6 + "'", int44 == 6);
        org.junit.Assert.assertNull(stringBuffer51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Fri Feb 11 09:44:06 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Fri Feb 11 09:35:06 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 35 + "'", int60 == 35);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 35 + "'", int61 == 35);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 35 + "'", int64 == 35);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "09:35 Uhr GMT+00:00" + "'", str65, "09:35 Uhr GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test20466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20466");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone1);
        java.lang.String str3 = fastDateFormat2.getPattern();
        java.util.TimeZone timeZone4 = fastDateFormat2.getTimeZone();
        java.util.Date date5 = new java.util.Date();
        int int6 = date5.getTimezoneOffset();
        long long7 = date5.getTime();
        date5.setDate((int) (byte) 10);
        long long10 = date5.getTime();
        date5.setHours(32769);
        java.lang.String str13 = fastDateFormat2.format(date5);
        java.util.Locale locale14 = fastDateFormat2.getLocale();
        java.lang.String str16 = fastDateFormat2.format(1644572427017L);
        java.util.Date date17 = new java.util.Date();
        int int18 = date17.getTimezoneOffset();
        date17.setYear(11);
        int int21 = date17.getDate();
        java.util.Date date22 = new java.util.Date();
        int int23 = date22.getSeconds();
        date22.setMinutes((int) (short) 1);
        boolean boolean26 = date17.after(date22);
        java.text.AttributedCharacterIterator attributedCharacterIterator27 = fastDateFormat2.formatToCharacterIterator((java.lang.Object) date17);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "h:mm:ss a z" + "'", str3, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Nov 06 09:44:06 GMT+00:00 2025");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1644572646095L + "'", long7 == 1644572646095L);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1644486246095L + "'", long10 == 1644486246095L);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "9:44:06 AM UTC" + "'", str13, "9:44:06 AM UTC");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "9:40:27 AM UTC" + "'", str16, "9:40:27 AM UTC");
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Sat Feb 11 09:44:06 GMT+00:00 1911");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 11 + "'", int21 == 11);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Fri Feb 11 09:01:06 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 6 + "'", int23 == 6);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(attributedCharacterIterator27);
    }

    @Test
    public void test20467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20467");
        java.util.Locale locale1 = new java.util.Locale("07-Feb-2022 09:37:28");
        org.junit.Assert.assertEquals(locale1.toString(), "07-feb-2022 09:37:28");
    }

    @Test
    public void test20468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20468");
        java.util.Date date5 = new java.util.Date(11, (int) 'a', 0, 2, (int) (short) -1);
        int int6 = date5.getMonth();
        int int7 = date5.getMonth();
        int int8 = date5.getYear();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Jan 31 01:59:00 GMT+00:00 1919");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
    }

    @Test
    public void test20469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20469");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        boolean boolean4 = timeZone2.hasSameRules(timeZone3);
        boolean boolean5 = timeZone1.hasSameRules(timeZone3);
        boolean boolean6 = timeZone3.observesDaylightTime();
        int int8 = timeZone3.getOffset(1644572072169L);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 0, timeZone3);
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone11);
        java.lang.StringBuffer stringBuffer14 = null;
        java.lang.StringBuffer stringBuffer15 = fastDateFormat12.format((long) 32772, stringBuffer14);
        java.util.TimeZone timeZone16 = fastDateFormat12.getTimeZone();
        int int17 = timeZone16.getRawOffset();
        boolean boolean18 = timeZone3.hasSameRules(timeZone16);
        java.util.TimeZone timeZone20 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat21 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone20);
        java.lang.String str22 = fastDateFormat21.toString();
        java.lang.String str23 = fastDateFormat21.toString();
        java.util.TimeZone timeZone24 = fastDateFormat21.getTimeZone();
        java.util.Locale locale25 = fastDateFormat21.getLocale();
        java.util.TimeZone timeZone26 = fastDateFormat21.getTimeZone();
        int int27 = timeZone26.getRawOffset();
        timeZone26.setRawOffset(43);
        boolean boolean30 = timeZone16.hasSameRules(timeZone26);
        timeZone26.setID("11 Feb 2022 09:35:42 GMT");
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone26);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 40 + "'", int8 == 40);
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertNull(stringBuffer15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 40 + "'", int17 == 40);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(fastDateFormat21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str22, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str23, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1644572646142,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:35:42 GMT\",offset=43,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=6,MILLISECOND=185,ZONE_OFFSET=43,DST_OFFSET=0]");
    }

    @Test
    public void test20470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20470");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor8 = strList2.listIterator(0);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        java.util.ListIterator<java.lang.String> strItor14 = strList11.listIterator();
        boolean boolean15 = strList2.removeAll((java.util.Collection<java.lang.String>) strList11);
        boolean boolean17 = strList2.add("Greenwich Mean Time");
        java.util.stream.Stream<java.lang.String> strStream18 = strList2.parallelStream();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strStream18);
    }

    @Test
    public void test20471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20471");
        java.util.Date date6 = new java.util.Date(23, 26, 32, (int) (byte) 10, 33, 24356589);
        int int7 = date6.getTimezoneOffset();
        date6.setMonth(8);
        date6.setYear(19);
        java.lang.Object obj12 = date6.clone();
        org.junit.Assert.assertEquals(date6.toString(), "Mon Sep 08 08:16:09 GMT+00:00 1919");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "Mon Sep 08 08:16:09 GMT+00:00 1919");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "Mon Sep 08 08:16:09 GMT+00:00 1919");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "Mon Sep 08 08:16:09 GMT+00:00 1919");
    }

    @Test
    public void test20472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20472");
        java.util.TimeZone timeZone1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(32768, timeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal time style 32768");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test20473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20473");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        timeZone1.setRawOffset(40);
        timeZone1.setID("francese (Francia)");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.Calendar.Builder builder10 = new java.util.Calendar.Builder();
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        boolean boolean13 = locale11.hasExtensions();
        java.lang.String str14 = locale11.getDisplayCountry();
        java.util.Calendar.Builder builder15 = builder10.setLocale(locale11);
        java.util.Date date17 = new java.util.Date("Tue Jan 11 09:34:31 UTC 2022");
        java.util.Calendar.Builder builder18 = builder15.setInstant(date17);
        date17.setSeconds(7);
        int int21 = date17.getMinutes();
        java.lang.StringBuffer stringBuffer22 = null;
        java.lang.StringBuffer stringBuffer23 = fastDateFormat9.format(date17, stringBuffer22);
        date17.setMonth((int) ' ');
        long long26 = date17.getTime();
        int int27 = date17.getDate();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572646221,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"francese (Francia)\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=6,MILLISECOND=261,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh" + "'", str12, "zh");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals(date17.toString(), "Wed Sep 11 09:34:07 GMT+00:00 2024");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 34 + "'", int21 == 34);
        org.junit.Assert.assertNull(stringBuffer23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1726047247000L + "'", long26 == 1726047247000L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 11 + "'", int27 == 11);
    }

    @Test
    public void test20474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20474");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getInstance("\u5e74\u6708\u65e5");
        java.text.ParsePosition parsePosition4 = new java.text.ParsePosition(16);
        java.lang.Object obj5 = fastDateFormat1.parseObject("12:00:00 AM UTC", parsePosition4);
        java.util.TimeZone timeZone6 = fastDateFormat1.getTimeZone();
        java.util.Locale locale7 = fastDateFormat1.getLocale();
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(locale7);
        calendar8.set(28, (int) 'u', 50, 35, 32769);
        boolean boolean15 = calendar8.isWeekDateSupported();
        org.junit.Assert.assertNotNull(fastDateFormat1);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=28,MONTH=117,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=50,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=35,MINUTE=32769,SECOND=6,MILLISECOND=286,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test20475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20475");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        strList2.clear();
        java.lang.String[] strArray7 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.stream.Stream<java.lang.String> strStream10 = strList8.stream();
        boolean boolean11 = strList2.containsAll((java.util.Collection<java.lang.String>) strList8);
        java.util.Spliterator<java.lang.String> strSpliterator12 = strList2.spliterator();
        java.util.Date date16 = new java.util.Date((-1), 32772, (int) (short) 10);
        java.lang.String str17 = date16.toLocaleString();
        boolean boolean18 = strList2.contains((java.lang.Object) date16);
        java.lang.Comparable[][][] comparableArray20 = new java.lang.Comparable[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][][] strComparableArray21 = (java.lang.Comparable<java.lang.String>[][][]) comparableArray20;
        java.lang.Comparable<java.lang.String>[][][] strComparableArray22 = strList2.toArray(strComparableArray21);
        boolean boolean24 = strList2.remove((java.lang.Object) "java.text.parseposition[index=100,errorindex=-1] (2022-2-11 9:34:44,it)");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList26 = java.util.Locale.LanguageRange.parse("Deutsch");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap27 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList28 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList26, strMap27);
        java.lang.String[] strArray30 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.stream.Stream<java.lang.String> strStream33 = strList31.stream();
        boolean boolean35 = strList31.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor37 = strList31.listIterator(0);
        java.lang.String[] strArray39 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        java.util.stream.Stream<java.lang.String> strStream42 = strList40.stream();
        boolean boolean44 = strList40.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor46 = strList40.listIterator(0);
        java.lang.String[] strArray48 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList49 = new java.util.ArrayList<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList49, strArray48);
        java.util.stream.Stream<java.lang.String> strStream51 = strList49.stream();
        java.util.ListIterator<java.lang.String> strItor52 = strList49.listIterator();
        boolean boolean53 = strList40.removeAll((java.util.Collection<java.lang.String>) strList49);
        boolean boolean54 = strList31.containsAll((java.util.Collection<java.lang.String>) strList40);
        java.util.Spliterator<java.lang.String> strSpliterator55 = strList40.spliterator();
        java.util.stream.Stream<java.lang.String> strStream56 = strList40.stream();
        java.util.Locale locale57 = java.util.Locale.ROOT;
        boolean boolean58 = locale57.hasExtensions();
        java.util.Set<java.lang.String> strSet59 = locale57.getUnicodeLocaleAttributes();
        boolean boolean60 = strList40.retainAll((java.util.Collection<java.lang.String>) strSet59);
        int int61 = strList40.size();
        java.lang.String str62 = java.util.Locale.lookupTag(languageRangeList26, (java.util.Collection<java.lang.String>) strList40);
        boolean boolean63 = strList2.removeAll((java.util.Collection<java.lang.String>) strList40);
        boolean boolean64 = strList2.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream65 = strList2.parallelStream();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strSpliterator12);
        org.junit.Assert.assertEquals(date16.toString(), "Sun Jan 10 00:00:00 GMT+00:00 4630");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "10-Jan-4630 00:00:00" + "'", str17, "10-Jan-4630 00:00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(comparableArray20);
        org.junit.Assert.assertNotNull(strComparableArray21);
        org.junit.Assert.assertNotNull(strComparableArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(languageRangeList26);
        org.junit.Assert.assertNotNull(languageRangeList28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strItor37);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(strStream42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strItor46);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strStream51);
        org.junit.Assert.assertNotNull(strItor52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strSpliterator55);
        org.junit.Assert.assertNotNull(strStream56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strStream65);
    }

    @Test
    public void test20476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20476");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale11 = new java.util.Locale("de");
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale11.getCountry();
        java.util.Calendar.Builder builder14 = builder0.setLocale(locale11);
        java.util.Calendar calendar15 = builder14.build();
        int[] intArray16 = new int[] {};
        java.util.Calendar.Builder builder17 = builder14.setFields(intArray16);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("04.02.1919 02:07:00");
        java.lang.String str20 = locale19.getDisplayName();
        java.util.Calendar.Builder builder21 = builder17.setLocale(locale19);
        java.util.Calendar.Builder builder23 = builder21.setLenient(true);
        java.util.Calendar calendar24 = builder23.build();
        // The following exception was thrown during execution in test generation
        try {
            calendar24.roll(42, 63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "de" + "'", str12, "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(calendar15);
        org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=-62130240000040,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=6,DAY_OF_YEAR=65,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[]");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(calendar24);
        org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=-62131449600040,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=51,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=40,DST_OFFSET=0]");
    }

    @Test
    public void test20477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20477");
        java.util.Locale locale3 = new java.util.Locale("09:34 Uhr GMT+00:00", "java.text.ParsePosition[index=1,errorIndex=-1]", "9:34:49 AM UTC");
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale4.getDisplayName();
        org.junit.Assert.assertEquals(locale3.toString(), "09:34 uhr gmt+00:00_JAVA.TEXT.PARSEPOSITION[INDEX=1,ERRORINDEX=-1]_9:34:49 AM UTC");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "09:34 uhr gmt+00:00_JAVA.TEXT.PARSEPOSITION[INDEX=1,ERRORINDEX=-1]_9:34:49 AM UTC");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "09:34 uhr gmt+00:00 (JAVA.TEXT.PARSEPOSITION[INDEX=1,ERRORINDEX=-1],9:34:49 AM UTC)" + "'", str5, "09:34 uhr gmt+00:00 (JAVA.TEXT.PARSEPOSITION[INDEX=1,ERRORINDEX=-1],9:34:49 AM UTC)");
    }

    @Test
    public void test20478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20478");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder3.clear();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        java.lang.String[] strArray8 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList9 = new java.util.ArrayList<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList9, strArray8);
        java.util.stream.Stream<java.lang.String> strStream11 = strList9.stream();
        boolean boolean13 = strList9.add("hi!");
        java.util.Locale locale14 = java.util.Locale.CHINESE;
        java.lang.String str15 = locale14.getLanguage();
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = locale14.getDisplayVariant(locale18);
        boolean boolean20 = strList9.contains((java.lang.Object) locale14);
        java.lang.String str21 = locale14.getVariant();
        boolean boolean22 = locale14.hasExtensions();
        java.util.Locale.Builder builder23 = builder3.setLocale(locale14);
        java.util.Locale.Builder builder24 = builder3.clearExtensions();
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("de");
        java.util.Locale.Builder builder27 = builder3.setLocale(locale26);
        java.util.Locale.Builder builder28 = builder27.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder30 = builder28.setRegion("\u5e74\u6708\u65e5\u661f\u671f\u56db");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 0024?2?24? ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test20479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20479");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.time.Instant instant2 = calendar1.toInstant();
        int int3 = calendar1.getMinimalDaysInFirstWeek();
        int int4 = calendar1.getWeeksInWeekYear();
        java.time.Instant instant5 = calendar1.toInstant();
        int int7 = calendar1.getActualMinimum(3);
        java.util.TimeZone timeZone8 = calendar1.getTimeZone();
        calendar1.set(24356589, 16, 32768, 1970, (int) (short) 0, 292269054);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = calendar1.getActualMaximum(49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: 49");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=24356589,MONTH=16,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=32768,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=1970,MINUTE=0,SECOND=292269054,MILLISECOND=393,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test20480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20480");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder9 = builder0.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder11 = builder0.setLenient(false);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay(15, 0, 32770);
        java.util.Calendar.Builder builder18 = builder15.setWeekDefinition(7, 7);
        java.util.Calendar.Builder builder20 = builder15.setLenient(true);
        java.util.Calendar.Builder builder24 = builder20.setWeekDate(0, 53, 31);
        java.util.Calendar.Builder builder29 = builder24.setTimeOfDay(31, (-1), 39, 52);
        java.util.Calendar.Builder builder32 = builder29.set(0, 59);
        java.util.Calendar.Builder builder36 = builder32.setDate((-1), 0, 0);
        java.util.Calendar.Builder builder38 = builder32.setLenient(true);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test20481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20481");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        boolean boolean3 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(locale4);
        java.lang.StringBuffer stringBuffer6 = null;
        java.lang.StringBuffer stringBuffer7 = fastDateFormat2.format(calendar5, stringBuffer6);
        calendar5.setFirstDayOfWeek((int) 'a');
        calendar5.clear();
        calendar5.setFirstDayOfWeek(5);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        boolean boolean15 = timeZone13.hasSameRules(timeZone14);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone14, locale16);
        long long18 = calendar17.getTimeInMillis();
        calendar17.set(2022, (int) 'a', 8);
        calendar17.roll(9, true);
        int int26 = calendar17.getWeeksInWeekYear();
        calendar17.setTimeInMillis(1644572091641L);
        calendar17.setFirstDayOfWeek((int) (byte) -1);
        java.util.TimeZone timeZone31 = calendar17.getTimeZone();
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone31);
        calendar32.set(31, 32769, 32770, 0, 5);
        calendar32.setMinimalDaysInFirstWeek(50);
        int int42 = calendar32.getLeastMaximum(3);
        java.lang.String[] strArray44 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList45 = new java.util.ArrayList<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList45, strArray44);
        java.util.stream.Stream<java.lang.String> strStream47 = strList45.stream();
        boolean boolean49 = strList45.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor51 = strList45.listIterator(0);
        java.lang.String[] strArray53 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        java.util.stream.Stream<java.lang.String> strStream56 = strList54.stream();
        boolean boolean58 = strList54.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor60 = strList54.listIterator(0);
        java.lang.String[] strArray62 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList63 = new java.util.ArrayList<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList63, strArray62);
        java.util.stream.Stream<java.lang.String> strStream65 = strList63.stream();
        java.util.ListIterator<java.lang.String> strItor66 = strList63.listIterator();
        boolean boolean67 = strList54.removeAll((java.util.Collection<java.lang.String>) strList63);
        boolean boolean68 = strList45.containsAll((java.util.Collection<java.lang.String>) strList54);
        boolean boolean69 = calendar32.before((java.lang.Object) strList54);
        java.util.TimeZone timeZone71 = java.util.TimeZone.getTimeZone("java.text.ParsePosition[index=16,errorIndex=-1]");
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone71);
        java.time.ZoneId zoneId73 = timeZone71.toZoneId();
        java.util.TimeZone timeZone74 = java.util.TimeZone.getTimeZone(zoneId73);
        boolean boolean75 = timeZone74.observesDaylightTime();
        java.time.ZoneId zoneId76 = timeZone74.toZoneId();
        boolean boolean77 = strList54.equals((java.lang.Object) zoneId76);
        boolean boolean78 = calendar5.after((java.lang.Object) strList54);
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=5,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNull(stringBuffer7);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1644572091641,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=51,MILLISECOND=681,ZONE_OFFSET=40,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1644572646376L + "'", long18 == 1644572646376L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=40,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=50,ERA=1,YEAR=31,MONTH=32769,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=32770,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=0,MINUTE=5,SECOND=6,MILLISECOND=416,ZONE_OFFSET=40,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 51 + "'", int42 == 51);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strStream47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strItor51);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(strStream56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strItor60);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strStream65);
        org.junit.Assert.assertNotNull(strItor66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=1644572646376,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=6,MILLISECOND=376,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(zoneId73);
        org.junit.Assert.assertNotNull(timeZone74);
        org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(zoneId76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test20482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20482");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder5 = builder3.setLocale(locale4);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet7 = locale6.getExtensionKeys();
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getLanguage();
        java.lang.String str11 = locale8.getDisplayLanguage(locale9);
        java.lang.String str12 = locale6.getDisplayLanguage(locale8);
        java.util.Locale.Builder builder13 = builder3.setLocale(locale8);
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder16 = builder13.setLocale(locale14);
        java.util.Locale locale17 = builder16.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder16.setLanguageTag("7-feb-2022 9.38.53");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 7 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zh" + "'", str10, "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str11, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "coreano" + "'", str12, "coreano");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
    }

    @Test
    public void test20483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20483");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        boolean boolean6 = strList2.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor8 = strList2.listIterator(0);
        java.lang.String[] strArray10 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.stream.Stream<java.lang.String> strStream13 = strList11.stream();
        boolean boolean15 = strList11.add("hi!");
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale16.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.lang.String str21 = locale16.getDisplayVariant(locale20);
        boolean boolean22 = strList11.contains((java.lang.Object) locale16);
        boolean boolean23 = strList2.removeAll((java.util.Collection<java.lang.String>) strList11);
        java.lang.String[] strArray25 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList26 = new java.util.ArrayList<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList26, strArray25);
        java.util.stream.Stream<java.lang.String> strStream28 = strList26.stream();
        strList26.clear();
        boolean boolean30 = strList26.isEmpty();
        boolean boolean31 = strList26.isEmpty();
        java.util.ListIterator<java.lang.String> strItor32 = strList26.listIterator();
        boolean boolean33 = strList2.retainAll((java.util.Collection<java.lang.String>) strList26);
        java.lang.String[] strArray35 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.util.stream.Stream<java.lang.String> strStream38 = strList36.stream();
        strList36.clear();
        boolean boolean40 = strList26.removeAll((java.util.Collection<java.lang.String>) strList36);
        java.lang.String[] strArray46 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022", "FastDateFormat[h:mm:ss a z]", "zh", "java.text.ParsePosition[index=16,errorIndex=-1]", "de" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        java.lang.Object[] objArray49 = strList47.toArray();
        strList47.clear();
        java.lang.String[] strArray52 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        java.util.stream.Stream<java.lang.String> strStream55 = strList53.stream();
        strList53.clear();
        java.util.Spliterator<java.lang.String> strSpliterator57 = strList53.spliterator();
        boolean boolean58 = strList47.containsAll((java.util.Collection<java.lang.String>) strList53);
        boolean boolean59 = strList47.isEmpty();
        boolean boolean60 = strList26.retainAll((java.util.Collection<java.lang.String>) strList47);
        int int61 = strList47.size();
        boolean boolean63 = strList47.add("11 Nov 2022 09:35:49 GMT");
        java.util.Spliterator<java.lang.String> strSpliterator64 = strList47.spliterator();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strItor8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strStream13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strStream28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strItor32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strStream38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[Tue Jan 11 09:34:31 UTC 2022, FastDateFormat[h:mm:ss a z], zh, java.text.ParsePosition[index=16,errorIndex=-1], de]");
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strStream55);
        org.junit.Assert.assertNotNull(strSpliterator57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strSpliterator64);
    }

    @Test
    public void test20484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20484");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category6, locale9);
        java.lang.String str11 = locale9.toLanguageTag();
        java.util.Calendar.Builder builder12 = builder0.setLocale(locale9);
        java.util.Calendar.Builder builder16 = builder12.setWeekDate(97, 0, 37);
        java.util.Calendar.Builder builder18 = builder12.setLenient(true);
        java.lang.String[] strArray20 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        java.util.stream.Stream<java.lang.String> strStream23 = strList21.stream();
        boolean boolean25 = strList21.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor27 = strList21.listIterator(0);
        java.lang.String[] strArray29 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList30 = new java.util.ArrayList<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList30, strArray29);
        java.util.stream.Stream<java.lang.String> strStream32 = strList30.stream();
        boolean boolean34 = strList30.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor36 = strList30.listIterator(0);
        java.lang.String[] strArray38 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.stream.Stream<java.lang.String> strStream41 = strList39.stream();
        java.util.ListIterator<java.lang.String> strItor42 = strList39.listIterator();
        boolean boolean43 = strList30.removeAll((java.util.Collection<java.lang.String>) strList39);
        boolean boolean44 = strList21.containsAll((java.util.Collection<java.lang.String>) strList30);
        java.util.TimeZone timeZone46 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat47 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone46);
        java.lang.String str48 = fastDateFormat47.toString();
        java.lang.String str49 = fastDateFormat47.toString();
        java.util.TimeZone timeZone50 = fastDateFormat47.getTimeZone();
        timeZone50.setRawOffset((int) (short) 100);
        int int53 = timeZone50.getRawOffset();
        java.util.TimeZone.setDefault(timeZone50);
        int int55 = strList21.indexOf((java.lang.Object) timeZone50);
        java.util.Calendar.Builder builder56 = builder12.setTimeZone(timeZone50);
        java.util.Calendar.Builder builder59 = builder56.set(15, 58);
        java.util.TimeZone timeZone60 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone61 = java.util.TimeZone.getDefault();
        boolean boolean62 = timeZone60.hasSameRules(timeZone61);
        java.util.Locale locale63 = java.util.Locale.GERMAN;
        java.lang.String str64 = locale63.getDisplayName();
        java.lang.String str65 = locale63.getDisplayCountry();
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone61, locale63);
        timeZone61.setID("9:36:17 AM UTC");
        java.util.Calendar.Builder builder69 = builder56.setTimeZone(timeZone61);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder72 = builder69.setWeekDefinition(47, (-46800000));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en-GB" + "'", str11, "en-GB");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strStream23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strStream32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strItor36);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strStream41);
        org.junit.Assert.assertNotNull(strItor42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(fastDateFormat47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str48, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str49, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 100 + "'", int53 == 100);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(timeZone60);
        org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "German" + "'", str64, "German");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=1644572646475,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"9:36:17 AM UTC\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=6,MILLISECOND=575,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test20485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20485");
        java.lang.String[] strArray15 = new java.lang.String[] { "Vereinigtes K\366nigreich", "tedesco (Germania)", "Jan 10, 4630 12:00:00 AM", "Chinese", "", "Tue Jan 11 09:34:31 UTC 2022", "", "Greenwich Mean Time", "Coordinated Universal Time", "", "Greenwich Mean Time", "h:mm:ss a z", "", "coreano", "Greenwich Mean Time" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.lang.String[] strArray19 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.stream.Stream<java.lang.String> strStream22 = strList20.stream();
        java.util.ListIterator<java.lang.String> strItor23 = strList20.listIterator();
        int int24 = strList16.lastIndexOf((java.lang.Object) strItor23);
        java.lang.String[] strArray26 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        java.util.stream.Stream<java.lang.String> strStream29 = strList27.stream();
        boolean boolean31 = strList27.equals((java.lang.Object) (-1.0d));
        java.util.ListIterator<java.lang.String> strItor33 = strList27.listIterator(0);
        java.lang.String[] strArray35 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.util.stream.Stream<java.lang.String> strStream38 = strList36.stream();
        boolean boolean40 = strList36.add("hi!");
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = locale41.getLanguage();
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale41.getDisplayVariant(locale43);
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        java.lang.String str46 = locale41.getDisplayVariant(locale45);
        boolean boolean47 = strList36.contains((java.lang.Object) locale41);
        boolean boolean48 = strList27.removeAll((java.util.Collection<java.lang.String>) strList36);
        java.lang.String[] strArray50 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.util.stream.Stream<java.lang.String> strStream53 = strList51.stream();
        strList51.clear();
        boolean boolean55 = strList51.isEmpty();
        boolean boolean56 = strList51.isEmpty();
        java.util.ListIterator<java.lang.String> strItor57 = strList51.listIterator();
        boolean boolean58 = strList27.retainAll((java.util.Collection<java.lang.String>) strList51);
        boolean boolean59 = strList16.containsAll((java.util.Collection<java.lang.String>) strList27);
        java.lang.String[] strArray61 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.util.stream.Stream<java.lang.String> strStream64 = strList62.stream();
        strList62.clear();
        java.lang.String[] strArray67 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList68 = new java.util.ArrayList<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList68, strArray67);
        java.util.stream.Stream<java.lang.String> strStream70 = strList68.stream();
        boolean boolean71 = strList62.containsAll((java.util.Collection<java.lang.String>) strList68);
        java.util.Spliterator<java.lang.String> strSpliterator72 = strList62.spliterator();
        java.util.Date date76 = new java.util.Date((-1), 32772, (int) (short) 10);
        java.lang.String str77 = date76.toLocaleString();
        boolean boolean78 = strList62.contains((java.lang.Object) date76);
        java.lang.Comparable[][][] comparableArray80 = new java.lang.Comparable[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Comparable<java.lang.String>[][][] strComparableArray81 = (java.lang.Comparable<java.lang.String>[][][]) comparableArray80;
        java.lang.Comparable<java.lang.String>[][][] strComparableArray82 = strList62.toArray(strComparableArray81);
        java.util.ListIterator<java.lang.String> strItor83 = strList62.listIterator();
        boolean boolean84 = strList27.addAll((java.util.Collection<java.lang.String>) strList62);
        java.util.TimeZone timeZone86 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat87 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone86);
        java.lang.String str88 = fastDateFormat87.toString();
        java.lang.String str89 = fastDateFormat87.toString();
        java.util.TimeZone timeZone90 = fastDateFormat87.getTimeZone();
        timeZone90.setRawOffset((int) (short) 100);
        java.util.Calendar calendar93 = java.util.Calendar.getInstance(timeZone90);
        int int94 = strList62.lastIndexOf((java.lang.Object) timeZone90);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertNotNull(strItor23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strStream29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strItor33);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strStream38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zh" + "'", str42, "zh");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strStream53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(strStream64);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(strStream70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strSpliterator72);
        org.junit.Assert.assertEquals(date76.toString(), "Sun Jan 10 00:00:00 GMT+00:00 4630");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "10-Jan-4630 00:00:00" + "'", str77, "10-Jan-4630 00:00:00");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(comparableArray80);
        org.junit.Assert.assertNotNull(strComparableArray81);
        org.junit.Assert.assertNotNull(strComparableArray82);
        org.junit.Assert.assertNotNull(strItor83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(fastDateFormat87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str88, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str89, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone90);
        org.junit.Assert.assertEquals(timeZone90.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar93);
// flaky:         org.junit.Assert.assertEquals(calendar93.toString(), "java.util.GregorianCalendar[time=1644572646524,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:35:42 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=6,MILLISECOND=624,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
    }

    @Test
    public void test20486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20486");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.lang.String str5 = locale3.getDisplayLanguage();
        java.lang.String str7 = locale3.getUnicodeLocaleType("zh");
        java.lang.String str8 = locale3.getDisplayScript();
        java.util.Locale locale11 = new java.util.Locale("Tue Jan 11 09:34:31 UTC 2022", "java.text.ParsePosition[index=100,errorIndex=-1]");
        java.lang.String str12 = locale3.getDisplayScript(locale11);
        boolean boolean13 = locale11.hasExtensions();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572646597,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:35:42 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=6,MILLISECOND=697,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals(locale11.toString(), "tue jan 11 09:34:31 utc 2022_JAVA.TEXT.PARSEPOSITION[INDEX=100,ERRORINDEX=-1]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test20487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20487");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        java.util.Date date3 = new java.util.Date();
        int int4 = date3.getTimezoneOffset();
        int int5 = date3.getSeconds();
        java.lang.StringBuffer stringBuffer6 = null;
        java.text.Format.Field field7 = null;
        java.text.FieldPosition fieldPosition9 = new java.text.FieldPosition(field7, 1);
        fieldPosition9.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer12 = fastDateFormat2.format((java.lang.Object) date3, stringBuffer6, fieldPosition9);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance();
        boolean boolean14 = calendar13.isWeekDateSupported();
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = locale15.getLanguage();
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        boolean boolean19 = calendar13.before((java.lang.Object) str18);
        long long20 = calendar13.getTimeInMillis();
        int int21 = calendar13.getMinimalDaysInFirstWeek();
        java.lang.StringBuffer stringBuffer22 = null;
        java.text.Format.Field field23 = null;
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition(field23, 3);
        fieldPosition25.setEndIndex(12);
        java.lang.StringBuffer stringBuffer28 = fastDateFormat2.format((java.lang.Object) calendar13, stringBuffer22, fieldPosition25);
        java.lang.Object obj29 = fastDateFormat2.clone();
        java.util.TimeZone timeZone30 = fastDateFormat2.getTimeZone();
        java.util.TimeZone timeZone31 = fastDateFormat2.getTimeZone();
        timeZone31.setID("May 11, 34669 9:39:45 AM");
        // The following exception was thrown during execution in test generation
        try {
            int int40 = timeZone31.getOffset(29, 25, 0, 131, 19750, 131);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fastDateFormat2);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Fri Feb 11 09:44:06 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 6 + "'", int5 == 6);
        org.junit.Assert.assertNull(stringBuffer12);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1644572646636,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:35:42 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=6,MILLISECOND=736,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh" + "'", str16, "zh");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1644572646636L + "'", long20 == 1644572646636L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNull(stringBuffer28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test20488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20488");
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat1 = org.apache.commons.lang3.time.FastDateFormat.getDateInstance(1);
        java.util.TimeZone timeZone3 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat4 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone3);
        java.lang.String str5 = fastDateFormat4.toString();
        java.lang.String str6 = fastDateFormat4.toString();
        java.util.TimeZone timeZone7 = fastDateFormat4.getTimeZone();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = locale8.getLanguage();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        java.util.Calendar calendar12 = java.util.Calendar.getInstance(timeZone7, locale8);
        boolean boolean13 = calendar12.isWeekDateSupported();
        calendar12.set(7, 4, 0);
        java.util.Date date18 = calendar12.getTime();
        java.lang.String str19 = fastDateFormat1.format(calendar12);
        java.util.TimeZone timeZone20 = fastDateFormat1.getTimeZone();
        timeZone20.setRawOffset(35);
        java.util.TimeZone timeZone24 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat25 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone24);
        boolean boolean26 = fastDateFormat25.getTimeZoneOverridesCalendar();
        java.util.Calendar calendar27 = java.util.Calendar.getInstance();
        int int28 = calendar27.getWeeksInWeekYear();
        java.util.TimeZone timeZone29 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone30 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getDefault();
        boolean boolean32 = timeZone30.hasSameRules(timeZone31);
        boolean boolean33 = timeZone29.hasSameRules(timeZone31);
        calendar27.setTimeZone(timeZone29);
        calendar27.set((int) (byte) 100, (int) (byte) 1, 0, 6, (-1));
        java.lang.String str41 = fastDateFormat25.format(calendar27);
        java.util.TimeZone timeZone42 = fastDateFormat25.getTimeZone();
        boolean boolean43 = timeZone20.hasSameRules(timeZone42);
        java.text.ParsePosition parsePosition45 = new java.text.ParsePosition(16);
        int int46 = parsePosition45.getErrorIndex();
        java.util.TimeZone timeZone48 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat49 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone48);
        java.lang.String str50 = fastDateFormat49.getPattern();
        boolean boolean51 = parsePosition45.equals((java.lang.Object) fastDateFormat49);
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        boolean boolean53 = parsePosition45.equals((java.lang.Object) locale52);
        java.lang.String str54 = locale52.getDisplayScript();
        java.util.TimeZone timeZone56 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat57 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone56);
        java.lang.String str58 = fastDateFormat57.toString();
        java.text.ParsePosition parsePosition61 = new java.text.ParsePosition(16);
        java.util.Date date62 = new java.util.Date();
        int int63 = date62.getDay();
        java.util.Date date64 = new java.util.Date();
        date64.setMinutes((int) '#');
        boolean boolean67 = date62.before(date64);
        boolean boolean68 = parsePosition61.equals((java.lang.Object) boolean67);
        parsePosition61.setErrorIndex(0);
        java.lang.Object obj71 = fastDateFormat57.parseObject("tedesco", parsePosition61);
        java.util.Locale.Builder builder72 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder74 = builder72.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder75 = builder72.clear();
        boolean boolean76 = parsePosition61.equals((java.lang.Object) builder75);
        java.util.Locale.Builder builder78 = builder75.setLanguageTag("China");
        java.util.Locale.Builder builder79 = builder78.clearExtensions();
        java.util.Locale locale80 = builder79.build();
        java.lang.String str81 = locale52.getDisplayName(locale80);
        java.lang.String str82 = timeZone42.getDisplayName(locale52);
        org.junit.Assert.assertNotNull(fastDateFormat1);
        org.junit.Assert.assertNotNull(fastDateFormat4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str5, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str6, "FastDateFormat[h:mm:ss a z]");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh" + "'", str9, "zh");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=-61936150553337,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:35:42 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=7,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=6,MILLISECOND=763,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 30 09:44:06 GMT+00:00 7");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "30 April 0007" + "'", str19, "30 April 0007");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(fastDateFormat25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:35:42 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=100,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=0,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=6,MINUTE=-1,SECOND=6,MILLISECOND=763,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(fastDateFormat49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "h:mm:ss a z" + "'", str50, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(fastDateFormat57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str58, "FastDateFormat[h:mm:ss a z]");
// flaky:         org.junit.Assert.assertEquals(date62.toString(), "Fri Feb 11 09:44:06 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
// flaky:         org.junit.Assert.assertEquals(date64.toString(), "Fri Feb 11 09:35:06 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "china");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "French (France)" + "'", str81, "French (France)");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "GMT+00:00" + "'", str82, "GMT+00:00");
    }

    @Test
    public void test20489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20489");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        java.util.Date date8 = new java.util.Date(9, 11, (int) '4', 35, 40, 100);
        boolean boolean9 = calendar1.after((java.lang.Object) 35);
        java.util.TimeZone timeZone11 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat12 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone11);
        java.lang.String str13 = fastDateFormat12.toString();
        java.text.ParsePosition parsePosition16 = new java.text.ParsePosition(16);
        java.util.Date date17 = new java.util.Date();
        int int18 = date17.getDay();
        java.util.Date date19 = new java.util.Date();
        date19.setMinutes((int) '#');
        boolean boolean22 = date17.before(date19);
        boolean boolean23 = parsePosition16.equals((java.lang.Object) boolean22);
        parsePosition16.setErrorIndex(0);
        java.lang.Object obj26 = fastDateFormat12.parseObject("tedesco", parsePosition16);
        boolean boolean27 = calendar1.after((java.lang.Object) "tedesco");
        java.time.Instant instant28 = calendar1.toInstant();
        java.util.TimeZone timeZone29 = calendar1.getTimeZone();
        java.util.TimeZone timeZone30 = calendar1.getTimeZone();
        java.util.TimeZone.setDefault(timeZone30);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1644572646701,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:35:42 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=6,MILLISECOND=801,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date8.toString(), "Sat Jan 22 11:41:40 GMT+00:00 1910");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(fastDateFormat12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "FastDateFormat[h:mm:ss a z]" + "'", str13, "FastDateFormat[h:mm:ss a z]");
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Fri Feb 11 09:44:06 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
// flaky:         org.junit.Assert.assertEquals(date19.toString(), "Fri Feb 11 09:35:06 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test20490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20490");
        java.util.TimeZone timeZone1 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat2 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone1);
        boolean boolean3 = fastDateFormat2.getTimeZoneOverridesCalendar();
        java.util.Calendar calendar4 = java.util.Calendar.getInstance();
        int int5 = calendar4.getWeeksInWeekYear();
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getDefault();
        boolean boolean9 = timeZone7.hasSameRules(timeZone8);
        boolean boolean10 = timeZone6.hasSameRules(timeZone8);
        calendar4.setTimeZone(timeZone6);
        calendar4.set((int) (byte) 100, (int) (byte) 1, 0, 6, (-1));
        java.lang.String str18 = fastDateFormat2.format(calendar4);
        calendar4.add(14, 14);
        int int22 = calendar4.getWeekYear();
        org.junit.Assert.assertNotNull(fastDateFormat2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=-59009018453261,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:35:42 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=100,MONTH=0,WEEK_OF_YEAR=5,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=31,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=59,SECOND=6,MILLISECOND=839,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 52 + "'", int5 == 52);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
    }

    @Test
    public void test20491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20491");
        java.lang.String[] strArray1 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList2 = new java.util.ArrayList<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList2, strArray1);
        java.util.stream.Stream<java.lang.String> strStream4 = strList2.stream();
        strList2.clear();
        java.lang.String[] strArray7 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.stream.Stream<java.lang.String> strStream10 = strList8.stream();
        boolean boolean11 = strList2.containsAll((java.util.Collection<java.lang.String>) strList8);
        java.lang.Object obj12 = null;
        int int13 = strList8.lastIndexOf(obj12);
        java.lang.String[] strArray15 = java.util.TimeZone.getAvailableIDs(7);
        java.lang.Comparable<java.lang.String>[] strComparableArray16 = strList8.toArray((java.lang.Comparable<java.lang.String>[]) strArray15);
        boolean boolean18 = strList8.add("italiano");
        java.util.stream.Stream<java.lang.String> strStream19 = strList8.stream();
        java.util.stream.Stream<java.lang.String> strStream20 = strList8.stream();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat22 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1);
        java.util.TimeZone timeZone25 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone26 = java.util.TimeZone.getDefault();
        boolean boolean27 = timeZone25.hasSameRules(timeZone26);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat28 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone26);
        java.util.Locale locale29 = fastDateFormat28.getLocale();
        java.lang.String str30 = fastDateFormat28.toString();
        java.text.ParsePosition parsePosition33 = new java.text.ParsePosition(16);
        int int34 = parsePosition33.getErrorIndex();
        java.lang.Object obj35 = fastDateFormat28.parseObject("Vereinigtes K\366nigreich", parsePosition33);
        java.lang.String str36 = parsePosition33.toString();
        int int37 = parsePosition33.getErrorIndex();
        java.lang.Object obj38 = fastDateFormat22.parseObject("9:36:11 AM GMT", parsePosition33);
        java.lang.String str39 = fastDateFormat22.getPattern();
        boolean boolean40 = strList8.contains((java.lang.Object) fastDateFormat22);
        java.util.Iterator<java.lang.String> strItor41 = strList8.iterator();
        int int42 = strList8.size();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strStream10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strComparableArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertNotNull(strStream20);
        org.junit.Assert.assertNotNull(fastDateFormat22);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(fastDateFormat28);
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "it__#x-de");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "FastDateFormat[H.mm.ss z]" + "'", str30, "FastDateFormat[H.mm.ss z]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "java.text.ParsePosition[index=0,errorIndex=0]" + "'", str36, "java.text.ParsePosition[index=0,errorIndex=0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "h:mm:ss a z" + "'", str39, "h:mm:ss a z");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strItor41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }

    @Test
    public void test20492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20492");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category6, locale9);
        java.lang.String str11 = locale9.toLanguageTag();
        java.util.Calendar.Builder builder12 = builder0.setLocale(locale9);
        java.util.TimeZone timeZone14 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone15 = java.util.TimeZone.getDefault();
        boolean boolean16 = timeZone14.hasSameRules(timeZone15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(timeZone15, locale17);
        java.text.ParsePosition parsePosition20 = new java.text.ParsePosition(16);
        int int21 = parsePosition20.getErrorIndex();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet23 = locale22.getExtensionKeys();
        boolean boolean24 = parsePosition20.equals((java.lang.Object) locale22);
        java.lang.String str25 = locale22.getDisplayName();
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat26 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone15, locale22);
        int int27 = timeZone15.getRawOffset();
        java.util.Calendar.Builder builder28 = builder12.setTimeZone(timeZone15);
        java.util.Calendar calendar29 = builder12.build();
        int int31 = calendar29.getLeastMaximum(4);
        calendar29.setFirstDayOfWeek(54);
        calendar29.roll(2, false);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getTimeZone("9:35:23 AM UTC");
        java.util.TimeZone.setDefault(timeZone38);
        timeZone38.setRawOffset((-1893));
        timeZone38.setID("09:37 Uhr GMT+00:00");
        int int45 = timeZone38.getOffset(1644572426550L);
        boolean boolean46 = calendar29.before((java.lang.Object) timeZone38);
        java.util.Calendar.Builder builder47 = new java.util.Calendar.Builder();
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = locale48.getLanguage();
        boolean boolean50 = locale48.hasExtensions();
        java.lang.String str51 = locale48.getDisplayCountry();
        java.util.Calendar.Builder builder52 = builder47.setLocale(locale48);
        java.util.Calendar.Builder builder54 = builder47.setLenient(false);
        java.util.Calendar calendar55 = builder47.build();
        java.util.Calendar.Builder builder57 = builder47.setInstant(1644572142831L);
        java.util.Locale.Builder builder58 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder60 = builder58.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder61 = builder58.clear();
        java.util.Locale.Builder builder63 = builder61.setVariant("inglese");
        java.util.Locale locale64 = builder63.build();
        java.util.Calendar.Builder builder65 = builder57.setLocale(locale64);
        java.util.Calendar calendar66 = java.util.Calendar.getInstance(timeZone38, locale64);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en-GB" + "'", str11, "en-GB");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1644572646782,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:35:42 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=6,MILLISECOND=882,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Korean" + "'", str25, "Korean");
        org.junit.Assert.assertNotNull(fastDateFormat26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(calendar29);
        org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"11 Feb 2022 09:35:42 GMT\",offset=100,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=54,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=100,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1893) + "'", int45 == (-1893));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "zh" + "'", str49, "zh");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(calendar55);
        org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"09:37 Uhr GMT+00:00\",offset=-1893,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=1644572646782,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"09:37 Uhr GMT+00:00\",offset=-1893,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=889,ZONE_OFFSET=-1893,DST_OFFSET=0]");
    }

    @Test
    public void test20493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20493");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale3);
        calendar6.set(31, (int) (byte) 100, (int) (byte) 10, (int) (short) 100, 9, 8);
        java.util.Date date17 = new java.util.Date((-1), 32772, (int) (short) 10);
        java.lang.String str18 = date17.toLocaleString();
        calendar6.setTime(date17);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        boolean boolean22 = timeZone20.hasSameRules(timeZone21);
        java.util.Locale locale23 = java.util.Locale.ROOT;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone21, locale23);
        calendar6.setTimeZone(timeZone21);
        java.util.Date date26 = calendar6.getTime();
        calendar6.roll((int) (byte) 10, true);
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "German" + "'", str4, "German");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=83942269201893,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"09:37 Uhr GMT+00:00\",offset=-1893,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=4630,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=10,DAY_OF_YEAR=10,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1893,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date17.toString(), "Sun Jan 10 00:00:00 GMT+00:00 4630");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "10-Jan-4630 00:00:00" + "'", str18, "10-Jan-4630 00:00:00");
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1644572646818,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"09:37 Uhr GMT+00:00\",offset=-1893,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=925,ZONE_OFFSET=-1893,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Sun Jan 10 00:00:00 GMT+00:00 4630");
    }

    @Test
    public void test20494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20494");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone1.hasSameRules(timeZone2);
        java.util.Locale locale4 = java.util.Locale.ROOT;
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone2, locale4);
        java.lang.String str6 = locale4.getDisplayLanguage();
        java.lang.String str8 = locale4.getUnicodeLocaleType("zh");
        java.lang.String str9 = locale0.getDisplayScript(locale4);
        java.util.TimeZone timeZone10 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        boolean boolean12 = timeZone10.hasSameRules(timeZone11);
        java.util.Locale locale13 = java.util.Locale.ROOT;
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone11, locale13);
        java.lang.String str15 = locale13.getDisplayLanguage();
        java.lang.String str17 = locale13.getUnicodeLocaleType("zh");
        java.lang.String str18 = locale4.getDisplayScript(locale13);
        java.util.Locale.setDefault(locale13);
        java.lang.String str20 = locale13.getLanguage();
        java.lang.String str22 = locale13.getExtension('x');
        java.lang.String str23 = locale13.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644572646835,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"09:37 Uhr GMT+00:00\",offset=-1893,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=942,ZONE_OFFSET=-1893,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572646835,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"09:37 Uhr GMT+00:00\",offset=-1893,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=942,ZONE_OFFSET=-1893,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test20495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20495");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        java.util.Locale locale2 = java.util.Locale.CHINESE;
        java.lang.String str3 = locale2.getLanguage();
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale2.getDisplayVariant(locale4);
        boolean boolean6 = calendar0.before((java.lang.Object) str5);
        int int7 = calendar0.getFirstDayOfWeek();
        int int8 = calendar0.getWeekYear();
        int int9 = calendar0.getWeekYear();
        java.util.Date date10 = calendar0.getTime();
        java.time.Instant instant11 = date10.toInstant();
        java.util.Date date12 = java.util.Date.from(instant11);
        java.util.Date date13 = java.util.Date.from(instant11);
        date13.setSeconds(34);
        java.util.Date date16 = new java.util.Date();
        int int17 = date16.getTimezoneOffset();
        int int18 = date16.getSeconds();
        date16.setDate(7);
        java.time.Instant instant21 = date16.toInstant();
        java.util.Date date22 = java.util.Date.from(instant21);
        int int23 = date22.getMonth();
        date22.setYear(49);
        boolean boolean26 = date13.after(date22);
        date13.setHours(31);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1644572646851,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"09:37 Uhr GMT+00:00\",offset=-1893,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=4,MILLISECOND=958,ZONE_OFFSET=-1893,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh" + "'", str3, "zh");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Fri Feb 11 09:44:04 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Fri Feb 11 09:44:04 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Sat Feb 12 07:44:34 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Mon Feb 07 09:44:04 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Mon Feb 07 09:44:04 GMT+00:00 1949");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test20496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20496");
        java.util.TimeZone timeZone2 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat3 = org.apache.commons.lang3.time.FastDateFormat.getInstance("", timeZone2);
        java.util.Date date4 = new java.util.Date();
        int int5 = date4.getTimezoneOffset();
        int int6 = date4.getSeconds();
        java.lang.StringBuffer stringBuffer7 = null;
        java.text.Format.Field field8 = null;
        java.text.FieldPosition fieldPosition10 = new java.text.FieldPosition(field8, 1);
        fieldPosition10.setBeginIndex(34);
        java.lang.StringBuffer stringBuffer13 = fastDateFormat3.format((java.lang.Object) date4, stringBuffer7, fieldPosition10);
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        boolean boolean15 = calendar14.isWeekDateSupported();
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale16.getLanguage();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale16.getDisplayVariant(locale18);
        boolean boolean20 = calendar14.before((java.lang.Object) str19);
        long long21 = calendar14.getTimeInMillis();
        int int22 = calendar14.getMinimalDaysInFirstWeek();
        java.lang.StringBuffer stringBuffer23 = null;
        java.text.Format.Field field24 = null;
        java.text.FieldPosition fieldPosition26 = new java.text.FieldPosition(field24, 3);
        fieldPosition26.setEndIndex(12);
        java.lang.StringBuffer stringBuffer29 = fastDateFormat3.format((java.lang.Object) calendar14, stringBuffer23, fieldPosition26);
        java.lang.Object obj30 = fastDateFormat3.clone();
        java.util.TimeZone timeZone31 = fastDateFormat3.getTimeZone();
        int int33 = timeZone31.getOffset(1644485748425L);
        java.util.Locale locale35 = new java.util.Locale("29 Sep 2577 21:34:31 GMT");
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone31, locale35);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat37 = org.apache.commons.lang3.time.FastDateFormat.getInstance("2022-2-7 9:35:24", locale35);
        java.lang.Object obj38 = fastDateFormat37.clone();
        org.junit.Assert.assertNotNull(fastDateFormat3);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Fri Feb 11 09:44:05 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNull(stringBuffer13);
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1644572646907,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"09:37 Uhr GMT+00:00\",offset=-1893,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=14,ZONE_OFFSET=-1893,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1644572646907L + "'", long21 == 1644572646907L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNull(stringBuffer29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "FastDateFormat[]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "FastDateFormat[]");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1893) + "'", int33 == (-1893));
        org.junit.Assert.assertEquals(locale35.toString(), "29 sep 2577 21:34:31 gmt");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=1644572646907,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"09:37 Uhr GMT+00:00\",offset=-1893,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=14,ZONE_OFFSET=-1893,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(fastDateFormat37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "FastDateFormat[2022-2-7 9:35:24]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "FastDateFormat[2022-2-7 9:35:24]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "FastDateFormat[2022-2-7 9:35:24]");
    }

    @Test
    public void test20497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20497");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("it");
        java.util.Locale.Builder builder7 = builder2.setExtension('x', "de");
        java.util.Locale locale8 = builder2.build();
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str10 = locale9.getLanguage();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone12 = java.util.TimeZone.getDefault();
        boolean boolean13 = timeZone11.hasSameRules(timeZone12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone11, locale14);
        java.lang.String str17 = locale14.getCountry();
        java.lang.String str18 = locale9.getDisplayLanguage(locale14);
        java.lang.String str19 = locale9.getISO3Country();
        java.util.Set<java.lang.String> strSet20 = locale9.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet21 = locale9.getExtensionKeys();
        java.util.Locale.Builder builder22 = builder2.setLocale(locale9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder22.setLanguage("java.util.GregorianCalendar[time=-1647746400003,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=3,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1917,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=287,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=40,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: java.util.GregorianCalendar[time=-1647746400003,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"Chinesisch\",offset=3,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1917,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=287,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=40,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3,DST_OFFSET=0] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it__#x-de");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(calendar16);
// flaky:         org.junit.Assert.assertEquals(calendar16.toString(), "java.util.GregorianCalendar[time=1644572646949,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"09:37 Uhr GMT+00:00\",offset=-1893,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=56,ZONE_OFFSET=-1893,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test20498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20498");
        java.util.Locale locale2 = new java.util.Locale("java.util.GregorianCalendar[time=1644572075531,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=35,MILLISECOND=531,ZONE_OFFSET=0,DST_OFFSET=0]", "Tue Jan 11 09:34:31 UTC 2022");
        java.util.Locale locale3 = locale2.stripExtensions();
        java.lang.String[] strArray5 = new java.lang.String[] { "Tue Jan 11 09:34:31 UTC 2022" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.stream.Stream<java.lang.String> strStream8 = strList6.stream();
        boolean boolean10 = strList6.add("hi!");
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = locale11.getLanguage();
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.lang.String str14 = locale11.getDisplayVariant(locale13);
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.lang.String str16 = locale11.getDisplayVariant(locale15);
        boolean boolean17 = strList6.contains((java.lang.Object) locale11);
        java.lang.String str18 = locale11.getVariant();
        boolean boolean19 = locale11.hasExtensions();
        java.lang.String str20 = locale3.getDisplayCountry(locale11);
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(locale11);
        calendar21.clear();
        int int24 = calendar21.getMaximum(16);
        java.lang.String str25 = calendar21.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            int int27 = calendar21.getLeastMaximum((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "java.util.gregoriancalendar[time=1644572075531,arefieldsset=true,areallfieldsset=true,lenient=true,zone=sun.util.calendar.zoneinfo[id=\"etc/utc\",offset=0,dstsavings=0,usedaylight=false,transitions=0,lastrule=null],firstdayofweek=1,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=7,week_of_month=2,day_of_month=11,day_of_year=42,day_of_week=6,day_of_week_in_month=2,am_pm=0,hour=9,hour_of_day=9,minute=34,second=35,millisecond=531,zone_offset=0,dst_offset=0]_TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh" + "'", str12, "zh");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "TUE JAN 11 09:34:31 UTC 2022" + "'", str20, "TUE JAN 11 09:34:31 UTC 2022");
        org.junit.Assert.assertNotNull(calendar21);
        org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"09:37 Uhr GMT+00:00\",offset=-1893,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 7200000 + "'", int24 == 7200000);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "gregory" + "'", str25, "gregory");
    }

    @Test
    public void test20499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20499");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = java.util.TimeZone.getDefault();
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        java.util.Locale locale3 = java.util.Locale.ROOT;
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1, locale3);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone7 = java.util.TimeZone.getDefault();
        boolean boolean8 = timeZone6.hasSameRules(timeZone7);
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat9 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance(0, timeZone7);
        timeZone7.setRawOffset(3);
        java.util.TimeZone timeZone13 = null;
        org.apache.commons.lang3.time.FastDateFormat fastDateFormat14 = org.apache.commons.lang3.time.FastDateFormat.getTimeInstance((int) (short) 1, timeZone13);
        java.lang.String str15 = fastDateFormat14.getPattern();
        java.util.TimeZone timeZone16 = fastDateFormat14.getTimeZone();
        boolean boolean17 = timeZone7.hasSameRules(timeZone16);
        boolean boolean18 = timeZone1.hasSameRules(timeZone16);
        java.lang.String str19 = timeZone16.getID();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone("\u610f\u5927\u5229\u6587");
        timeZone21.setID("\u5e74\u6708\u65e5");
        timeZone21.setRawOffset((int) (byte) 100);
        java.lang.String str26 = timeZone21.getID();
        boolean boolean27 = timeZone16.hasSameRules(timeZone21);
        int int28 = timeZone21.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1644572646986,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"09:37 Uhr GMT+00:00\",offset=-1893,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=11,DAY_OF_YEAR=42,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=44,SECOND=5,MILLISECOND=93,ZONE_OFFSET=-1893,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(fastDateFormat9);
        org.junit.Assert.assertNotNull(fastDateFormat14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "h:mm:ss a z" + "'", str15, "h:mm:ss a z");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "11 Feb 2022 09:35:42 GMT" + "'", str19, "11 Feb 2022 09:35:42 GMT");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u5e74\u6708\u65e5" + "'", str26, "\u5e74\u6708\u65e5");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test20500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest40.test20500");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getLanguage();
        boolean boolean3 = locale1.hasExtensions();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.util.Calendar.Builder builder5 = builder0.setLocale(locale1);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category6, locale7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category6, locale9);
        java.lang.String str11 = locale9.toLanguageTag();
        java.util.Calendar.Builder builder12 = builder0.setLocale(locale9);
        java.util.Calendar.Builder builder16 = builder12.setDate((int) (byte) 100, 53, 45);
        java.util.Calendar calendar17 = builder12.build();
        java.util.Calendar.Builder builder18 = new java.util.Calendar.Builder();
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.getLanguage();
        boolean boolean21 = locale19.hasExtensions();
        java.lang.String str22 = locale19.getDisplayCountry();
        java.util.Calendar.Builder builder23 = builder18.setLocale(locale19);
        java.util.Calendar.Builder builder27 = builder18.setWeekDate((int) (short) 1, 9, 1);
        java.util.Calendar.Builder builder29 = builder18.setLenient(false);
        java.util.Calendar.Builder builder33 = builder18.setTimeOfDay(15, 0, 32770);
        java.util.Calendar.Builder builder36 = builder33.setWeekDefinition(7, 7);
        java.util.Calendar.Builder builder38 = builder33.setLenient(true);
        java.util.Calendar.Builder builder43 = builder38.setTimeOfDay(41, 45, 13, 11);
        java.util.Calendar.Builder builder45 = builder43.setLenient(false);
        java.util.Calendar.Builder builder49 = builder45.setDate((int) ' ', 4, 20);
        java.util.Calendar.Builder builder51 = builder49.setLenient(true);
        java.util.Calendar.Builder builder52 = new java.util.Calendar.Builder();
        java.util.Locale locale53 = java.util.Locale.CHINESE;
        java.lang.String str54 = locale53.getLanguage();
        boolean boolean55 = locale53.hasExtensions();
        java.lang.String str56 = locale53.getDisplayCountry();
        java.util.Calendar.Builder builder57 = builder52.setLocale(locale53);
        java.util.Calendar.Builder builder61 = builder52.setWeekDate((int) (short) 1, 9, 1);
        java.util.Locale locale63 = new java.util.Locale("de");
        java.lang.String str64 = locale63.toLanguageTag();
        java.lang.String str65 = locale63.getCountry();
        java.util.Calendar.Builder builder66 = builder52.setLocale(locale63);
        java.util.Calendar calendar67 = builder66.build();
        int[] intArray68 = new int[] {};
        java.util.Calendar.Builder builder69 = builder66.setFields(intArray68);
        java.util.Calendar.Builder builder70 = builder49.setFields(intArray68);
        java.util.Calendar.Builder builder71 = builder12.setFields(intArray68);
        java.util.Calendar.Builder builder73 = builder12.setLenient(false);
        java.util.Calendar.Builder builder77 = builder12.setDate((int) 'u', (-26), 70);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar78 = builder77.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=-58868467198107,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"09:37 Uhr GMT+00:00\",offset=-1893,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=104,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=197,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1893,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh" + "'", str20, "zh");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "zh" + "'", str54, "zh");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertEquals(locale63.toString(), "de");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "de" + "'", str64, "de");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(calendar67);
        org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=-62130239998107,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"09:37 Uhr GMT+00:00\",offset=-1893,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=2,WEEK_OF_YEAR=9,WEEK_OF_MONTH=1,DAY_OF_MONTH=6,DAY_OF_YEAR=65,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-1893,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[]");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder77);
    }
}

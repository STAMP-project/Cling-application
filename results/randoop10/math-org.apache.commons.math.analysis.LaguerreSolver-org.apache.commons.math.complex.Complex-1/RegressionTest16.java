import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest16 {

    public static boolean debug = false;

    @Test
    public void test08001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08001");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        int int10 = laguerreSolver6.getMaximalIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = laguerreSolver6.solve((double) 1L, (-2.888095615923076E50d), (-4.999932E8d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.0,-2.888095615923076E50]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
    }

    @Test
    public void test08002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08002");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(1.0E-15d, (double) (short) 100);
        org.apache.commons.math.complex.Complex complex3 = complex2.asin();
        org.apache.commons.math.complex.Complex complex4 = complex3.sin();
        org.apache.commons.math.complex.Complex complex5 = complex3.tan();
        org.apache.commons.math.complex.Complex complex6 = complex3.atan();
        double double7 = complex3.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 5.298342365610802d + "'", double7 == 5.298342365610802d);
    }

    @Test
    public void test08003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08003");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-2.5596160863929607E29d), (-1.1744329731683375E66d));
    }

    @Test
    public void test08004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08004");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((-9.820178719278598d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
        java.lang.Throwable[] throwableArray3 = functionEvaluationException2.getSuppressed();
        double double4 = functionEvaluationException2.getArgument();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-9.820178719278598d) + "'", double4 == (-9.820178719278598d));
    }

    @Test
    public void test08005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08005");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.sin();
        org.apache.commons.math.complex.Complex complex9 = complex3.tan();
        org.apache.commons.math.complex.Complex complex10 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex11 = complex3.sqrt1z();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.tan();
        double double14 = complex12.getReal();
        org.apache.commons.math.complex.Complex complex15 = complex12.asin();
        org.apache.commons.math.complex.Complex complex16 = complex3.add(complex12);
        org.apache.commons.math.complex.Complex complex17 = complex16.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + Double.POSITIVE_INFINITY + "'", double14 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test08006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08006");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.tan();
        org.apache.commons.math.complex.Complex complex2 = complex0.cos();
        org.apache.commons.math.complex.Complex complex3 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex6.sin();
        org.apache.commons.math.complex.Complex complex8 = complex4.pow(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex4.exp();
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        boolean boolean11 = complex10.isInfinite();
        double[] doubleArray17 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        double double20 = polynomialFunction18.value((double) 0);
        int int21 = polynomialFunction18.degree();
        double double23 = polynomialFunction18.value(64.0d);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction24 = polynomialFunction18.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = polynomialFunction18.polynomialDerivative();
        boolean boolean26 = complex10.equals((java.lang.Object) polynomialFunction18);
        org.apache.commons.math.complex.Complex complex27 = complex10.log();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        boolean boolean30 = complex28.isNaN();
        org.apache.commons.math.complex.Complex complex31 = complex28.tanh();
        org.apache.commons.math.complex.Complex complex32 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex28.cos();
        org.apache.commons.math.complex.Complex complex34 = complex10.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        double double37 = complex35.abs();
        org.apache.commons.math.complex.Complex complex38 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex39 = complex38.conjugate();
        org.apache.commons.math.complex.Complex complex40 = complex38.log();
        org.apache.commons.math.complex.Complex complex41 = complex38.exp();
        org.apache.commons.math.complex.Complex complex42 = complex38.log();
        org.apache.commons.math.complex.Complex complex43 = complex33.add(complex38);
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt1z();
        org.apache.commons.math.complex.Complex complex45 = complex0.multiply(complex44);
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex47 = complex46.cosh();
        org.apache.commons.math.complex.Complex complex48 = complex46.log();
        org.apache.commons.math.complex.Complex complex49 = complex48.cos();
        org.apache.commons.math.complex.Complex complex50 = complex48.exp();
        boolean boolean51 = complex48.isNaN();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        double double54 = complex52.abs();
        org.apache.commons.math.complex.Complex complex55 = complex52.conjugate();
        org.apache.commons.math.complex.Complex complex56 = complex55.conjugate();
        org.apache.commons.math.complex.Complex complex57 = complex55.tanh();
        org.apache.commons.math.complex.Complex complex58 = complex48.multiply(complex55);
        org.apache.commons.math.complex.Complex complex59 = complex55.asin();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex62 = complex61.sin();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        double double65 = complex63.abs();
        org.apache.commons.math.complex.Complex complex66 = complex63.conjugate();
        org.apache.commons.math.complex.Complex complex67 = complex66.conjugate();
        boolean boolean68 = complex66.isInfinite();
        org.apache.commons.math.complex.Complex complex69 = complex66.cos();
        org.apache.commons.math.complex.Complex complex70 = complex62.add(complex66);
        org.apache.commons.math.complex.Complex complex71 = complex62.conjugate();
        org.apache.commons.math.complex.Complex complex72 = complex71.sin();
        org.apache.commons.math.complex.Complex complex73 = complex72.cosh();
        org.apache.commons.math.complex.Complex complex74 = complex55.multiply(complex72);
        org.apache.commons.math.complex.Complex complex75 = complex74.sqrt();
        org.apache.commons.math.complex.Complex complex76 = complex75.sqrt();
        org.apache.commons.math.complex.Complex complex77 = complex76.log();
        org.apache.commons.math.complex.Complex complex78 = complex44.divide(complex76);
        org.apache.commons.math.complex.Complex complex79 = complex76.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.6365376E7d) + "'", double23 == (-1.6365376E7d));
        org.junit.Assert.assertNotNull(univariateRealFunction24);
        org.junit.Assert.assertNotNull(polynomialFunction25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + Double.POSITIVE_INFINITY + "'", double37 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + Double.POSITIVE_INFINITY + "'", double54 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + Double.POSITIVE_INFINITY + "'", double65 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
    }

    @Test
    public void test08007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08007");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex7.exp();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex15.pow(complex17);
        org.apache.commons.math.complex.Complex complex20 = complex19.asin();
        org.apache.commons.math.complex.Complex complex21 = complex20.atan();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        boolean boolean24 = complex21.equals((java.lang.Object) complex22);
        org.apache.commons.math.complex.Complex complex25 = complex7.divide(complex22);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.log();
        org.apache.commons.math.complex.Complex complex29 = complex28.cos();
        org.apache.commons.math.complex.Complex complex30 = complex28.exp();
        boolean boolean31 = complex28.isNaN();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.abs();
        org.apache.commons.math.complex.Complex complex35 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex36 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex37 = complex35.tanh();
        org.apache.commons.math.complex.Complex complex38 = complex28.multiply(complex35);
        org.apache.commons.math.complex.Complex complex39 = complex22.add(complex28);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.tan();
        org.apache.commons.math.complex.Complex complex42 = complex40.cos();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex43.log();
        org.apache.commons.math.complex.Complex complex46 = complex43.cos();
        org.apache.commons.math.complex.Complex complex47 = complex40.subtract(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex40.acos();
        org.apache.commons.math.complex.Complex complex49 = complex22.pow(complex40);
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + Double.POSITIVE_INFINITY + "'", double34 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
    }

    @Test
    public void test08008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08008");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-2.5840867466E10d), (-1.12790000765273984E17d));
    }

    @Test
    public void test08009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08009");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex5.log();
        org.apache.commons.math.complex.Complex complex8 = complex0.divide(complex7);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = complex9.tan();
        org.apache.commons.math.complex.Complex complex11 = complex9.cos();
        org.apache.commons.math.complex.Complex complex12 = complex8.subtract(complex9);
        org.apache.commons.math.complex.Complex complex13 = complex8.sqrt1z();
        double double14 = complex8.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test08010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08010");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.sqrt1z();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test08011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08011");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        laguerreSolver9.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver9.resetRelativeAccuracy();
        laguerreSolver9.resetMaximalIterationCount();
        laguerreSolver9.resetAbsoluteAccuracy();
        double double27 = laguerreSolver9.solve((double) (short) -1, (double) 0, (double) 0L);
        laguerreSolver9.setFunctionValueAccuracy((double) 0L);
        double[] doubleArray32 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray32);
        double double35 = polynomialFunction33.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver36 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction33);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver36.getPolynomialFunction();
        laguerreSolver36.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = laguerreSolver36.getPolynomialFunction();
        laguerreSolver36.resetRelativeAccuracy();
        laguerreSolver36.setFunctionValueAccuracy((double) 100.0f);
        laguerreSolver36.setFunctionValueAccuracy((double) 32);
        double[] doubleArray48 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction49 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray48);
        double double51 = polynomialFunction49.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver52 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction49);
        double double53 = laguerreSolver52.getAbsoluteAccuracy();
        double[] doubleArray60 = new double[] { (-1.0f), (short) 1, 1L, 10L, 0.7853981633974483d, (-1.6365376E7d) };
        org.apache.commons.math.complex.Complex[] complexArray62 = laguerreSolver52.solveAll(doubleArray60, (-1.0d));
        org.apache.commons.math.complex.Complex[] complexArray64 = laguerreSolver36.solveAll(doubleArray60, (double) 5);
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex66 = complex65.cosh();
        double double67 = complex65.abs();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        double double70 = complex68.abs();
        org.apache.commons.math.complex.Complex complex71 = complex68.conjugate();
        org.apache.commons.math.complex.Complex complex72 = complex71.conjugate();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex74 = complex73.tan();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        org.apache.commons.math.complex.Complex complex77 = complex76.acos();
        double double78 = complex76.getReal();
        boolean boolean79 = complex74.equals((java.lang.Object) complex76);
        org.apache.commons.math.complex.Complex complex80 = complex72.subtract(complex76);
        org.apache.commons.math.complex.Complex complex81 = complex76.exp();
        org.apache.commons.math.complex.Complex complex82 = complex65.divide(complex76);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        java.lang.String str85 = functionEvaluationException84.getPattern();
        boolean boolean86 = complex65.equals((java.lang.Object) functionEvaluationException84);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex87 = laguerreSolver9.solve(complexArray64, complex65);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Maximal number of iterations (100) exceeded");
        } catch (org.apache.commons.math.MaxIterationsExceededException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10001.0d + "'", double35 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10001.0d + "'", double51 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0E-6d + "'", double53 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 1.0, 1.0, 10.0, 0.7853981633974483, -1.6365376E7]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + Double.POSITIVE_INFINITY + "'", double67 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + Double.POSITIVE_INFINITY + "'", double70 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "Evaluation failed for argument = {0}" + "'", str85, "Evaluation failed for argument = {0}");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test08012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08012");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        int int11 = laguerreSolver6.getIterationCount();
        double double12 = laguerreSolver6.getRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = laguerreSolver6.solve((-0.3400000100000003d), (-0.010000000000000009d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [-0.3400000100000003,-0.010000000000000009]  Values: [-33.00000100000003,-8.881784197001252E-16]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-14d + "'", double12 == 1.0E-14d);
    }

    @Test
    public void test08013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08013");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(45401.0d, (-7.173051538824589E28d));
        java.lang.Class<?> wildcardClass3 = complex2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test08014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08014");
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException16 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray13);
        java.lang.Throwable[] throwableArray17 = maxIterationsExceededException16.getSuppressed();
        java.lang.Object[] objArray24 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException25 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray24);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException26 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray24);
        int int27 = maxIterationsExceededException26.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, "hi!", (java.lang.Object[]) throwableArray17, (java.lang.Throwable) maxIterationsExceededException26);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException29 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) throwableArray17);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException30 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 1, "org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}", (java.lang.Object[]) throwableArray17);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException32 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        int int33 = maxIterationsExceededException32.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray17, (java.lang.Throwable) maxIterationsExceededException32);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) maxIterationsExceededException32);
        java.lang.Throwable[] throwableArray36 = convergenceException35.getSuppressed();
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 32 + "'", int27 == 32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(throwableArray36);
    }

    @Test
    public void test08015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08015");
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray18);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray18, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray18, (java.lang.Throwable) functionEvaluationException25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray12, (java.lang.Throwable) functionEvaluationException26);
        java.lang.String str28 = functionEvaluationException27.getPattern();
        double double29 = functionEvaluationException27.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, (java.lang.Throwable) functionEvaluationException27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException(1.0E-6d, "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException27);
        java.lang.Throwable[] throwableArray32 = functionEvaluationException27.getSuppressed();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex33.log();
        org.apache.commons.math.complex.Complex complex36 = complex33.cos();
        org.apache.commons.math.complex.Complex complex37 = complex36.negate();
        org.apache.commons.math.complex.Complex complex38 = complex37.tan();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((-9.89965E7d), "org.apache.commons.math.ConvergenceException: Convergence failed");
        boolean boolean42 = complex37.equals((java.lang.Object) functionEvaluationException41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException(Double.NEGATIVE_INFINITY, "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) throwableArray32, (java.lang.Throwable) functionEvaluationException41);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException44 = new org.apache.commons.math.MaxIterationsExceededException(97, "org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray32);
        java.lang.Throwable[] throwableArray45 = maxIterationsExceededException44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = maxIterationsExceededException44.getSuppressed();
        java.lang.Object[] objArray51 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("", objArray51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException(Double.NEGATIVE_INFINITY, (java.lang.Throwable) functionEvaluationException53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((-1376932.893290001d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray46, (java.lang.Throwable) functionEvaluationException53);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 35.0d + "'", double29 == 35.0d);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
    }

    @Test
    public void test08016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08016");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.setRelativeAccuracy(0.0d);
        laguerreSolver6.resetRelativeAccuracy();
        double[] doubleArray16 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray16);
        double double19 = polynomialFunction17.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver20 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction17);
        double double24 = laguerreSolver20.solve((double) (-1L), 349.0d, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = laguerreSolver20.getPolynomialFunction();
        double double27 = polynomialFunction25.value((double) (short) 1);
        double double29 = polynomialFunction25.value(101.0d);
        int int30 = polynomialFunction25.degree();
        double[] doubleArray31 = polynomialFunction25.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray33 = laguerreSolver6.solveAll(doubleArray31, 7954.981633974483d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10001.0d + "'", double19 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-0.01d) + "'", double24 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 101.0d + "'", double27 == 101.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10101.0d + "'", double29 == 10101.0d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray33);
    }

    @Test
    public void test08017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08017");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.sin();
        boolean boolean9 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex10 = complex3.atan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex13.sin();
        org.apache.commons.math.complex.Complex complex15 = complex11.pow(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex15.asin();
        org.apache.commons.math.complex.Complex complex17 = complex16.atan();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        boolean boolean20 = complex17.equals((java.lang.Object) complex18);
        org.apache.commons.math.complex.Complex complex21 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex3.pow(complex17);
        org.apache.commons.math.complex.Complex complex23 = complex17.atan();
        org.apache.commons.math.complex.Complex complex24 = complex17.log();
        org.apache.commons.math.complex.Complex complex25 = complex17.exp();
        org.apache.commons.math.complex.Complex complex26 = complex17.acos();
        org.apache.commons.math.complex.Complex complex27 = complex17.acos();
        org.apache.commons.math.complex.Complex complex28 = complex27.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test08018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08018");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        org.apache.commons.math.complex.Complex complex4 = complex2.exp();
        boolean boolean5 = complex2.isNaN();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.abs();
        org.apache.commons.math.complex.Complex complex9 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex12 = complex2.multiply(complex9);
        org.apache.commons.math.complex.Complex complex13 = complex2.cos();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.cos();
        double double18 = complex17.abs();
        org.apache.commons.math.complex.Complex complex19 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex22.sin();
        org.apache.commons.math.complex.Complex complex24 = complex20.pow(complex22);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex25.log();
        org.apache.commons.math.complex.Complex complex28 = complex20.divide(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex19.subtract(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex19.cos();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex35.log();
        org.apache.commons.math.complex.Complex complex38 = complex35.sin();
        org.apache.commons.math.complex.Complex complex39 = complex35.log();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex complex42 = complex35.divide(complex41);
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex44.acos();
        double double46 = complex44.getReal();
        org.apache.commons.math.complex.Complex complex47 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex48 = complex35.pow(complex44);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        org.apache.commons.math.complex.Complex complex51 = complex49.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.cos();
        org.apache.commons.math.complex.Complex complex53 = complex44.multiply(complex51);
        org.apache.commons.math.complex.Complex complex54 = complex51.tanh();
        org.apache.commons.math.complex.Complex complex55 = complex33.divide(complex51);
        org.apache.commons.math.complex.Complex complex56 = complex32.pow(complex51);
        org.apache.commons.math.complex.Complex complex57 = complex13.add(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex57.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.POSITIVE_INFINITY + "'", double8 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
    }

    @Test
    public void test08019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08019");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = complex1.sin();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.abs();
        org.apache.commons.math.complex.Complex complex6 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        boolean boolean8 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex6.cos();
        org.apache.commons.math.complex.Complex complex10 = complex2.add(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex12.acos();
        org.apache.commons.math.complex.Complex complex15 = complex12.atan();
        org.apache.commons.math.complex.Complex complex16 = complex15.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test08020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08020");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(130099.9d, 1001.0d);
        org.apache.commons.math.complex.Complex complex3 = complex2.sqrt();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test08021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08021");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-3.464877501E9d), 34.0d);
    }

    @Test
    public void test08022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08022");
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray18);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray18);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray18, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException24 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray18);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray18);
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray31);
        java.lang.Object[] objArray34 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("", objArray34);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("", objArray31, (java.lang.Throwable) convergenceException35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException38 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray31, (java.lang.Throwable) functionEvaluationException38);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, "org.apache.commons.math.ConvergenceException: Convergence failed", objArray18, (java.lang.Throwable) functionEvaluationException38);
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", objArray47);
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("", objArray53);
        java.lang.Object[] objArray56 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("", objArray56);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("", objArray53, (java.lang.Throwable) convergenceException57);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray53, (java.lang.Throwable) functionEvaluationException60);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray47, (java.lang.Throwable) functionEvaluationException61);
        java.lang.Object[] objArray70 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException71 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray70);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException72 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray70);
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) maxIterationsExceededException72);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException74 = new org.apache.commons.math.FunctionEvaluationException(10.0d, "", objArray47, (java.lang.Throwable) maxIterationsExceededException72);
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) functionEvaluationException74);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((double) (-1), "org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}", objArray18, (java.lang.Throwable) convergenceException75);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException(64.0d, "org.apache.commons.math.ConvergenceException: Convergence failed", objArray18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException((-2.84205213599E11d), "", (java.lang.Throwable) functionEvaluationException77);
        double double79 = functionEvaluationException78.getArgument();
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + (-2.84205213599E11d) + "'", double79 == (-2.84205213599E11d));
    }

    @Test
    public void test08023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08023");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) 10.0f);
        double[] doubleArray21 = new double[] { 100.0f, (-0.01d), (byte) 0, (byte) 0, 3, 1.0f };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray21);
        org.apache.commons.math.complex.Complex[] complexArray24 = laguerreSolver6.solveAll(doubleArray21, (double) 100);
        double double25 = laguerreSolver6.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, -0.01, 0.0, 0.0, 3.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0E-6d + "'", double25 == 1.0E-6d);
    }

    @Test
    public void test08024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08024");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) 3);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((-2.55976730539718E65d), (java.lang.Throwable) functionEvaluationException2);
    }

    @Test
    public void test08025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08025");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        boolean boolean14 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex6.divide(complex15);
        double double19 = complex6.getReal();
        org.apache.commons.math.complex.Complex complex20 = complex6.negate();
        org.apache.commons.math.complex.Complex complex23 = new org.apache.commons.math.complex.Complex((-1.0019968919675491E80d), 100.0d);
        org.apache.commons.math.complex.Complex complex26 = new org.apache.commons.math.complex.Complex((-9.631547407031818E12d), (-9.631547407031818E12d));
        org.apache.commons.math.complex.Complex complex27 = complex26.sin();
        org.apache.commons.math.complex.Complex complex28 = complex23.subtract(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex20.multiply(complex23);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
    }

    @Test
    public void test08026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08026");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((-3.2273645162588404E16d), "");
    }

    @Test
    public void test08027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08027");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex4.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        boolean boolean14 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex6.pow(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex15.tanh();
        org.apache.commons.math.complex.Complex complex20 = complex15.cos();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex21.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.cos();
        org.apache.commons.math.complex.Complex complex25 = complex23.exp();
        boolean boolean26 = complex23.isNaN();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        double double29 = complex27.abs();
        org.apache.commons.math.complex.Complex complex30 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex30.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex30.tanh();
        org.apache.commons.math.complex.Complex complex33 = complex23.multiply(complex30);
        org.apache.commons.math.complex.Complex complex34 = complex30.acos();
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex34.sqrt1z();
        org.apache.commons.math.complex.Complex complex37 = complex34.tan();
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        boolean boolean39 = complex20.equals((java.lang.Object) complex37);
        org.apache.commons.math.complex.Complex complex40 = complex37.exp();
        boolean boolean41 = complex40.isInfinite();
        org.apache.commons.math.complex.Complex complex42 = complex40.log();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        double double45 = complex43.abs();
        org.apache.commons.math.complex.Complex complex46 = complex43.conjugate();
        org.apache.commons.math.complex.Complex complex47 = complex46.conjugate();
        boolean boolean48 = complex46.isInfinite();
        org.apache.commons.math.complex.Complex complex49 = complex46.cos();
        org.apache.commons.math.complex.Complex complex50 = complex46.sin();
        org.apache.commons.math.complex.Complex complex51 = complex46.log();
        org.apache.commons.math.complex.Complex complex52 = complex40.pow(complex46);
        org.apache.commons.math.complex.Complex complex53 = complex46.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + Double.POSITIVE_INFINITY + "'", double29 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
    }

    @Test
    public void test08028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08028");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) (-1.0f));
        laguerreSolver6.resetRelativeAccuracy();
        int int13 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.setFunctionValueAccuracy(1484.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
    }

    @Test
    public void test08029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08029");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        double[] doubleArray5 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction7.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction8.polynomialDerivative();
        double double11 = polynomialFunction9.value(3.60500003464E11d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = polynomialFunction9.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction13 = polynomialFunction9.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction12);
        org.junit.Assert.assertNotNull(univariateRealFunction13);
    }

    @Test
    public void test08030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08030");
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("", objArray4);
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray7);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray4, (java.lang.Throwable) convergenceException8);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray4);
        java.lang.Throwable[] throwableArray11 = convergenceException10.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException10);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException10);
        java.lang.String str14 = convergenceException10.getPattern();
        java.lang.String str15 = convergenceException10.getPattern();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test08031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08031");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-2.5610252116353312E16d), 0.0d);
    }

    @Test
    public void test08032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08032");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        int int7 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction6.polynomialDerivative();
        double double10 = polynomialFunction8.value(0.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction8.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction8.derivative();
        double double14 = polynomialFunction8.value(5201.0d);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver15 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        double double16 = laguerreSolver15.getRelativeAccuracy();
        double[] doubleArray19 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        double double22 = polynomialFunction20.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver23 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction20);
        double double24 = laguerreSolver23.getAbsoluteAccuracy();
        laguerreSolver23.resetAbsoluteAccuracy();
        laguerreSolver23.resetFunctionValueAccuracy();
        double double27 = laguerreSolver23.getRelativeAccuracy();
        double double28 = laguerreSolver23.getRelativeAccuracy();
        double[] doubleArray34 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray34);
        int int36 = polynomialFunction35.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = polynomialFunction35.polynomialDerivative();
        double[] doubleArray38 = polynomialFunction35.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray40 = laguerreSolver23.solveAll(doubleArray38, (double) 100.0f);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray43 = laguerreSolver15.solveAll(doubleArray38, (-1.819048929283793E200d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Maximal number of iterations (100) exceeded");
        } catch (org.apache.commons.math.MaxIterationsExceededException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-5.62755502169E11d) + "'", double14 == (-5.62755502169E11d));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-14d + "'", double16 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10001.0d + "'", double22 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0E-6d + "'", double24 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0E-14d + "'", double27 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0E-14d + "'", double28 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
    }

    @Test
    public void test08033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08033");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex7.exp();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex16.acos();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex18.log();
        org.apache.commons.math.complex.Complex complex21 = complex18.sin();
        org.apache.commons.math.complex.Complex complex22 = complex21.tanh();
        org.apache.commons.math.complex.Complex complex23 = complex16.add(complex22);
        boolean boolean24 = complex7.equals((java.lang.Object) complex16);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.abs();
        org.apache.commons.math.complex.Complex complex28 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex29 = complex28.conjugate();
        boolean boolean30 = complex28.isInfinite();
        org.apache.commons.math.complex.Complex complex31 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex32 = complex7.add(complex28);
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt1z();
        double double34 = complex32.abs();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        boolean boolean37 = complex35.isNaN();
        org.apache.commons.math.complex.Complex complex38 = complex35.tanh();
        org.apache.commons.math.complex.Complex complex39 = complex35.atan();
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex41 = complex40.sinh();
        org.apache.commons.math.complex.Complex complex42 = complex40.exp();
        org.apache.commons.math.complex.Complex complex43 = complex32.divide(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex32.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + Double.POSITIVE_INFINITY + "'", double27 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
    }

    @Test
    public void test08034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08034");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.MaxIterationsExceededException: Evaluation failed for argument = 100", throwable2);
    }

    @Test
    public void test08035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08035");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(1.022247422742701E15d, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = -161");
    }

    @Test
    public void test08036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08036");
        java.lang.Object[] objArray2 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("", objArray2);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException3);
        java.lang.Object[] objArray5 = functionEvaluationException4.getArguments();
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray11, (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException17 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.FunctionEvaluationException: ", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) maxIterationsExceededException17);
        functionEvaluationException4.addSuppressed((java.lang.Throwable) convergenceException18);
        java.lang.Object[] objArray20 = convergenceException18.getArguments();
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
    }

    @Test
    public void test08037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08037");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        double double4 = complex2.abs();
        org.apache.commons.math.complex.Complex complex5 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex6 = complex0.divide(complex5);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex7.log();
        org.apache.commons.math.complex.Complex complex10 = complex7.sin();
        org.apache.commons.math.complex.Complex complex11 = complex7.log();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex7.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex14.subtract(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex6.multiply(complex14);
        boolean boolean22 = complex14.isInfinite();
        org.apache.commons.math.complex.Complex complex23 = complex14.negate();
        org.apache.commons.math.complex.Complex complex24 = complex23.negate();
        org.apache.commons.math.complex.Complex complex25 = complex24.sinh();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.log();
        org.apache.commons.math.complex.Complex complex29 = complex28.cos();
        org.apache.commons.math.complex.Complex complex30 = complex28.exp();
        boolean boolean31 = complex28.isNaN();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.abs();
        org.apache.commons.math.complex.Complex complex35 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex36 = complex35.conjugate();
        boolean boolean37 = complex35.isInfinite();
        org.apache.commons.math.complex.Complex complex38 = complex35.asin();
        org.apache.commons.math.complex.Complex complex39 = complex28.pow(complex35);
        org.apache.commons.math.complex.Complex complex40 = complex28.exp();
        double double41 = complex40.getImaginary();
        org.apache.commons.math.complex.Complex complex42 = complex24.pow(complex40);
        org.apache.commons.math.complex.Complex complex43 = complex42.log();
        org.apache.commons.math.complex.Complex complex44 = complex42.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + Double.POSITIVE_INFINITY + "'", double4 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + Double.POSITIVE_INFINITY + "'", double34 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + Double.POSITIVE_INFINITY + "'", double41 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
    }

    @Test
    public void test08038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08038");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(10.0d, (-1.0303676599E10d));
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.abs();
        org.apache.commons.math.complex.Complex complex6 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        boolean boolean8 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex6.cos();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.abs();
        org.apache.commons.math.complex.Complex complex13 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex13.conjugate();
        boolean boolean15 = complex13.isInfinite();
        org.apache.commons.math.complex.Complex complex16 = complex13.asin();
        boolean boolean17 = complex13.isNaN();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex13.divide(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex9.divide(complex18);
        org.apache.commons.math.complex.Complex complex22 = complex9.log();
        org.apache.commons.math.complex.Complex complex23 = complex22.log();
        org.apache.commons.math.complex.Complex complex24 = complex2.add(complex23);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
    }

    @Test
    public void test08039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08039");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setAbsoluteAccuracy(Double.NEGATIVE_INFINITY);
        double double11 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.setAbsoluteAccuracy((-1.376932883290001E8d));
        double double14 = laguerreSolver6.getFunctionValueAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = laguerreSolver6.solve(1880101.0d, 1.120340101E9d, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [1880101.0,1.120340101E9]  Values: [1.88010101E8,1.12034010101E11]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-15d + "'", double11 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
    }

    @Test
    public void test08040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08040");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        double double3 = complex0.getImaginary();
        double double4 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = complex7.sin();
        org.apache.commons.math.complex.Complex complex9 = complex5.pow(complex7);
        org.apache.commons.math.complex.Complex complex10 = complex9.asin();
        org.apache.commons.math.complex.Complex complex11 = complex10.atan();
        boolean boolean12 = complex11.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex11.subtract(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex0.divide(complex15);
        double double17 = complex15.getImaginary();
        org.apache.commons.math.complex.Complex complex18 = complex15.negate();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        org.apache.commons.math.complex.Complex complex21 = complex19.log();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.abs();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.abs();
        org.apache.commons.math.complex.Complex complex28 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex29 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex31 = complex30.tan();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex33.acos();
        double double35 = complex33.getReal();
        boolean boolean36 = complex31.equals((java.lang.Object) complex33);
        org.apache.commons.math.complex.Complex complex37 = complex29.subtract(complex33);
        org.apache.commons.math.complex.Complex complex38 = complex33.exp();
        org.apache.commons.math.complex.Complex complex39 = complex22.divide(complex33);
        org.apache.commons.math.complex.Complex complex40 = complex21.pow(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex21.sqrt1z();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt1z();
        org.apache.commons.math.complex.Complex complex43 = complex15.multiply(complex42);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + Double.POSITIVE_INFINITY + "'", double3 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + Double.POSITIVE_INFINITY + "'", double4 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + Double.POSITIVE_INFINITY + "'", double27 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
    }

    @Test
    public void test08041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08041");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        double double19 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        double double21 = laguerreSolver6.getResult();
        laguerreSolver6.resetRelativeAccuracy();
        double double23 = laguerreSolver6.getFunctionValueAccuracy();
        double double26 = laguerreSolver6.solve((-3.464877501E9d), 3.573947685493632E41d);
        double[] doubleArray29 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray29);
        double double32 = polynomialFunction30.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver33 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction30);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = laguerreSolver33.getPolynomialFunction();
        laguerreSolver33.resetRelativeAccuracy();
        laguerreSolver33.resetMaximalIterationCount();
        laguerreSolver33.setMaximalIterationCount((int) '#');
        laguerreSolver33.resetMaximalIterationCount();
        laguerreSolver33.resetFunctionValueAccuracy();
        laguerreSolver33.setFunctionValueAccuracy((-0.3400000100000003d));
        laguerreSolver33.resetMaximalIterationCount();
        laguerreSolver33.setFunctionValueAccuracy(2.799833927635354E77d);
        double[] doubleArray48 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction49 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray48);
        double double51 = polynomialFunction49.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver52 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction49);
        double[] doubleArray53 = polynomialFunction49.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction54 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray53);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction55 = polynomialFunction54.polynomialDerivative();
        double[] doubleArray56 = polynomialFunction54.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray58 = laguerreSolver33.solveAll(doubleArray56, 3501.0d);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        double double61 = complex59.abs();
        org.apache.commons.math.complex.Complex complex62 = complex59.conjugate();
        org.apache.commons.math.complex.Complex complex63 = complex62.conjugate();
        org.apache.commons.math.complex.Complex complex64 = complex62.tanh();
        org.apache.commons.math.complex.Complex complex65 = complex64.tan();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        double double68 = complex66.abs();
        org.apache.commons.math.complex.Complex complex69 = complex66.conjugate();
        org.apache.commons.math.complex.Complex complex70 = complex69.conjugate();
        org.apache.commons.math.complex.Complex complex71 = complex65.subtract(complex69);
        org.apache.commons.math.complex.Complex complex72 = complex69.negate();
        org.apache.commons.math.complex.Complex complex73 = complex69.tanh();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex75 = complex74.cosh();
        org.apache.commons.math.complex.Complex complex76 = complex74.log();
        org.apache.commons.math.complex.Complex complex77 = complex76.cos();
        double double78 = complex77.abs();
        org.apache.commons.math.complex.Complex complex79 = complex77.sqrt();
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex82 = complex81.sqrt();
        org.apache.commons.math.complex.Complex complex83 = complex82.sin();
        org.apache.commons.math.complex.Complex complex84 = complex80.pow(complex82);
        org.apache.commons.math.complex.Complex complex85 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex86 = complex85.cosh();
        org.apache.commons.math.complex.Complex complex87 = complex85.log();
        org.apache.commons.math.complex.Complex complex88 = complex80.divide(complex87);
        org.apache.commons.math.complex.Complex complex89 = complex79.subtract(complex88);
        org.apache.commons.math.complex.Complex complex90 = complex79.conjugate();
        org.apache.commons.math.complex.Complex complex91 = complex79.cos();
        org.apache.commons.math.complex.Complex complex92 = complex91.negate();
        boolean boolean93 = complex69.equals((java.lang.Object) complex91);
        org.apache.commons.math.complex.Complex complex94 = complex69.asin();
        org.apache.commons.math.complex.Complex complex95 = complex94.sin();
        org.apache.commons.math.complex.Complex complex96 = null;
        org.apache.commons.math.complex.Complex complex97 = complex95.subtract(complex96);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray98 = laguerreSolver6.solveAll(complexArray58, complex95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0E-15d + "'", double23 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-0.01d) + "'", double26 == (-0.01d));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10001.0d + "'", double32 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction34);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10001.0d + "'", double51 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(polynomialFunction55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + Double.POSITIVE_INFINITY + "'", double61 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + Double.POSITIVE_INFINITY + "'", double68 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex97);
    }

    @Test
    public void test08042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08042");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        int int9 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.setFunctionValueAccuracy(Double.NEGATIVE_INFINITY);
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetFunctionValueAccuracy();
        laguerreSolver6.setAbsoluteAccuracy(0.8760844767819809d);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = laguerreSolver6.solve((double) (byte) 10, 1001.0d, 79.53981633974483d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [10.0,1001.0]  Values: [1001.0,100101.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
    }

    @Test
    public void test08043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08043");
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        double double4 = complex2.abs();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        double double7 = complex5.abs();
        org.apache.commons.math.complex.Complex complex8 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex11 = complex10.tan();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        double double15 = complex13.getReal();
        boolean boolean16 = complex11.equals((java.lang.Object) complex13);
        org.apache.commons.math.complex.Complex complex17 = complex9.subtract(complex13);
        org.apache.commons.math.complex.Complex complex18 = complex13.exp();
        org.apache.commons.math.complex.Complex complex19 = complex2.divide(complex13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        java.lang.String str22 = functionEvaluationException21.getPattern();
        boolean boolean23 = complex2.equals((java.lang.Object) functionEvaluationException21);
        java.lang.Throwable[] throwableArray24 = functionEvaluationException21.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException25 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}", (java.lang.Object[]) throwableArray24);
        java.lang.Object[] objArray34 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("", objArray34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray34);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException37 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray34);
        java.lang.Throwable[] throwableArray38 = maxIterationsExceededException37.getSuppressed();
        java.lang.Object[] objArray45 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException46 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray45);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException47 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray45);
        int int48 = maxIterationsExceededException47.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, "hi!", (java.lang.Object[]) throwableArray38, (java.lang.Throwable) maxIterationsExceededException47);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray38);
        maxIterationsExceededException25.addSuppressed((java.lang.Throwable) convergenceException50);
        java.lang.Object[] objArray62 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException63 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray62);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException64 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray62);
        java.lang.Object[] objArray69 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("", objArray69);
        java.lang.Object[] objArray72 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException73 = new org.apache.commons.math.ConvergenceException("", objArray72);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("", objArray69, (java.lang.Throwable) convergenceException73);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray69, (java.lang.Throwable) functionEvaluationException76);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "org.apache.commons.math.ConvergenceException: hi!", objArray62, (java.lang.Throwable) functionEvaluationException77);
        double double79 = functionEvaluationException77.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) functionEvaluationException77);
        java.lang.Throwable[] throwableArray81 = functionEvaluationException77.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException(1.0E-6d);
        java.lang.Object[] objArray84 = functionEvaluationException83.getArguments();
        functionEvaluationException77.addSuppressed((java.lang.Throwable) functionEvaluationException83);
        java.lang.Object[] objArray86 = functionEvaluationException77.getArguments();
        java.lang.Throwable[] throwableArray87 = functionEvaluationException77.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException(384.0d, (java.lang.Throwable) functionEvaluationException77);
        convergenceException50.addSuppressed((java.lang.Throwable) functionEvaluationException88);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + Double.POSITIVE_INFINITY + "'", double4 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + Double.POSITIVE_INFINITY + "'", double7 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Evaluation failed for argument = {0}" + "'", str22, "Evaluation failed for argument = {0}");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 32 + "'", int48 == 32);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 100.0d + "'", double79 == 100.0d);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[1.0E-6]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[1.0E-6]");
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[]");
        org.junit.Assert.assertNotNull(throwableArray87);
    }

    @Test
    public void test08044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08044");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver6.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction13 = polynomialFunction11.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver14 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        double double16 = polynomialFunction11.value((double) (byte) -1);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver17 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        double[] doubleArray18 = polynomialFunction11.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray18);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray18);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray18);
        int int22 = polynomialFunction21.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(univariateRealFunction13);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-99.0d) + "'", double16 == (-99.0d));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test08045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08045");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double7 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.setAbsoluteAccuracy(100.0d);
        int int11 = laguerreSolver6.getMaximalIterationCount();
        double double12 = laguerreSolver6.getAbsoluteAccuracy();
        double double13 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.setMaximalIterationCount(0);
        laguerreSolver6.resetAbsoluteAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = laguerreSolver6.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0E-6d + "'", double7 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-15d + "'", double13 == 1.0E-15d);
    }

    @Test
    public void test08046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08046");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        double double11 = laguerreSolver6.getResult();
        double double12 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        double double17 = laguerreSolver6.getRelativeAccuracy();
        int int18 = laguerreSolver6.getIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.01d) + "'", double11 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-14d + "'", double17 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
    }

    @Test
    public void test08047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08047");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.exp();
        org.apache.commons.math.complex.Complex complex10 = complex3.cosh();
        double double11 = complex10.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex10.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test08048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08048");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double[] doubleArray7 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray7);
        double[] doubleArray9 = polynomialFunction8.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction10.polynomialDerivative();
        double double13 = polynomialFunction11.value((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction11.polynomialDerivative();
        double double16 = polynomialFunction14.value((double) 21);
        int int17 = polynomialFunction14.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test08049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08049");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray14, 101.0d);
        double double19 = laguerreSolver6.getRelativeAccuracy();
        int int20 = laguerreSolver6.getIterationCount();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setRelativeAccuracy(1.0000000000001d);
        laguerreSolver6.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-14d + "'", double19 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 18 + "'", int20 == 18);
    }

    @Test
    public void test08050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08050");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        int int19 = laguerreSolver6.getIterationCount();
        laguerreSolver6.setFunctionValueAccuracy((-1.6365376E7d));
        laguerreSolver6.resetRelativeAccuracy();
        double[] doubleArray26 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray26);
        double double29 = polynomialFunction27.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver30 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction27);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = laguerreSolver30.getPolynomialFunction();
        double double32 = laguerreSolver30.getRelativeAccuracy();
        double double33 = laguerreSolver30.getAbsoluteAccuracy();
        laguerreSolver30.setAbsoluteAccuracy(0.0d);
        laguerreSolver30.setRelativeAccuracy(349.0d);
        double double40 = laguerreSolver30.solve((-0.3533630315721405d), 10101.0d);
        double[] doubleArray43 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray43);
        double double46 = polynomialFunction44.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver47 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction44);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction48 = laguerreSolver47.getPolynomialFunction();
        laguerreSolver47.resetRelativeAccuracy();
        double[] doubleArray55 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction56 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray55);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction57 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray59 = laguerreSolver47.solveAll(doubleArray55, 101.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction60 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray55);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction61 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray55);
        org.apache.commons.math.complex.Complex[] complexArray63 = laguerreSolver30.solveAll(doubleArray55, 1.0176859636240143d);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) complexArray63);
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex66 = complex65.cosh();
        double double67 = complex65.abs();
        org.apache.commons.math.complex.Complex complex68 = complex65.conjugate();
        org.apache.commons.math.complex.Complex complex69 = complex68.conjugate();
        org.apache.commons.math.complex.Complex complex70 = complex68.log();
        org.apache.commons.math.complex.Complex complex71 = complex68.exp();
        boolean boolean72 = complex68.isInfinite();
        org.apache.commons.math.complex.Complex complex73 = complex68.sqrt1z();
        org.apache.commons.math.complex.Complex complex74 = complex68.cos();
        org.apache.commons.math.complex.Complex complex77 = new org.apache.commons.math.complex.Complex(350.0d, 134.0d);
        org.apache.commons.math.complex.Complex complex78 = complex77.asin();
        org.apache.commons.math.complex.Complex complex79 = complex74.divide(complex78);
        org.apache.commons.math.complex.Complex complex80 = complex74.negate();
        org.apache.commons.math.complex.Complex complex81 = complex80.acos();
        org.apache.commons.math.complex.Complex complex82 = complex80.exp();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray83 = laguerreSolver6.solveAll(complexArray63, complex82);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Maximal number of iterations (100) exceeded");
        } catch (org.apache.commons.math.MaxIterationsExceededException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10001.0d + "'", double29 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0E-14d + "'", double32 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-6d + "'", double33 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + (-0.01d) + "'", double40 == (-0.01d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10001.0d + "'", double46 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction48);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray63);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + Double.POSITIVE_INFINITY + "'", double67 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
    }

    @Test
    public void test08051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08051");
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException16 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray13);
        java.lang.Throwable[] throwableArray17 = maxIterationsExceededException16.getSuppressed();
        java.lang.Object[] objArray24 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException25 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray24);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException26 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray24);
        int int27 = maxIterationsExceededException26.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, "hi!", (java.lang.Object[]) throwableArray17, (java.lang.Throwable) maxIterationsExceededException26);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException29 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) throwableArray17);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException30 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 1, "org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}", (java.lang.Object[]) throwableArray17);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException32 = new org.apache.commons.math.MaxIterationsExceededException((-1));
        int int33 = maxIterationsExceededException32.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray17, (java.lang.Throwable) maxIterationsExceededException32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException(1000.0d, (java.lang.Throwable) maxIterationsExceededException32);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 32 + "'", int27 == 32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test08052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08052");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex7.exp();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex16.acos();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex18.log();
        org.apache.commons.math.complex.Complex complex21 = complex18.sin();
        org.apache.commons.math.complex.Complex complex22 = complex21.tanh();
        org.apache.commons.math.complex.Complex complex23 = complex16.add(complex22);
        boolean boolean24 = complex7.equals((java.lang.Object) complex16);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.abs();
        org.apache.commons.math.complex.Complex complex28 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex29 = complex28.conjugate();
        boolean boolean30 = complex28.isInfinite();
        org.apache.commons.math.complex.Complex complex31 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex32 = complex7.add(complex28);
        double double33 = complex32.getReal();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt();
        org.apache.commons.math.complex.Complex complex37 = complex36.sin();
        org.apache.commons.math.complex.Complex complex38 = complex34.pow(complex36);
        org.apache.commons.math.complex.Complex complex39 = complex38.asin();
        org.apache.commons.math.complex.Complex complex40 = complex39.atan();
        org.apache.commons.math.complex.Complex complex41 = complex39.log();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex43 = complex42.tan();
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex39.pow(complex43);
        org.apache.commons.math.complex.Complex complex46 = complex45.exp();
        org.apache.commons.math.complex.Complex complex47 = complex32.add(complex46);
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        double double50 = complex48.abs();
        org.apache.commons.math.complex.Complex complex51 = complex48.conjugate();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        boolean boolean54 = complex52.isNaN();
        org.apache.commons.math.complex.Complex complex55 = complex52.sin();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex58 = complex57.sqrt();
        org.apache.commons.math.complex.Complex complex59 = complex58.sin();
        org.apache.commons.math.complex.Complex complex60 = complex56.pow(complex58);
        org.apache.commons.math.complex.Complex complex61 = complex60.asin();
        org.apache.commons.math.complex.Complex complex62 = complex61.atan();
        boolean boolean63 = complex62.isInfinite();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex65 = complex62.subtract(complex64);
        org.apache.commons.math.complex.Complex complex66 = complex65.sin();
        org.apache.commons.math.complex.Complex complex67 = complex52.divide(complex66);
        org.apache.commons.math.complex.Complex complex68 = complex48.subtract(complex66);
        org.apache.commons.math.complex.Complex complex71 = new org.apache.commons.math.complex.Complex(1.0E-14d, (double) (byte) 1);
        org.apache.commons.math.complex.Complex complex72 = complex48.multiply(complex71);
        org.apache.commons.math.complex.Complex complex75 = new org.apache.commons.math.complex.Complex(350.0d, (-1.03036766E8d));
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        org.apache.commons.math.complex.Complex complex77 = complex48.divide(complex75);
        boolean boolean78 = complex77.isNaN();
        org.apache.commons.math.complex.Complex complex79 = complex77.sin();
        org.apache.commons.math.complex.Complex complex80 = complex77.tan();
        org.apache.commons.math.complex.Complex complex81 = complex77.asin();
        org.apache.commons.math.complex.Complex complex82 = complex32.divide(complex81);
        org.apache.commons.math.complex.Complex complex83 = complex81.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + Double.POSITIVE_INFINITY + "'", double27 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + Double.POSITIVE_INFINITY + "'", double50 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
    }

    @Test
    public void test08053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08053");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        int int7 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double9 = laguerreSolver8.getFunctionValueAccuracy();
        double double13 = laguerreSolver8.solve((double) (byte) 100, 2.799833927635354E75d, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = laguerreSolver8.solve((double) 32, 48.018017748909294d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [32.0,48.018017748909294]  Values: [-945056.0,-5084137.331011351]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
    }

    @Test
    public void test08054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08054");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        int int9 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.resetRelativeAccuracy();
        double double11 = laguerreSolver6.getRelativeAccuracy();
        double double12 = laguerreSolver6.getRelativeAccuracy();
        double double15 = laguerreSolver6.solve((-2.9891006740999806E8d), 0.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-14d + "'", double11 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-14d + "'", double12 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-0.01d) + "'", double15 == (-0.01d));
    }

    @Test
    public void test08055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08055");
        java.lang.Object[] objArray2 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((-1.6365376E7d));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((-1.0303676605150726E8d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: ", objArray2, (java.lang.Throwable) functionEvaluationException4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08056");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = laguerreSolver6.solveAll(doubleArray14, 10001.0d);
        laguerreSolver6.setAbsoluteAccuracy((double) 3);
        double double20 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.setAbsoluteAccuracy((double) 1L);
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.setMaximalIterationCount(35);
        laguerreSolver6.setMaximalIterationCount(35);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-15d + "'", double20 == 1.0E-15d);
    }

    @Test
    public void test08057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08057");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        boolean boolean6 = complex5.isNaN();
        org.apache.commons.math.complex.Complex complex7 = complex5.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex7.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test08058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08058");
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException16 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray13);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "org.apache.commons.math.ConvergenceException: ", objArray13, throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1, "org.apache.commons.math.MaxIterationsExceededException: hi!", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("hi!", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException21 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.ConvergenceException: Convergence failed", objArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "org.apache.commons.math.ConvergenceException: Convergence failed");
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray13, (java.lang.Throwable) convergenceException25);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
    }

    @Test
    public void test08059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08059");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-99999.0d), (double) (short) -1);
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex8 = new org.apache.commons.math.complex.Complex(1.0E-15d, (double) (short) 100);
        org.apache.commons.math.complex.Complex complex9 = complex8.asin();
        org.apache.commons.math.complex.Complex complex10 = complex9.sin();
        org.apache.commons.math.complex.Complex complex11 = complex9.tan();
        org.apache.commons.math.complex.Complex complex12 = complex5.subtract(complex11);
        org.apache.commons.math.complex.Complex complex13 = complex2.divide(complex5);
        org.apache.commons.math.complex.Complex complex14 = complex2.tanh();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex15.pow(complex17);
        org.apache.commons.math.complex.Complex complex20 = complex19.asin();
        org.apache.commons.math.complex.Complex complex21 = complex20.atan();
        boolean boolean22 = complex21.isInfinite();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex21.subtract(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex23.tan();
        org.apache.commons.math.complex.Complex complex26 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        double double29 = complex27.abs();
        org.apache.commons.math.complex.Complex complex30 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex30.conjugate();
        boolean boolean32 = complex30.isInfinite();
        org.apache.commons.math.complex.Complex complex33 = complex30.cos();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        double double36 = complex34.abs();
        org.apache.commons.math.complex.Complex complex37 = complex34.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex37.conjugate();
        boolean boolean39 = complex37.isInfinite();
        org.apache.commons.math.complex.Complex complex40 = complex37.asin();
        boolean boolean41 = complex37.isNaN();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        org.apache.commons.math.complex.Complex complex44 = complex37.divide(complex42);
        org.apache.commons.math.complex.Complex complex45 = complex33.divide(complex42);
        org.apache.commons.math.complex.Complex complex46 = complex42.sinh();
        org.apache.commons.math.complex.Complex complex47 = complex46.conjugate();
        org.apache.commons.math.complex.Complex complex48 = complex46.acos();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        org.apache.commons.math.complex.Complex complex51 = complex50.acos();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        org.apache.commons.math.complex.Complex complex54 = complex52.log();
        org.apache.commons.math.complex.Complex complex55 = complex52.sin();
        org.apache.commons.math.complex.Complex complex56 = complex55.tanh();
        org.apache.commons.math.complex.Complex complex57 = complex50.add(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex48.pow(complex56);
        org.apache.commons.math.complex.Complex complex59 = complex23.add(complex48);
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        org.apache.commons.math.complex.Complex complex62 = complex60.log();
        org.apache.commons.math.complex.Complex complex63 = complex62.cos();
        org.apache.commons.math.complex.Complex complex64 = complex62.exp();
        org.apache.commons.math.complex.Complex complex65 = complex64.asin();
        org.apache.commons.math.complex.Complex complex66 = complex48.multiply(complex64);
        org.apache.commons.math.complex.Complex complex67 = complex14.divide(complex48);
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt1z();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + Double.POSITIVE_INFINITY + "'", double29 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + Double.POSITIVE_INFINITY + "'", double36 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
    }

    @Test
    public void test08060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08060");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray14, 101.0d);
        double double19 = laguerreSolver6.getRelativeAccuracy();
        double double20 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        double double22 = laguerreSolver6.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-14d + "'", double19 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-14d + "'", double20 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-15d + "'", double22 == 1.0E-15d);
    }

    @Test
    public void test08061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08061");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((-2.24308280799E11d));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((-3.46487750099E11d), "org.apache.commons.math.ConvergenceException", (java.lang.Throwable) functionEvaluationException3);
    }

    @Test
    public void test08062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08062");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        int int7 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction6.polynomialDerivative();
        double double10 = polynomialFunction8.value(0.0d);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction11 = polynomialFunction8.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction8.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        double double14 = laguerreSolver13.getRelativeAccuracy();
        laguerreSolver13.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction11);
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-14d + "'", double14 == 1.0E-14d);
    }

    @Test
    public void test08063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08063");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = complex1.sin();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex5 = complex4.sin();
        org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex4);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.cos();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.abs();
        org.apache.commons.math.complex.Complex complex17 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex17.conjugate();
        boolean boolean19 = complex17.isInfinite();
        org.apache.commons.math.complex.Complex complex20 = complex17.asin();
        boolean boolean21 = complex17.isNaN();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex17.divide(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex13.divide(complex22);
        org.apache.commons.math.complex.Complex complex26 = complex1.subtract(complex13);
        org.apache.commons.math.complex.Complex complex27 = complex1.sinh();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) (short) 100, (double) 0);
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex31.tan();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex34.acos();
        double double36 = complex34.getReal();
        boolean boolean37 = complex32.equals((java.lang.Object) complex34);
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.abs();
        org.apache.commons.math.complex.Complex complex41 = complex38.conjugate();
        org.apache.commons.math.complex.Complex complex42 = complex41.conjugate();
        boolean boolean43 = complex41.isInfinite();
        org.apache.commons.math.complex.Complex complex44 = complex41.cos();
        org.apache.commons.math.complex.Complex complex45 = complex41.conjugate();
        boolean boolean46 = complex32.equals((java.lang.Object) complex41);
        org.apache.commons.math.complex.Complex complex47 = complex32.sqrt1z();
        org.apache.commons.math.complex.Complex complex48 = complex30.add(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex1.multiply(complex47);
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        org.apache.commons.math.complex.Complex complex52 = complex50.log();
        org.apache.commons.math.complex.Complex complex53 = complex50.sin();
        org.apache.commons.math.complex.Complex complex54 = complex50.log();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex complex57 = complex50.divide(complex56);
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        org.apache.commons.math.complex.Complex complex60 = complex59.acos();
        double double61 = complex59.getReal();
        org.apache.commons.math.complex.Complex complex62 = complex59.sqrt();
        org.apache.commons.math.complex.Complex complex63 = complex50.pow(complex59);
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex complex66 = complex64.log();
        org.apache.commons.math.complex.Complex complex67 = complex66.cos();
        org.apache.commons.math.complex.Complex complex68 = complex59.multiply(complex66);
        org.apache.commons.math.complex.Complex complex69 = complex66.tanh();
        org.apache.commons.math.complex.Complex complex70 = complex69.asin();
        org.apache.commons.math.complex.Complex complex71 = complex69.acos();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex73 = complex72.cosh();
        double double74 = complex72.abs();
        org.apache.commons.math.complex.Complex complex75 = complex72.conjugate();
        org.apache.commons.math.complex.Complex complex76 = complex75.conjugate();
        boolean boolean77 = complex75.isInfinite();
        org.apache.commons.math.complex.Complex complex78 = complex75.cos();
        org.apache.commons.math.complex.Complex complex79 = complex71.subtract(complex75);
        org.apache.commons.math.complex.Complex complex80 = complex75.acos();
        boolean boolean81 = complex47.equals((java.lang.Object) complex80);
        org.apache.commons.math.complex.Complex complex82 = complex80.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + Double.POSITIVE_INFINITY + "'", double40 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + Double.POSITIVE_INFINITY + "'", double74 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(complex82);
    }

    @Test
    public void test08064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08064");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        laguerreSolver9.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver9.resetFunctionValueAccuracy();
        int int22 = laguerreSolver9.getIterationCount();
        double double23 = laguerreSolver9.getFunctionValueAccuracy();
        laguerreSolver9.resetMaximalIterationCount();
        double double25 = laguerreSolver9.getFunctionValueAccuracy();
        int int26 = laguerreSolver9.getIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double29 = laguerreSolver9.solve((-0.009999999999999787d), (-2.559616086392961E33d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [-0.009999999999999787,-2.559616086392961E33]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0E-15d + "'", double23 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0E-15d + "'", double25 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
    }

    @Test
    public void test08065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08065");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(3921189.0d, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}");
    }

    @Test
    public void test08066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08066");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException((-4.84971561640899E12d));
    }

    @Test
    public void test08067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08067");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("", objArray6);
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray6, (java.lang.Throwable) convergenceException10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "", (java.lang.Throwable) convergenceException11);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray21);
        java.lang.Object[] objArray24 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray21, (java.lang.Throwable) convergenceException25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray21);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("hi!", objArray21);
        java.lang.Object[] objArray29 = convergenceException28.getArguments();
        java.lang.Throwable throwable30 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, "org.apache.commons.math.ConvergenceException: ", objArray29, throwable30);
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("", objArray33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, "Evaluation failed for argument = {0}", objArray29, (java.lang.Throwable) convergenceException34);
        functionEvaluationException12.addSuppressed((java.lang.Throwable) functionEvaluationException35);
        java.lang.Object[] objArray37 = functionEvaluationException12.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException42 = new org.apache.commons.math.MaxIterationsExceededException(10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((-0.3533630315721405d), "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) maxIterationsExceededException42);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) maxIterationsExceededException42);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ", objArray37, (java.lang.Throwable) maxIterationsExceededException42);
        java.lang.Throwable[] throwableArray46 = convergenceException45.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}", (java.lang.Throwable) convergenceException45);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(throwableArray46);
    }

    @Test
    public void test08068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08068");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.acos();
        double double3 = complex1.getReal();
        org.apache.commons.math.complex.Complex complex4 = complex1.sqrt();
        double double5 = complex1.abs();
        org.apache.commons.math.complex.Complex complex6 = complex1.acos();
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
    }

    @Test
    public void test08069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08069");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.sin();
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.sinh();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex11.log();
        org.apache.commons.math.complex.Complex complex14 = complex11.sin();
        org.apache.commons.math.complex.Complex complex15 = complex14.tanh();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex16.log();
        org.apache.commons.math.complex.Complex complex19 = complex16.sin();
        org.apache.commons.math.complex.Complex complex20 = complex16.log();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex16.divide(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex14.pow(complex16);
        org.apache.commons.math.complex.Complex complex25 = complex9.add(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex9.sin();
        java.lang.Class<?> wildcardClass27 = complex26.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test08070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08070");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        double[] doubleArray13 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        double double16 = polynomialFunction14.value((double) (short) 100);
        double[] doubleArray17 = polynomialFunction14.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray19 = laguerreSolver6.solveAll(doubleArray17, (double) (byte) 1);
        laguerreSolver6.setRelativeAccuracy((double) (short) 100);
        laguerreSolver6.resetFunctionValueAccuracy();
        double double23 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.setRelativeAccuracy(Double.POSITIVE_INFINITY);
        int int26 = laguerreSolver6.getIterationCount();
        laguerreSolver6.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10001.0d + "'", double16 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray19);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0E-15d + "'", double23 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test08071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08071");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex7);
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        double double13 = complex12.getReal();
        org.apache.commons.math.complex.Complex complex14 = complex12.cos();
        org.apache.commons.math.complex.Complex complex15 = complex14.tan();
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt1z();
        boolean boolean17 = complex16.isNaN();
        double[] doubleArray22 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray22);
        double double25 = polynomialFunction23.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver26 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction23);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = laguerreSolver26.getPolynomialFunction();
        laguerreSolver26.setRelativeAccuracy((double) 0);
        laguerreSolver26.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver26.resetMaximalIterationCount();
        laguerreSolver26.resetRelativeAccuracy();
        double double34 = laguerreSolver26.getAbsoluteAccuracy();
        int int35 = laguerreSolver26.getMaximalIterationCount();
        double[] doubleArray38 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray38);
        double double41 = polynomialFunction39.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver42 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction39);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction43 = laguerreSolver42.getPolynomialFunction();
        double double44 = laguerreSolver42.getRelativeAccuracy();
        laguerreSolver42.resetRelativeAccuracy();
        double double46 = laguerreSolver42.getAbsoluteAccuracy();
        laguerreSolver42.resetMaximalIterationCount();
        double double50 = laguerreSolver42.solve((-0.01d), (double) (byte) -1);
        int int51 = laguerreSolver42.getMaximalIterationCount();
        laguerreSolver42.setAbsoluteAccuracy((double) 32);
        laguerreSolver42.resetAbsoluteAccuracy();
        double[] doubleArray57 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction58 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray57);
        double double60 = polynomialFunction58.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver61 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction58);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction62 = laguerreSolver61.getPolynomialFunction();
        laguerreSolver61.setRelativeAccuracy((double) 0);
        double[] doubleArray67 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction68 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray67);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction69 = polynomialFunction68.polynomialDerivative();
        double[] doubleArray70 = polynomialFunction68.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction71 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray70);
        org.apache.commons.math.complex.Complex[] complexArray73 = laguerreSolver61.solveAll(doubleArray70, (double) 4);
        laguerreSolver61.setAbsoluteAccuracy((double) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction76 = laguerreSolver61.getPolynomialFunction();
        int int77 = laguerreSolver61.getMaximalIterationCount();
        laguerreSolver61.setAbsoluteAccuracy(Double.POSITIVE_INFINITY);
        laguerreSolver61.resetMaximalIterationCount();
        double double81 = laguerreSolver61.getAbsoluteAccuracy();
        double[] doubleArray84 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction85 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray84);
        double double87 = polynomialFunction85.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver88 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction85);
        double[] doubleArray89 = polynomialFunction85.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray91 = laguerreSolver61.solveAll(doubleArray89, 350.0d);
        org.apache.commons.math.complex.Complex[] complexArray93 = laguerreSolver42.solveAll(doubleArray89, (double) (-1L));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction94 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray89);
        org.apache.commons.math.complex.Complex[] complexArray96 = laguerreSolver26.solveAll(doubleArray89, (double) 35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException97 = new org.apache.commons.math.FunctionEvaluationException(4.5126449834479465E48d, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (3) exceeded", (java.lang.Object[]) complexArray96);
        java.lang.Class<?> wildcardClass98 = functionEvaluationException97.getClass();
        boolean boolean99 = complex16.equals((java.lang.Object) wildcardClass98);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10001.0d + "'", double25 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction27);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 1.0E-6d + "'", double34 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10001.0d + "'", double41 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0E-14d + "'", double44 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0E-6d + "'", double46 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-0.01d) + "'", double50 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 100 + "'", int51 == 100);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 10001.0d + "'", double60 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction62);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray73);
        org.junit.Assert.assertNotNull(polynomialFunction76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 100 + "'", int77 == 100);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + Double.POSITIVE_INFINITY + "'", double81 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 10001.0d + "'", double87 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray91);
        org.junit.Assert.assertNotNull(complexArray93);
        org.junit.Assert.assertNotNull(complexArray96);
        org.junit.Assert.assertNotNull(wildcardClass98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test08072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08072");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        laguerreSolver9.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver9.resetRelativeAccuracy();
        double double25 = laguerreSolver9.solve(1.0E-6d, (double) 32, 0.0d);
        int int26 = laguerreSolver9.getIterationCount();
        laguerreSolver9.resetAbsoluteAccuracy();
        double double28 = laguerreSolver9.getRelativeAccuracy();
        double double29 = laguerreSolver9.getAbsoluteAccuracy();
        laguerreSolver9.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0E-14d + "'", double28 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.0E-6d + "'", double29 == 1.0E-6d);
    }

    @Test
    public void test08073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08073");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: ", objArray8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        java.lang.Object[] objArray19 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray19);
        convergenceException14.addSuppressed((java.lang.Throwable) maxIterationsExceededException20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray8, (java.lang.Throwable) maxIterationsExceededException20);
        java.lang.Object[] objArray23 = maxIterationsExceededException20.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException24 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) -1, "org.apache.commons.math.ConvergenceException: ", objArray23);
        java.lang.Object[] objArray25 = maxIterationsExceededException24.getArguments();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[0.0, 1]");
    }

    @Test
    public void test08074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08074");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) (-1));
        laguerreSolver6.setFunctionValueAccuracy((double) (short) 1);
        double double15 = laguerreSolver6.solve((-1.03036766E8d), (double) (byte) 10);
        double double16 = laguerreSolver6.getResult();
        laguerreSolver6.setAbsoluteAccuracy((-16099.0d));
        laguerreSolver6.setMaximalIterationCount(12);
        int int21 = laguerreSolver6.getIterationCount();
        double double22 = laguerreSolver6.getResult();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-0.009999997913837433d) + "'", double15 == (-0.009999997913837433d));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.009999997913837433d) + "'", double16 == (-0.009999997913837433d));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-0.009999997913837433d) + "'", double22 == (-0.009999997913837433d));
    }

    @Test
    public void test08075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08075");
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException16 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray13);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "org.apache.commons.math.ConvergenceException: ", objArray13, throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) 10L);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((-1.0003990597689866E16d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray13, (java.lang.Throwable) functionEvaluationException20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(134.0d, "org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) 18, "org.apache.commons.math.FunctionEvaluationException: ", objArray13, (java.lang.Throwable) functionEvaluationException24);
        java.lang.Object[] objArray26 = functionEvaluationException24.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((-1000.0d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 350", objArray26);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
    }

    @Test
    public void test08076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08076");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(148401.0d, (-4.122426222506772E12d));
    }

    @Test
    public void test08077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08077");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.resetFunctionValueAccuracy();
        double double14 = laguerreSolver6.getAbsoluteAccuracy();
        double[] doubleArray20 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray20);
        double double23 = polynomialFunction21.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction21);
        double[] doubleArray27 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray27);
        double double30 = polynomialFunction28.value((double) (short) 100);
        double[] doubleArray31 = polynomialFunction28.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray33 = laguerreSolver24.solveAll(doubleArray31, (double) (short) 10);
        org.apache.commons.math.complex.Complex[] complexArray35 = laguerreSolver6.solveAll(doubleArray31, 3861431.0d);
        double[] doubleArray38 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray38);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver40 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction39);
        double[] doubleArray46 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray46);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction48 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray46);
        org.apache.commons.math.complex.Complex[] complexArray50 = laguerreSolver40.solveAll(doubleArray46, 1.0E-6d);
        org.apache.commons.math.complex.Complex[] complexArray52 = laguerreSolver6.solveAll(doubleArray46, 1000.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction53 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray46);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction54 = polynomialFunction53.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10001.0d + "'", double30 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray33);
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray50);
        org.junit.Assert.assertNotNull(complexArray52);
        org.junit.Assert.assertNotNull(univariateRealFunction54);
    }

    @Test
    public void test08078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08078");
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, (java.lang.Throwable) convergenceException9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException(350.0d, "org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) convergenceException9);
        java.lang.Object[] objArray12 = convergenceException9.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException13 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 10, "org.apache.commons.math.MaxIterationsExceededException: ", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException14 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 1, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10", (java.lang.Throwable) maxIterationsExceededException14);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
    }

    @Test
    public void test08079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08079");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.asin();
        boolean boolean7 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex3.divide(complex8);
        org.apache.commons.math.complex.Complex complex11 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sin();
        org.apache.commons.math.complex.Complex complex15 = complex13.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test08080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08080");
        java.lang.Object[] objArray9 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException10 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "hi!", objArray9);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException18);
        java.lang.Object[] objArray20 = functionEvaluationException19.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException21 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray20);
        java.lang.Throwable[] throwableArray22 = maxIterationsExceededException21.getSuppressed();
        int int23 = maxIterationsExceededException21.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, (java.lang.Throwable) maxIterationsExceededException21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray9, (java.lang.Throwable) maxIterationsExceededException21);
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray31);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException34 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray31);
        java.lang.Object[] objArray35 = maxIterationsExceededException34.getArguments();
        int int36 = maxIterationsExceededException34.getMaxIterations();
        int int37 = maxIterationsExceededException34.getMaxIterations();
        int int38 = maxIterationsExceededException34.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray9, (java.lang.Throwable) maxIterationsExceededException34);
        int int40 = maxIterationsExceededException34.getMaxIterations();
        java.lang.String str41 = maxIterationsExceededException34.getPattern();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str41, "org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test08081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08081");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        double double10 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.setRelativeAccuracy(35.0002d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-15d + "'", double10 == 1.0E-15d);
    }

    @Test
    public void test08082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08082");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException(6.728282640565594d);
    }

    @Test
    public void test08083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08083");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetFunctionValueAccuracy();
        double[] doubleArray13 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver15 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction14);
        laguerreSolver15.resetAbsoluteAccuracy();
        double[] doubleArray19 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        double double22 = polynomialFunction20.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver23 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction20);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = laguerreSolver23.getPolynomialFunction();
        laguerreSolver23.resetRelativeAccuracy();
        double[] doubleArray31 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray35 = laguerreSolver23.solveAll(doubleArray31, 101.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction36 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray38 = laguerreSolver15.solveAll(doubleArray31, 10101.0d);
        org.apache.commons.math.complex.Complex[] complexArray40 = laguerreSolver6.solveAll(doubleArray31, (-3.464877501E9d));
        laguerreSolver6.resetFunctionValueAccuracy();
        double double42 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        double[] doubleArray46 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray46);
        double double49 = polynomialFunction47.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver50 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction47);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction51 = polynomialFunction47.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver52 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction47);
        double[] doubleArray55 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction56 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray55);
        double double58 = polynomialFunction56.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver59 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction56);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction60 = laguerreSolver59.getPolynomialFunction();
        double[] doubleArray63 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction64 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray63);
        org.apache.commons.math.complex.Complex[] complexArray66 = laguerreSolver59.solveAll(doubleArray63, 1.0d);
        org.apache.commons.math.complex.Complex[] complexArray68 = laguerreSolver52.solveAll(doubleArray63, 112034.0d);
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex71 = complex70.sqrt();
        org.apache.commons.math.complex.Complex complex72 = complex71.sin();
        org.apache.commons.math.complex.Complex complex73 = complex69.pow(complex71);
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex75 = complex74.cosh();
        org.apache.commons.math.complex.Complex complex76 = complex74.log();
        org.apache.commons.math.complex.Complex complex77 = complex69.divide(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex77.log();
        org.apache.commons.math.complex.Complex complex79 = complex78.sinh();
        org.apache.commons.math.complex.Complex complex80 = complex78.cos();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray81 = laguerreSolver6.solveAll(complexArray68, complex80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10001.0d + "'", double22 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction24);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0E-15d + "'", double42 == 1.0E-15d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10001.0d + "'", double49 == 10001.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction51);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10001.0d + "'", double58 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
    }

    @Test
    public void test08084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08084");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver5 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        laguerreSolver5.resetAbsoluteAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = laguerreSolver5.solve(5.06130914636402d, (-2.1350964975074216E16d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [5.06130914636402,-2.1350964975074216E16]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
    }

    @Test
    public void test08085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08085");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double[] doubleArray10 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray10);
        org.apache.commons.math.complex.Complex[] complexArray13 = laguerreSolver6.solveAll(doubleArray10, 1.0d);
        double double14 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) 1.0f);
        int int17 = laguerreSolver6.getIterationCount();
        double[] doubleArray23 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray23);
        double double26 = polynomialFunction24.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver27 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction24);
        double[] doubleArray30 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray30);
        double double33 = polynomialFunction31.value((double) (short) 100);
        double[] doubleArray34 = polynomialFunction31.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray36 = laguerreSolver27.solveAll(doubleArray34, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver27.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver38 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction37);
        double[] doubleArray44 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction45 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray44);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver46 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction45);
        double double49 = laguerreSolver46.solve(1.0d, 10101.0d);
        laguerreSolver46.setFunctionValueAccuracy((-0.999999999999965d));
        double[] doubleArray54 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction55 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray54);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction56 = polynomialFunction55.polynomialDerivative();
        double[] doubleArray57 = polynomialFunction55.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction58 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray57);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction59 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray57);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction60 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray57);
        org.apache.commons.math.complex.Complex[] complexArray62 = laguerreSolver46.solveAll(doubleArray57, (-0.3400000100000003d));
        double[] doubleArray69 = new double[] { 100.0f, (-0.01d), (byte) 0, (byte) 0, 3, 1.0f };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction70 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray69);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction71 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray69);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction72 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray74 = laguerreSolver46.solveAll(doubleArray69, 0.0d);
        org.apache.commons.math.complex.Complex[] complexArray76 = laguerreSolver38.solveAll(doubleArray69, (-0.009999997913837433d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction77 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray69);
        org.apache.commons.math.complex.Complex[] complexArray79 = laguerreSolver6.solveAll(doubleArray69, (-0.3400000100000003d));
        // The following exception was thrown during execution in test generation
        try {
            double double82 = laguerreSolver6.solve(45401.0d, (-1.3716580925304711E31d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [45401.0,-1.3716580925304711E31]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-14d + "'", double14 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10001.0d + "'", double33 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.170609052699179d + "'", double49 == 10.170609052699179d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[100.0, -0.01, 0.0, 0.0, 3.0, 1.0]");
        org.junit.Assert.assertNotNull(complexArray74);
        org.junit.Assert.assertNotNull(complexArray76);
        org.junit.Assert.assertNotNull(complexArray79);
    }

    @Test
    public void test08086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08086");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        laguerreSolver6.setAbsoluteAccuracy((double) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = laguerreSolver6.getPolynomialFunction();
        double double23 = polynomialFunction21.value((-1.0d));
        double double25 = polynomialFunction21.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver26 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction21);
        double[] doubleArray27 = polynomialFunction21.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray27);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction29 = polynomialFunction28.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-99.0d) + "'", double23 == (-99.0d));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction29);
    }

    @Test
    public void test08087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08087");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-1.0019968919675491E80d), 100.0d);
        org.apache.commons.math.complex.Complex complex3 = complex2.exp();
        boolean boolean4 = complex3.isInfinite();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test08088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08088");
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray10);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException13 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray10);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray10);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException15 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.ConvergenceException: hi!", objArray10);
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray22);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException25 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray22);
        java.lang.Object[] objArray26 = maxIterationsExceededException25.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException(1.0d);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray26, (java.lang.Throwable) functionEvaluationException28);
        java.lang.Throwable[] throwableArray30 = convergenceException29.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((-1.4623924736915717E43d), "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}", objArray10, (java.lang.Throwable) convergenceException29);
        double double32 = functionEvaluationException31.getArgument();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-1.4623924736915717E43d) + "'", double32 == (-1.4623924736915717E43d));
    }

    @Test
    public void test08089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08089");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) 100.0f);
        laguerreSolver6.setFunctionValueAccuracy((double) 32);
        laguerreSolver6.setFunctionValueAccuracy(Double.POSITIVE_INFINITY);
        laguerreSolver6.resetMaximalIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            int int19 = laguerreSolver6.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
    }

    @Test
    public void test08090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08090");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.acos();
        double double10 = complex8.getReal();
        boolean boolean11 = complex6.equals((java.lang.Object) complex8);
        org.apache.commons.math.complex.Complex complex12 = complex4.subtract(complex8);
        org.apache.commons.math.complex.Complex complex13 = complex4.acos();
        org.apache.commons.math.complex.Complex complex14 = complex13.conjugate();
        double[] doubleArray21 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray21);
        double double24 = polynomialFunction22.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver25 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction22);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = laguerreSolver25.getPolynomialFunction();
        laguerreSolver25.setRelativeAccuracy((double) 0);
        double[] doubleArray31 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = polynomialFunction32.polynomialDerivative();
        double[] doubleArray34 = polynomialFunction32.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray34);
        org.apache.commons.math.complex.Complex[] complexArray37 = laguerreSolver25.solveAll(doubleArray34, (double) 4);
        laguerreSolver25.setAbsoluteAccuracy((double) 1);
        double double40 = laguerreSolver25.getRelativeAccuracy();
        double double41 = laguerreSolver25.getResult();
        laguerreSolver25.setAbsoluteAccuracy((double) 32);
        double[] doubleArray49 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction50 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray49);
        double double52 = polynomialFunction50.value((double) 0);
        double double54 = polynomialFunction50.value((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction55 = polynomialFunction50.polynomialDerivative();
        double[] doubleArray56 = polynomialFunction50.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray58 = laguerreSolver25.solveAll(doubleArray56, (-3.464877501E9d));
        java.lang.Object[] objArray68 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("", objArray68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray68);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException71 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray68);
        java.lang.Throwable[] throwableArray72 = maxIterationsExceededException71.getSuppressed();
        java.lang.Object[] objArray79 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException80 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray79);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException81 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray79);
        int int82 = maxIterationsExceededException81.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, "hi!", (java.lang.Object[]) throwableArray72, (java.lang.Throwable) maxIterationsExceededException81);
        java.lang.Object[] objArray84 = maxIterationsExceededException81.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException85 = new org.apache.commons.math.MaxIterationsExceededException((-1), "org.apache.commons.math.FunctionEvaluationException: ", objArray84);
        java.lang.String str86 = maxIterationsExceededException85.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException87 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException85);
        int int88 = maxIterationsExceededException85.getMaxIterations();
        int int89 = maxIterationsExceededException85.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray58, (java.lang.Throwable) maxIterationsExceededException85);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException91 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) -1, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) complexArray58);
        boolean boolean92 = complex13.equals((java.lang.Object) "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ");
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10001.0d + "'", double24 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.0d + "'", double54 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction55);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray58);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 32 + "'", int82 == 32);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[0.0, 1]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: " + "'", str86, "org.apache.commons.math.FunctionEvaluationException: ");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test08091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08091");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: ", objArray8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        java.lang.Object[] objArray19 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray19);
        convergenceException14.addSuppressed((java.lang.Throwable) maxIterationsExceededException20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray8, (java.lang.Throwable) maxIterationsExceededException20);
        int int23 = maxIterationsExceededException20.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((-9.89965E7d), (java.lang.Throwable) maxIterationsExceededException20);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray28);
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("", objArray28, (java.lang.Throwable) convergenceException32);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray28);
        functionEvaluationException24.addSuppressed((java.lang.Throwable) convergenceException34);
        java.lang.Object[] objArray36 = convergenceException34.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", objArray36);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
    }

    @Test
    public void test08092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08092");
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray10);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException13 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.MaxIterationsExceededException: ", objArray10);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException(throwable17);
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex22 = complex21.sin();
        org.apache.commons.math.complex.Complex complex23 = complex19.pow(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex23.asin();
        org.apache.commons.math.complex.Complex complex25 = complex23.tan();
        java.lang.Object[] objArray29 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray29);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException31 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray29);
        int int32 = maxIterationsExceededException31.getMaxIterations();
        boolean boolean33 = complex25.equals((java.lang.Object) maxIterationsExceededException31);
        java.lang.String str34 = maxIterationsExceededException31.getPattern();
        convergenceException18.addSuppressed((java.lang.Throwable) maxIterationsExceededException31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, "", (java.lang.Throwable) convergenceException18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) 3, "", objArray10, (java.lang.Throwable) convergenceException18);
        java.lang.Object[] objArray46 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("", objArray46);
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray49);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("", objArray46, (java.lang.Throwable) convergenceException50);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException52 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.FunctionEvaluationException: ", objArray46);
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("", objArray59);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray59);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException62 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray59);
        java.lang.Object[] objArray69 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException70 = new org.apache.commons.math.ConvergenceException("", objArray69);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray69);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException72 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray69);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) maxIterationsExceededException72);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("", objArray59, (java.lang.Throwable) functionEvaluationException73);
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray46, (java.lang.Throwable) convergenceException74);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) convergenceException75);
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) convergenceException75);
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}", objArray10, (java.lang.Throwable) convergenceException77);
        java.lang.Throwable[] throwableArray79 = convergenceException77.getSuppressed();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "hi!" + "'", str34, "hi!");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(throwableArray79);
    }

    @Test
    public void test08093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08093");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(350.0d, (-1.03036766E8d));
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = complex7.sin();
        org.apache.commons.math.complex.Complex complex9 = complex5.pow(complex7);
        org.apache.commons.math.complex.Complex complex10 = complex9.asin();
        org.apache.commons.math.complex.Complex complex11 = complex9.tan();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.abs();
        org.apache.commons.math.complex.Complex complex15 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.conjugate();
        boolean boolean17 = complex15.isInfinite();
        org.apache.commons.math.complex.Complex complex18 = complex15.asin();
        boolean boolean19 = complex15.isNaN();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex15.divide(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex11.pow(complex20);
        org.apache.commons.math.complex.Complex complex24 = complex20.tanh();
        org.apache.commons.math.complex.Complex complex25 = complex24.atan();
        org.apache.commons.math.complex.Complex complex26 = complex4.subtract(complex24);
        org.apache.commons.math.complex.Complex complex27 = complex4.tanh();
        org.apache.commons.math.complex.Complex complex28 = complex4.cos();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex29.log();
        org.apache.commons.math.complex.Complex complex32 = complex29.sin();
        org.apache.commons.math.complex.Complex complex33 = complex29.log();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex complex36 = complex29.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        double double39 = complex37.abs();
        org.apache.commons.math.complex.Complex complex40 = complex37.conjugate();
        org.apache.commons.math.complex.Complex complex41 = complex40.conjugate();
        org.apache.commons.math.complex.Complex complex42 = complex36.subtract(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex36.exp();
        org.apache.commons.math.complex.Complex complex44 = complex36.tan();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex46 = complex45.tanh();
        org.apache.commons.math.complex.Complex complex47 = complex46.asin();
        org.apache.commons.math.complex.Complex complex48 = complex47.asin();
        double double49 = complex47.getImaginary();
        org.apache.commons.math.complex.Complex complex50 = complex47.exp();
        org.apache.commons.math.complex.Complex complex51 = complex4.divide(complex47);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + Double.POSITIVE_INFINITY + "'", double14 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + Double.POSITIVE_INFINITY + "'", double39 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
    }

    @Test
    public void test08094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08094");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver5 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
    }

    @Test
    public void test08095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08095");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double7 = laguerreSolver6.getAbsoluteAccuracy();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.setFunctionValueAccuracy((-215599.0d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0E-6d + "'", double7 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
    }

    @Test
    public void test08096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08096");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException2 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ');
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) maxIterationsExceededException2);
        org.apache.commons.math.ConvergenceException convergenceException4 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException3);
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException3);
        java.lang.Throwable[] throwableArray6 = convergenceException5.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray6);
    }

    @Test
    public void test08097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08097");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("", objArray6);
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray12, (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray12, (java.lang.Throwable) functionEvaluationException19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray6, (java.lang.Throwable) functionEvaluationException20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) functionEvaluationException21);
        java.lang.Throwable[] throwableArray23 = functionEvaluationException21.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException();
        java.lang.Object[] objArray33 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException34 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray33);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException35 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray33);
        java.lang.Object[] objArray38 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray38);
        java.lang.Object[] objArray41 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("", objArray41);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("", objArray38, (java.lang.Throwable) convergenceException42);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray33, (java.lang.Throwable) convergenceException42);
        java.lang.Object[] objArray45 = convergenceException42.getArguments();
        convergenceException25.addSuppressed((java.lang.Throwable) convergenceException42);
        java.lang.Throwable[] throwableArray47 = convergenceException42.getSuppressed();
        java.lang.Throwable[] throwableArray48 = convergenceException42.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException42);
        java.lang.Object[] objArray50 = convergenceException49.getArguments();
        java.lang.Object[] objArray51 = convergenceException49.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray23, (java.lang.Throwable) convergenceException49);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
    }

    @Test
    public void test08098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08098");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex14.sin();
        org.apache.commons.math.complex.Complex complex18 = complex14.log();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex21 = complex14.divide(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.abs();
        org.apache.commons.math.complex.Complex complex25 = complex22.conjugate();
        org.apache.commons.math.complex.Complex complex26 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex21.subtract(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex21.exp();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex complex32 = complex31.sin();
        org.apache.commons.math.complex.Complex complex33 = complex29.pow(complex31);
        org.apache.commons.math.complex.Complex complex34 = complex33.asin();
        org.apache.commons.math.complex.Complex complex35 = complex34.atan();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        boolean boolean38 = complex35.equals((java.lang.Object) complex36);
        org.apache.commons.math.complex.Complex complex39 = complex21.divide(complex36);
        org.apache.commons.math.complex.Complex complex40 = complex7.add(complex36);
        org.apache.commons.math.complex.Complex complex41 = complex40.asin();
        org.apache.commons.math.complex.Complex complex42 = complex40.negate();
        java.lang.Class<?> wildcardClass43 = complex42.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test08099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08099");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver9.resetMaximalIterationCount();
        laguerreSolver9.resetRelativeAccuracy();
        laguerreSolver9.resetMaximalIterationCount();
        laguerreSolver9.resetMaximalIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = laguerreSolver9.solve(454.0d, (-2.1299995519185257E9d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [454.0,-2.1299995519185257E9]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test08100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08100");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.acos();
        double double11 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex0.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex15 = complex13.negate();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        double double18 = complex16.abs();
        org.apache.commons.math.complex.Complex complex19 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex26 = complex23.atan();
        org.apache.commons.math.complex.Complex complex27 = complex16.subtract(complex23);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex28.log();
        org.apache.commons.math.complex.Complex complex31 = complex30.cos();
        double double32 = complex31.abs();
        org.apache.commons.math.complex.Complex complex33 = complex31.tanh();
        org.apache.commons.math.complex.Complex complex34 = complex23.pow(complex31);
        org.apache.commons.math.complex.Complex complex35 = complex15.subtract(complex31);
        double double36 = complex35.abs();
        java.lang.Class<?> wildcardClass37 = complex35.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + Double.POSITIVE_INFINITY + "'", double18 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test08101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08101");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.setAbsoluteAccuracy(1101.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
    }

    @Test
    public void test08102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08102");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction10.polynomialDerivative();
        double double13 = polynomialFunction10.value((double) ' ');
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction10.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = polynomialFunction14.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction16 = polynomialFunction14.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = polynomialFunction14.polynomialDerivative();
        double double19 = polynomialFunction17.value((-1075866.5484521023d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3201.0d + "'", double13 == 3201.0d);
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertNotNull(univariateRealFunction16);
        org.junit.Assert.assertNotNull(polynomialFunction17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
    }

    @Test
    public void test08103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08103");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        int int9 = polynomialFunction6.degree();
        double double11 = polynomialFunction6.value(64.0d);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction6.derivative();
        int int13 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction14 = polynomialFunction6.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction16 = polynomialFunction6.derivative();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.6365376E7d) + "'", double11 == (-1.6365376E7d));
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(univariateRealFunction14);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertNotNull(univariateRealFunction16);
    }

    @Test
    public void test08104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08104");
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException15 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray12);
        java.lang.Throwable[] throwableArray16 = maxIterationsExceededException15.getSuppressed();
        java.lang.Object[] objArray23 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException24 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray23);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException25 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray23);
        int int26 = maxIterationsExceededException25.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, "hi!", (java.lang.Object[]) throwableArray16, (java.lang.Throwable) maxIterationsExceededException25);
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("", objArray32);
        java.lang.Object[] objArray38 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray38);
        java.lang.Object[] objArray41 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("", objArray41);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("", objArray38, (java.lang.Throwable) convergenceException42);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray38, (java.lang.Throwable) functionEvaluationException45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray32, (java.lang.Throwable) functionEvaluationException46);
        java.lang.String str48 = functionEvaluationException47.getPattern();
        java.lang.String str49 = functionEvaluationException47.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((-9.89965E7d), (java.lang.Throwable) functionEvaluationException47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((-9.89965E7d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray16, (java.lang.Throwable) functionEvaluationException50);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", (java.lang.Object[]) throwableArray16);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException53 = new org.apache.commons.math.MaxIterationsExceededException((int) '4', "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray16);
        java.lang.String str54 = maxIterationsExceededException53.getPattern();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed" + "'", str54, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed");
    }

    @Test
    public void test08105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08105");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        boolean boolean14 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex6.divide(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex6.log();
        org.apache.commons.math.complex.Complex complex20 = complex6.asin();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex21.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
    }

    @Test
    public void test08106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08106");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(1.000000000001d);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((-5.246144717220261E15d), (java.lang.Throwable) functionEvaluationException2);
    }

    @Test
    public void test08107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08107");
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray10, (java.lang.Throwable) convergenceException14);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException16 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.FunctionEvaluationException: ", objArray10);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray21);
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray27);
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray27, (java.lang.Throwable) convergenceException31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray27, (java.lang.Throwable) functionEvaluationException34);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray21, (java.lang.Throwable) functionEvaluationException35);
        java.lang.String str37 = functionEvaluationException36.getPattern();
        double double38 = functionEvaluationException36.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, (java.lang.Throwable) functionEvaluationException36);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(349.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray10, (java.lang.Throwable) functionEvaluationException36);
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", objArray47);
        java.lang.Object[] objArray50 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("", objArray50);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("", objArray47, (java.lang.Throwable) convergenceException51);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException53 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.FunctionEvaluationException: ", objArray47);
        java.lang.Object[] objArray58 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("", objArray58);
        java.lang.Object[] objArray64 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("", objArray64);
        java.lang.Object[] objArray67 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("", objArray67);
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("", objArray64, (java.lang.Throwable) convergenceException68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray64, (java.lang.Throwable) functionEvaluationException71);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray58, (java.lang.Throwable) functionEvaluationException72);
        java.lang.String str74 = functionEvaluationException73.getPattern();
        double double75 = functionEvaluationException73.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, (java.lang.Throwable) functionEvaluationException73);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException77 = new org.apache.commons.math.FunctionEvaluationException(349.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray47, (java.lang.Throwable) functionEvaluationException73);
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray10, (java.lang.Throwable) functionEvaluationException77);
        java.lang.String str79 = convergenceException78.getPattern();
        java.lang.Object[] objArray80 = convergenceException78.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10", objArray80);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException82 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: hi!", objArray80);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 35.0d + "'", double38 == 35.0d);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 35.0d + "'", double75 == 35.0d);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "org.apache.commons.math.ConvergenceException: Convergence failed" + "'", str79, "org.apache.commons.math.ConvergenceException: Convergence failed");
        org.junit.Assert.assertNotNull(objArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray80), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray80), "[]");
    }

    @Test
    public void test08108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08108");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        int int7 = polynomialFunction6.degree();
        int int8 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction9.polynomialDerivative();
        double[] doubleArray11 = polynomialFunction10.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction10);
        laguerreSolver12.setRelativeAccuracy((double) (byte) 100);
        int int15 = laguerreSolver12.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[200.0, 0.0, -12.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test08109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08109");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, "", objArray8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((-0.009999997913837433d), "Evaluation failed for argument = {0}", (java.lang.Throwable) functionEvaluationException11);
        java.lang.Throwable[] throwableArray13 = functionEvaluationException11.getSuppressed();
        java.lang.Object[] objArray20 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException21 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray20);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException22 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray20);
        java.lang.Throwable[] throwableArray23 = maxIterationsExceededException22.getSuppressed();
        java.lang.String str24 = maxIterationsExceededException22.getPattern();
        java.lang.Throwable[] throwableArray25 = maxIterationsExceededException22.getSuppressed();
        int int26 = maxIterationsExceededException22.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) throwableArray13, (java.lang.Throwable) maxIterationsExceededException22);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[0.0, 1]");
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 32 + "'", int26 == 32);
    }

    @Test
    public void test08110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08110");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        boolean boolean6 = complex5.isNaN();
        org.apache.commons.math.complex.Complex complex7 = complex5.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = complex5.cos();
        org.apache.commons.math.complex.Complex complex9 = complex5.log();
        double double10 = complex5.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test08111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08111");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.tan();
        double double2 = complex0.getReal();
        org.apache.commons.math.complex.Complex complex3 = complex0.asin();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt();
        boolean boolean10 = complex8.isNaN();
        org.apache.commons.math.complex.Complex complex11 = complex8.sin();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex14.sin();
        org.apache.commons.math.complex.Complex complex16 = complex12.pow(complex14);
        org.apache.commons.math.complex.Complex complex17 = complex16.asin();
        org.apache.commons.math.complex.Complex complex18 = complex17.atan();
        boolean boolean19 = complex18.isInfinite();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex18.subtract(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex21.sin();
        org.apache.commons.math.complex.Complex complex23 = complex8.divide(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex4.subtract(complex22);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex25.log();
        org.apache.commons.math.complex.Complex complex28 = complex25.sin();
        org.apache.commons.math.complex.Complex complex29 = complex25.log();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex complex32 = complex25.divide(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.abs();
        org.apache.commons.math.complex.Complex complex36 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex37 = complex36.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex32.subtract(complex37);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex41 = complex39.log();
        org.apache.commons.math.complex.Complex complex42 = complex39.sin();
        org.apache.commons.math.complex.Complex complex43 = complex39.log();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex46 = complex39.divide(complex45);
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        double double49 = complex47.abs();
        org.apache.commons.math.complex.Complex complex50 = complex47.conjugate();
        org.apache.commons.math.complex.Complex complex51 = complex50.conjugate();
        org.apache.commons.math.complex.Complex complex52 = complex46.subtract(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex46.exp();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex complex57 = complex56.sin();
        org.apache.commons.math.complex.Complex complex58 = complex54.pow(complex56);
        org.apache.commons.math.complex.Complex complex59 = complex58.asin();
        org.apache.commons.math.complex.Complex complex60 = complex59.atan();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        boolean boolean63 = complex60.equals((java.lang.Object) complex61);
        org.apache.commons.math.complex.Complex complex64 = complex46.divide(complex61);
        org.apache.commons.math.complex.Complex complex65 = complex32.add(complex61);
        boolean boolean66 = complex24.equals((java.lang.Object) complex65);
        double double67 = complex65.getImaginary();
        org.apache.commons.math.complex.Complex complex68 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex69 = complex68.cosh();
        double double70 = complex68.abs();
        org.apache.commons.math.complex.Complex complex71 = complex68.conjugate();
        org.apache.commons.math.complex.Complex complex72 = complex71.conjugate();
        boolean boolean73 = complex71.isInfinite();
        org.apache.commons.math.complex.Complex complex74 = complex71.cos();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        double double77 = complex75.abs();
        org.apache.commons.math.complex.Complex complex78 = complex75.conjugate();
        org.apache.commons.math.complex.Complex complex79 = complex78.conjugate();
        boolean boolean80 = complex78.isInfinite();
        org.apache.commons.math.complex.Complex complex81 = complex78.asin();
        boolean boolean82 = complex78.isNaN();
        org.apache.commons.math.complex.Complex complex83 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex84 = complex83.cosh();
        org.apache.commons.math.complex.Complex complex85 = complex78.divide(complex83);
        org.apache.commons.math.complex.Complex complex86 = complex74.divide(complex83);
        org.apache.commons.math.complex.Complex complex87 = complex83.sinh();
        org.apache.commons.math.complex.Complex complex88 = complex87.conjugate();
        org.apache.commons.math.complex.Complex complex89 = complex87.acos();
        org.apache.commons.math.complex.Complex complex90 = complex65.multiply(complex87);
        org.apache.commons.math.complex.Complex complex91 = complex65.conjugate();
        org.apache.commons.math.complex.Complex complex92 = complex3.add(complex91);
        double double93 = complex92.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + Double.POSITIVE_INFINITY + "'", double49 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + Double.POSITIVE_INFINITY + "'", double70 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + Double.POSITIVE_INFINITY + "'", double77 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertTrue(Double.isNaN(double93));
    }

    @Test
    public void test08112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08112");
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray7);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray13, (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray13, (java.lang.Throwable) functionEvaluationException20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray7, (java.lang.Throwable) functionEvaluationException21);
        java.lang.Object[] objArray30 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException31 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray30);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException32 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray30);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) maxIterationsExceededException32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(10.0d, "", objArray7, (java.lang.Throwable) maxIterationsExceededException32);
        java.lang.Object[] objArray35 = functionEvaluationException34.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("", objArray35);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("", objArray35);
        java.lang.Object[] objArray38 = convergenceException37.getArguments();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
    }

    @Test
    public void test08113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08113");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        boolean boolean7 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex6.subtract(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.sqrt();
        org.apache.commons.math.complex.Complex complex12 = null;
        org.apache.commons.math.complex.Complex complex13 = complex11.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex13.tanh();
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex14.exp();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.abs();
        org.apache.commons.math.complex.Complex complex20 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex20.log();
        boolean boolean23 = complex22.isInfinite();
        org.apache.commons.math.complex.Complex complex24 = complex22.sinh();
        org.apache.commons.math.complex.Complex complex25 = complex14.add(complex22);
        org.apache.commons.math.complex.Complex complex26 = complex25.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + Double.POSITIVE_INFINITY + "'", double19 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
    }

    @Test
    public void test08114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08114");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        double double10 = polynomialFunction6.value((double) (byte) 0);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction11 = polynomialFunction6.derivative();
        double[] doubleArray12 = polynomialFunction6.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = polynomialFunction6.polynomialDerivative();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(polynomialFunction13);
    }

    @Test
    public void test08115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08115");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double7 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.resetFunctionValueAccuracy();
        double double10 = laguerreSolver6.getRelativeAccuracy();
        double double11 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetFunctionValueAccuracy();
        laguerreSolver6.setMaximalIterationCount((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = laguerreSolver6.solve(34.0d, (-1.1744329731683375E66d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [34.0,-1.1744329731683375E66]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0E-6d + "'", double7 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-14d + "'", double11 == 1.0E-14d);
    }

    @Test
    public void test08116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08116");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        boolean boolean14 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex6.divide(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex6.cos();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt1z();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex22.sin();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex22.multiply(complex25);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.abs();
        org.apache.commons.math.complex.Complex complex31 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex31.conjugate();
        boolean boolean33 = complex31.isInfinite();
        org.apache.commons.math.complex.Complex complex34 = complex31.cos();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        double double37 = complex35.abs();
        org.apache.commons.math.complex.Complex complex38 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex39 = complex38.conjugate();
        boolean boolean40 = complex38.isInfinite();
        org.apache.commons.math.complex.Complex complex41 = complex38.asin();
        boolean boolean42 = complex38.isNaN();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex38.divide(complex43);
        org.apache.commons.math.complex.Complex complex46 = complex34.divide(complex43);
        org.apache.commons.math.complex.Complex complex47 = complex22.subtract(complex34);
        org.apache.commons.math.complex.Complex complex48 = complex47.asin();
        org.apache.commons.math.complex.Complex complex49 = complex20.subtract(complex47);
        org.apache.commons.math.complex.Complex complex50 = complex47.cosh();
        org.apache.commons.math.complex.Complex complex51 = complex47.sqrt();
        org.apache.commons.math.complex.Complex complex52 = complex47.negate();
        org.apache.commons.math.complex.Complex complex53 = complex52.atan();
        boolean boolean54 = complex53.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + Double.POSITIVE_INFINITY + "'", double37 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test08117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08117");
        java.lang.Throwable throwable1 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(2.799833927635354E77d, throwable1);
    }

    @Test
    public void test08118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08118");
        double[] doubleArray6 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray6);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction7);
        laguerreSolver8.resetAbsoluteAccuracy();
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver16 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction13);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = laguerreSolver16.getPolynomialFunction();
        laguerreSolver16.resetRelativeAccuracy();
        double[] doubleArray24 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray24);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray28 = laguerreSolver16.solveAll(doubleArray24, 101.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction29 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray24);
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver8.solveAll(doubleArray24, 10101.0d);
        double[] doubleArray34 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray34);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver36 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction35);
        double[] doubleArray42 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction43 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray42);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray42);
        org.apache.commons.math.complex.Complex[] complexArray46 = laguerreSolver36.solveAll(doubleArray42, 1.0E-6d);
        org.apache.commons.math.complex.Complex[] complexArray48 = laguerreSolver8.solveAll(doubleArray42, (-99999.0d));
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((double) (-1L), "org.apache.commons.math.MaxIterationsExceededException: ");
        double double52 = functionEvaluationException51.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException51);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray48, (java.lang.Throwable) convergenceException53);
        java.lang.Object[] objArray57 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("", objArray57);
        java.lang.Object[] objArray60 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("", objArray60);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("", objArray57, (java.lang.Throwable) convergenceException61);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Object[]) complexArray48, (java.lang.Throwable) convergenceException61);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException63);
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException64);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction17);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1.0d) + "'", double52 == (-1.0d));
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
    }

    @Test
    public void test08119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08119");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "hi!", objArray11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException(1.0E-15d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("Evaluation failed for argument = 100", (java.lang.Throwable) functionEvaluationException14);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[0.0, 1]");
    }

    @Test
    public void test08120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08120");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        laguerreSolver6.setAbsoluteAccuracy((double) 1);
        double double21 = laguerreSolver6.getRelativeAccuracy();
        double double22 = laguerreSolver6.getResult();
        laguerreSolver6.setAbsoluteAccuracy((double) 32);
        int int25 = laguerreSolver6.getIterationCount();
        double double26 = laguerreSolver6.getResult();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
    }

    @Test
    public void test08121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08121");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction10.polynomialDerivative();
        double double13 = polynomialFunction10.value((double) ' ');
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction10.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver15 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction10);
        double double17 = polynomialFunction10.value((-8.758498599E9d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 3201.0d + "'", double13 == 3201.0d);
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-8.75849859899E11d) + "'", double17 == (-8.75849859899E11d));
    }

    @Test
    public void test08122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08122");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.acos();
        double double3 = complex1.getReal();
        org.apache.commons.math.complex.Complex complex4 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex5 = complex1.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test08123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08123");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.cos();
        org.apache.commons.math.complex.Complex complex9 = complex8.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test08124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08124");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        int int9 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.setAbsoluteAccuracy(0.0d);
        laguerreSolver6.setFunctionValueAccuracy((double) 10L);
        double double14 = laguerreSolver6.getFunctionValueAccuracy();
        double double15 = laguerreSolver6.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
    }

    @Test
    public void test08125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08125");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) 100.0f);
        laguerreSolver6.setFunctionValueAccuracy((double) 32);
        laguerreSolver6.setFunctionValueAccuracy(Double.POSITIVE_INFINITY);
        double[] doubleArray23 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray23);
        double double26 = polynomialFunction24.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver27 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction24);
        laguerreSolver27.resetMaximalIterationCount();
        laguerreSolver27.resetRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = laguerreSolver27.getPolynomialFunction();
        double double32 = polynomialFunction30.value((-0.7853981633974483d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = polynomialFunction30.polynomialDerivative();
        double[] doubleArray34 = polynomialFunction33.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray36 = laguerreSolver6.solveAll(doubleArray34, 34.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double39 = laguerreSolver6.solve(2.7050800342309875E33d, (double) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [2.7050800342309875E33,-1.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 33.81558752604622d + "'", double32 == 33.81558752604622d);
        org.junit.Assert.assertNotNull(polynomialFunction33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[35.0, 200.0, 0.0, -4.0]");
        org.junit.Assert.assertNotNull(complexArray36);
    }

    @Test
    public void test08126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08126");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        double double10 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        double double13 = laguerreSolver6.getFunctionValueAccuracy();
        int int14 = laguerreSolver6.getMaximalIterationCount();
        double double17 = laguerreSolver6.solve((-2.531519208223786E37d), 35.0002d);
        double double20 = laguerreSolver6.solve((-16099.0d), 0.5403023058681398d);
        laguerreSolver6.setAbsoluteAccuracy((-3.213906379456312E15d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-15d + "'", double10 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-15d + "'", double13 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-0.01d) + "'", double17 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + (-0.01d) + "'", double20 == (-0.01d));
    }

    @Test
    public void test08127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08127");
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException16 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray13);
        java.lang.Throwable throwable17 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "org.apache.commons.math.ConvergenceException: ", objArray13, throwable17);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) 10L);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException((-1.0003990597689866E16d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray13, (java.lang.Throwable) functionEvaluationException20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((-8.7584986E7d), "org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}", objArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((-9899.0d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray13);
        java.lang.Object[] objArray24 = functionEvaluationException23.getArguments();
        double double25 = functionEvaluationException23.getArgument();
        double double26 = functionEvaluationException23.getArgument();
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-9899.0d) + "'", double25 == (-9899.0d));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-9899.0d) + "'", double26 == (-9899.0d));
    }

    @Test
    public void test08128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08128");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver4 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        laguerreSolver4.resetAbsoluteAccuracy();
        double[] doubleArray8 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray8);
        double double11 = polynomialFunction9.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction9);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = laguerreSolver12.getPolynomialFunction();
        laguerreSolver12.resetRelativeAccuracy();
        double[] doubleArray20 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray20);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray24 = laguerreSolver12.solveAll(doubleArray20, 101.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray20);
        org.apache.commons.math.complex.Complex[] complexArray27 = laguerreSolver4.solveAll(doubleArray20, 10101.0d);
        double[] doubleArray30 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray30);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver32 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction31);
        double[] doubleArray38 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray38);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray42 = laguerreSolver32.solveAll(doubleArray38, 1.0E-6d);
        org.apache.commons.math.complex.Complex[] complexArray44 = laguerreSolver4.solveAll(doubleArray38, (-99999.0d));
        double double45 = laguerreSolver4.getRelativeAccuracy();
        laguerreSolver4.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10001.0d + "'", double11 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray24);
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray42);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.0E-14d + "'", double45 == 1.0E-14d);
    }

    @Test
    public void test08129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08129");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex3.asin();
        org.apache.commons.math.complex.Complex complex7 = complex3.exp();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex(35.0d, 1484.0d);
        org.apache.commons.math.complex.Complex complex11 = complex3.pow(complex10);
        java.lang.Class<?> wildcardClass12 = complex3.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test08130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08130");
        double[] doubleArray4 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        double double7 = polynomialFunction5.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction5);
        double double12 = laguerreSolver8.solve((double) (-1L), 349.0d, (double) (short) 10);
        double double13 = laguerreSolver8.getAbsoluteAccuracy();
        int int14 = laguerreSolver8.getMaximalIterationCount();
        double double15 = laguerreSolver8.getFunctionValueAccuracy();
        double[] doubleArray18 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray18);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = polynomialFunction19.polynomialDerivative();
        double[] doubleArray21 = polynomialFunction19.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray21);
        int int23 = polynomialFunction22.degree();
        double[] doubleArray24 = polynomialFunction22.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray26 = laguerreSolver8.solveAll(doubleArray24, 97.0d);
        java.lang.Throwable throwable27 = null;
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException(throwable27);
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex complex32 = complex31.sin();
        org.apache.commons.math.complex.Complex complex33 = complex29.pow(complex31);
        org.apache.commons.math.complex.Complex complex34 = complex33.asin();
        org.apache.commons.math.complex.Complex complex35 = complex33.tan();
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("", objArray39);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException41 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray39);
        int int42 = maxIterationsExceededException41.getMaxIterations();
        boolean boolean43 = complex35.equals((java.lang.Object) maxIterationsExceededException41);
        java.lang.String str44 = maxIterationsExceededException41.getPattern();
        convergenceException28.addSuppressed((java.lang.Throwable) maxIterationsExceededException41);
        int int46 = maxIterationsExceededException41.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException41);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", (java.lang.Object[]) complexArray26, (java.lang.Throwable) maxIterationsExceededException41);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Evaluation failed for argument = 100", (java.lang.Throwable) convergenceException48);
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException48);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10001.0d + "'", double7 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-0.01d) + "'", double12 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-6d + "'", double13 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-15d + "'", double15 == 1.0E-15d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hi!" + "'", str44, "hi!");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test08131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08131");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.sin();
        boolean boolean9 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex10 = complex3.atan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.acos();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex14.sin();
        org.apache.commons.math.complex.Complex complex18 = complex17.tanh();
        org.apache.commons.math.complex.Complex complex19 = complex12.add(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex18.acos();
        org.apache.commons.math.complex.Complex complex21 = complex18.sin();
        org.apache.commons.math.complex.Complex complex22 = complex3.subtract(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex22.exp();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        double double26 = complex24.abs();
        org.apache.commons.math.complex.Complex complex27 = complex24.conjugate();
        org.apache.commons.math.complex.Complex complex28 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex29 = complex27.tanh();
        org.apache.commons.math.complex.Complex complex30 = complex23.divide(complex27);
        org.apache.commons.math.complex.Complex complex31 = complex30.log();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + Double.POSITIVE_INFINITY + "'", double26 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
    }

    @Test
    public void test08132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08132");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex3.atan();
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex6.log();
        org.apache.commons.math.complex.Complex complex9 = complex6.sin();
        org.apache.commons.math.complex.Complex complex10 = complex6.log();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex6.divide(complex12);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.abs();
        org.apache.commons.math.complex.Complex complex17 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex13.subtract(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex13.exp();
        org.apache.commons.math.complex.Complex complex21 = complex20.exp();
        org.apache.commons.math.complex.Complex complex22 = complex4.multiply(complex21);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        double double25 = complex23.abs();
        org.apache.commons.math.complex.Complex complex26 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex26.conjugate();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex29 = complex28.tan();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex32 = complex31.acos();
        double double33 = complex31.getReal();
        boolean boolean34 = complex29.equals((java.lang.Object) complex31);
        org.apache.commons.math.complex.Complex complex35 = complex27.subtract(complex31);
        org.apache.commons.math.complex.Complex complex36 = complex31.tanh();
        org.apache.commons.math.complex.Complex complex37 = complex36.exp();
        org.apache.commons.math.complex.Complex complex38 = complex21.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + Double.POSITIVE_INFINITY + "'", double25 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
    }

    @Test
    public void test08133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08133");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(0.7853981633974483d, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test08134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08134");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver6.getPolynomialFunction();
        double double13 = polynomialFunction11.value((double) (short) 1);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver14 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        double double15 = laguerreSolver14.getRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = laguerreSolver14.solve((double) 35, (-1155.9997940481926d), 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [35.0,-1155.9997940481926]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 101.0d + "'", double13 == 101.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
    }

    @Test
    public void test08135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08135");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        boolean boolean2 = complex0.isNaN();
        org.apache.commons.math.complex.Complex complex3 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex4 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        double double7 = complex5.abs();
        org.apache.commons.math.complex.Complex complex8 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex8.conjugate();
        boolean boolean10 = complex8.isInfinite();
        org.apache.commons.math.complex.Complex complex11 = complex8.cos();
        org.apache.commons.math.complex.Complex complex12 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex8.sin();
        boolean boolean14 = complex8.isNaN();
        org.apache.commons.math.complex.Complex complex15 = complex8.atan();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = complex18.sin();
        org.apache.commons.math.complex.Complex complex20 = complex16.pow(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex20.asin();
        org.apache.commons.math.complex.Complex complex22 = complex21.atan();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        boolean boolean25 = complex22.equals((java.lang.Object) complex23);
        org.apache.commons.math.complex.Complex complex26 = complex22.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex8.pow(complex22);
        org.apache.commons.math.complex.Complex complex28 = complex22.atan();
        org.apache.commons.math.complex.Complex complex29 = complex0.divide(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex29.log();
        org.apache.commons.math.complex.Complex complex31 = complex29.cosh();
        double double32 = complex29.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + Double.POSITIVE_INFINITY + "'", double7 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
    }

    @Test
    public void test08136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08136");
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException15 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray13, (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException19 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 100", objArray13);
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray31);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: ", objArray31);
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("", objArray36);
        java.lang.Object[] objArray42 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException43 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray42);
        convergenceException37.addSuppressed((java.lang.Throwable) maxIterationsExceededException43);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray31, (java.lang.Throwable) maxIterationsExceededException43);
        int int46 = maxIterationsExceededException43.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) maxIterationsExceededException43);
        java.lang.Object[] objArray58 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException59 = new org.apache.commons.math.ConvergenceException("", objArray58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray58);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException61 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray58);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray58);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException63 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.ConvergenceException: hi!", objArray58);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", objArray58);
        double double65 = functionEvaluationException64.getArgument();
        convergenceException47.addSuppressed((java.lang.Throwable) functionEvaluationException64);
        double double67 = functionEvaluationException64.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: hi!", objArray13, (java.lang.Throwable) functionEvaluationException64);
        java.lang.Object[] objArray69 = convergenceException68.getArguments();
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 35.0d + "'", double65 == 35.0d);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 35.0d + "'", double67 == 35.0d);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
    }

    @Test
    public void test08137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08137");
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray11);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException14 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray11);
        java.lang.Throwable[] throwableArray15 = maxIterationsExceededException14.getSuppressed();
        java.lang.Object[] objArray22 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException23 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray22);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException24 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray22);
        int int25 = maxIterationsExceededException24.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, "hi!", (java.lang.Object[]) throwableArray15, (java.lang.Throwable) maxIterationsExceededException24);
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray31);
        java.lang.Object[] objArray37 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("", objArray37);
        java.lang.Object[] objArray40 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("", objArray40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("", objArray37, (java.lang.Throwable) convergenceException41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray37, (java.lang.Throwable) functionEvaluationException44);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray31, (java.lang.Throwable) functionEvaluationException45);
        java.lang.String str47 = functionEvaluationException46.getPattern();
        java.lang.String str48 = functionEvaluationException46.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((-9.89965E7d), (java.lang.Throwable) functionEvaluationException46);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((-9.89965E7d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray15, (java.lang.Throwable) functionEvaluationException49);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", (java.lang.Object[]) throwableArray15);
        java.lang.Object[] objArray60 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("", objArray60);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray60);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: ", objArray60);
        java.lang.Object[] objArray65 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("", objArray65);
        java.lang.Object[] objArray71 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException72 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray71);
        convergenceException66.addSuppressed((java.lang.Throwable) maxIterationsExceededException72);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray60, (java.lang.Throwable) maxIterationsExceededException72);
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray60);
        org.apache.commons.math.ConvergenceException convergenceException76 = new org.apache.commons.math.ConvergenceException("", objArray60);
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray15, (java.lang.Throwable) convergenceException76);
        java.lang.Object[] objArray78 = convergenceException76.getArguments();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
    }

    @Test
    public void test08138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08138");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        double double11 = laguerreSolver6.getAbsoluteAccuracy();
        double double15 = laguerreSolver6.solve((double) 1.0f, (-3.464877501E9d), (-0.01d));
        laguerreSolver6.setAbsoluteAccuracy((double) 97);
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((-1.1271166786758312E32d));
        // The following exception was thrown during execution in test generation
        try {
            double double24 = laguerreSolver6.solve(1340332.0093999603d, Double.POSITIVE_INFINITY, 234.4898924197958d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [1340332.0093999603,Infinity]  Values: [1.3403320193999603E8,Infinity]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-6d + "'", double11 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-0.01d) + "'", double15 == (-0.01d));
    }

    @Test
    public void test08139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08139");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex7);
        double[] doubleArray14 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        double double17 = polynomialFunction15.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver18 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction15);
        double double22 = laguerreSolver18.solve((double) (-1L), 349.0d, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = laguerreSolver18.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction23);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction25 = polynomialFunction23.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver26 = new org.apache.commons.math.analysis.LaguerreSolver(univariateRealFunction25);
        boolean boolean27 = complex0.equals((java.lang.Object) laguerreSolver26);
        double[] doubleArray30 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray30);
        double double33 = polynomialFunction31.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver34 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction31);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = laguerreSolver34.getPolynomialFunction();
        double double36 = laguerreSolver34.getAbsoluteAccuracy();
        laguerreSolver34.resetFunctionValueAccuracy();
        laguerreSolver34.setFunctionValueAccuracy((-0.3400000100000003d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction40 = laguerreSolver34.getPolynomialFunction();
        double[] doubleArray41 = polynomialFunction40.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray43 = laguerreSolver26.solveAll(doubleArray41, (double) 18);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = laguerreSolver26.getPolynomialFunction();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10001.0d + "'", double17 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-0.01d) + "'", double22 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertNotNull(univariateRealFunction25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10001.0d + "'", double33 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0E-6d + "'", double36 == 1.0E-6d);
        org.junit.Assert.assertNotNull(polynomialFunction40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(polynomialFunction44);
    }

    @Test
    public void test08140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08140");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        double[] doubleArray5 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver9.getPolynomialFunction();
        laguerreSolver9.setRelativeAccuracy((double) 0);
        double[] doubleArray15 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = polynomialFunction16.polynomialDerivative();
        double[] doubleArray18 = polynomialFunction16.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray21 = laguerreSolver9.solveAll(doubleArray18, (double) 4);
        double double22 = laguerreSolver9.getRelativeAccuracy();
        laguerreSolver9.resetAbsoluteAccuracy();
        double double24 = laguerreSolver9.getResult();
        laguerreSolver9.resetRelativeAccuracy();
        boolean boolean26 = complex1.equals((java.lang.Object) laguerreSolver9);
        laguerreSolver9.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10001.0d + "'", double8 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test08141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08141");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(35.0002d, "org.apache.commons.math.ConvergenceException: hi!");
        java.lang.Object[] objArray3 = functionEvaluationException2.getArguments();
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
    }

    @Test
    public void test08142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08142");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = laguerreSolver6.solveAll(doubleArray14, 10001.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = laguerreSolver6.getPolynomialFunction();
        int int19 = laguerreSolver6.getIterationCount();
        double double20 = laguerreSolver6.getResult();
        laguerreSolver6.setAbsoluteAccuracy(1.0222474227427E13d);
        laguerreSolver6.setRelativeAccuracy((-8.60566164077089E51d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 18 + "'", int19 == 18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test08143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08143");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((-1.0389373212675846E8d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed");
    }

    @Test
    public void test08144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08144");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        java.lang.Object[] objArray9 = functionEvaluationException8.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException10 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) -1, "", objArray9);
        java.lang.Object[] objArray11 = maxIterationsExceededException10.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException((-0.0d), "");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException(131.67847730989726d, "", objArray11, (java.lang.Throwable) functionEvaluationException16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10,222,474,227,427", (java.lang.Throwable) functionEvaluationException16);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100.0]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[100.0]");
    }

    @Test
    public void test08145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08145");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.sin();
        boolean boolean9 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex10 = complex3.atan();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex13.sin();
        org.apache.commons.math.complex.Complex complex15 = complex11.pow(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex15.asin();
        org.apache.commons.math.complex.Complex complex17 = complex16.atan();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        boolean boolean20 = complex17.equals((java.lang.Object) complex18);
        org.apache.commons.math.complex.Complex complex21 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex3.pow(complex17);
        org.apache.commons.math.complex.Complex complex23 = complex17.atan();
        org.apache.commons.math.complex.Complex complex24 = complex17.log();
        org.apache.commons.math.complex.Complex complex25 = complex17.exp();
        org.apache.commons.math.complex.Complex complex26 = complex17.acos();
        org.apache.commons.math.complex.Complex complex27 = complex17.sinh();
        double[] doubleArray33 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray33);
        double double36 = polynomialFunction34.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver37 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction34);
        double[] doubleArray40 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray40);
        double double43 = polynomialFunction41.value((double) (short) 100);
        double[] doubleArray44 = polynomialFunction41.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray46 = laguerreSolver37.solveAll(doubleArray44, (double) (short) 10);
        int int47 = laguerreSolver37.getMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction48 = laguerreSolver37.getPolynomialFunction();
        double double50 = polynomialFunction48.value(1.0001d);
        double double52 = polynomialFunction48.value((-0.3400000100000003d));
        double double54 = polynomialFunction48.value(3.5000000000000103E-14d);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver55 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction48);
        boolean boolean56 = complex17.equals((java.lang.Object) polynomialFunction48);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10001.0d + "'", double43 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(polynomialFunction48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 134.02310093999603d + "'", double50 == 134.02310093999603d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-0.3533630315721405d) + "'", double52 == (-0.3533630315721405d));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.2250000000001261E-12d + "'", double54 == 1.2250000000001261E-12d);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test08146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08146");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver5 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        laguerreSolver5.setAbsoluteAccuracy(0.0d);
        laguerreSolver5.setFunctionValueAccuracy((double) 1);
        int int10 = laguerreSolver5.getMaximalIterationCount();
        double double11 = laguerreSolver5.getFunctionValueAccuracy();
        laguerreSolver5.resetMaximalIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = laguerreSolver5.solve(0.0d, (-6.085713002624359E7d), 320101.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.0,-6.085713002624359E7]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
    }

    @Test
    public void test08147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08147");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        laguerreSolver9.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver9.resetRelativeAccuracy();
        laguerreSolver9.resetMaximalIterationCount();
        int int23 = laguerreSolver9.getMaximalIterationCount();
        int int24 = laguerreSolver9.getMaximalIterationCount();
        int int25 = laguerreSolver9.getIterationCount();
        laguerreSolver9.setRelativeAccuracy(5201.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = laguerreSolver9.getPolynomialFunction();
        double double30 = polynomialFunction28.value(100.0d);
        double double32 = polynomialFunction28.value((double) 18);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(polynomialFunction28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-9.89965E7d) + "'", double30 == (-9.89965E7d));
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-71946.0d) + "'", double32 == (-71946.0d));
    }

    @Test
    public void test08148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08148");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        int int19 = laguerreSolver6.getIterationCount();
        laguerreSolver6.setFunctionValueAccuracy((-1.6365376E7d));
        int int22 = laguerreSolver6.getIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double25 = laguerreSolver6.solve((-3.74215821E8d), (-2.559616086392961E33d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [-3.74215821E8,-2.559616086392961E33]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
    }

    @Test
    public void test08149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08149");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.acos();
        double double11 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex0.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.cos();
        org.apache.commons.math.complex.Complex complex18 = complex9.multiply(complex16);
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex22 = complex21.sin();
        org.apache.commons.math.complex.Complex complex23 = complex19.pow(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex18.multiply(complex19);
        double[] doubleArray27 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray27);
        double double30 = polynomialFunction28.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver31 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction28);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = laguerreSolver31.getPolynomialFunction();
        double double33 = laguerreSolver31.getRelativeAccuracy();
        laguerreSolver31.resetRelativeAccuracy();
        double double35 = laguerreSolver31.getFunctionValueAccuracy();
        laguerreSolver31.resetRelativeAccuracy();
        laguerreSolver31.setMaximalIterationCount((int) (short) 10);
        double[] doubleArray41 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray41);
        double double44 = polynomialFunction42.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver45 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction42);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = laguerreSolver45.getPolynomialFunction();
        double double47 = laguerreSolver45.getAbsoluteAccuracy();
        double[] doubleArray53 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction54 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray56 = laguerreSolver45.solveAll(doubleArray53, 10001.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction57 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray59 = laguerreSolver31.solveAll(doubleArray53, 349.0d);
        boolean boolean60 = complex19.equals((java.lang.Object) laguerreSolver31);
        laguerreSolver31.resetFunctionValueAccuracy();
        laguerreSolver31.resetFunctionValueAccuracy();
        int int63 = laguerreSolver31.getIterationCount();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10001.0d + "'", double30 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-14d + "'", double33 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0E-15d + "'", double35 == 1.0E-15d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10001.0d + "'", double44 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0E-6d + "'", double47 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 18 + "'", int63 == 18);
    }

    @Test
    public void test08150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08150");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = laguerreSolver6.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = polynomialFunction12.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction12.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction15 = polynomialFunction14.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction16 = polynomialFunction14.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction12);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(univariateRealFunction15);
        org.junit.Assert.assertNotNull(univariateRealFunction16);
    }

    @Test
    public void test08151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08151");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) (-1));
        laguerreSolver6.setRelativeAccuracy((double) (-1L));
        laguerreSolver6.setAbsoluteAccuracy(0.0d);
        double double15 = laguerreSolver6.getFunctionValueAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = laguerreSolver6.solve(3501.0d, (-6.8261426196981E247d), (-4.84971561640899E12d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [3501.0,-6.8261426196981E247]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1.0d) + "'", double15 == (-1.0d));
    }

    @Test
    public void test08152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08152");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        double double3 = complex2.getImaginary();
        double double4 = complex2.getImaginary();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex6.acos();
        double double8 = complex6.getReal();
        org.apache.commons.math.complex.Complex complex9 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex2.subtract(complex6);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.abs();
        org.apache.commons.math.complex.Complex complex14 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex14.conjugate();
        boolean boolean16 = complex14.isInfinite();
        org.apache.commons.math.complex.Complex complex17 = complex14.cos();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex2.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex21.acos();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex23.log();
        org.apache.commons.math.complex.Complex complex26 = complex23.sin();
        org.apache.commons.math.complex.Complex complex27 = complex26.tanh();
        org.apache.commons.math.complex.Complex complex28 = complex21.add(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.acos();
        org.apache.commons.math.complex.Complex complex30 = complex19.pow(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex29.acos();
        org.apache.commons.math.complex.Complex complex32 = complex31.acos();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        double double37 = complex35.abs();
        org.apache.commons.math.complex.Complex complex38 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex39 = complex33.divide(complex38);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex40.log();
        org.apache.commons.math.complex.Complex complex43 = complex40.sin();
        org.apache.commons.math.complex.Complex complex44 = complex40.log();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex46 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex47 = complex40.divide(complex46);
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        double double50 = complex48.abs();
        org.apache.commons.math.complex.Complex complex51 = complex48.conjugate();
        org.apache.commons.math.complex.Complex complex52 = complex51.conjugate();
        org.apache.commons.math.complex.Complex complex53 = complex47.subtract(complex52);
        org.apache.commons.math.complex.Complex complex54 = complex39.multiply(complex47);
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        org.apache.commons.math.complex.Complex complex57 = complex55.log();
        org.apache.commons.math.complex.Complex complex58 = complex57.cos();
        double double59 = complex58.abs();
        org.apache.commons.math.complex.Complex complex60 = complex58.sqrt();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex63 = complex62.sqrt();
        org.apache.commons.math.complex.Complex complex64 = complex63.sin();
        org.apache.commons.math.complex.Complex complex65 = complex61.pow(complex63);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        org.apache.commons.math.complex.Complex complex68 = complex66.log();
        org.apache.commons.math.complex.Complex complex69 = complex61.divide(complex68);
        org.apache.commons.math.complex.Complex complex70 = complex60.subtract(complex69);
        org.apache.commons.math.complex.Complex complex71 = complex47.pow(complex60);
        org.apache.commons.math.complex.Complex complex72 = complex60.exp();
        org.apache.commons.math.complex.Complex complex73 = complex60.sinh();
        org.apache.commons.math.complex.Complex complex74 = complex73.acos();
        org.apache.commons.math.complex.Complex complex75 = complex31.divide(complex73);
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex77 = complex76.cosh();
        org.apache.commons.math.complex.Complex complex78 = complex76.log();
        org.apache.commons.math.complex.Complex complex79 = complex76.sin();
        org.apache.commons.math.complex.Complex complex80 = complex76.log();
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex82 = complex81.sqrt();
        org.apache.commons.math.complex.Complex complex83 = complex76.divide(complex82);
        org.apache.commons.math.complex.Complex complex84 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex85 = complex84.cosh();
        org.apache.commons.math.complex.Complex complex86 = complex85.acos();
        double double87 = complex85.getReal();
        org.apache.commons.math.complex.Complex complex88 = complex85.sqrt();
        org.apache.commons.math.complex.Complex complex89 = complex76.pow(complex85);
        org.apache.commons.math.complex.Complex complex90 = complex89.sqrt1z();
        org.apache.commons.math.complex.Complex complex91 = complex90.log();
        org.apache.commons.math.complex.Complex complex92 = complex31.subtract(complex90);
        org.apache.commons.math.complex.Complex complex93 = complex31.tan();
        boolean boolean94 = complex31.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.7853981633974483d + "'", double3 == 0.7853981633974483d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.7853981633974483d + "'", double4 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + Double.POSITIVE_INFINITY + "'", double13 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + Double.POSITIVE_INFINITY + "'", double37 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + Double.POSITIVE_INFINITY + "'", double50 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test08153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08153");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        boolean boolean8 = complex6.isNaN();
        org.apache.commons.math.complex.Complex complex9 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.abs();
        org.apache.commons.math.complex.Complex complex14 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex14.conjugate();
        boolean boolean16 = complex14.isInfinite();
        org.apache.commons.math.complex.Complex complex17 = complex14.cos();
        org.apache.commons.math.complex.Complex complex18 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex14.sin();
        boolean boolean20 = complex14.isNaN();
        org.apache.commons.math.complex.Complex complex21 = complex14.atan();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = complex24.sin();
        org.apache.commons.math.complex.Complex complex26 = complex22.pow(complex24);
        org.apache.commons.math.complex.Complex complex27 = complex26.asin();
        org.apache.commons.math.complex.Complex complex28 = complex27.atan();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        boolean boolean31 = complex28.equals((java.lang.Object) complex29);
        org.apache.commons.math.complex.Complex complex32 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex33 = complex14.pow(complex28);
        org.apache.commons.math.complex.Complex complex34 = complex28.atan();
        org.apache.commons.math.complex.Complex complex35 = complex6.divide(complex34);
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex complex39 = complex38.sin();
        org.apache.commons.math.complex.Complex complex40 = complex36.pow(complex38);
        org.apache.commons.math.complex.Complex complex41 = complex36.exp();
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.apache.commons.math.complex.Complex complex43 = complex6.divide(complex42);
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        double double46 = complex44.abs();
        org.apache.commons.math.complex.Complex complex47 = complex44.conjugate();
        org.apache.commons.math.complex.Complex complex48 = complex47.conjugate();
        boolean boolean49 = complex47.isInfinite();
        org.apache.commons.math.complex.Complex complex50 = complex47.cos();
        org.apache.commons.math.complex.Complex complex51 = complex50.sin();
        double double52 = complex51.abs();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        double double55 = complex53.abs();
        org.apache.commons.math.complex.Complex complex56 = complex53.conjugate();
        org.apache.commons.math.complex.Complex complex57 = complex56.conjugate();
        boolean boolean58 = complex56.isInfinite();
        org.apache.commons.math.complex.Complex complex59 = complex56.asin();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex63 = complex62.sin();
        org.apache.commons.math.complex.Complex complex64 = complex60.pow(complex62);
        org.apache.commons.math.complex.Complex complex65 = complex64.asin();
        org.apache.commons.math.complex.Complex complex66 = complex64.tan();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        double double69 = complex67.abs();
        org.apache.commons.math.complex.Complex complex70 = complex67.conjugate();
        org.apache.commons.math.complex.Complex complex71 = complex70.conjugate();
        boolean boolean72 = complex70.isInfinite();
        org.apache.commons.math.complex.Complex complex73 = complex70.asin();
        boolean boolean74 = complex70.isNaN();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        org.apache.commons.math.complex.Complex complex77 = complex70.divide(complex75);
        org.apache.commons.math.complex.Complex complex78 = complex66.pow(complex75);
        org.apache.commons.math.complex.Complex complex79 = complex59.subtract(complex66);
        boolean boolean80 = complex66.isInfinite();
        org.apache.commons.math.complex.Complex complex81 = complex66.sqrt();
        org.apache.commons.math.complex.Complex complex82 = complex51.multiply(complex81);
        org.apache.commons.math.complex.Complex complex83 = complex6.divide(complex81);
        double double84 = complex83.getImaginary();
        org.apache.commons.math.complex.Complex complex85 = complex83.tan();
        org.apache.commons.math.complex.Complex complex86 = complex5.multiply(complex83);
        boolean boolean87 = complex5.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + Double.POSITIVE_INFINITY + "'", double13 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + Double.POSITIVE_INFINITY + "'", double46 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + Double.POSITIVE_INFINITY + "'", double55 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + Double.POSITIVE_INFINITY + "'", double69 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test08154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08154");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver6.getPolynomialFunction();
        double double13 = polynomialFunction11.value((double) (short) 1);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver14 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        laguerreSolver14.resetFunctionValueAccuracy();
        laguerreSolver14.setMaximalIterationCount((int) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 101.0d + "'", double13 == 101.0d);
    }

    @Test
    public void test08155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08155");
        org.apache.commons.math.ConvergenceException convergenceException3 = new org.apache.commons.math.ConvergenceException();
        java.lang.Object[] objArray11 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray11);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException13 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray11);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray16);
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray16, (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray11, (java.lang.Throwable) convergenceException20);
        java.lang.Object[] objArray23 = convergenceException20.getArguments();
        convergenceException3.addSuppressed((java.lang.Throwable) convergenceException20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((-9.9998989899E10d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 350", (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((-196499.0d), (java.lang.Throwable) functionEvaluationException25);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
    }

    @Test
    public void test08156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08156");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double[] doubleArray7 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray7);
        double double10 = polynomialFunction8.value((double) (-1));
        double double12 = polynomialFunction8.value(1.0001d);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        double double14 = laguerreSolver13.getAbsoluteAccuracy();
        laguerreSolver13.setMaximalIterationCount(0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-99.0d) + "'", double10 == (-99.0d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 101.01d + "'", double12 == 101.01d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
    }

    @Test
    public void test08157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08157");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        laguerreSolver6.setMaximalIterationCount(4);
        laguerreSolver6.setAbsoluteAccuracy((double) 'a');
        laguerreSolver6.setAbsoluteAccuracy((double) (byte) 1);
        laguerreSolver6.setFunctionValueAccuracy(97.0d);
        laguerreSolver6.resetRelativeAccuracy();
        double double16 = laguerreSolver6.getAbsoluteAccuracy();
        double double17 = laguerreSolver6.getAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = laguerreSolver6.getPolynomialFunction();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction18);
    }

    @Test
    public void test08158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08158");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        int int7 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction6.polynomialDerivative();
        double double10 = polynomialFunction8.value(0.0d);
        double double12 = polynomialFunction8.value(1801.0d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 35.0d + "'", double10 == 35.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-2.3366541369E10d) + "'", double12 == (-2.3366541369E10d));
    }

    @Test
    public void test08159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08159");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        int int9 = laguerreSolver6.getMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setFunctionValueAccuracy(10.0d);
        laguerreSolver6.resetRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = laguerreSolver6.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertNotNull(polynomialFunction10);
    }

    @Test
    public void test08160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08160");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.exp();
        org.apache.commons.math.complex.Complex complex2 = complex1.acos();
        org.apache.commons.math.complex.Complex complex3 = complex2.acos();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.tan();
        org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        boolean boolean11 = complex7.isNaN();
        boolean boolean12 = complex7.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex7.log();
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex15 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.abs();
        org.apache.commons.math.complex.Complex complex20 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex20.conjugate();
        boolean boolean22 = complex20.isInfinite();
        org.apache.commons.math.complex.Complex complex23 = complex20.asin();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex27 = complex26.sin();
        org.apache.commons.math.complex.Complex complex28 = complex24.pow(complex26);
        org.apache.commons.math.complex.Complex complex29 = complex28.asin();
        org.apache.commons.math.complex.Complex complex30 = complex28.tan();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        double double33 = complex31.abs();
        org.apache.commons.math.complex.Complex complex34 = complex31.conjugate();
        org.apache.commons.math.complex.Complex complex35 = complex34.conjugate();
        boolean boolean36 = complex34.isInfinite();
        org.apache.commons.math.complex.Complex complex37 = complex34.asin();
        boolean boolean38 = complex34.isNaN();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex41 = complex34.divide(complex39);
        org.apache.commons.math.complex.Complex complex42 = complex30.pow(complex39);
        org.apache.commons.math.complex.Complex complex43 = complex23.subtract(complex30);
        boolean boolean44 = complex30.isInfinite();
        org.apache.commons.math.complex.Complex complex45 = complex30.sqrt();
        org.apache.commons.math.complex.Complex complex46 = complex6.add(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex6.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + Double.POSITIVE_INFINITY + "'", double19 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + Double.POSITIVE_INFINITY + "'", double33 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
    }

    @Test
    public void test08161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08161");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        double double3 = complex2.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = complex2.asin();
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.abs();
        org.apache.commons.math.complex.Complex complex9 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex5.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex12.log();
        org.apache.commons.math.complex.Complex complex15 = complex12.sin();
        org.apache.commons.math.complex.Complex complex16 = complex12.log();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = complex12.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex21.acos();
        double double23 = complex21.getReal();
        org.apache.commons.math.complex.Complex complex24 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex25 = complex12.pow(complex21);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.log();
        org.apache.commons.math.complex.Complex complex29 = complex28.cos();
        org.apache.commons.math.complex.Complex complex30 = complex21.multiply(complex28);
        org.apache.commons.math.complex.Complex complex31 = complex5.subtract(complex21);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex32.log();
        org.apache.commons.math.complex.Complex complex35 = complex32.sin();
        org.apache.commons.math.complex.Complex complex36 = complex32.log();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex complex39 = complex32.divide(complex38);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        double double42 = complex40.abs();
        org.apache.commons.math.complex.Complex complex43 = complex40.conjugate();
        org.apache.commons.math.complex.Complex complex44 = complex43.conjugate();
        org.apache.commons.math.complex.Complex complex45 = complex39.subtract(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex39.exp();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex complex50 = complex49.sin();
        org.apache.commons.math.complex.Complex complex51 = complex47.pow(complex49);
        org.apache.commons.math.complex.Complex complex52 = complex51.asin();
        org.apache.commons.math.complex.Complex complex53 = complex52.atan();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex55 = complex54.cosh();
        boolean boolean56 = complex53.equals((java.lang.Object) complex54);
        org.apache.commons.math.complex.Complex complex57 = complex39.divide(complex54);
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        org.apache.commons.math.complex.Complex complex60 = complex58.log();
        org.apache.commons.math.complex.Complex complex61 = complex60.cos();
        org.apache.commons.math.complex.Complex complex62 = complex60.exp();
        boolean boolean63 = complex60.isNaN();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        double double66 = complex64.abs();
        org.apache.commons.math.complex.Complex complex67 = complex64.conjugate();
        org.apache.commons.math.complex.Complex complex68 = complex67.conjugate();
        org.apache.commons.math.complex.Complex complex69 = complex67.tanh();
        org.apache.commons.math.complex.Complex complex70 = complex60.multiply(complex67);
        org.apache.commons.math.complex.Complex complex71 = complex54.add(complex60);
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex complex75 = complex74.sin();
        org.apache.commons.math.complex.Complex complex76 = complex72.pow(complex74);
        org.apache.commons.math.complex.Complex complex77 = complex76.asin();
        org.apache.commons.math.complex.Complex complex78 = complex76.tan();
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        double double81 = complex79.abs();
        org.apache.commons.math.complex.Complex complex82 = complex79.conjugate();
        org.apache.commons.math.complex.Complex complex83 = complex82.conjugate();
        boolean boolean84 = complex82.isInfinite();
        org.apache.commons.math.complex.Complex complex85 = complex82.asin();
        boolean boolean86 = complex82.isNaN();
        org.apache.commons.math.complex.Complex complex87 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex88 = complex87.cosh();
        org.apache.commons.math.complex.Complex complex89 = complex82.divide(complex87);
        org.apache.commons.math.complex.Complex complex90 = complex78.pow(complex87);
        org.apache.commons.math.complex.Complex complex91 = complex87.tanh();
        org.apache.commons.math.complex.Complex complex92 = complex87.cos();
        org.apache.commons.math.complex.Complex complex93 = complex87.conjugate();
        org.apache.commons.math.complex.Complex complex94 = complex71.subtract(complex93);
        org.apache.commons.math.complex.Complex complex95 = complex93.cos();
        org.apache.commons.math.complex.Complex complex96 = complex93.sinh();
        org.apache.commons.math.complex.Complex complex97 = complex5.subtract(complex96);
        org.apache.commons.math.complex.Complex complex98 = complex96.sinh();
        org.apache.commons.math.complex.Complex complex99 = complex98.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.7853981633974483d + "'", double3 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.POSITIVE_INFINITY + "'", double8 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + Double.POSITIVE_INFINITY + "'", double42 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + Double.POSITIVE_INFINITY + "'", double66 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + Double.POSITIVE_INFINITY + "'", double81 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertNotNull(complex98);
        org.junit.Assert.assertNotNull(complex99);
    }

    @Test
    public void test08162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08162");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        double[] doubleArray5 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getFunctionValueAccuracy();
        laguerreSolver7.setRelativeAccuracy((double) 97);
        laguerreSolver7.resetRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = laguerreSolver7.solve((-2.531519208223786E37d), (-1.0d), 7.065179444323E12d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [-2.531519208223786E37,-1.0]  Values: [-8.860317228783252E38,-36.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-15d + "'", double8 == 1.0E-15d);
    }

    @Test
    public void test08163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08163");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test08164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08164");
        double[] doubleArray4 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        double double7 = polynomialFunction5.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction5);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = laguerreSolver8.getPolynomialFunction();
        laguerreSolver8.setRelativeAccuracy((double) 0);
        double[] doubleArray14 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = polynomialFunction15.polynomialDerivative();
        double[] doubleArray17 = polynomialFunction15.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        org.apache.commons.math.complex.Complex[] complexArray20 = laguerreSolver8.solveAll(doubleArray17, (double) 4);
        laguerreSolver8.resetFunctionValueAccuracy();
        laguerreSolver8.resetAbsoluteAccuracy();
        double[] doubleArray25 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray25);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver27 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction26);
        double[] doubleArray33 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray33);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray37 = laguerreSolver27.solveAll(doubleArray33, 1.0E-6d);
        org.apache.commons.math.complex.Complex[] complexArray39 = laguerreSolver8.solveAll(doubleArray33, (double) (-1L));
        laguerreSolver8.resetFunctionValueAccuracy();
        double[] doubleArray46 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray46);
        int int48 = polynomialFunction47.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction49 = polynomialFunction47.polynomialDerivative();
        double double51 = polynomialFunction47.value((double) 100.0f);
        double[] doubleArray52 = polynomialFunction47.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction53 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray52);
        org.apache.commons.math.complex.Complex[] complexArray55 = laguerreSolver8.solveAll(doubleArray52, (-1.4823291286E10d));
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException61 = new org.apache.commons.math.MaxIterationsExceededException(10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((-0.3533630315721405d), "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) maxIterationsExceededException61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) functionEvaluationException62);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException((-2.3366541369E10d), "Evaluation failed for argument = -161", (java.lang.Object[]) complexArray55, (java.lang.Throwable) functionEvaluationException63);
        java.lang.String str65 = functionEvaluationException63.toString();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10001.0d + "'", double7 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertNotNull(complexArray39);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 4 + "'", int48 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction49);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-9.89965E7d) + "'", double51 == (-9.89965E7d));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MaxIterationsExceededException: " + "'", str65, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MaxIterationsExceededException: ");
    }

    @Test
    public void test08165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08165");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = laguerreSolver6.solveAll(doubleArray14, 10001.0d);
        laguerreSolver6.setFunctionValueAccuracy((double) 10.0f);
        double double20 = laguerreSolver6.getRelativeAccuracy();
        double[] doubleArray26 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray26);
        double double29 = polynomialFunction27.value((double) 0);
        double double31 = polynomialFunction27.value((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = polynomialFunction27.polynomialDerivative();
        double[] doubleArray33 = polynomialFunction27.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray35 = laguerreSolver6.solveAll(doubleArray33, (-1.6365376E7d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction36 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray33);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray33);
        int int38 = polynomialFunction37.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-14d + "'", double20 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
    }

    @Test
    public void test08166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08166");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        laguerreSolver9.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver9.resetRelativeAccuracy();
        laguerreSolver9.resetMaximalIterationCount();
        int int23 = laguerreSolver9.getMaximalIterationCount();
        double double24 = laguerreSolver9.getAbsoluteAccuracy();
        double double28 = laguerreSolver9.solve(0.0d, (double) (short) 1, 100.0d);
        double[] doubleArray31 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        double double34 = polynomialFunction32.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver35 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction32);
        double double36 = laguerreSolver35.getAbsoluteAccuracy();
        laguerreSolver35.resetAbsoluteAccuracy();
        laguerreSolver35.setFunctionValueAccuracy(64.0d);
        double double40 = laguerreSolver35.getRelativeAccuracy();
        int int41 = laguerreSolver35.getMaximalIterationCount();
        double[] doubleArray44 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction45 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray44);
        double double47 = polynomialFunction45.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver48 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction45);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction49 = laguerreSolver48.getPolynomialFunction();
        laguerreSolver48.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction52 = laguerreSolver48.getPolynomialFunction();
        laguerreSolver48.resetRelativeAccuracy();
        laguerreSolver48.setRelativeAccuracy(10.0d);
        laguerreSolver48.setAbsoluteAccuracy((-1.6365376E7d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction58 = laguerreSolver48.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver59 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction58);
        double[] doubleArray60 = polynomialFunction58.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction61 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray60);
        double[] doubleArray62 = polynomialFunction61.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray64 = laguerreSolver35.solveAll(doubleArray62, (-3.2273645162588404E16d));
        org.apache.commons.math.complex.Complex[] complexArray66 = laguerreSolver9.solveAll(doubleArray62, 1.120340101E9d);
        laguerreSolver9.setMaximalIterationCount((int) ' ');
        int int69 = laguerreSolver9.getIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double72 = laguerreSolver9.solve((double) ' ', (-7.982927222591924E33d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [32.0,-7.982927222591924E33]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0E-6d + "'", double24 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10001.0d + "'", double34 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0E-6d + "'", double36 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0E-14d + "'", double40 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10001.0d + "'", double47 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction49);
        org.junit.Assert.assertNotNull(polynomialFunction52);
        org.junit.Assert.assertNotNull(polynomialFunction58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
    }

    @Test
    public void test08167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08167");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.acos();
        double double11 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex0.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.cos();
        org.apache.commons.math.complex.Complex complex18 = complex9.multiply(complex16);
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex22 = complex21.sin();
        org.apache.commons.math.complex.Complex complex23 = complex19.pow(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex18.multiply(complex19);
        double[] doubleArray27 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray27);
        double double30 = polynomialFunction28.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver31 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction28);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = laguerreSolver31.getPolynomialFunction();
        double double33 = laguerreSolver31.getRelativeAccuracy();
        laguerreSolver31.resetRelativeAccuracy();
        double double35 = laguerreSolver31.getFunctionValueAccuracy();
        laguerreSolver31.resetRelativeAccuracy();
        laguerreSolver31.setMaximalIterationCount((int) (short) 10);
        double[] doubleArray41 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray41);
        double double44 = polynomialFunction42.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver45 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction42);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = laguerreSolver45.getPolynomialFunction();
        double double47 = laguerreSolver45.getAbsoluteAccuracy();
        double[] doubleArray53 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction54 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray56 = laguerreSolver45.solveAll(doubleArray53, 10001.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction57 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray53);
        org.apache.commons.math.complex.Complex[] complexArray59 = laguerreSolver31.solveAll(doubleArray53, 349.0d);
        boolean boolean60 = complex19.equals((java.lang.Object) laguerreSolver31);
        laguerreSolver31.resetMaximalIterationCount();
        laguerreSolver31.setRelativeAccuracy((double) (short) 1);
        laguerreSolver31.setFunctionValueAccuracy((double) 14);
        laguerreSolver31.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10001.0d + "'", double30 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0E-14d + "'", double33 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0E-15d + "'", double35 == 1.0E-15d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10001.0d + "'", double44 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0E-6d + "'", double47 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test08168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08168");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex7);
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        double double13 = complex12.getReal();
        boolean boolean14 = complex12.isNaN();
        boolean boolean15 = complex12.isInfinite();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex16.log();
        org.apache.commons.math.complex.Complex complex19 = complex16.sin();
        org.apache.commons.math.complex.Complex complex20 = complex16.log();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex16.divide(complex22);
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex25.acos();
        double double27 = complex25.getReal();
        org.apache.commons.math.complex.Complex complex28 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex29 = complex16.pow(complex25);
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt1z();
        org.apache.commons.math.complex.Complex complex31 = complex29.atan();
        org.apache.commons.math.complex.Complex complex32 = complex29.atan();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex33.log();
        org.apache.commons.math.complex.Complex complex36 = complex33.sin();
        org.apache.commons.math.complex.Complex complex37 = complex33.log();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex complex40 = complex33.divide(complex39);
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        double double43 = complex41.abs();
        org.apache.commons.math.complex.Complex complex44 = complex41.conjugate();
        org.apache.commons.math.complex.Complex complex45 = complex44.conjugate();
        org.apache.commons.math.complex.Complex complex46 = complex40.subtract(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex46.atan();
        org.apache.commons.math.complex.Complex complex48 = complex29.divide(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex12.add(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + Double.POSITIVE_INFINITY + "'", double43 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
    }

    @Test
    public void test08169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08169");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.asin();
        boolean boolean7 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex3.divide(complex8);
        boolean boolean11 = complex3.isNaN();
        double double12 = complex3.getReal();
        org.apache.commons.math.complex.Complex complex13 = complex3.acos();
        org.apache.commons.math.complex.Complex complex14 = complex3.exp();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        boolean boolean20 = complex18.isInfinite();
        org.apache.commons.math.complex.Complex complex21 = complex18.cos();
        org.apache.commons.math.complex.Complex complex22 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex18.sin();
        boolean boolean24 = complex18.isNaN();
        org.apache.commons.math.complex.Complex complex25 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex14.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.tanh();
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.acos();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex(231.0d, 2.799833927635354E75d);
        org.apache.commons.math.complex.Complex complex34 = complex33.asin();
        org.apache.commons.math.complex.Complex complex35 = complex29.subtract(complex33);
        org.apache.commons.math.complex.Complex complex36 = complex33.atan();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
    }

    @Test
    public void test08170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08170");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        double double13 = laguerreSolver6.getAbsoluteAccuracy();
        double double14 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        int int16 = laguerreSolver6.getIterationCount();
        laguerreSolver6.setAbsoluteAccuracy((double) 21);
        double double19 = laguerreSolver6.getResult();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = laguerreSolver6.getPolynomialFunction();
        double double21 = laguerreSolver6.getResult();
        // The following exception was thrown during execution in test generation
        try {
            double double25 = laguerreSolver6.solve(4.024010586391997E240d, 34.0d, (-0.999999999999965d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [4.024010586391997E240,34.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-6d + "'", double13 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-0.01d) + "'", double19 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-0.01d) + "'", double21 == (-0.01d));
    }

    @Test
    public void test08171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08171");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.resetFunctionValueAccuracy();
        int int14 = laguerreSolver6.getIterationCount();
        laguerreSolver6.resetFunctionValueAccuracy();
        double double16 = laguerreSolver6.getFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setFunctionValueAccuracy(0.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-15d + "'", double16 == 1.0E-15d);
        org.junit.Assert.assertNotNull(polynomialFunction17);
    }

    @Test
    public void test08172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08172");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex15.sin();
        org.apache.commons.math.complex.Complex complex17 = complex13.pow(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex17.asin();
        org.apache.commons.math.complex.Complex complex19 = complex17.tan();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex23.asin();
        boolean boolean27 = complex23.isNaN();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex23.divide(complex28);
        org.apache.commons.math.complex.Complex complex31 = complex19.pow(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex12.divide(complex19);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.abs();
        org.apache.commons.math.complex.Complex complex36 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        boolean boolean39 = complex37.isNaN();
        org.apache.commons.math.complex.Complex complex40 = complex37.sin();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = complex43.sin();
        org.apache.commons.math.complex.Complex complex45 = complex41.pow(complex43);
        org.apache.commons.math.complex.Complex complex46 = complex45.asin();
        org.apache.commons.math.complex.Complex complex47 = complex46.atan();
        boolean boolean48 = complex47.isInfinite();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex50 = complex47.subtract(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex50.sin();
        org.apache.commons.math.complex.Complex complex52 = complex37.divide(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex33.subtract(complex51);
        double double54 = complex53.abs();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex56 = complex55.cosh();
        double double57 = complex55.abs();
        org.apache.commons.math.complex.Complex complex58 = complex55.conjugate();
        org.apache.commons.math.complex.Complex complex59 = complex58.conjugate();
        boolean boolean60 = complex58.isInfinite();
        org.apache.commons.math.complex.Complex complex61 = complex58.cos();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        double double64 = complex62.abs();
        org.apache.commons.math.complex.Complex complex65 = complex62.conjugate();
        org.apache.commons.math.complex.Complex complex66 = complex65.conjugate();
        boolean boolean67 = complex65.isInfinite();
        org.apache.commons.math.complex.Complex complex68 = complex65.asin();
        boolean boolean69 = complex65.isNaN();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        org.apache.commons.math.complex.Complex complex72 = complex65.divide(complex70);
        org.apache.commons.math.complex.Complex complex73 = complex61.divide(complex70);
        org.apache.commons.math.complex.Complex complex74 = complex70.sinh();
        org.apache.commons.math.complex.Complex complex75 = complex74.conjugate();
        org.apache.commons.math.complex.Complex complex76 = complex74.acos();
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex78 = complex77.cosh();
        org.apache.commons.math.complex.Complex complex79 = complex78.acos();
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex81 = complex80.cosh();
        org.apache.commons.math.complex.Complex complex82 = complex80.log();
        org.apache.commons.math.complex.Complex complex83 = complex80.sin();
        org.apache.commons.math.complex.Complex complex84 = complex83.tanh();
        org.apache.commons.math.complex.Complex complex85 = complex78.add(complex84);
        org.apache.commons.math.complex.Complex complex86 = complex76.pow(complex84);
        org.apache.commons.math.complex.Complex complex87 = complex53.multiply(complex84);
        org.apache.commons.math.complex.Complex complex88 = complex12.add(complex53);
        org.apache.commons.math.complex.Complex complex89 = complex88.tan();
        org.apache.commons.math.complex.Complex complex90 = complex89.cosh();
        double double91 = complex90.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + Double.POSITIVE_INFINITY + "'", double57 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + Double.POSITIVE_INFINITY + "'", double64 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
    }

    @Test
    public void test08173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08173");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double[] doubleArray7 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray7);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction8.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction8.polynomialDerivative();
        double double12 = polynomialFunction8.value((-2.55976730539718E65d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-2.5597673053971802E67d) + "'", double12 == (-2.5597673053971802E67d));
    }

    @Test
    public void test08174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08174");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.sin();
        boolean boolean9 = complex3.isNaN();
        double double10 = complex3.abs();
        org.apache.commons.math.complex.Complex complex11 = complex3.sin();
        org.apache.commons.math.complex.Complex complex12 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex12.tanh();
        org.apache.commons.math.complex.Complex complex14 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex12.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
    }

    @Test
    public void test08175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08175");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        double[] doubleArray5 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction7.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction8.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction8.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
    }

    @Test
    public void test08176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08176");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) (-1));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver6.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = laguerreSolver6.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction12);
        laguerreSolver13.resetAbsoluteAccuracy();
        double[] doubleArray17 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        double double20 = polynomialFunction18.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver21 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction18);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = laguerreSolver21.getPolynomialFunction();
        laguerreSolver21.resetRelativeAccuracy();
        laguerreSolver21.resetMaximalIterationCount();
        laguerreSolver21.setMaximalIterationCount((int) '#');
        laguerreSolver21.resetMaximalIterationCount();
        laguerreSolver21.resetFunctionValueAccuracy();
        laguerreSolver21.setFunctionValueAccuracy((-0.3400000100000003d));
        laguerreSolver21.resetMaximalIterationCount();
        laguerreSolver21.setFunctionValueAccuracy(2.799833927635354E77d);
        double[] doubleArray36 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray36);
        double double39 = polynomialFunction37.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver40 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction37);
        double double41 = laguerreSolver40.getAbsoluteAccuracy();
        double double42 = laguerreSolver40.getRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction43 = laguerreSolver40.getPolynomialFunction();
        double[] doubleArray46 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction47 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray46);
        double double49 = polynomialFunction47.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver50 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction47);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction51 = laguerreSolver50.getPolynomialFunction();
        laguerreSolver50.setRelativeAccuracy((double) 0);
        double[] doubleArray56 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction57 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray56);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction58 = polynomialFunction57.polynomialDerivative();
        double[] doubleArray59 = polynomialFunction57.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction60 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray59);
        org.apache.commons.math.complex.Complex[] complexArray62 = laguerreSolver50.solveAll(doubleArray59, (double) 4);
        org.apache.commons.math.complex.Complex[] complexArray64 = laguerreSolver40.solveAll(doubleArray59, (-9.631547407031818E12d));
        org.apache.commons.math.complex.Complex[] complexArray66 = laguerreSolver21.solveAll(doubleArray59, (double) (byte) -1);
        org.apache.commons.math.complex.Complex[] complexArray68 = laguerreSolver13.solveAll(doubleArray59, 1.030000009901E12d);
        // The following exception was thrown during execution in test generation
        try {
            double double71 = laguerreSolver13.solve((-4.84971121199599E14d), (-1.3716580925304711E31d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [-4.84971121199599E14,-1.3716580925304711E31]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(polynomialFunction12);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10001.0d + "'", double20 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction22);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10001.0d + "'", double39 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0E-6d + "'", double41 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.0E-14d + "'", double42 == 1.0E-14d);
        org.junit.Assert.assertNotNull(polynomialFunction43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10001.0d + "'", double49 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction51);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray62);
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
        org.junit.Assert.assertNotNull(complexArray68);
    }

    @Test
    public void test08177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08177");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((-161.0d));
        java.lang.Object[] objArray5 = functionEvaluationException4.getArguments();
        double double6 = functionEvaluationException4.getArgument();
        java.lang.Throwable[] throwableArray7 = functionEvaluationException4.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException(1001.0d, "org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) functionEvaluationException4);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException((-1.1744329731683375E66d), (java.lang.Throwable) functionEvaluationException4);
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[-161.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[-161.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-161.0d) + "'", double6 == (-161.0d));
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test08178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08178");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.asin();
        boolean boolean7 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex8 = complex3.negate();
        double double9 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex10.log();
        org.apache.commons.math.complex.Complex complex13 = complex10.sin();
        org.apache.commons.math.complex.Complex complex14 = complex10.log();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex16);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        double double20 = complex18.abs();
        org.apache.commons.math.complex.Complex complex21 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex17.subtract(complex22);
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex24.log();
        org.apache.commons.math.complex.Complex complex27 = complex24.sin();
        org.apache.commons.math.complex.Complex complex28 = complex24.log();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex24.divide(complex30);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.abs();
        org.apache.commons.math.complex.Complex complex35 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex36 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex37 = complex31.subtract(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex31.exp();
        org.apache.commons.math.complex.Complex complex39 = complex23.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        double double45 = complex43.abs();
        org.apache.commons.math.complex.Complex complex46 = complex43.conjugate();
        org.apache.commons.math.complex.Complex complex47 = complex41.divide(complex46);
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        org.apache.commons.math.complex.Complex complex50 = complex48.log();
        org.apache.commons.math.complex.Complex complex51 = complex48.sin();
        org.apache.commons.math.complex.Complex complex52 = complex48.log();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex complex55 = complex48.divide(complex54);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        double double58 = complex56.abs();
        org.apache.commons.math.complex.Complex complex59 = complex56.conjugate();
        org.apache.commons.math.complex.Complex complex60 = complex59.conjugate();
        org.apache.commons.math.complex.Complex complex61 = complex55.subtract(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex47.multiply(complex55);
        boolean boolean63 = complex55.isInfinite();
        org.apache.commons.math.complex.Complex complex64 = complex55.negate();
        org.apache.commons.math.complex.Complex complex65 = complex38.subtract(complex55);
        org.apache.commons.math.complex.Complex complex66 = complex3.subtract(complex65);
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        double double69 = complex67.abs();
        org.apache.commons.math.complex.Complex complex70 = complex67.conjugate();
        org.apache.commons.math.complex.Complex complex71 = complex70.conjugate();
        boolean boolean72 = complex70.isInfinite();
        org.apache.commons.math.complex.Complex complex73 = complex70.asin();
        boolean boolean74 = complex70.isNaN();
        org.apache.commons.math.complex.Complex complex75 = complex70.negate();
        org.apache.commons.math.complex.Complex complex76 = complex70.asin();
        org.apache.commons.math.complex.Complex complex77 = complex3.divide(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex79 = complex3.exp();
        org.apache.commons.math.complex.Complex complex80 = complex79.acos();
        org.apache.commons.math.complex.Complex complex81 = complex80.sin();
        boolean boolean82 = complex80.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.NEGATIVE_INFINITY + "'", double9 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + Double.POSITIVE_INFINITY + "'", double20 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + Double.POSITIVE_INFINITY + "'", double34 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + Double.POSITIVE_INFINITY + "'", double58 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + Double.POSITIVE_INFINITY + "'", double69 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test08179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08179");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction5 = polynomialFunction4.derivative();
        int int6 = polynomialFunction4.degree();
        int int7 = polynomialFunction4.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction4.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction4.derivative();
        int int10 = polynomialFunction4.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertNotNull(univariateRealFunction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(univariateRealFunction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test08180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08180");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray8);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException10 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray8);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException11 = new org.apache.commons.math.MaxIterationsExceededException((int) 'a', "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray8);
        int int12 = maxIterationsExceededException11.getMaxIterations();
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray16);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException18 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray16);
        int int19 = maxIterationsExceededException18.getMaxIterations();
        java.lang.String str20 = maxIterationsExceededException18.getPattern();
        maxIterationsExceededException11.addSuppressed((java.lang.Throwable) maxIterationsExceededException18);
        java.lang.Throwable[] throwableArray22 = maxIterationsExceededException18.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((-1000.0d), "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 52", (java.lang.Object[]) throwableArray22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(6.0d, (java.lang.Throwable) functionEvaluationException23);
        java.lang.String str25 = functionEvaluationException24.getPattern();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 52" + "'", str25, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 52");
    }

    @Test
    public void test08181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08181");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex6 = complex4.log();
        org.apache.commons.math.complex.Complex complex7 = complex4.sin();
        org.apache.commons.math.complex.Complex complex8 = complex4.log();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex4.divide(complex10);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        double double15 = complex13.getReal();
        org.apache.commons.math.complex.Complex complex16 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex4.pow(complex13);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex18.log();
        org.apache.commons.math.complex.Complex complex21 = complex20.cos();
        org.apache.commons.math.complex.Complex complex22 = complex13.multiply(complex20);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex23.pow(complex25);
        org.apache.commons.math.complex.Complex complex28 = complex22.multiply(complex23);
        org.apache.commons.math.complex.Complex complex29 = complex22.log();
        double double30 = complex22.getReal();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        double double33 = complex31.abs();
        org.apache.commons.math.complex.Complex complex34 = complex31.conjugate();
        org.apache.commons.math.complex.Complex complex35 = complex34.conjugate();
        boolean boolean36 = complex34.isInfinite();
        org.apache.commons.math.complex.Complex complex37 = complex34.cos();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.abs();
        org.apache.commons.math.complex.Complex complex41 = complex38.conjugate();
        org.apache.commons.math.complex.Complex complex42 = complex41.conjugate();
        boolean boolean43 = complex41.isInfinite();
        org.apache.commons.math.complex.Complex complex44 = complex41.asin();
        boolean boolean45 = complex41.isNaN();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex47 = complex46.cosh();
        org.apache.commons.math.complex.Complex complex48 = complex41.divide(complex46);
        org.apache.commons.math.complex.Complex complex49 = complex37.divide(complex46);
        org.apache.commons.math.complex.Complex complex50 = complex37.cos();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        double double53 = complex51.abs();
        org.apache.commons.math.complex.Complex complex54 = complex51.conjugate();
        org.apache.commons.math.complex.Complex complex55 = complex54.conjugate();
        org.apache.commons.math.complex.Complex complex56 = complex54.tanh();
        org.apache.commons.math.complex.Complex complex57 = complex56.tan();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        double double60 = complex58.abs();
        org.apache.commons.math.complex.Complex complex61 = complex58.conjugate();
        org.apache.commons.math.complex.Complex complex62 = complex61.conjugate();
        org.apache.commons.math.complex.Complex complex63 = complex57.subtract(complex61);
        org.apache.commons.math.complex.Complex complex64 = complex61.negate();
        org.apache.commons.math.complex.Complex complex65 = complex64.acos();
        boolean boolean66 = complex37.equals((java.lang.Object) complex65);
        org.apache.commons.math.complex.Complex complex67 = complex22.pow(complex65);
        org.apache.commons.math.complex.Complex complex68 = complex3.multiply(complex22);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + Double.POSITIVE_INFINITY + "'", double33 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + Double.POSITIVE_INFINITY + "'", double40 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + Double.POSITIVE_INFINITY + "'", double53 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
    }

    @Test
    public void test08182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08182");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.acos();
        double double3 = complex1.getReal();
        org.apache.commons.math.complex.Complex complex4 = complex1.tanh();
        double double5 = complex1.getImaginary();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.abs();
        org.apache.commons.math.complex.Complex complex9 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.conjugate();
        boolean boolean11 = complex9.isInfinite();
        org.apache.commons.math.complex.Complex complex12 = complex9.asin();
        org.apache.commons.math.complex.Complex complex13 = complex1.multiply(complex12);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.abs();
        org.apache.commons.math.complex.Complex complex17 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex17.tanh();
        org.apache.commons.math.complex.Complex complex20 = complex19.tan();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        double double23 = complex21.abs();
        org.apache.commons.math.complex.Complex complex24 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex24.conjugate();
        org.apache.commons.math.complex.Complex complex26 = complex20.subtract(complex24);
        org.apache.commons.math.complex.Complex complex27 = complex20.sinh();
        org.apache.commons.math.complex.Complex complex28 = complex27.acos();
        org.apache.commons.math.complex.Complex complex29 = complex27.tanh();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = complex32.sin();
        org.apache.commons.math.complex.Complex complex34 = complex30.pow(complex32);
        org.apache.commons.math.complex.Complex complex35 = complex34.asin();
        org.apache.commons.math.complex.Complex complex36 = complex35.atan();
        boolean boolean37 = complex36.isInfinite();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex39 = complex36.subtract(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex36.conjugate();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        double double44 = complex42.abs();
        org.apache.commons.math.complex.Complex complex45 = complex42.conjugate();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex47 = complex46.cosh();
        double double48 = complex46.abs();
        org.apache.commons.math.complex.Complex complex49 = complex46.conjugate();
        org.apache.commons.math.complex.Complex complex50 = complex49.conjugate();
        org.apache.commons.math.complex.Complex complex51 = complex49.tanh();
        org.apache.commons.math.complex.Complex complex52 = complex49.atan();
        org.apache.commons.math.complex.Complex complex53 = complex42.subtract(complex49);
        org.apache.commons.math.complex.Complex complex54 = complex42.tanh();
        org.apache.commons.math.complex.Complex complex55 = complex41.subtract(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex29.multiply(complex54);
        org.apache.commons.math.complex.Complex complex57 = complex1.multiply(complex56);
        boolean boolean58 = complex1.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.POSITIVE_INFINITY + "'", double8 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + Double.POSITIVE_INFINITY + "'", double23 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + Double.POSITIVE_INFINITY + "'", double48 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test08183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08183");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        double[] doubleArray5 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        int int8 = polynomialFunction7.degree();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = polynomialFunction7.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction7.derivative();
        java.lang.Class<?> wildcardClass11 = univariateRealFunction10.getClass();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(univariateRealFunction9);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test08184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08184");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        double double3 = complex2.getImaginary();
        double double4 = complex2.getImaginary();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex6.acos();
        double double8 = complex6.getReal();
        org.apache.commons.math.complex.Complex complex9 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex2.subtract(complex6);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.abs();
        org.apache.commons.math.complex.Complex complex14 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex14.conjugate();
        boolean boolean16 = complex14.isInfinite();
        org.apache.commons.math.complex.Complex complex17 = complex14.cos();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex2.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex21.acos();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex23.log();
        org.apache.commons.math.complex.Complex complex26 = complex23.sin();
        org.apache.commons.math.complex.Complex complex27 = complex26.tanh();
        org.apache.commons.math.complex.Complex complex28 = complex21.add(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.acos();
        org.apache.commons.math.complex.Complex complex30 = complex19.pow(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex19.exp();
        org.apache.commons.math.complex.Complex complex32 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex33 = complex32.asin();
        boolean boolean34 = complex32.isInfinite();
        org.apache.commons.math.complex.Complex complex35 = complex32.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.7853981633974483d + "'", double3 == 0.7853981633974483d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.7853981633974483d + "'", double4 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + Double.POSITIVE_INFINITY + "'", double13 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
    }

    @Test
    public void test08185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08185");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        boolean boolean6 = complex4.isNaN();
        org.apache.commons.math.complex.Complex complex7 = complex4.sin();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex8.pow(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.asin();
        org.apache.commons.math.complex.Complex complex14 = complex13.atan();
        boolean boolean15 = complex14.isInfinite();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex14.subtract(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex4.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex0.subtract(complex18);
        boolean boolean21 = complex18.isNaN();
        org.apache.commons.math.complex.Complex complex22 = complex18.acos();
        org.apache.commons.math.complex.Complex complex23 = complex18.acos();
        org.apache.commons.math.complex.Complex complex24 = complex23.log();
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
    }

    @Test
    public void test08186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08186");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-2.24308280799E11d), 10.0d);
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        org.apache.commons.math.complex.Complex complex5 = complex3.log();
        double double6 = complex3.getImaginary();
        double double7 = complex3.getImaginary();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex8.log();
        org.apache.commons.math.complex.Complex complex11 = complex10.cos();
        org.apache.commons.math.complex.Complex complex12 = complex10.exp();
        boolean boolean13 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.abs();
        org.apache.commons.math.complex.Complex complex17 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex17.tanh();
        org.apache.commons.math.complex.Complex complex20 = complex10.multiply(complex17);
        org.apache.commons.math.complex.Complex complex21 = complex17.acos();
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex21.sinh();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex complex28 = complex27.sin();
        org.apache.commons.math.complex.Complex complex29 = complex25.pow(complex27);
        org.apache.commons.math.complex.Complex complex30 = complex29.asin();
        org.apache.commons.math.complex.Complex complex31 = complex30.atan();
        boolean boolean32 = complex31.isInfinite();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex34 = complex31.subtract(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex complex36 = complex24.subtract(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex3.divide(complex35);
        org.apache.commons.math.complex.Complex complex38 = complex3.sqrt1z();
        org.apache.commons.math.complex.Complex complex39 = complex2.multiply(complex38);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + Double.POSITIVE_INFINITY + "'", double7 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
    }

    @Test
    public void test08187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08187");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.log();
        org.apache.commons.math.complex.Complex complex6 = complex3.exp();
        boolean boolean7 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex8 = complex3.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex3.cos();
        org.apache.commons.math.complex.Complex complex12 = new org.apache.commons.math.complex.Complex(350.0d, 134.0d);
        org.apache.commons.math.complex.Complex complex13 = complex12.asin();
        org.apache.commons.math.complex.Complex complex14 = complex9.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex20.tan();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex23.acos();
        double double25 = complex23.getReal();
        boolean boolean26 = complex21.equals((java.lang.Object) complex23);
        org.apache.commons.math.complex.Complex complex27 = complex19.subtract(complex23);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex30.sin();
        org.apache.commons.math.complex.Complex complex32 = complex28.pow(complex30);
        org.apache.commons.math.complex.Complex complex33 = complex32.asin();
        org.apache.commons.math.complex.Complex complex34 = complex33.atan();
        boolean boolean35 = complex34.isInfinite();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex37 = complex34.subtract(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex complex39 = complex27.pow(complex37);
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex41 = complex9.add(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
    }

    @Test
    public void test08188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08188");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        int int7 = polynomialFunction6.degree();
        int int8 = polynomialFunction6.degree();
        double double10 = polynomialFunction6.value((double) (byte) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction6.polynomialDerivative();
        int int12 = polynomialFunction11.degree();
        double double14 = polynomialFunction11.value(4.5126449834479465E48d);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction15 = polynomialFunction11.derivative();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 134.0d + "'", double10 == 134.0d);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-3.675813734281057E146d) + "'", double14 == (-3.675813734281057E146d));
        org.junit.Assert.assertNotNull(univariateRealFunction15);
    }

    @Test
    public void test08189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08189");
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: ", objArray13);
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray18);
        java.lang.Object[] objArray24 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException25 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray24);
        convergenceException19.addSuppressed((java.lang.Throwable) maxIterationsExceededException25);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray13, (java.lang.Throwable) maxIterationsExceededException25);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(10001.0d, "Maximal number of iterations ({0}) exceeded", (java.lang.Throwable) convergenceException29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((-99999.0d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) convergenceException29);
        double double32 = functionEvaluationException31.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException31);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException31);
        java.lang.String str35 = convergenceException34.getPattern();
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-99999.0d) + "'", double32 == (-99999.0d));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!" + "'", str35, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test08190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08190");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver9.resetMaximalIterationCount();
        laguerreSolver9.resetRelativeAccuracy();
        laguerreSolver9.resetFunctionValueAccuracy();
        laguerreSolver9.resetMaximalIterationCount();
        laguerreSolver9.setFunctionValueAccuracy((-0.009999997913837433d));
        double double19 = laguerreSolver9.solve(1.0E-15d, 5201.0d, (double) (byte) 100);
        laguerreSolver9.setFunctionValueAccuracy(148401.0d);
        laguerreSolver9.resetAbsoluteAccuracy();
        int int23 = laguerreSolver9.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.170609052699179d + "'", double19 == 10.170609052699179d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
    }

    @Test
    public void test08191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08191");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) (-1.0f));
        int int12 = laguerreSolver6.getMaximalIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = laguerreSolver6.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
    }

    @Test
    public void test08192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08192");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction5 = polynomialFunction4.derivative();
        int int6 = polynomialFunction4.degree();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        int int8 = polynomialFunction4.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction4.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction9.polynomialDerivative();
        int int11 = polynomialFunction10.degree();
        double double13 = polynomialFunction10.value((-9.99989899E8d));
        int int14 = polynomialFunction10.degree();
        double[] doubleArray15 = polynomialFunction10.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertNotNull(univariateRealFunction5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[0.0]");
    }

    @Test
    public void test08193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08193");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.abs();
        org.apache.commons.math.complex.Complex complex6 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex8.tan();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        double double13 = complex11.getReal();
        boolean boolean14 = complex9.equals((java.lang.Object) complex11);
        org.apache.commons.math.complex.Complex complex15 = complex7.subtract(complex11);
        org.apache.commons.math.complex.Complex complex16 = complex11.exp();
        org.apache.commons.math.complex.Complex complex17 = complex0.divide(complex11);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex18.divide(complex23);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex25.log();
        org.apache.commons.math.complex.Complex complex28 = complex25.sin();
        org.apache.commons.math.complex.Complex complex29 = complex25.log();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex complex32 = complex25.divide(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.abs();
        org.apache.commons.math.complex.Complex complex36 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex37 = complex36.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex32.subtract(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex24.multiply(complex32);
        boolean boolean40 = complex32.isInfinite();
        org.apache.commons.math.complex.Complex complex41 = complex32.negate();
        org.apache.commons.math.complex.Complex complex42 = complex41.negate();
        org.apache.commons.math.complex.Complex complex43 = complex0.multiply(complex42);
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex47 = complex46.cosh();
        double double48 = complex46.abs();
        org.apache.commons.math.complex.Complex complex49 = complex46.conjugate();
        org.apache.commons.math.complex.Complex complex50 = complex44.divide(complex49);
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex51.log();
        org.apache.commons.math.complex.Complex complex54 = complex51.sin();
        org.apache.commons.math.complex.Complex complex55 = complex51.log();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex complex58 = complex51.divide(complex57);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        double double61 = complex59.abs();
        org.apache.commons.math.complex.Complex complex62 = complex59.conjugate();
        org.apache.commons.math.complex.Complex complex63 = complex62.conjugate();
        org.apache.commons.math.complex.Complex complex64 = complex58.subtract(complex63);
        org.apache.commons.math.complex.Complex complex65 = complex50.multiply(complex58);
        boolean boolean66 = complex58.isInfinite();
        org.apache.commons.math.complex.Complex complex67 = complex58.negate();
        org.apache.commons.math.complex.Complex complex68 = complex58.sqrt();
        org.apache.commons.math.complex.Complex complex69 = complex0.pow(complex68);
        org.apache.commons.math.complex.Complex complex70 = complex68.conjugate();
        double double71 = complex68.getReal();
        org.apache.commons.math.complex.Complex complex72 = complex68.sinh();
        org.apache.commons.math.complex.Complex complex73 = complex72.sinh();
        org.apache.commons.math.complex.Complex complex74 = complex73.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + Double.POSITIVE_INFINITY + "'", double48 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + Double.POSITIVE_INFINITY + "'", double61 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
    }

    @Test
    public void test08194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08194");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = complex1.sin();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex5 = complex4.sin();
        org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex4);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.apache.commons.math.complex.Complex complex9 = complex1.subtract(complex7);
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt1z();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex11.log();
        org.apache.commons.math.complex.Complex complex14 = complex13.cos();
        org.apache.commons.math.complex.Complex complex15 = complex13.exp();
        boolean boolean16 = complex13.isNaN();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.abs();
        org.apache.commons.math.complex.Complex complex20 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex20.tanh();
        org.apache.commons.math.complex.Complex complex23 = complex13.multiply(complex20);
        org.apache.commons.math.complex.Complex complex24 = complex20.acos();
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex24.sinh();
        org.apache.commons.math.complex.Complex complex27 = complex26.conjugate();
        org.apache.commons.math.complex.Complex complex28 = complex10.add(complex26);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + Double.POSITIVE_INFINITY + "'", double19 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test08195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08195");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.resetMaximalIterationCount();
        double double14 = laguerreSolver6.getResult();
        double double15 = laguerreSolver6.getAbsoluteAccuracy();
        double double16 = laguerreSolver6.getResult();
        int int17 = laguerreSolver6.getMaximalIterationCount();
        int int18 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setRelativeAccuracy(1.0000000001255978d);
        int int22 = laguerreSolver6.getIterationCount();
        double double23 = laguerreSolver6.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-0.01d) + "'", double14 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-6d + "'", double15 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.01d) + "'", double16 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0E-6d + "'", double23 == 1.0E-6d);
    }

    @Test
    public void test08196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08196");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((-0.7853981633974483d), "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (3) exceeded");
    }

    @Test
    public void test08197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08197");
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray15);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray15);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException18 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray15);
        java.lang.Throwable throwable19 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) 10L, "org.apache.commons.math.ConvergenceException: ", objArray15, throwable19);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) 10L);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((-1.0003990597689866E16d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray15, (java.lang.Throwable) functionEvaluationException22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((-8.7584986E7d), "org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}", objArray15);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: hi!", objArray15);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(0.8760844767819809d, "Maximal number of iterations ({0}) exceeded", (java.lang.Throwable) convergenceException25);
        java.lang.Throwable[] throwableArray27 = convergenceException25.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 350", (java.lang.Object[]) throwableArray27);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(throwableArray27);
    }

    @Test
    public void test08198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08198");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((-9.631547407031818E12d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ");
        double double3 = functionEvaluationException2.getArgument();
        double double4 = functionEvaluationException2.getArgument();
        java.lang.String str5 = functionEvaluationException2.getPattern();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-9.631547407031818E12d) + "'", double3 == (-9.631547407031818E12d));
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-9.631547407031818E12d) + "'", double4 == (-9.631547407031818E12d));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: " + "'", str5, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test08199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08199");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        double double11 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setMaximalIterationCount((int) '#');
        double double16 = laguerreSolver6.solve((-2.531519208223786E37d), 134.38542066944183d);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = laguerreSolver6.solve((double) (byte) 1, (-2.8318067459409795E26d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.0,-2.8318067459409795E26]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-6d + "'", double11 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.01d) + "'", double16 == (-0.01d));
    }

    @Test
    public void test08200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08200");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.acos();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex7.tan();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex11.log();
        org.apache.commons.math.complex.Complex complex14 = complex11.sin();
        org.apache.commons.math.complex.Complex complex15 = complex11.log();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = complex11.divide(complex17);
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        double double21 = complex19.abs();
        org.apache.commons.math.complex.Complex complex22 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex22.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex18.subtract(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex18.exp();
        org.apache.commons.math.complex.Complex complex26 = complex18.tan();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex28.acos();
        double double30 = complex28.getReal();
        org.apache.commons.math.complex.Complex complex31 = complex28.tanh();
        double double32 = complex28.getImaginary();
        org.apache.commons.math.complex.Complex complex33 = complex18.divide(complex28);
        org.apache.commons.math.complex.Complex complex34 = complex33.asin();
        org.apache.commons.math.complex.Complex complex35 = complex33.cosh();
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("");
        java.lang.Object[] objArray43 = convergenceException42.getArguments();
        java.lang.Object[] objArray51 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException52 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray51);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException53 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray51);
        java.lang.Object[] objArray56 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("", objArray56);
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("", objArray59);
        org.apache.commons.math.ConvergenceException convergenceException61 = new org.apache.commons.math.ConvergenceException("", objArray56, (java.lang.Throwable) convergenceException60);
        org.apache.commons.math.ConvergenceException convergenceException62 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray51, (java.lang.Throwable) convergenceException60);
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray43, (java.lang.Throwable) convergenceException62);
        java.lang.String str64 = convergenceException62.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException62);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException62);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) convergenceException62);
        java.lang.Object[] objArray68 = functionEvaluationException67.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException69 = new org.apache.commons.math.FunctionEvaluationException((double) 1, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray68);
        boolean boolean70 = complex35.equals((java.lang.Object) 1);
        org.apache.commons.math.complex.Complex complex71 = complex35.asin();
        org.apache.commons.math.complex.Complex complex72 = complex9.multiply(complex35);
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex74 = complex73.cosh();
        org.apache.commons.math.complex.Complex complex75 = complex73.log();
        org.apache.commons.math.complex.Complex complex76 = complex75.cos();
        double double77 = complex76.abs();
        org.apache.commons.math.complex.Complex complex78 = complex76.sqrt();
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex80 = complex79.sqrt();
        boolean boolean81 = complex79.isNaN();
        double double82 = complex79.getReal();
        boolean boolean83 = complex79.isNaN();
        org.apache.commons.math.complex.Complex complex84 = complex79.asin();
        org.apache.commons.math.complex.Complex complex85 = complex78.pow(complex84);
        org.apache.commons.math.complex.Complex complex86 = complex85.tan();
        org.apache.commons.math.complex.Complex complex87 = complex86.negate();
        org.apache.commons.math.complex.Complex complex88 = complex86.log();
        org.apache.commons.math.complex.Complex complex89 = complex86.sinh();
        org.apache.commons.math.complex.Complex complex90 = complex35.divide(complex86);
        double double91 = complex86.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + Double.POSITIVE_INFINITY + "'", double21 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: " + "'", str64, "org.apache.commons.math.FunctionEvaluationException: ");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + Double.POSITIVE_INFINITY + "'", double82 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
    }

    @Test
    public void test08201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08201");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        double double13 = laguerreSolver6.getAbsoluteAccuracy();
        double double14 = laguerreSolver6.getFunctionValueAccuracy();
        double double18 = laguerreSolver6.solve((double) (-1.0f), (double) '4', (double) 1);
        laguerreSolver6.setRelativeAccuracy(0.0d);
        double double21 = laguerreSolver6.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-6d + "'", double13 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.01d) + "'", double18 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test08202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08202");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray14, 101.0d);
        int int19 = laguerreSolver6.getMaximalIterationCount();
        double double22 = laguerreSolver6.solve((-1.6365376E7d), (-0.01d));
        laguerreSolver6.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-0.01d) + "'", double22 == (-0.01d));
    }

    @Test
    public void test08203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08203");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        double[] doubleArray15 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        double double18 = polynomialFunction16.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver19 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction16);
        double double23 = laguerreSolver19.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver19.setMaximalIterationCount((int) '#');
        double double26 = laguerreSolver19.getAbsoluteAccuracy();
        laguerreSolver19.setFunctionValueAccuracy((double) (short) -1);
        laguerreSolver19.setRelativeAccuracy((double) (short) 100);
        laguerreSolver19.setRelativeAccuracy((-7.173051538824589E28d));
        laguerreSolver19.setFunctionValueAccuracy(101.01d);
        double[] doubleArray37 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction38 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray40 = laguerreSolver19.solveAll(doubleArray37, (-2.036018575079906E67d));
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex42 = complex41.cosh();
        org.apache.commons.math.complex.Complex complex43 = complex41.log();
        org.apache.commons.math.complex.Complex complex44 = complex43.cos();
        double double45 = complex44.abs();
        org.apache.commons.math.complex.Complex complex46 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex49 = complex48.sqrt();
        org.apache.commons.math.complex.Complex complex50 = complex49.sin();
        org.apache.commons.math.complex.Complex complex51 = complex47.pow(complex49);
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        org.apache.commons.math.complex.Complex complex54 = complex52.log();
        org.apache.commons.math.complex.Complex complex55 = complex47.divide(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex46.subtract(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex46.conjugate();
        org.apache.commons.math.complex.Complex complex58 = complex46.cos();
        org.apache.commons.math.complex.Complex complex59 = complex58.sqrt();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex63 = complex62.cosh();
        org.apache.commons.math.complex.Complex complex64 = complex62.log();
        org.apache.commons.math.complex.Complex complex65 = complex62.sin();
        org.apache.commons.math.complex.Complex complex66 = complex62.log();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math.complex.Complex complex69 = complex62.divide(complex68);
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        org.apache.commons.math.complex.Complex complex72 = complex71.acos();
        double double73 = complex71.getReal();
        org.apache.commons.math.complex.Complex complex74 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex75 = complex62.pow(complex71);
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex77 = complex76.cosh();
        org.apache.commons.math.complex.Complex complex78 = complex76.log();
        org.apache.commons.math.complex.Complex complex79 = complex78.cos();
        org.apache.commons.math.complex.Complex complex80 = complex71.multiply(complex78);
        org.apache.commons.math.complex.Complex complex81 = complex78.tanh();
        org.apache.commons.math.complex.Complex complex82 = complex60.divide(complex78);
        org.apache.commons.math.complex.Complex complex83 = complex59.pow(complex78);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex[] complexArray84 = laguerreSolver12.solveAll(complexArray40, complex83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10001.0d + "'", double18 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.01d) + "'", double23 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.0E-6d + "'", double26 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
    }

    @Test
    public void test08204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08204");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.sin();
        boolean boolean9 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        boolean boolean11 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex12 = complex10.tanh();
        double double13 = complex10.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test08205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08205");
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException1 = new org.apache.commons.math.MaxIterationsExceededException(18);
        int int2 = maxIterationsExceededException1.getMaxIterations();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 18 + "'", int2 == 18);
    }

    @Test
    public void test08206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08206");
        java.lang.Object[] objArray12 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException13 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException14 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray12);
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray19);
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray19, (java.lang.Throwable) convergenceException23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray19, (java.lang.Throwable) functionEvaluationException26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "org.apache.commons.math.ConvergenceException: hi!", objArray12, (java.lang.Throwable) functionEvaluationException27);
        double double29 = functionEvaluationException27.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) functionEvaluationException27);
        java.lang.Throwable[] throwableArray31 = functionEvaluationException27.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException(1.0E-6d);
        java.lang.Object[] objArray34 = functionEvaluationException33.getArguments();
        functionEvaluationException27.addSuppressed((java.lang.Throwable) functionEvaluationException33);
        java.lang.Object[] objArray36 = functionEvaluationException27.getArguments();
        java.lang.Throwable[] throwableArray37 = functionEvaluationException27.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Throwable) functionEvaluationException27);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException41 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) -1);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException41);
        int int43 = maxIterationsExceededException41.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("Evaluation failed for argument = -161", (java.lang.Throwable) maxIterationsExceededException41);
        functionEvaluationException27.addSuppressed((java.lang.Throwable) convergenceException44);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException46 = new org.apache.commons.math.FunctionEvaluationException(1.0222474227427E13d, "org.apache.commons.math.ConvergenceException", (java.lang.Throwable) convergenceException44);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[1.0E-6]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[1.0E-6]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test08207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08207");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.asin();
        boolean boolean7 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex3.divide(complex8);
        org.apache.commons.math.complex.Complex complex13 = new org.apache.commons.math.complex.Complex((double) (-1L), Double.POSITIVE_INFINITY);
        org.apache.commons.math.complex.Complex complex14 = complex13.exp();
        double double15 = complex14.abs();
        org.apache.commons.math.complex.Complex complex16 = complex8.pow(complex14);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test08208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08208");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        double double3 = complex0.getImaginary();
        double double4 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex5.divide(complex10);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex12.log();
        org.apache.commons.math.complex.Complex complex15 = complex12.sin();
        org.apache.commons.math.complex.Complex complex16 = complex12.log();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = complex12.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex19.subtract(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex11.multiply(complex19);
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex27.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.cos();
        double double31 = complex30.abs();
        org.apache.commons.math.complex.Complex complex32 = complex30.sqrt();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex complex36 = complex35.sin();
        org.apache.commons.math.complex.Complex complex37 = complex33.pow(complex35);
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex38.log();
        org.apache.commons.math.complex.Complex complex41 = complex33.divide(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex32.subtract(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex19.pow(complex32);
        org.apache.commons.math.complex.Complex complex44 = complex32.exp();
        org.apache.commons.math.complex.Complex complex45 = complex32.sinh();
        org.apache.commons.math.complex.Complex complex46 = complex45.tanh();
        org.apache.commons.math.complex.Complex complex47 = complex46.conjugate();
        org.apache.commons.math.complex.Complex complex48 = complex46.tan();
        org.apache.commons.math.complex.Complex complex49 = complex0.subtract(complex48);
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        double double54 = complex52.abs();
        org.apache.commons.math.complex.Complex complex55 = complex52.conjugate();
        org.apache.commons.math.complex.Complex complex56 = complex50.divide(complex55);
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        org.apache.commons.math.complex.Complex complex59 = complex57.log();
        org.apache.commons.math.complex.Complex complex60 = complex59.cos();
        org.apache.commons.math.complex.Complex complex61 = complex59.exp();
        boolean boolean62 = complex59.isNaN();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        double double65 = complex63.abs();
        org.apache.commons.math.complex.Complex complex66 = complex63.conjugate();
        org.apache.commons.math.complex.Complex complex67 = complex66.conjugate();
        org.apache.commons.math.complex.Complex complex68 = complex66.tanh();
        org.apache.commons.math.complex.Complex complex69 = complex59.multiply(complex66);
        boolean boolean70 = complex55.equals((java.lang.Object) complex69);
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex complex74 = complex73.sin();
        org.apache.commons.math.complex.Complex complex75 = complex71.pow(complex73);
        org.apache.commons.math.complex.Complex complex76 = complex75.asin();
        org.apache.commons.math.complex.Complex complex77 = complex76.atan();
        boolean boolean78 = complex77.isInfinite();
        double double79 = complex77.getImaginary();
        double[] doubleArray85 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction86 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray85);
        int int87 = polynomialFunction86.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction88 = polynomialFunction86.polynomialDerivative();
        boolean boolean89 = complex77.equals((java.lang.Object) polynomialFunction88);
        org.apache.commons.math.complex.Complex complex90 = complex55.subtract(complex77);
        org.apache.commons.math.complex.Complex complex91 = complex77.cos();
        org.apache.commons.math.complex.Complex complex92 = complex0.divide(complex77);
        org.apache.commons.math.complex.Complex complex93 = complex77.asin();
        org.apache.commons.math.complex.Complex complex94 = complex93.cosh();
        org.apache.commons.math.complex.Complex complex95 = complex93.tanh();
        org.apache.commons.math.complex.Complex complex96 = complex93.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + Double.POSITIVE_INFINITY + "'", double3 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + Double.POSITIVE_INFINITY + "'", double4 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + Double.POSITIVE_INFINITY + "'", double54 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + Double.POSITIVE_INFINITY + "'", double65 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 4 + "'", int87 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
    }

    @Test
    public void test08209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08209");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex7);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex14.sin();
        org.apache.commons.math.complex.Complex complex16 = complex12.pow(complex14);
        org.apache.commons.math.complex.Complex complex17 = complex16.asin();
        org.apache.commons.math.complex.Complex complex18 = complex17.atan();
        boolean boolean19 = complex18.isInfinite();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex18.subtract(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex18.tan();
        org.apache.commons.math.complex.Complex complex24 = complex11.pow(complex23);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        boolean boolean27 = complex25.isNaN();
        org.apache.commons.math.complex.Complex complex28 = complex25.tanh();
        org.apache.commons.math.complex.Complex complex29 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        double double32 = complex30.abs();
        org.apache.commons.math.complex.Complex complex33 = complex30.conjugate();
        org.apache.commons.math.complex.Complex complex34 = complex33.conjugate();
        boolean boolean35 = complex33.isInfinite();
        org.apache.commons.math.complex.Complex complex36 = complex33.cos();
        org.apache.commons.math.complex.Complex complex37 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex33.sin();
        boolean boolean39 = complex33.isNaN();
        org.apache.commons.math.complex.Complex complex40 = complex33.atan();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = complex43.sin();
        org.apache.commons.math.complex.Complex complex45 = complex41.pow(complex43);
        org.apache.commons.math.complex.Complex complex46 = complex45.asin();
        org.apache.commons.math.complex.Complex complex47 = complex46.atan();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        boolean boolean50 = complex47.equals((java.lang.Object) complex48);
        org.apache.commons.math.complex.Complex complex51 = complex47.conjugate();
        org.apache.commons.math.complex.Complex complex52 = complex33.pow(complex47);
        org.apache.commons.math.complex.Complex complex53 = complex47.atan();
        org.apache.commons.math.complex.Complex complex54 = complex25.divide(complex53);
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex complex58 = complex57.sin();
        org.apache.commons.math.complex.Complex complex59 = complex55.pow(complex57);
        org.apache.commons.math.complex.Complex complex60 = complex55.exp();
        org.apache.commons.math.complex.Complex complex61 = complex60.exp();
        org.apache.commons.math.complex.Complex complex62 = complex25.divide(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex23.multiply(complex25);
        org.apache.commons.math.complex.Complex complex64 = complex23.atan();
        org.apache.commons.math.complex.Complex complex65 = complex64.sinh();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        org.apache.commons.math.complex.Complex complex68 = complex66.log();
        org.apache.commons.math.complex.Complex complex69 = complex66.sin();
        org.apache.commons.math.complex.Complex complex70 = complex66.log();
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = complex66.divide(complex72);
        org.apache.commons.math.complex.Complex complex74 = complex65.subtract(complex73);
        double double75 = complex65.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + Double.POSITIVE_INFINITY + "'", double32 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
    }

    @Test
    public void test08210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08210");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver6.getPolynomialFunction();
        double double13 = polynomialFunction11.value((double) (short) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver14 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = polynomialFunction11.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = polynomialFunction15.polynomialDerivative();
        double double18 = polynomialFunction15.value((-6.8261426196981E247d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
    }

    @Test
    public void test08211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08211");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(101.0d, (double) 4);
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        org.junit.Assert.assertNotNull(complex3);
    }

    @Test
    public void test08212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08212");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.asin();
        boolean boolean7 = complex3.isNaN();
        double double8 = complex3.getReal();
        org.apache.commons.math.complex.Complex complex9 = complex3.sinh();
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.atan();
        java.lang.Object obj12 = null;
        boolean boolean13 = complex10.equals(obj12);
        java.lang.Class<?> wildcardClass14 = complex10.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.POSITIVE_INFINITY + "'", double8 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test08213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08213");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex10.negate();
        org.apache.commons.math.complex.Complex complex14 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        boolean boolean21 = complex19.isNaN();
        org.apache.commons.math.complex.Complex complex22 = complex19.sin();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex23.pow(complex25);
        org.apache.commons.math.complex.Complex complex28 = complex27.asin();
        org.apache.commons.math.complex.Complex complex29 = complex28.atan();
        boolean boolean30 = complex29.isInfinite();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex29.subtract(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex32.sin();
        org.apache.commons.math.complex.Complex complex34 = complex19.divide(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex15.subtract(complex33);
        boolean boolean36 = complex10.equals((java.lang.Object) complex33);
        org.apache.commons.math.complex.Complex complex37 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex38 = complex10.sqrt1z();
        org.apache.commons.math.complex.Complex complex39 = complex38.conjugate();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        double double42 = complex40.abs();
        org.apache.commons.math.complex.Complex complex43 = complex40.conjugate();
        org.apache.commons.math.complex.Complex complex44 = complex43.conjugate();
        boolean boolean45 = complex43.isInfinite();
        org.apache.commons.math.complex.Complex complex46 = complex43.cos();
        org.apache.commons.math.complex.Complex complex47 = complex43.conjugate();
        org.apache.commons.math.complex.Complex complex48 = complex43.sin();
        boolean boolean49 = complex43.isNaN();
        org.apache.commons.math.complex.Complex complex50 = complex43.atan();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex53 = complex52.sqrt();
        org.apache.commons.math.complex.Complex complex54 = complex53.sin();
        org.apache.commons.math.complex.Complex complex55 = complex51.pow(complex53);
        org.apache.commons.math.complex.Complex complex56 = complex55.asin();
        org.apache.commons.math.complex.Complex complex57 = complex56.atan();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        boolean boolean60 = complex57.equals((java.lang.Object) complex58);
        org.apache.commons.math.complex.Complex complex61 = complex57.conjugate();
        org.apache.commons.math.complex.Complex complex62 = complex43.pow(complex57);
        org.apache.commons.math.complex.Complex complex63 = complex57.atan();
        org.apache.commons.math.complex.Complex complex64 = complex57.log();
        org.apache.commons.math.complex.Complex complex65 = complex39.add(complex57);
        org.apache.commons.math.complex.Complex complex66 = complex39.sinh();
        boolean boolean67 = complex66.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + Double.POSITIVE_INFINITY + "'", double42 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test08214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08214");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex7.exp();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex15.pow(complex17);
        org.apache.commons.math.complex.Complex complex20 = complex19.asin();
        org.apache.commons.math.complex.Complex complex21 = complex20.atan();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        boolean boolean24 = complex21.equals((java.lang.Object) complex22);
        org.apache.commons.math.complex.Complex complex25 = complex7.divide(complex22);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex27.acos();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        org.apache.commons.math.complex.Complex complex31 = complex29.log();
        org.apache.commons.math.complex.Complex complex32 = complex29.sin();
        org.apache.commons.math.complex.Complex complex33 = complex32.tanh();
        org.apache.commons.math.complex.Complex complex34 = complex27.add(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex34.exp();
        org.apache.commons.math.complex.Complex complex36 = complex7.multiply(complex35);
        double double37 = complex35.getImaginary();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.abs();
        org.apache.commons.math.complex.Complex complex41 = complex38.conjugate();
        org.apache.commons.math.complex.Complex complex42 = complex41.conjugate();
        org.apache.commons.math.complex.Complex complex43 = complex41.tanh();
        org.apache.commons.math.complex.Complex complex44 = complex43.tan();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        double double47 = complex45.abs();
        org.apache.commons.math.complex.Complex complex48 = complex45.conjugate();
        org.apache.commons.math.complex.Complex complex49 = complex48.conjugate();
        org.apache.commons.math.complex.Complex complex50 = complex44.subtract(complex48);
        org.apache.commons.math.complex.Complex complex51 = complex48.negate();
        org.apache.commons.math.complex.Complex complex52 = complex48.tanh();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex complex55 = complex53.log();
        org.apache.commons.math.complex.Complex complex56 = complex55.cos();
        double double57 = complex56.abs();
        org.apache.commons.math.complex.Complex complex58 = complex56.sqrt();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex62 = complex61.sin();
        org.apache.commons.math.complex.Complex complex63 = complex59.pow(complex61);
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex complex66 = complex64.log();
        org.apache.commons.math.complex.Complex complex67 = complex59.divide(complex66);
        org.apache.commons.math.complex.Complex complex68 = complex58.subtract(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex58.conjugate();
        org.apache.commons.math.complex.Complex complex70 = complex58.cos();
        org.apache.commons.math.complex.Complex complex71 = complex70.negate();
        boolean boolean72 = complex48.equals((java.lang.Object) complex70);
        org.apache.commons.math.complex.Complex complex73 = complex35.subtract(complex48);
        org.apache.commons.math.complex.Complex complex74 = complex48.sqrt1z();
        double double75 = complex48.getImaginary();
        org.apache.commons.math.complex.Complex complex76 = complex48.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + Double.POSITIVE_INFINITY + "'", double40 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + Double.POSITIVE_INFINITY + "'", double47 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + Double.NEGATIVE_INFINITY + "'", double75 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex76);
    }

    @Test
    public void test08215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08215");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = laguerreSolver6.solveAll(doubleArray14, 10001.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = polynomialFunction18.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver20 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction19);
        laguerreSolver20.setAbsoluteAccuracy(1.03000000990101E14d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(polynomialFunction19);
    }

    @Test
    public void test08216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08216");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex7.exp();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.sqrt();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex15.pow(complex17);
        org.apache.commons.math.complex.Complex complex20 = complex19.asin();
        org.apache.commons.math.complex.Complex complex21 = complex20.atan();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        boolean boolean24 = complex21.equals((java.lang.Object) complex22);
        org.apache.commons.math.complex.Complex complex25 = complex7.divide(complex22);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.log();
        org.apache.commons.math.complex.Complex complex29 = complex28.cos();
        org.apache.commons.math.complex.Complex complex30 = complex28.exp();
        boolean boolean31 = complex28.isNaN();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.abs();
        org.apache.commons.math.complex.Complex complex35 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex36 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex37 = complex35.tanh();
        org.apache.commons.math.complex.Complex complex38 = complex28.multiply(complex35);
        org.apache.commons.math.complex.Complex complex39 = complex22.add(complex28);
        org.apache.commons.math.complex.Complex complex40 = complex22.asin();
        org.apache.commons.math.complex.Complex complex41 = complex22.asin();
        double double42 = complex41.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + Double.POSITIVE_INFINITY + "'", double34 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
    }

    @Test
    public void test08217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08217");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex4.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        boolean boolean14 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex6.pow(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex15.tanh();
        org.apache.commons.math.complex.Complex complex20 = complex15.cos();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex21.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.cos();
        org.apache.commons.math.complex.Complex complex25 = complex23.exp();
        boolean boolean26 = complex23.isNaN();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        double double29 = complex27.abs();
        org.apache.commons.math.complex.Complex complex30 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex30.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex30.tanh();
        org.apache.commons.math.complex.Complex complex33 = complex23.multiply(complex30);
        org.apache.commons.math.complex.Complex complex34 = complex30.acos();
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex34.sqrt1z();
        org.apache.commons.math.complex.Complex complex37 = complex34.tan();
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        boolean boolean39 = complex20.equals((java.lang.Object) complex37);
        org.apache.commons.math.complex.Complex complex40 = complex37.exp();
        boolean boolean41 = complex40.isInfinite();
        org.apache.commons.math.complex.Complex complex42 = complex40.log();
        org.apache.commons.math.complex.Complex complex43 = complex40.asin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + Double.POSITIVE_INFINITY + "'", double29 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
    }

    @Test
    public void test08218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08218");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.acos();
        double double10 = complex8.getReal();
        boolean boolean11 = complex6.equals((java.lang.Object) complex8);
        org.apache.commons.math.complex.Complex complex12 = complex4.subtract(complex8);
        org.apache.commons.math.complex.Complex complex13 = complex8.exp();
        boolean boolean14 = complex13.isInfinite();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex16.acos();
        double double18 = complex16.getReal();
        org.apache.commons.math.complex.Complex complex19 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex13.multiply(complex19);
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex23.sin();
        org.apache.commons.math.complex.Complex complex25 = complex21.pow(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex25.asin();
        org.apache.commons.math.complex.Complex complex27 = complex26.atan();
        boolean boolean28 = complex27.isInfinite();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex30 = complex27.subtract(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.abs();
        org.apache.commons.math.complex.Complex complex36 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        double double39 = complex37.abs();
        org.apache.commons.math.complex.Complex complex40 = complex37.conjugate();
        org.apache.commons.math.complex.Complex complex41 = complex40.conjugate();
        org.apache.commons.math.complex.Complex complex42 = complex40.tanh();
        org.apache.commons.math.complex.Complex complex43 = complex40.atan();
        org.apache.commons.math.complex.Complex complex44 = complex33.subtract(complex40);
        org.apache.commons.math.complex.Complex complex45 = complex33.tanh();
        org.apache.commons.math.complex.Complex complex46 = complex32.subtract(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.sinh();
        org.apache.commons.math.complex.Complex complex48 = complex20.divide(complex45);
        double double49 = complex45.getImaginary();
        double double50 = complex45.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + Double.POSITIVE_INFINITY + "'", double39 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
    }

    @Test
    public void test08219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08219");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        double double11 = laguerreSolver6.getResult();
        double double12 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        double double14 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setAbsoluteAccuracy((double) 0L);
        laguerreSolver6.setMaximalIterationCount((int) 'a');
        laguerreSolver6.resetRelativeAccuracy();
        double double20 = laguerreSolver6.getRelativeAccuracy();
        int int21 = laguerreSolver6.getIterationCount();
        int int22 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.01d) + "'", double11 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-14d + "'", double20 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
    }

    @Test
    public void test08220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08220");
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException14 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray12, (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException18 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray12);
        int int21 = maxIterationsExceededException20.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException(1.0E-15d, (java.lang.Throwable) maxIterationsExceededException20);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test08221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08221");
        double[] doubleArray6 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray6);
        double double9 = polynomialFunction7.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver10 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction7);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = laguerreSolver10.getPolynomialFunction();
        laguerreSolver10.resetRelativeAccuracy();
        double[] doubleArray18 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray18);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray18);
        org.apache.commons.math.complex.Complex[] complexArray22 = laguerreSolver10.solveAll(doubleArray18, 101.0d);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        java.lang.Object[] objArray27 = functionEvaluationException26.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException28 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) -1, "", objArray27);
        java.lang.Object[] objArray29 = maxIterationsExceededException28.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", (java.lang.Object[]) complexArray22, (java.lang.Throwable) maxIterationsExceededException28);
        java.lang.Object[] objArray31 = convergenceException30.getArguments();
        java.lang.Object[] objArray38 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray38);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray38);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException41 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray38);
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("", objArray48);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray48);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException51 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray48);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) maxIterationsExceededException51);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("", objArray38, (java.lang.Throwable) functionEvaluationException52);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray31, (java.lang.Throwable) functionEvaluationException52);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException55 = new org.apache.commons.math.MaxIterationsExceededException(1, "org.apache.commons.math.ConvergenceException: Evaluation failed for argument = -161", objArray31);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10001.0d + "'", double9 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[100.0]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[100.0]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
    }

    @Test
    public void test08222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08222");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        double double11 = laguerreSolver6.getResult();
        int int12 = laguerreSolver6.getIterationCount();
        int int13 = laguerreSolver6.getMaximalIterationCount();
        double double14 = laguerreSolver6.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.01d) + "'", double11 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
    }

    @Test
    public void test08223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08223");
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("");
        java.lang.Object[] objArray7 = convergenceException6.getArguments();
        java.lang.Object[] objArray15 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException16 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray15);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException17 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray15);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray20);
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray20, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray15, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray7, (java.lang.Throwable) convergenceException26);
        java.lang.String str28 = convergenceException26.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException26);
        java.lang.Object[] objArray30 = convergenceException26.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException((double) ' ', "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", objArray30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray30);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: " + "'", str28, "org.apache.commons.math.FunctionEvaluationException: ");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[0.0, 1]");
    }

    @Test
    public void test08224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08224");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex13.atan();
        org.apache.commons.math.complex.Complex complex15 = complex13.sinh();
        org.apache.commons.math.complex.Complex complex16 = complex13.tan();
        org.apache.commons.math.complex.Complex complex17 = complex13.tan();
        org.apache.commons.math.complex.Complex complex18 = complex13.acos();
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex20.log();
        org.apache.commons.math.complex.Complex complex23 = complex22.cos();
        org.apache.commons.math.complex.Complex complex24 = complex22.exp();
        boolean boolean25 = complex22.isNaN();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        double double28 = complex26.abs();
        org.apache.commons.math.complex.Complex complex29 = complex26.conjugate();
        org.apache.commons.math.complex.Complex complex30 = complex29.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex29.tanh();
        org.apache.commons.math.complex.Complex complex32 = complex22.multiply(complex29);
        org.apache.commons.math.complex.Complex complex33 = complex29.acos();
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex33.sqrt1z();
        org.apache.commons.math.complex.Complex complex36 = complex33.tan();
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.abs();
        org.apache.commons.math.complex.Complex complex41 = complex38.conjugate();
        org.apache.commons.math.complex.Complex complex42 = complex36.divide(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex19.pow(complex36);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + Double.POSITIVE_INFINITY + "'", double28 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + Double.POSITIVE_INFINITY + "'", double40 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
    }

    @Test
    public void test08225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08225");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        laguerreSolver6.setMaximalIterationCount((int) (byte) -1);
        laguerreSolver6.resetFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetMaximalIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = laguerreSolver6.solve(131.67847730989726d, (-1.9649899E7d), 1.1203401E7d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [131.67847730989726,-1.9649899E7]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction10);
    }

    @Test
    public void test08226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08226");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.log();
        org.apache.commons.math.complex.Complex complex9 = complex3.exp();
        org.apache.commons.math.complex.Complex complex10 = complex3.cosh();
        double double11 = complex3.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + Double.NEGATIVE_INFINITY + "'", double11 == Double.NEGATIVE_INFINITY);
    }

    @Test
    public void test08227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08227");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.tan();
        org.apache.commons.math.complex.Complex complex2 = complex1.sinh();
        org.apache.commons.math.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math.complex.Complex complex4 = complex1.asin();
        boolean boolean5 = complex4.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.abs();
        org.apache.commons.math.complex.Complex complex9 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex12 = complex11.tan();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.abs();
        org.apache.commons.math.complex.Complex complex16 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex12.subtract(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex16.negate();
        org.apache.commons.math.complex.Complex complex20 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        double double23 = complex21.abs();
        org.apache.commons.math.complex.Complex complex24 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        boolean boolean27 = complex25.isNaN();
        org.apache.commons.math.complex.Complex complex28 = complex25.sin();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex complex32 = complex31.sin();
        org.apache.commons.math.complex.Complex complex33 = complex29.pow(complex31);
        org.apache.commons.math.complex.Complex complex34 = complex33.asin();
        org.apache.commons.math.complex.Complex complex35 = complex34.atan();
        boolean boolean36 = complex35.isInfinite();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex38 = complex35.subtract(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex38.sin();
        org.apache.commons.math.complex.Complex complex40 = complex25.divide(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex21.subtract(complex39);
        boolean boolean42 = complex16.equals((java.lang.Object) complex39);
        org.apache.commons.math.complex.Complex complex43 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex44 = complex4.multiply(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex4.negate();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex47 = complex46.cosh();
        double double48 = complex46.abs();
        org.apache.commons.math.complex.Complex complex49 = complex46.conjugate();
        org.apache.commons.math.complex.Complex complex50 = complex49.conjugate();
        boolean boolean51 = complex49.isInfinite();
        org.apache.commons.math.complex.Complex complex52 = complex49.cos();
        org.apache.commons.math.complex.Complex complex53 = complex49.conjugate();
        org.apache.commons.math.complex.Complex complex54 = complex49.sin();
        org.apache.commons.math.complex.Complex complex55 = complex54.negate();
        org.apache.commons.math.complex.Complex complex56 = complex55.sinh();
        org.apache.commons.math.complex.Complex complex57 = complex55.sinh();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        double double60 = complex58.abs();
        org.apache.commons.math.complex.Complex complex61 = complex58.conjugate();
        org.apache.commons.math.complex.Complex complex62 = complex61.conjugate();
        org.apache.commons.math.complex.Complex complex63 = complex61.tanh();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex65 = complex64.sqrt();
        org.apache.commons.math.complex.Complex complex66 = complex65.sin();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math.complex.Complex complex69 = complex68.sin();
        org.apache.commons.math.complex.Complex complex70 = complex65.multiply(complex68);
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex72 = complex71.exp();
        org.apache.commons.math.complex.Complex complex73 = complex65.subtract(complex71);
        org.apache.commons.math.complex.Complex complex74 = complex63.add(complex65);
        org.apache.commons.math.complex.Complex complex75 = complex55.divide(complex65);
        org.apache.commons.math.complex.Complex complex76 = complex45.multiply(complex55);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.POSITIVE_INFINITY + "'", double8 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + Double.POSITIVE_INFINITY + "'", double15 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + Double.POSITIVE_INFINITY + "'", double23 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + Double.POSITIVE_INFINITY + "'", double48 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
    }

    @Test
    public void test08228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08228");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex7.exp();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex16.acos();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex18.log();
        org.apache.commons.math.complex.Complex complex21 = complex18.sin();
        org.apache.commons.math.complex.Complex complex22 = complex21.tanh();
        org.apache.commons.math.complex.Complex complex23 = complex16.add(complex22);
        boolean boolean24 = complex7.equals((java.lang.Object) complex16);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex complex28 = complex27.sin();
        org.apache.commons.math.complex.Complex complex29 = complex25.pow(complex27);
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex32 = complex30.log();
        org.apache.commons.math.complex.Complex complex33 = complex25.divide(complex32);
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex complex36 = complex34.sin();
        org.apache.commons.math.complex.Complex complex37 = complex33.pow(complex34);
        org.apache.commons.math.complex.Complex complex38 = complex16.pow(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex40 = complex39.asin();
        boolean boolean41 = complex40.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test08229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08229");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.asin();
        boolean boolean7 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex3.divide(complex8);
        boolean boolean11 = complex3.isNaN();
        double double12 = complex3.getReal();
        org.apache.commons.math.complex.Complex complex13 = complex3.acos();
        org.apache.commons.math.complex.Complex complex14 = complex3.exp();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        boolean boolean20 = complex18.isInfinite();
        org.apache.commons.math.complex.Complex complex21 = complex18.cos();
        org.apache.commons.math.complex.Complex complex22 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex18.sin();
        boolean boolean24 = complex18.isNaN();
        org.apache.commons.math.complex.Complex complex25 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex14.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.tanh();
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.acos();
        org.apache.commons.math.complex.Complex complex33 = new org.apache.commons.math.complex.Complex(231.0d, 2.799833927635354E75d);
        org.apache.commons.math.complex.Complex complex34 = complex33.asin();
        org.apache.commons.math.complex.Complex complex35 = complex29.subtract(complex33);
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        double double39 = complex37.abs();
        org.apache.commons.math.complex.Complex complex40 = complex37.conjugate();
        org.apache.commons.math.complex.Complex complex41 = complex40.conjugate();
        boolean boolean42 = complex40.isInfinite();
        org.apache.commons.math.complex.Complex complex43 = complex40.cos();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex45 = complex44.cosh();
        double double46 = complex44.abs();
        org.apache.commons.math.complex.Complex complex47 = complex44.conjugate();
        org.apache.commons.math.complex.Complex complex48 = complex47.conjugate();
        boolean boolean49 = complex47.isInfinite();
        org.apache.commons.math.complex.Complex complex50 = complex47.asin();
        boolean boolean51 = complex47.isNaN();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        org.apache.commons.math.complex.Complex complex54 = complex47.divide(complex52);
        org.apache.commons.math.complex.Complex complex55 = complex43.divide(complex52);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = complex56.tan();
        org.apache.commons.math.complex.Complex complex58 = complex56.cos();
        boolean boolean59 = complex56.isInfinite();
        org.apache.commons.math.complex.Complex complex60 = complex55.multiply(complex56);
        org.apache.commons.math.complex.Complex complex61 = complex35.subtract(complex55);
        org.apache.commons.math.complex.Complex complex62 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex complex65 = complex64.sin();
        org.apache.commons.math.complex.Complex complex66 = complex62.pow(complex64);
        org.apache.commons.math.complex.Complex complex67 = complex66.asin();
        org.apache.commons.math.complex.Complex complex68 = complex67.atan();
        boolean boolean69 = complex68.isInfinite();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex71 = complex68.subtract(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex68.conjugate();
        org.apache.commons.math.complex.Complex complex73 = complex68.tan();
        org.apache.commons.math.complex.Complex complex74 = complex73.sinh();
        org.apache.commons.math.complex.Complex complex75 = complex73.cosh();
        org.apache.commons.math.complex.Complex complex76 = complex73.exp();
        org.apache.commons.math.complex.Complex complex77 = complex76.acos();
        double double78 = complex76.abs();
        org.apache.commons.math.complex.Complex complex79 = complex76.sinh();
        org.apache.commons.math.complex.Complex complex80 = complex55.divide(complex76);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + Double.POSITIVE_INFINITY + "'", double39 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + Double.POSITIVE_INFINITY + "'", double46 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
    }

    @Test
    public void test08230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08230");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        boolean boolean7 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex6.subtract(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.exp();
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray18);
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray18, (java.lang.Throwable) convergenceException22);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray18, (java.lang.Throwable) functionEvaluationException25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", (java.lang.Throwable) functionEvaluationException26);
        boolean boolean28 = complex10.equals((java.lang.Object) "hi!");
        double double29 = complex10.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test08231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08231");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(350.0d, (-1.03036766E8d));
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = complex7.sin();
        org.apache.commons.math.complex.Complex complex9 = complex5.pow(complex7);
        org.apache.commons.math.complex.Complex complex10 = complex9.asin();
        org.apache.commons.math.complex.Complex complex11 = complex9.tan();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.abs();
        org.apache.commons.math.complex.Complex complex15 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.conjugate();
        boolean boolean17 = complex15.isInfinite();
        org.apache.commons.math.complex.Complex complex18 = complex15.asin();
        boolean boolean19 = complex15.isNaN();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex15.divide(complex20);
        org.apache.commons.math.complex.Complex complex23 = complex11.pow(complex20);
        org.apache.commons.math.complex.Complex complex24 = complex20.tanh();
        org.apache.commons.math.complex.Complex complex25 = complex24.atan();
        org.apache.commons.math.complex.Complex complex26 = complex4.subtract(complex24);
        org.apache.commons.math.complex.Complex complex27 = complex4.tanh();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.abs();
        org.apache.commons.math.complex.Complex complex31 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex31.conjugate();
        boolean boolean33 = complex31.isInfinite();
        org.apache.commons.math.complex.Complex complex34 = complex31.cos();
        org.apache.commons.math.complex.Complex complex35 = complex31.conjugate();
        org.apache.commons.math.complex.Complex complex36 = complex31.sin();
        org.apache.commons.math.complex.Complex complex37 = complex36.negate();
        org.apache.commons.math.complex.Complex complex38 = complex37.exp();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        boolean boolean41 = complex39.isNaN();
        double double42 = complex39.getReal();
        boolean boolean43 = complex39.isNaN();
        org.apache.commons.math.complex.Complex complex44 = complex37.pow(complex39);
        org.apache.commons.math.complex.Complex complex45 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex47 = complex4.multiply(complex45);
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        double double50 = complex48.abs();
        org.apache.commons.math.complex.Complex complex51 = complex48.conjugate();
        org.apache.commons.math.complex.Complex complex52 = complex51.conjugate();
        org.apache.commons.math.complex.Complex complex53 = complex51.tanh();
        org.apache.commons.math.complex.Complex complex54 = complex53.tan();
        org.apache.commons.math.complex.Complex complex55 = complex54.conjugate();
        org.apache.commons.math.complex.Complex complex56 = complex55.cos();
        org.apache.commons.math.complex.Complex complex57 = complex56.exp();
        org.apache.commons.math.complex.Complex complex58 = complex56.cos();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex60 = complex59.sqrt();
        org.apache.commons.math.complex.Complex complex61 = complex58.divide(complex59);
        org.apache.commons.math.complex.Complex complex62 = complex45.subtract(complex58);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + Double.POSITIVE_INFINITY + "'", double14 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + Double.POSITIVE_INFINITY + "'", double42 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + Double.POSITIVE_INFINITY + "'", double50 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
    }

    @Test
    public void test08232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08232");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}");
        java.lang.String str2 = convergenceException1.getPattern();
        java.lang.Object[] objArray8 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException9 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray8);
        int int10 = maxIterationsExceededException9.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
        maxIterationsExceededException9.addSuppressed((java.lang.Throwable) convergenceException12);
        java.lang.String str14 = maxIterationsExceededException9.getPattern();
        int int15 = maxIterationsExceededException9.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException((-1.0003990597689866E16d), (java.lang.Throwable) convergenceException16);
        convergenceException1.addSuppressed((java.lang.Throwable) functionEvaluationException17);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}" + "'", str2, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}");
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test08233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08233");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException((double) (short) -1);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((-3.675813734281057E146d), (java.lang.Throwable) functionEvaluationException2);
    }

    @Test
    public void test08234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08234");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        boolean boolean7 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex6.subtract(complex8);
        boolean boolean10 = complex8.isInfinite();
        org.apache.commons.math.complex.Complex complex11 = complex8.tanh();
        org.apache.commons.math.complex.Complex complex12 = complex11.tanh();
        org.apache.commons.math.complex.Complex complex13 = complex11.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test08235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08235");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex10.negate();
        org.apache.commons.math.complex.Complex complex14 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex15.log();
        org.apache.commons.math.complex.Complex complex18 = complex17.cos();
        double double19 = complex18.abs();
        org.apache.commons.math.complex.Complex complex20 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex23.sin();
        org.apache.commons.math.complex.Complex complex25 = complex21.pow(complex23);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.log();
        org.apache.commons.math.complex.Complex complex29 = complex21.divide(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex20.subtract(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex20.cos();
        org.apache.commons.math.complex.Complex complex33 = complex32.negate();
        boolean boolean34 = complex10.equals((java.lang.Object) complex32);
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex35.log();
        org.apache.commons.math.complex.Complex complex38 = complex37.cos();
        org.apache.commons.math.complex.Complex complex39 = complex37.exp();
        org.apache.commons.math.complex.Complex complex40 = complex37.atan();
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt1z();
        org.apache.commons.math.complex.Complex complex43 = complex41.negate();
        org.apache.commons.math.complex.Complex complex44 = complex32.divide(complex43);
        org.apache.commons.math.complex.Complex complex45 = complex32.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
    }

    @Test
    public void test08236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08236");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-0.010000228881835938d), 6.952589180540997E117d);
    }

    @Test
    public void test08237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08237");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex15.sin();
        org.apache.commons.math.complex.Complex complex17 = complex13.pow(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex17.asin();
        org.apache.commons.math.complex.Complex complex19 = complex17.tan();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        boolean boolean25 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex26 = complex23.asin();
        boolean boolean27 = complex23.isNaN();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex23.divide(complex28);
        org.apache.commons.math.complex.Complex complex31 = complex19.pow(complex28);
        org.apache.commons.math.complex.Complex complex32 = complex12.divide(complex19);
        org.apache.commons.math.complex.Complex complex33 = complex19.asin();
        org.apache.commons.math.complex.Complex complex34 = complex33.negate();
        org.apache.commons.math.complex.Complex complex35 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex36 = complex35.sqrt1z();
        org.apache.commons.math.complex.Complex complex37 = complex36.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
    }

    @Test
    public void test08238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08238");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = laguerreSolver6.solveAll(doubleArray14, 10001.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver20 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction19);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = polynomialFunction19.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = polynomialFunction19.polynomialDerivative();
        double double24 = polynomialFunction19.value(1.4484402834416535E167d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertNotNull(polynomialFunction22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.NEGATIVE_INFINITY + "'", double24 == Double.NEGATIVE_INFINITY);
    }

    @Test
    public void test08239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08239");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        double[] doubleArray5 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver7 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double8 = laguerreSolver7.getFunctionValueAccuracy();
        double double9 = laguerreSolver7.getRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = laguerreSolver7.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-15d + "'", double8 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-14d + "'", double9 == 1.0E-14d);
    }

    @Test
    public void test08240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08240");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException11 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray10);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray10);
        java.lang.Object[] objArray17 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray17);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray17, (java.lang.Throwable) convergenceException21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray17, (java.lang.Throwable) functionEvaluationException24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "org.apache.commons.math.ConvergenceException: hi!", objArray10, (java.lang.Throwable) functionEvaluationException25);
        double double27 = functionEvaluationException25.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Throwable) functionEvaluationException25);
        java.lang.Throwable[] throwableArray29 = functionEvaluationException25.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException31 = new org.apache.commons.math.FunctionEvaluationException(1.0E-6d);
        java.lang.Object[] objArray32 = functionEvaluationException31.getArguments();
        functionEvaluationException25.addSuppressed((java.lang.Throwable) functionEvaluationException31);
        java.lang.Object[] objArray34 = functionEvaluationException25.getArguments();
        java.lang.Throwable[] throwableArray35 = functionEvaluationException25.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray35);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[1.0E-6]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[1.0E-6]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(throwableArray35);
    }

    @Test
    public void test08241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08241");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
    }

    @Test
    public void test08242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08242");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        int int7 = polynomialFunction6.degree();
        int int8 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction9.polynomialDerivative();
        double double12 = polynomialFunction9.value((double) (-1.0f));
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction9);
        laguerreSolver13.setAbsoluteAccuracy(1.0E-14d);
        laguerreSolver13.resetAbsoluteAccuracy();
        double double17 = laguerreSolver13.getAbsoluteAccuracy();
        laguerreSolver13.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + (-161.0d) + "'", double12 == (-161.0d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-6d + "'", double17 == 1.0E-6d);
    }

    @Test
    public void test08243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08243");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException((-9.626568200569E12d));
    }

    @Test
    public void test08244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08244");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        laguerreSolver6.setAbsoluteAccuracy((double) 1);
        laguerreSolver6.setAbsoluteAccuracy((-0.7853981633974483d));
        laguerreSolver6.setMaximalIterationCount((int) (short) -1);
        laguerreSolver6.setAbsoluteAccuracy(188.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
    }

    @Test
    public void test08245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08245");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        double double4 = complex3.abs();
        org.apache.commons.math.complex.Complex complex5 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = complex8.sin();
        org.apache.commons.math.complex.Complex complex10 = complex6.pow(complex8);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex11.log();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex5.subtract(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex5.cos();
        org.apache.commons.math.complex.Complex complex19 = complex18.negate();
        org.apache.commons.math.complex.Complex complex20 = complex18.acos();
        org.apache.commons.math.complex.Complex complex21 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.abs();
        org.apache.commons.math.complex.Complex complex25 = complex22.conjugate();
        org.apache.commons.math.complex.Complex complex26 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex25.tanh();
        org.apache.commons.math.complex.Complex complex28 = complex27.tan();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        double double31 = complex29.abs();
        org.apache.commons.math.complex.Complex complex32 = complex29.conjugate();
        org.apache.commons.math.complex.Complex complex33 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex34 = complex28.subtract(complex32);
        org.apache.commons.math.complex.Complex complex35 = complex32.negate();
        org.apache.commons.math.complex.Complex complex36 = complex32.tanh();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex39 = complex38.sqrt();
        org.apache.commons.math.complex.Complex complex40 = complex39.sin();
        org.apache.commons.math.complex.Complex complex41 = complex37.pow(complex39);
        org.apache.commons.math.complex.Complex complex42 = complex41.asin();
        org.apache.commons.math.complex.Complex complex43 = complex42.atan();
        boolean boolean44 = complex43.isInfinite();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex46 = complex43.subtract(complex45);
        org.apache.commons.math.complex.Complex complex47 = complex45.tan();
        org.apache.commons.math.complex.Complex complex48 = complex32.pow(complex45);
        org.apache.commons.math.complex.Complex complex49 = complex32.cos();
        org.apache.commons.math.complex.Complex complex50 = complex49.acos();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex51.log();
        org.apache.commons.math.complex.Complex complex54 = complex51.sin();
        org.apache.commons.math.complex.Complex complex55 = complex51.log();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex complex58 = complex51.divide(complex57);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        double double61 = complex59.abs();
        org.apache.commons.math.complex.Complex complex62 = complex59.conjugate();
        org.apache.commons.math.complex.Complex complex63 = complex62.conjugate();
        org.apache.commons.math.complex.Complex complex64 = complex58.subtract(complex63);
        org.apache.commons.math.complex.Complex complex65 = complex58.exp();
        org.apache.commons.math.complex.Complex complex66 = complex65.cos();
        org.apache.commons.math.complex.Complex complex67 = complex49.subtract(complex66);
        org.apache.commons.math.complex.Complex complex68 = complex49.sinh();
        org.apache.commons.math.complex.Complex complex69 = complex21.pow(complex68);
        org.apache.commons.math.complex.Complex complex70 = complex21.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + Double.POSITIVE_INFINITY + "'", double31 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + Double.POSITIVE_INFINITY + "'", double61 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
    }

    @Test
    public void test08246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08246");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = laguerreSolver6.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction9.polynomialDerivative();
        double[] doubleArray11 = polynomialFunction10.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray11);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = polynomialFunction12.polynomialDerivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0]");
        org.junit.Assert.assertNotNull(polynomialFunction13);
    }

    @Test
    public void test08247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08247");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException((-0.010009765625d));
    }

    @Test
    public void test08248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08248");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double7 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.resetFunctionValueAccuracy();
        double double10 = laguerreSolver6.getRelativeAccuracy();
        double double11 = laguerreSolver6.getRelativeAccuracy();
        double[] doubleArray17 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        int int19 = polynomialFunction18.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = polynomialFunction18.polynomialDerivative();
        double[] doubleArray21 = polynomialFunction18.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray23 = laguerreSolver6.solveAll(doubleArray21, (double) 100.0f);
        laguerreSolver6.setAbsoluteAccuracy((double) 1);
        laguerreSolver6.setRelativeAccuracy((double) 10L);
        double double28 = laguerreSolver6.getResult();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0E-6d + "'", double7 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-14d + "'", double10 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-14d + "'", double11 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray23);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    }

    @Test
    public void test08249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08249");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-1.4823291286E10d), (-1.1271166809295782E32d));
    }

    @Test
    public void test08250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08250");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex7);
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.cos();
        double double18 = complex17.abs();
        org.apache.commons.math.complex.Complex complex19 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex22.sin();
        org.apache.commons.math.complex.Complex complex24 = complex20.pow(complex22);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex25.log();
        org.apache.commons.math.complex.Complex complex28 = complex20.divide(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex19.subtract(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex19.cos();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex35.log();
        org.apache.commons.math.complex.Complex complex38 = complex35.sin();
        org.apache.commons.math.complex.Complex complex39 = complex35.log();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex complex42 = complex35.divide(complex41);
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex44.acos();
        double double46 = complex44.getReal();
        org.apache.commons.math.complex.Complex complex47 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex48 = complex35.pow(complex44);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        org.apache.commons.math.complex.Complex complex51 = complex49.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.cos();
        org.apache.commons.math.complex.Complex complex53 = complex44.multiply(complex51);
        org.apache.commons.math.complex.Complex complex54 = complex51.tanh();
        org.apache.commons.math.complex.Complex complex55 = complex33.divide(complex51);
        org.apache.commons.math.complex.Complex complex56 = complex32.pow(complex51);
        org.apache.commons.math.complex.Complex complex57 = complex12.pow(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex57.tanh();
        org.apache.commons.math.complex.Complex complex59 = complex57.cosh();
        org.apache.commons.math.complex.Complex complex60 = complex59.atan();
        org.apache.commons.math.complex.Complex complex61 = complex60.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
    }

    @Test
    public void test08251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08251");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-3.6499482913530427E146d), (-2.9811081908222352E41d));
    }

    @Test
    public void test08252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08252");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = laguerreSolver9.getPolynomialFunction();
        laguerreSolver9.setMaximalIterationCount(0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = laguerreSolver9.getPolynomialFunction();
        laguerreSolver9.setMaximalIterationCount((int) 'a');
        int int25 = laguerreSolver9.getIterationCount();
        int int26 = laguerreSolver9.getMaximalIterationCount();
        laguerreSolver9.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertNotNull(polynomialFunction22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
    }

    @Test
    public void test08253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08253");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray14, 101.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        double double21 = polynomialFunction19.value((double) '4');
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-7039396.0d) + "'", double21 == (-7039396.0d));
    }

    @Test
    public void test08254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08254");
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("");
        java.lang.Object[] objArray7 = convergenceException6.getArguments();
        java.lang.Object[] objArray15 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException16 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray15);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException17 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray15);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray20);
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray20, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray15, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray7, (java.lang.Throwable) convergenceException26);
        java.lang.String str28 = convergenceException26.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException((double) 10, "org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) convergenceException29);
        java.lang.Object[] objArray31 = convergenceException29.getArguments();
        java.lang.Throwable[] throwableArray32 = convergenceException29.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException33 = new org.apache.commons.math.MaxIterationsExceededException(6, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10,222,474,227,427", (java.lang.Object[]) throwableArray32);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: " + "'", str28, "org.apache.commons.math.FunctionEvaluationException: ");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(throwableArray32);
    }

    @Test
    public void test08255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08255");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException((-13672.0d));
    }

    @Test
    public void test08256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08256");
        java.lang.Object[] objArray1 = null;
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray8);
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray8, (java.lang.Throwable) convergenceException12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray8);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("hi!", objArray8);
        java.lang.Object[] objArray16 = convergenceException15.getArguments();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        java.lang.Object[] objArray21 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("", objArray21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException22);
        boolean boolean24 = complex17.equals((java.lang.Object) functionEvaluationException23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) 18, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", objArray16, (java.lang.Throwable) functionEvaluationException23);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: hi!", objArray1, (java.lang.Throwable) functionEvaluationException25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test08257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08257");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        boolean boolean6 = complex4.isNaN();
        org.apache.commons.math.complex.Complex complex7 = complex4.sin();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex8.pow(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.asin();
        org.apache.commons.math.complex.Complex complex14 = complex13.atan();
        boolean boolean15 = complex14.isInfinite();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex14.subtract(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex4.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex0.subtract(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.abs();
        org.apache.commons.math.complex.Complex complex25 = complex22.conjugate();
        org.apache.commons.math.complex.Complex complex26 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex25.tanh();
        org.apache.commons.math.complex.Complex complex28 = complex27.tan();
        org.apache.commons.math.complex.Complex complex29 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        double double32 = complex30.abs();
        org.apache.commons.math.complex.Complex complex33 = complex30.conjugate();
        org.apache.commons.math.complex.Complex complex34 = complex33.conjugate();
        boolean boolean35 = complex33.isInfinite();
        org.apache.commons.math.complex.Complex complex36 = complex33.cos();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        double double39 = complex37.abs();
        org.apache.commons.math.complex.Complex complex40 = complex37.conjugate();
        org.apache.commons.math.complex.Complex complex41 = complex40.conjugate();
        boolean boolean42 = complex40.isInfinite();
        org.apache.commons.math.complex.Complex complex43 = complex40.asin();
        boolean boolean44 = complex40.isNaN();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex47 = complex40.divide(complex45);
        org.apache.commons.math.complex.Complex complex48 = complex36.divide(complex45);
        org.apache.commons.math.complex.Complex complex49 = complex45.sinh();
        org.apache.commons.math.complex.Complex complex50 = complex29.multiply(complex45);
        java.lang.Object obj51 = null;
        boolean boolean52 = complex45.equals(obj51);
        org.apache.commons.math.complex.Complex complex53 = complex45.acos();
        org.apache.commons.math.complex.Complex complex54 = complex45.negate();
        org.apache.commons.math.complex.Complex complex55 = complex54.negate();
        org.apache.commons.math.complex.Complex complex56 = complex21.subtract(complex54);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + Double.POSITIVE_INFINITY + "'", double32 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + Double.POSITIVE_INFINITY + "'", double39 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
    }

    @Test
    public void test08258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08258");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.sin();
        org.apache.commons.math.complex.Complex complex9 = complex3.tan();
        org.apache.commons.math.complex.Complex complex10 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex11.log();
        org.apache.commons.math.complex.Complex complex14 = complex13.cos();
        double double15 = complex14.abs();
        org.apache.commons.math.complex.Complex complex16 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex17.pow(complex19);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex22.log();
        org.apache.commons.math.complex.Complex complex25 = complex17.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex16.subtract(complex25);
        org.apache.commons.math.complex.Complex complex27 = complex16.conjugate();
        boolean boolean28 = complex27.isNaN();
        org.apache.commons.math.complex.Complex complex29 = complex27.sin();
        org.apache.commons.math.complex.Complex complex30 = complex10.add(complex27);
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        double double33 = complex31.abs();
        org.apache.commons.math.complex.Complex complex34 = complex31.conjugate();
        org.apache.commons.math.complex.Complex complex35 = complex34.conjugate();
        boolean boolean36 = complex34.isInfinite();
        org.apache.commons.math.complex.Complex complex37 = complex34.asin();
        boolean boolean38 = complex34.isNaN();
        org.apache.commons.math.complex.Complex complex39 = complex34.negate();
        double double40 = complex34.getImaginary();
        boolean boolean41 = complex34.isNaN();
        org.apache.commons.math.complex.Complex complex42 = complex30.add(complex34);
        double double43 = complex30.abs();
        org.apache.commons.math.complex.Complex complex44 = complex30.sinh();
        org.apache.commons.math.complex.Complex complex45 = complex44.tanh();
        org.apache.commons.math.complex.Complex complex46 = complex44.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + Double.POSITIVE_INFINITY + "'", double33 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + Double.NEGATIVE_INFINITY + "'", double40 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
    }

    @Test
    public void test08259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08259");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.abs();
        org.apache.commons.math.complex.Complex complex6 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex8.tan();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        double double13 = complex11.getReal();
        boolean boolean14 = complex9.equals((java.lang.Object) complex11);
        org.apache.commons.math.complex.Complex complex15 = complex7.subtract(complex11);
        org.apache.commons.math.complex.Complex complex16 = complex11.exp();
        org.apache.commons.math.complex.Complex complex17 = complex0.divide(complex11);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex18.divide(complex23);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex25.log();
        org.apache.commons.math.complex.Complex complex28 = complex25.sin();
        org.apache.commons.math.complex.Complex complex29 = complex25.log();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex complex32 = complex25.divide(complex31);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.abs();
        org.apache.commons.math.complex.Complex complex36 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex37 = complex36.conjugate();
        org.apache.commons.math.complex.Complex complex38 = complex32.subtract(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex24.multiply(complex32);
        boolean boolean40 = complex32.isInfinite();
        org.apache.commons.math.complex.Complex complex41 = complex32.negate();
        org.apache.commons.math.complex.Complex complex42 = complex41.negate();
        org.apache.commons.math.complex.Complex complex43 = complex0.multiply(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        double double47 = complex45.abs();
        org.apache.commons.math.complex.Complex complex48 = complex45.conjugate();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        double double51 = complex49.abs();
        org.apache.commons.math.complex.Complex complex52 = complex49.conjugate();
        org.apache.commons.math.complex.Complex complex53 = complex52.conjugate();
        org.apache.commons.math.complex.Complex complex54 = complex52.tanh();
        org.apache.commons.math.complex.Complex complex55 = complex52.atan();
        org.apache.commons.math.complex.Complex complex56 = complex45.subtract(complex52);
        org.apache.commons.math.complex.Complex complex57 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex58 = complex57.cosh();
        org.apache.commons.math.complex.Complex complex59 = complex57.log();
        org.apache.commons.math.complex.Complex complex60 = complex59.cos();
        double double61 = complex60.abs();
        org.apache.commons.math.complex.Complex complex62 = complex60.tanh();
        org.apache.commons.math.complex.Complex complex63 = complex52.pow(complex60);
        org.apache.commons.math.complex.Complex complex64 = complex52.sin();
        org.apache.commons.math.complex.Complex complex65 = complex52.tan();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        org.apache.commons.math.complex.Complex complex69 = complex68.sin();
        org.apache.commons.math.complex.Complex complex70 = complex66.pow(complex68);
        org.apache.commons.math.complex.Complex complex71 = complex70.asin();
        org.apache.commons.math.complex.Complex complex72 = complex71.atan();
        boolean boolean73 = complex72.isInfinite();
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex75 = complex72.subtract(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex75.sqrt();
        org.apache.commons.math.complex.Complex complex77 = complex75.sqrt1z();
        org.apache.commons.math.complex.Complex complex78 = complex75.cos();
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex80 = complex79.cosh();
        org.apache.commons.math.complex.Complex complex81 = complex79.log();
        org.apache.commons.math.complex.Complex complex82 = complex79.sin();
        boolean boolean83 = complex79.isNaN();
        org.apache.commons.math.complex.Complex complex84 = complex75.multiply(complex79);
        double double85 = complex75.abs();
        org.apache.commons.math.complex.Complex complex86 = complex52.divide(complex75);
        org.apache.commons.math.complex.Complex complex87 = complex0.add(complex86);
        org.apache.commons.math.complex.Complex complex88 = complex87.negate();
        org.apache.commons.math.complex.Complex complex89 = complex87.conjugate();
        org.apache.commons.math.complex.Complex complex90 = null;
        org.apache.commons.math.complex.Complex complex91 = complex89.subtract(complex90);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + Double.POSITIVE_INFINITY + "'", double47 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + Double.POSITIVE_INFINITY + "'", double51 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex91);
    }

    @Test
    public void test08260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08260");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        org.apache.commons.math.complex.Complex complex4 = complex2.exp();
        boolean boolean5 = complex2.isNaN();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.abs();
        org.apache.commons.math.complex.Complex complex9 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.conjugate();
        boolean boolean11 = complex9.isInfinite();
        org.apache.commons.math.complex.Complex complex12 = complex9.asin();
        org.apache.commons.math.complex.Complex complex13 = complex2.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = complex2.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.tanh();
        double double16 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex17 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.POSITIVE_INFINITY + "'", double8 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test08261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08261");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        laguerreSolver6.setFunctionValueAccuracy((double) (byte) -1);
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.resetRelativeAccuracy();
        double double14 = laguerreSolver6.getAbsoluteAccuracy();
        int int15 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.setRelativeAccuracy((double) 1.0f);
        laguerreSolver6.setAbsoluteAccuracy(1001.0d);
        double double20 = laguerreSolver6.getRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double24 = laguerreSolver6.solve((double) 1.0f, (-1.0003990597689866E16d), (-2.842052136E9d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.0,-1.0003990597689866E16]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0d + "'", double20 == 1.0d);
    }

    @Test
    public void test08262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08262");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) (-1.0f));
        int int12 = laguerreSolver6.getMaximalIterationCount();
        double[] doubleArray20 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray20);
        int int22 = polynomialFunction21.degree();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver23 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction21);
        int int24 = laguerreSolver23.getMaximalIterationCount();
        laguerreSolver23.resetMaximalIterationCount();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.log();
        org.apache.commons.math.complex.Complex complex29 = complex26.sin();
        org.apache.commons.math.complex.Complex complex30 = complex26.log();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = complex26.divide(complex32);
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex35.acos();
        double double37 = complex35.getReal();
        org.apache.commons.math.complex.Complex complex38 = complex35.sqrt();
        org.apache.commons.math.complex.Complex complex39 = complex26.pow(complex35);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex40.log();
        org.apache.commons.math.complex.Complex complex43 = complex42.cos();
        org.apache.commons.math.complex.Complex complex44 = complex35.multiply(complex42);
        org.apache.commons.math.complex.Complex complex45 = complex42.tanh();
        org.apache.commons.math.complex.Complex complex46 = complex45.asin();
        double[] doubleArray52 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction53 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray52);
        int int54 = polynomialFunction53.degree();
        boolean boolean55 = complex45.equals((java.lang.Object) polynomialFunction53);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction56 = polynomialFunction53.polynomialDerivative();
        double[] doubleArray57 = polynomialFunction53.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray59 = laguerreSolver23.solveAll(doubleArray57, 0.0d);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException(134.0d, "org.apache.commons.math.ConvergenceException: hi!");
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException62);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException((-8.808275266783596E15d), "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 32", (java.lang.Object[]) complexArray59, (java.lang.Throwable) convergenceException63);
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex66 = complex65.sqrt();
        org.apache.commons.math.complex.Complex complex67 = complex65.negate();
        org.apache.commons.math.complex.Complex complex68 = laguerreSolver6.solve(complexArray59, complex67);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(polynomialFunction56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
    }

    @Test
    public void test08263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08263");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.asin();
        boolean boolean7 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex8 = complex3.negate();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex10.log();
        org.apache.commons.math.complex.Complex complex13 = complex10.sin();
        org.apache.commons.math.complex.Complex complex14 = complex10.log();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex16);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        double double20 = complex18.abs();
        org.apache.commons.math.complex.Complex complex21 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex17.subtract(complex22);
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex24.log();
        org.apache.commons.math.complex.Complex complex27 = complex24.sin();
        org.apache.commons.math.complex.Complex complex28 = complex24.log();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex24.divide(complex30);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.abs();
        org.apache.commons.math.complex.Complex complex35 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex36 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex37 = complex31.subtract(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex31.exp();
        org.apache.commons.math.complex.Complex complex39 = complex23.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        double double45 = complex43.abs();
        org.apache.commons.math.complex.Complex complex46 = complex43.conjugate();
        org.apache.commons.math.complex.Complex complex47 = complex41.divide(complex46);
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        org.apache.commons.math.complex.Complex complex50 = complex48.log();
        org.apache.commons.math.complex.Complex complex51 = complex48.sin();
        org.apache.commons.math.complex.Complex complex52 = complex48.log();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex complex55 = complex48.divide(complex54);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        double double58 = complex56.abs();
        org.apache.commons.math.complex.Complex complex59 = complex56.conjugate();
        org.apache.commons.math.complex.Complex complex60 = complex59.conjugate();
        org.apache.commons.math.complex.Complex complex61 = complex55.subtract(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex47.multiply(complex55);
        boolean boolean63 = complex55.isInfinite();
        org.apache.commons.math.complex.Complex complex64 = complex55.negate();
        org.apache.commons.math.complex.Complex complex65 = complex38.subtract(complex55);
        org.apache.commons.math.complex.Complex complex66 = complex9.subtract(complex55);
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        org.apache.commons.math.complex.Complex complex69 = complex68.acos();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        double double72 = complex70.abs();
        org.apache.commons.math.complex.Complex complex73 = complex70.conjugate();
        org.apache.commons.math.complex.Complex complex74 = complex73.conjugate();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = complex75.tan();
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex78 = complex77.cosh();
        org.apache.commons.math.complex.Complex complex79 = complex78.acos();
        double double80 = complex78.getReal();
        boolean boolean81 = complex76.equals((java.lang.Object) complex78);
        org.apache.commons.math.complex.Complex complex82 = complex74.subtract(complex78);
        org.apache.commons.math.complex.Complex complex83 = complex82.sqrt1z();
        org.apache.commons.math.complex.Complex complex84 = complex83.negate();
        org.apache.commons.math.complex.Complex complex85 = complex69.add(complex84);
        boolean boolean86 = complex66.equals((java.lang.Object) complex85);
        org.apache.commons.math.complex.Complex complex87 = null;
        org.apache.commons.math.complex.Complex complex88 = complex85.divide(complex87);
        double double89 = complex85.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + Double.POSITIVE_INFINITY + "'", double20 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + Double.POSITIVE_INFINITY + "'", double34 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + Double.POSITIVE_INFINITY + "'", double58 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + Double.POSITIVE_INFINITY + "'", double72 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
    }

    @Test
    public void test08264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08264");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException(454.0d);
        double double2 = functionEvaluationException1.getArgument();
        java.lang.String str3 = functionEvaluationException1.getPattern();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 454.0d + "'", double2 == 454.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Evaluation failed for argument = {0}" + "'", str3, "Evaluation failed for argument = {0}");
    }

    @Test
    public void test08265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08265");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.asin();
        boolean boolean7 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex3.divide(complex8);
        boolean boolean11 = complex3.isNaN();
        double double12 = complex3.getReal();
        org.apache.commons.math.complex.Complex complex13 = complex3.acos();
        org.apache.commons.math.complex.Complex complex14 = complex3.exp();
        double double15 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = complex14.exp();
        double double17 = complex16.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test08266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08266");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        boolean boolean7 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex6.subtract(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex9.atan();
        org.apache.commons.math.complex.Complex complex12 = complex9.sqrt1z();
        org.apache.commons.math.complex.Complex complex13 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        double double17 = complex16.getImaginary();
        double double18 = complex16.getImaginary();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        org.apache.commons.math.complex.Complex complex21 = complex20.acos();
        double double22 = complex20.getReal();
        org.apache.commons.math.complex.Complex complex23 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex24 = complex16.subtract(complex20);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        double double27 = complex25.abs();
        org.apache.commons.math.complex.Complex complex28 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex29 = complex28.conjugate();
        boolean boolean30 = complex28.isInfinite();
        org.apache.commons.math.complex.Complex complex31 = complex28.cos();
        org.apache.commons.math.complex.Complex complex32 = complex31.sin();
        org.apache.commons.math.complex.Complex complex33 = complex16.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex35.acos();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = complex37.log();
        org.apache.commons.math.complex.Complex complex40 = complex37.sin();
        org.apache.commons.math.complex.Complex complex41 = complex40.tanh();
        org.apache.commons.math.complex.Complex complex42 = complex35.add(complex41);
        org.apache.commons.math.complex.Complex complex43 = complex41.acos();
        org.apache.commons.math.complex.Complex complex44 = complex33.pow(complex43);
        double double45 = complex44.abs();
        double double46 = complex44.getReal();
        org.apache.commons.math.complex.Complex complex47 = complex13.divide(complex44);
        org.apache.commons.math.complex.Complex complex48 = complex44.log();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex complex52 = complex51.sin();
        org.apache.commons.math.complex.Complex complex53 = complex49.pow(complex51);
        org.apache.commons.math.complex.Complex complex54 = complex53.asin();
        org.apache.commons.math.complex.Complex complex55 = complex53.tan();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        double double58 = complex56.abs();
        org.apache.commons.math.complex.Complex complex59 = complex56.conjugate();
        org.apache.commons.math.complex.Complex complex60 = complex59.conjugate();
        boolean boolean61 = complex59.isInfinite();
        org.apache.commons.math.complex.Complex complex62 = complex59.asin();
        boolean boolean63 = complex59.isNaN();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex complex66 = complex59.divide(complex64);
        org.apache.commons.math.complex.Complex complex67 = complex55.pow(complex64);
        org.apache.commons.math.complex.Complex complex68 = complex64.tanh();
        org.apache.commons.math.complex.Complex complex69 = complex64.cos();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        org.apache.commons.math.complex.Complex complex72 = complex70.log();
        org.apache.commons.math.complex.Complex complex73 = complex72.cos();
        org.apache.commons.math.complex.Complex complex74 = complex72.exp();
        boolean boolean75 = complex72.isNaN();
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex77 = complex76.cosh();
        double double78 = complex76.abs();
        org.apache.commons.math.complex.Complex complex79 = complex76.conjugate();
        org.apache.commons.math.complex.Complex complex80 = complex79.conjugate();
        org.apache.commons.math.complex.Complex complex81 = complex79.tanh();
        org.apache.commons.math.complex.Complex complex82 = complex72.multiply(complex79);
        org.apache.commons.math.complex.Complex complex83 = complex79.acos();
        org.apache.commons.math.complex.Complex complex84 = complex83.cosh();
        org.apache.commons.math.complex.Complex complex85 = complex83.sqrt1z();
        org.apache.commons.math.complex.Complex complex86 = complex83.tan();
        org.apache.commons.math.complex.Complex complex87 = complex86.cosh();
        boolean boolean88 = complex69.equals((java.lang.Object) complex86);
        org.apache.commons.math.complex.Complex complex89 = complex86.exp();
        double double90 = complex89.getReal();
        org.apache.commons.math.complex.Complex complex91 = complex44.multiply(complex89);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.7853981633974483d + "'", double17 == 0.7853981633974483d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.7853981633974483d + "'", double18 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + Double.POSITIVE_INFINITY + "'", double27 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + Double.POSITIVE_INFINITY + "'", double58 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + Double.POSITIVE_INFINITY + "'", double78 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertNotNull(complex91);
    }

    @Test
    public void test08267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08267");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        double double10 = polynomialFunction6.value((double) (byte) 0);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction11 = polynomialFunction6.derivative();
        double double13 = polynomialFunction6.value((double) 1L);
        double[] doubleArray14 = polynomialFunction6.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 134.0d + "'", double13 == 134.0d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
    }

    @Test
    public void test08268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08268");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = complex1.sin();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex5 = complex4.sin();
        org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex4);
        org.apache.commons.math.complex.Complex complex7 = complex4.cosh();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.abs();
        org.apache.commons.math.complex.Complex complex15 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex15.tanh();
        org.apache.commons.math.complex.Complex complex18 = complex15.atan();
        org.apache.commons.math.complex.Complex complex19 = complex8.subtract(complex15);
        org.apache.commons.math.complex.Complex complex20 = complex19.log();
        double double21 = complex20.getReal();
        org.apache.commons.math.complex.Complex complex22 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        double double25 = complex23.abs();
        org.apache.commons.math.complex.Complex complex26 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex26.conjugate();
        boolean boolean28 = complex26.isInfinite();
        org.apache.commons.math.complex.Complex complex29 = complex26.cos();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        double double32 = complex30.abs();
        org.apache.commons.math.complex.Complex complex33 = complex30.conjugate();
        org.apache.commons.math.complex.Complex complex34 = complex33.conjugate();
        boolean boolean35 = complex33.isInfinite();
        org.apache.commons.math.complex.Complex complex36 = complex33.asin();
        boolean boolean37 = complex33.isNaN();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex33.divide(complex38);
        org.apache.commons.math.complex.Complex complex41 = complex29.divide(complex38);
        org.apache.commons.math.complex.Complex complex42 = complex29.log();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex46 = complex45.sin();
        org.apache.commons.math.complex.Complex complex47 = complex43.pow(complex45);
        org.apache.commons.math.complex.Complex complex48 = complex47.asin();
        org.apache.commons.math.complex.Complex complex49 = complex47.tan();
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        double double52 = complex50.abs();
        org.apache.commons.math.complex.Complex complex53 = complex50.conjugate();
        org.apache.commons.math.complex.Complex complex54 = complex53.conjugate();
        boolean boolean55 = complex53.isInfinite();
        org.apache.commons.math.complex.Complex complex56 = complex53.asin();
        boolean boolean57 = complex53.isNaN();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        org.apache.commons.math.complex.Complex complex60 = complex53.divide(complex58);
        org.apache.commons.math.complex.Complex complex61 = complex49.pow(complex58);
        org.apache.commons.math.complex.Complex complex62 = complex49.sinh();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex64 = complex63.cosh();
        double double65 = complex63.abs();
        org.apache.commons.math.complex.Complex complex66 = complex63.conjugate();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex68 = complex67.sqrt();
        boolean boolean69 = complex67.isNaN();
        org.apache.commons.math.complex.Complex complex70 = complex67.sin();
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex complex74 = complex73.sin();
        org.apache.commons.math.complex.Complex complex75 = complex71.pow(complex73);
        org.apache.commons.math.complex.Complex complex76 = complex75.asin();
        org.apache.commons.math.complex.Complex complex77 = complex76.atan();
        boolean boolean78 = complex77.isInfinite();
        org.apache.commons.math.complex.Complex complex79 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex80 = complex77.subtract(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex80.sin();
        org.apache.commons.math.complex.Complex complex82 = complex67.divide(complex81);
        org.apache.commons.math.complex.Complex complex83 = complex63.subtract(complex81);
        boolean boolean84 = complex83.isNaN();
        org.apache.commons.math.complex.Complex complex85 = complex62.subtract(complex83);
        org.apache.commons.math.complex.Complex complex86 = complex42.divide(complex85);
        boolean boolean87 = complex86.isInfinite();
        org.apache.commons.math.complex.Complex complex88 = complex86.acos();
        org.apache.commons.math.complex.Complex complex89 = complex20.multiply(complex88);
        org.apache.commons.math.complex.Complex complex90 = complex88.tan();
        org.apache.commons.math.complex.Complex complex91 = complex7.multiply(complex88);
        org.apache.commons.math.complex.Complex complex92 = complex88.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + Double.POSITIVE_INFINITY + "'", double14 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + Double.POSITIVE_INFINITY + "'", double25 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + Double.POSITIVE_INFINITY + "'", double32 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + Double.POSITIVE_INFINITY + "'", double52 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + Double.POSITIVE_INFINITY + "'", double65 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
    }

    @Test
    public void test08269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08269");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        boolean boolean7 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex6.subtract(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex8.tan();
        org.apache.commons.math.complex.Complex complex11 = complex8.sinh();
        org.apache.commons.math.complex.Complex complex12 = complex8.negate();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.abs();
        org.apache.commons.math.complex.Complex complex16 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex19 = complex18.tan();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex19.subtract(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex27.log();
        org.apache.commons.math.complex.Complex complex29 = complex27.atan();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex32 = complex30.log();
        double double33 = complex32.getImaginary();
        double double34 = complex32.getImaginary();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex36.acos();
        double double38 = complex36.getReal();
        org.apache.commons.math.complex.Complex complex39 = complex36.sqrt();
        org.apache.commons.math.complex.Complex complex40 = complex32.subtract(complex36);
        org.apache.commons.math.complex.Complex complex41 = complex40.log();
        org.apache.commons.math.complex.Complex complex42 = complex27.subtract(complex40);
        org.apache.commons.math.complex.Complex complex43 = complex8.divide(complex42);
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex47 = complex46.cosh();
        double double48 = complex46.abs();
        org.apache.commons.math.complex.Complex complex49 = complex46.conjugate();
        org.apache.commons.math.complex.Complex complex50 = complex44.divide(complex49);
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex51.log();
        org.apache.commons.math.complex.Complex complex54 = complex51.sin();
        org.apache.commons.math.complex.Complex complex55 = complex51.log();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex complex58 = complex51.divide(complex57);
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        double double61 = complex59.abs();
        org.apache.commons.math.complex.Complex complex62 = complex59.conjugate();
        org.apache.commons.math.complex.Complex complex63 = complex62.conjugate();
        org.apache.commons.math.complex.Complex complex64 = complex58.subtract(complex63);
        org.apache.commons.math.complex.Complex complex65 = complex50.multiply(complex58);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        org.apache.commons.math.complex.Complex complex68 = complex66.log();
        org.apache.commons.math.complex.Complex complex69 = complex68.cos();
        double double70 = complex69.abs();
        org.apache.commons.math.complex.Complex complex71 = complex69.sqrt();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex74 = complex73.sqrt();
        org.apache.commons.math.complex.Complex complex75 = complex74.sin();
        org.apache.commons.math.complex.Complex complex76 = complex72.pow(complex74);
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex78 = complex77.cosh();
        org.apache.commons.math.complex.Complex complex79 = complex77.log();
        org.apache.commons.math.complex.Complex complex80 = complex72.divide(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex71.subtract(complex80);
        org.apache.commons.math.complex.Complex complex82 = complex58.pow(complex71);
        org.apache.commons.math.complex.Complex complex83 = complex71.negate();
        org.apache.commons.math.complex.Complex complex84 = complex42.add(complex71);
        org.apache.commons.math.complex.Complex complex85 = complex42.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + Double.POSITIVE_INFINITY + "'", double15 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.7853981633974483d + "'", double33 == 0.7853981633974483d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.7853981633974483d + "'", double34 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + Double.POSITIVE_INFINITY + "'", double48 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + Double.POSITIVE_INFINITY + "'", double61 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
    }

    @Test
    public void test08270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08270");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        laguerreSolver9.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver9.resetFunctionValueAccuracy();
        int int22 = laguerreSolver9.getIterationCount();
        double double23 = laguerreSolver9.getFunctionValueAccuracy();
        laguerreSolver9.resetMaximalIterationCount();
        double double25 = laguerreSolver9.getFunctionValueAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = laguerreSolver9.getPolynomialFunction();
        laguerreSolver9.setFunctionValueAccuracy((-161.0d));
        laguerreSolver9.setRelativeAccuracy(13403.310093999602d);
        double double31 = laguerreSolver9.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0E-15d + "'", double23 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0E-15d + "'", double25 == 1.0E-15d);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-161.0d) + "'", double31 == (-161.0d));
    }

    @Test
    public void test08271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08271");
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException15 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray13, (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 100);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", objArray13, (java.lang.Throwable) maxIterationsExceededException20);
        int int22 = maxIterationsExceededException20.getMaxIterations();
        int int23 = maxIterationsExceededException20.getMaxIterations();
        java.lang.Object[] objArray24 = maxIterationsExceededException20.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((-1000.0d), "Maximal number of iterations ({0}) exceeded", objArray24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(0.7853981633974483d, "org.apache.commons.math.MaxIterationsExceededException: ", objArray24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException(3.999800035E9d, "Evaluation failed for argument = {0}", objArray24);
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (10) exceeded", objArray24);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[100]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[100]");
    }

    @Test
    public void test08272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08272");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-1.0015971948223661E64d), 18801.0d);
    }

    @Test
    public void test08273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08273");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        org.apache.commons.math.complex.Complex complex4 = complex2.exp();
        boolean boolean5 = complex2.isNaN();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.abs();
        org.apache.commons.math.complex.Complex complex9 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex12 = complex2.multiply(complex9);
        org.apache.commons.math.complex.Complex complex13 = complex9.acos();
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        org.apache.commons.math.complex.Complex complex15 = complex13.sqrt1z();
        org.apache.commons.math.complex.Complex complex16 = complex13.tan();
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex17.log();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex20.log();
        org.apache.commons.math.complex.Complex complex23 = complex20.sin();
        org.apache.commons.math.complex.Complex complex24 = complex20.log();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex27 = complex20.divide(complex26);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex29.acos();
        double double31 = complex29.getReal();
        org.apache.commons.math.complex.Complex complex32 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex33 = complex20.pow(complex29);
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex34.log();
        org.apache.commons.math.complex.Complex complex37 = complex36.cos();
        org.apache.commons.math.complex.Complex complex38 = complex29.multiply(complex36);
        org.apache.commons.math.complex.Complex complex39 = complex36.tanh();
        org.apache.commons.math.complex.Complex complex40 = complex39.asin();
        org.apache.commons.math.complex.Complex complex41 = complex39.acos();
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        double double44 = complex42.abs();
        org.apache.commons.math.complex.Complex complex45 = complex42.conjugate();
        org.apache.commons.math.complex.Complex complex46 = complex45.conjugate();
        boolean boolean47 = complex45.isInfinite();
        org.apache.commons.math.complex.Complex complex48 = complex45.cos();
        org.apache.commons.math.complex.Complex complex49 = complex41.subtract(complex45);
        org.apache.commons.math.complex.Complex complex50 = complex41.sin();
        org.apache.commons.math.complex.Complex complex51 = complex41.sqrt();
        org.apache.commons.math.complex.Complex complex52 = complex19.divide(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex51.exp();
        org.apache.commons.math.complex.Complex complex54 = complex53.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.POSITIVE_INFINITY + "'", double8 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + Double.POSITIVE_INFINITY + "'", double44 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
    }

    @Test
    public void test08274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08274");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double7 = laguerreSolver6.getAbsoluteAccuracy();
        double[] doubleArray14 = new double[] { (-1.0f), (short) 1, 1L, 10L, 0.7853981633974483d, (-1.6365376E7d) };
        org.apache.commons.math.complex.Complex[] complexArray16 = laguerreSolver6.solveAll(doubleArray14, (-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        double double19 = polynomialFunction17.value((double) (-1L));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0E-6d + "'", double7 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 10.0, 0.7853981633974483, -1.6365376E7]");
        org.junit.Assert.assertNotNull(complexArray16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.6365365785398163E7d + "'", double19 == 1.6365365785398163E7d);
    }

    @Test
    public void test08275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08275");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        double double11 = laguerreSolver6.getAbsoluteAccuracy();
        int int12 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.setMaximalIterationCount(1);
        laguerreSolver6.resetRelativeAccuracy();
        double double16 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setAbsoluteAccuracy(18.0d);
        laguerreSolver6.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-6d + "'", double11 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-6d + "'", double16 == 1.0E-6d);
    }

    @Test
    public void test08276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08276");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray9);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray9);
        java.lang.Throwable[] throwableArray13 = maxIterationsExceededException12.getSuppressed();
        java.lang.Object[] objArray20 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException21 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray20);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException22 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray20);
        int int23 = maxIterationsExceededException22.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException24 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, "hi!", (java.lang.Object[]) throwableArray13, (java.lang.Throwable) maxIterationsExceededException22);
        java.lang.Object[] objArray25 = maxIterationsExceededException22.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException26 = new org.apache.commons.math.MaxIterationsExceededException((-1), "org.apache.commons.math.FunctionEvaluationException: ", objArray25);
        java.lang.Object[] objArray27 = maxIterationsExceededException26.getArguments();
        java.lang.Throwable[] throwableArray28 = maxIterationsExceededException26.getSuppressed();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 32 + "'", int23 == 32);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[0.0, 1]");
        org.junit.Assert.assertNotNull(throwableArray28);
    }

    @Test
    public void test08277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08277");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex7.exp();
        org.apache.commons.math.complex.Complex complex15 = complex7.tan();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex17.acos();
        double double19 = complex17.getReal();
        org.apache.commons.math.complex.Complex complex20 = complex17.tanh();
        double double21 = complex17.getImaginary();
        org.apache.commons.math.complex.Complex complex22 = complex7.divide(complex17);
        org.apache.commons.math.complex.Complex complex23 = complex22.asin();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        double double26 = complex24.abs();
        org.apache.commons.math.complex.Complex complex27 = complex24.conjugate();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.sqrt();
        boolean boolean30 = complex28.isNaN();
        org.apache.commons.math.complex.Complex complex31 = complex28.sin();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = complex34.sin();
        org.apache.commons.math.complex.Complex complex36 = complex32.pow(complex34);
        org.apache.commons.math.complex.Complex complex37 = complex36.asin();
        org.apache.commons.math.complex.Complex complex38 = complex37.atan();
        boolean boolean39 = complex38.isInfinite();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex41 = complex38.subtract(complex40);
        org.apache.commons.math.complex.Complex complex42 = complex41.sin();
        org.apache.commons.math.complex.Complex complex43 = complex28.divide(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex24.subtract(complex42);
        org.apache.commons.math.complex.Complex complex45 = complex23.multiply(complex24);
        boolean boolean46 = complex23.isInfinite();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        org.apache.commons.math.complex.Complex complex49 = complex47.log();
        double double50 = complex49.getImaginary();
        double double51 = complex49.getImaginary();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        org.apache.commons.math.complex.Complex complex54 = complex53.acos();
        double double55 = complex53.getReal();
        org.apache.commons.math.complex.Complex complex56 = complex53.sqrt();
        org.apache.commons.math.complex.Complex complex57 = complex49.subtract(complex53);
        org.apache.commons.math.complex.Complex complex58 = complex57.log();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        org.apache.commons.math.complex.Complex complex61 = complex59.log();
        double double62 = complex61.getImaginary();
        org.apache.commons.math.complex.Complex complex63 = complex58.multiply(complex61);
        org.apache.commons.math.complex.Complex complex64 = complex58.sqrt();
        org.apache.commons.math.complex.Complex complex65 = complex58.negate();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        double double68 = complex66.abs();
        org.apache.commons.math.complex.Complex complex69 = complex66.conjugate();
        org.apache.commons.math.complex.Complex complex70 = complex69.conjugate();
        boolean boolean71 = complex69.isInfinite();
        org.apache.commons.math.complex.Complex complex72 = complex69.cos();
        org.apache.commons.math.complex.Complex complex73 = complex69.conjugate();
        org.apache.commons.math.complex.Complex complex74 = complex69.sin();
        org.apache.commons.math.complex.Complex complex75 = complex74.negate();
        org.apache.commons.math.complex.Complex complex76 = complex75.exp();
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex78 = complex77.sqrt();
        boolean boolean79 = complex77.isNaN();
        double double80 = complex77.getReal();
        boolean boolean81 = complex77.isNaN();
        org.apache.commons.math.complex.Complex complex82 = complex75.pow(complex77);
        org.apache.commons.math.complex.Complex complex83 = complex75.cosh();
        org.apache.commons.math.complex.Complex complex84 = complex75.sqrt1z();
        org.apache.commons.math.complex.Complex complex85 = complex84.atan();
        org.apache.commons.math.complex.Complex complex86 = complex84.cos();
        org.apache.commons.math.complex.Complex complex87 = complex58.multiply(complex86);
        org.apache.commons.math.complex.Complex complex88 = complex23.subtract(complex86);
        org.apache.commons.math.complex.Complex complex89 = complex23.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + Double.POSITIVE_INFINITY + "'", double26 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.7853981633974483d + "'", double50 == 0.7853981633974483d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 0.7853981633974483d + "'", double51 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 0.7853981633974483d + "'", double62 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + Double.POSITIVE_INFINITY + "'", double68 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + Double.POSITIVE_INFINITY + "'", double80 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
    }

    @Test
    public void test08278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08278");
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray10);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray10, (java.lang.Throwable) convergenceException14);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException16 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException17 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray10);
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray27);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException29 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray27);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray27, (java.lang.Throwable) convergenceException31);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException33 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray27);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", objArray10, (java.lang.Throwable) functionEvaluationException34);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException37 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) -1);
        int int38 = maxIterationsExceededException37.getMaxIterations();
        functionEvaluationException34.addSuppressed((java.lang.Throwable) maxIterationsExceededException37);
        java.lang.String str40 = maxIterationsExceededException37.toString();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded" + "'", str40, "org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (-1) exceeded");
    }

    @Test
    public void test08279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08279");
        java.lang.Object[] objArray8 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException9 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray8);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException10 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray8);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray16);
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray13, (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray8, (java.lang.Throwable) convergenceException17);
        java.lang.Object[] objArray20 = convergenceException17.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException17);
        java.lang.String str22 = convergenceException21.getPattern();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str22, "org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test08280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08280");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        boolean boolean6 = complex4.isNaN();
        org.apache.commons.math.complex.Complex complex7 = complex4.sin();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex8.pow(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.asin();
        org.apache.commons.math.complex.Complex complex14 = complex13.atan();
        boolean boolean15 = complex14.isInfinite();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex14.subtract(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex4.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex0.subtract(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex18.asin();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex23.log();
        org.apache.commons.math.complex.Complex complex26 = complex25.cos();
        org.apache.commons.math.complex.Complex complex27 = complex25.exp();
        boolean boolean28 = complex25.isNaN();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        double double31 = complex29.abs();
        org.apache.commons.math.complex.Complex complex32 = complex29.conjugate();
        org.apache.commons.math.complex.Complex complex33 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex34 = complex32.tanh();
        org.apache.commons.math.complex.Complex complex35 = complex25.multiply(complex32);
        org.apache.commons.math.complex.Complex complex36 = complex25.cos();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = complex37.log();
        org.apache.commons.math.complex.Complex complex40 = complex39.cos();
        double double41 = complex40.abs();
        org.apache.commons.math.complex.Complex complex42 = complex40.sqrt();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex46 = complex45.sin();
        org.apache.commons.math.complex.Complex complex47 = complex43.pow(complex45);
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        org.apache.commons.math.complex.Complex complex50 = complex48.log();
        org.apache.commons.math.complex.Complex complex51 = complex43.divide(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex42.subtract(complex51);
        org.apache.commons.math.complex.Complex complex53 = complex42.conjugate();
        org.apache.commons.math.complex.Complex complex54 = complex42.cos();
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        org.apache.commons.math.complex.Complex complex60 = complex58.log();
        org.apache.commons.math.complex.Complex complex61 = complex58.sin();
        org.apache.commons.math.complex.Complex complex62 = complex58.log();
        org.apache.commons.math.complex.Complex complex63 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex64 = complex63.sqrt();
        org.apache.commons.math.complex.Complex complex65 = complex58.divide(complex64);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        org.apache.commons.math.complex.Complex complex68 = complex67.acos();
        double double69 = complex67.getReal();
        org.apache.commons.math.complex.Complex complex70 = complex67.sqrt();
        org.apache.commons.math.complex.Complex complex71 = complex58.pow(complex67);
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex73 = complex72.cosh();
        org.apache.commons.math.complex.Complex complex74 = complex72.log();
        org.apache.commons.math.complex.Complex complex75 = complex74.cos();
        org.apache.commons.math.complex.Complex complex76 = complex67.multiply(complex74);
        org.apache.commons.math.complex.Complex complex77 = complex74.tanh();
        org.apache.commons.math.complex.Complex complex78 = complex56.divide(complex74);
        org.apache.commons.math.complex.Complex complex79 = complex55.pow(complex74);
        org.apache.commons.math.complex.Complex complex80 = complex36.add(complex79);
        org.apache.commons.math.complex.Complex complex81 = complex36.sqrt1z();
        org.apache.commons.math.complex.Complex complex82 = complex22.subtract(complex36);
        org.apache.commons.math.complex.Complex complex83 = complex22.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + Double.POSITIVE_INFINITY + "'", double31 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
    }

    @Test
    public void test08281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08281");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        laguerreSolver6.setAbsoluteAccuracy((double) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = laguerreSolver6.getPolynomialFunction();
        double double23 = polynomialFunction21.value((-1.0d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = polynomialFunction21.polynomialDerivative();
        int int25 = polynomialFunction24.degree();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver26 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction24);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = laguerreSolver26.solve(0.0d, 138.6001443000692d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [0.0,138.6001443000692]  Values: [100.0,100.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-99.0d) + "'", double23 == (-99.0d));
        org.junit.Assert.assertNotNull(polynomialFunction24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test08282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08282");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setRelativeAccuracy(10.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = laguerreSolver6.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
    }

    @Test
    public void test08283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08283");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(112034.0d, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MaxIterationsExceededException: ");
    }

    @Test
    public void test08284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08284");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        double double13 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setRelativeAccuracy((double) 10);
        double double17 = laguerreSolver6.getRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = laguerreSolver6.solve(138.6001443000692d, (double) 0, (-1.6546106770510394E114d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [138.6001443000692,0.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-6d + "'", double13 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
    }

    @Test
    public void test08285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08285");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.setMaximalIterationCount((int) ' ');
        laguerreSolver6.setRelativeAccuracy((double) (short) 10);
        double double17 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        int int19 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.resetRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double24 = laguerreSolver6.solve(3.8807843725528085E24d, 88.60844767819809d, (-4.5613214195472374E26d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [3.8807843725528085E24,88.60844767819809]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-6d + "'", double17 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
    }

    @Test
    public void test08286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08286");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.acos();
        double double11 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex0.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.cos();
        org.apache.commons.math.complex.Complex complex18 = complex9.multiply(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex20 = complex19.asin();
        org.apache.commons.math.complex.Complex complex21 = complex20.sin();
        boolean boolean22 = complex21.isInfinite();
        org.apache.commons.math.complex.Complex complex23 = complex21.sinh();
        org.apache.commons.math.complex.Complex complex24 = complex21.negate();
        org.apache.commons.math.complex.Complex complex25 = complex24.sinh();
        org.apache.commons.math.complex.Complex complex26 = complex25.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
    }

    @Test
    public void test08287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08287");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex3.sqrt1z();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        double double8 = complex6.abs();
        org.apache.commons.math.complex.Complex complex9 = complex6.cos();
        org.apache.commons.math.complex.Complex complex10 = null;
        org.apache.commons.math.complex.Complex complex11 = complex9.multiply(complex10);
        org.apache.commons.math.complex.Complex complex12 = complex11.sqrt1z();
        org.apache.commons.math.complex.Complex complex13 = complex12.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
    }

    @Test
    public void test08288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08288");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        laguerreSolver9.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver9.resetRelativeAccuracy();
        double double25 = laguerreSolver9.solve(1.0E-6d, (double) 32, 0.0d);
        int int26 = laguerreSolver9.getIterationCount();
        laguerreSolver9.resetAbsoluteAccuracy();
        double double28 = laguerreSolver9.getRelativeAccuracy();
        double double31 = laguerreSolver9.solve((-28.48893571891069d), 0.0d);
        double double32 = laguerreSolver9.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0E-14d + "'", double28 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0E-14d + "'", double32 == 1.0E-14d);
    }

    @Test
    public void test08289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08289");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        double double10 = polynomialFunction6.value((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction6.polynomialDerivative();
        double[] doubleArray12 = polynomialFunction6.getCoefficients();
        int int13 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction15 = polynomialFunction6.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction16 = polynomialFunction6.derivative();
        double double18 = polynomialFunction6.value((-2.531519208223786E37d));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(univariateRealFunction15);
        org.junit.Assert.assertNotNull(univariateRealFunction16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-4.107001940009445E149d) + "'", double18 == (-4.107001940009445E149d));
    }

    @Test
    public void test08290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08290");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        laguerreSolver6.setFunctionValueAccuracy((double) (byte) -1);
        int int12 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.resetFunctionValueAccuracy();
        int int14 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.setAbsoluteAccuracy((double) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = laguerreSolver6.solve(33.000004d, 1000.0d, (-1.6138958523368236E128d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [33.000004,1000.0]  Values: [3301.0004,100001.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test08291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08291");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.conjugate();
        boolean boolean3 = complex2.isNaN();
        org.apache.commons.math.complex.Complex complex4 = complex2.log();
        org.apache.commons.math.complex.Complex complex5 = complex4.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
    }

    @Test
    public void test08292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08292");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        int int7 = polynomialFunction6.degree();
        int int8 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction9.polynomialDerivative();
        double[] doubleArray11 = polynomialFunction10.getCoefficients();
        int int12 = polynomialFunction10.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = polynomialFunction10.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction14 = polynomialFunction10.derivative();
        double[] doubleArray15 = polynomialFunction10.getCoefficients();
        double double17 = polynomialFunction10.value((-13672.0d));
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction18 = polynomialFunction10.derivative();
        double[] doubleArray19 = polynomialFunction10.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[200.0, 0.0, -12.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertNotNull(univariateRealFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[200.0, 0.0, -12.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-2.243082808E9d) + "'", double17 == (-2.243082808E9d));
        org.junit.Assert.assertNotNull(univariateRealFunction18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[200.0, 0.0, -12.0]");
    }

    @Test
    public void test08293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08293");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: ", objArray9);
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray14);
        java.lang.Object[] objArray20 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException21 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray20);
        convergenceException15.addSuppressed((java.lang.Throwable) maxIterationsExceededException21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray9, (java.lang.Throwable) maxIterationsExceededException21);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray9);
        java.lang.Throwable[] throwableArray25 = convergenceException24.getSuppressed();
        java.lang.Object[] objArray41 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException42 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray41);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException43 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray41);
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("", objArray48);
        java.lang.Object[] objArray51 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("", objArray51);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("", objArray48, (java.lang.Throwable) convergenceException52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray48, (java.lang.Throwable) functionEvaluationException55);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "org.apache.commons.math.ConvergenceException: hi!", objArray41, (java.lang.Throwable) functionEvaluationException56);
        java.lang.Object[] objArray66 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException67 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray66);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException68 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray66);
        java.lang.Object[] objArray73 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("", objArray73);
        java.lang.Object[] objArray76 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("", objArray76);
        org.apache.commons.math.ConvergenceException convergenceException78 = new org.apache.commons.math.ConvergenceException("", objArray73, (java.lang.Throwable) convergenceException77);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException80 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException81 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray73, (java.lang.Throwable) functionEvaluationException80);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException82 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "org.apache.commons.math.ConvergenceException: hi!", objArray66, (java.lang.Throwable) functionEvaluationException81);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray41, (java.lang.Throwable) functionEvaluationException81);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException84 = new org.apache.commons.math.MaxIterationsExceededException(0, "", objArray41);
        org.apache.commons.math.ConvergenceException convergenceException85 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray41);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException((-9899.0d), (java.lang.Throwable) convergenceException85);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException87 = new org.apache.commons.math.FunctionEvaluationException(1801.0d, (java.lang.Throwable) functionEvaluationException86);
        org.apache.commons.math.ConvergenceException convergenceException88 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException86);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException89 = new org.apache.commons.math.FunctionEvaluationException((-2.647377083281663E123d), "Convergence failed", (java.lang.Object[]) throwableArray25, (java.lang.Throwable) convergenceException88);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[0.0, 1]");
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
    }

    @Test
    public void test08294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08294");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.acos();
        double double11 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex0.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.cos();
        org.apache.commons.math.complex.Complex complex18 = complex9.multiply(complex16);
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex22 = complex21.sin();
        org.apache.commons.math.complex.Complex complex23 = complex19.pow(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex18.multiply(complex19);
        org.apache.commons.math.complex.Complex complex25 = complex24.log();
        org.apache.commons.math.complex.Complex complex26 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex25.exp();
        org.apache.commons.math.complex.Complex complex28 = complex27.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
    }

    @Test
    public void test08295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08295");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        boolean boolean14 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex6.divide(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex6.log();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex22.sin();
        org.apache.commons.math.complex.Complex complex24 = complex20.pow(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex24.asin();
        org.apache.commons.math.complex.Complex complex26 = complex24.tan();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        double double29 = complex27.abs();
        org.apache.commons.math.complex.Complex complex30 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex30.conjugate();
        boolean boolean32 = complex30.isInfinite();
        org.apache.commons.math.complex.Complex complex33 = complex30.asin();
        boolean boolean34 = complex30.isNaN();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex30.divide(complex35);
        org.apache.commons.math.complex.Complex complex38 = complex26.pow(complex35);
        org.apache.commons.math.complex.Complex complex39 = complex26.sinh();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        double double42 = complex40.abs();
        org.apache.commons.math.complex.Complex complex43 = complex40.conjugate();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        boolean boolean46 = complex44.isNaN();
        org.apache.commons.math.complex.Complex complex47 = complex44.sin();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex complex51 = complex50.sin();
        org.apache.commons.math.complex.Complex complex52 = complex48.pow(complex50);
        org.apache.commons.math.complex.Complex complex53 = complex52.asin();
        org.apache.commons.math.complex.Complex complex54 = complex53.atan();
        boolean boolean55 = complex54.isInfinite();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = complex54.subtract(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex57.sin();
        org.apache.commons.math.complex.Complex complex59 = complex44.divide(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex40.subtract(complex58);
        boolean boolean61 = complex60.isNaN();
        org.apache.commons.math.complex.Complex complex62 = complex39.subtract(complex60);
        org.apache.commons.math.complex.Complex complex63 = complex19.divide(complex62);
        boolean boolean64 = complex63.isInfinite();
        org.apache.commons.math.complex.Complex complex65 = complex63.acos();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        org.apache.commons.math.complex.Complex complex68 = complex66.log();
        double double69 = complex68.getImaginary();
        double double70 = complex68.getImaginary();
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex72 = complex71.cosh();
        org.apache.commons.math.complex.Complex complex73 = complex72.acos();
        double double74 = complex72.getReal();
        org.apache.commons.math.complex.Complex complex75 = complex72.sqrt();
        org.apache.commons.math.complex.Complex complex76 = complex68.subtract(complex72);
        org.apache.commons.math.complex.Complex complex77 = complex65.add(complex72);
        boolean boolean78 = complex65.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + Double.POSITIVE_INFINITY + "'", double29 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + Double.POSITIVE_INFINITY + "'", double42 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.7853981633974483d + "'", double69 == 0.7853981633974483d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.7853981633974483d + "'", double70 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test08296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08296");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex3.asin();
        org.apache.commons.math.complex.Complex complex7 = complex3.exp();
        org.apache.commons.math.complex.Complex complex10 = new org.apache.commons.math.complex.Complex(35.0d, 1484.0d);
        org.apache.commons.math.complex.Complex complex11 = complex3.pow(complex10);
        double double12 = complex11.getImaginary();
        org.apache.commons.math.complex.Complex complex13 = complex11.sinh();
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test08297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08297");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        int int7 = polynomialFunction6.degree();
        int int8 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction10 = polynomialFunction9.derivative();
        int int11 = polynomialFunction9.degree();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(univariateRealFunction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
    }

    @Test
    public void test08298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08298");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        double[] doubleArray5 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction6 = polynomialFunction3.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double[] doubleArray11 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray11);
        double double14 = polynomialFunction12.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver15 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = laguerreSolver15.getPolynomialFunction();
        double double17 = laguerreSolver15.getRelativeAccuracy();
        laguerreSolver15.resetRelativeAccuracy();
        double double19 = laguerreSolver15.getFunctionValueAccuracy();
        laguerreSolver15.resetRelativeAccuracy();
        laguerreSolver15.setMaximalIterationCount((int) (short) 10);
        double[] doubleArray25 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray25);
        double double28 = polynomialFunction26.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver29 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction26);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = laguerreSolver29.getPolynomialFunction();
        double double31 = laguerreSolver29.getAbsoluteAccuracy();
        double[] doubleArray37 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction38 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray40 = laguerreSolver29.solveAll(doubleArray37, 10001.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction41 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray43 = laguerreSolver15.solveAll(doubleArray37, 349.0d);
        org.apache.commons.math.complex.Complex[] complexArray45 = laguerreSolver8.solveAll(doubleArray37, (-99.0d));
        double double46 = laguerreSolver8.getRelativeAccuracy();
        int int47 = laguerreSolver8.getIterationCount();
        laguerreSolver8.resetAbsoluteAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double52 = laguerreSolver8.solve(6401.0d, (-2.647377083281663E123d), 1.0300000099E10d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [6401.0,-2.647377083281663E123]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction6);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10001.0d + "'", double14 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-14d + "'", double17 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-15d + "'", double19 == 1.0E-15d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10001.0d + "'", double28 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0E-6d + "'", double31 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray43);
        org.junit.Assert.assertNotNull(complexArray45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0E-14d + "'", double46 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 18 + "'", int47 == 18);
    }

    @Test
    public void test08299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08299");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setRelativeAccuracy((double) (short) 1);
        laguerreSolver6.setMaximalIterationCount((int) ' ');
        double double14 = laguerreSolver6.getFunctionValueAccuracy();
        double[] doubleArray20 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray20);
        double double23 = polynomialFunction21.value((double) 0);
        double double25 = polynomialFunction21.value((double) (byte) 0);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction26 = polynomialFunction21.derivative();
        double double28 = polynomialFunction21.value((double) 1L);
        double[] doubleArray29 = polynomialFunction21.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver6.solveAll(doubleArray29, (-9.820178719278598d));
        laguerreSolver6.setAbsoluteAccuracy((-3.2273645162588404E16d));
        laguerreSolver6.setMaximalIterationCount(21);
        double double36 = laguerreSolver6.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(univariateRealFunction26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 134.0d + "'", double28 == 134.0d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0E-15d + "'", double36 == 1.0E-15d);
    }

    @Test
    public void test08300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08300");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex10.negate();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex14.sin();
        org.apache.commons.math.complex.Complex complex18 = complex17.atan();
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex10.add(complex18);
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex21.log();
        org.apache.commons.math.complex.Complex complex24 = complex21.sin();
        org.apache.commons.math.complex.Complex complex25 = complex21.log();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex complex28 = complex21.divide(complex27);
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.cosh();
        double double31 = complex29.abs();
        org.apache.commons.math.complex.Complex complex32 = complex29.conjugate();
        org.apache.commons.math.complex.Complex complex33 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex34 = complex28.subtract(complex33);
        org.apache.commons.math.complex.Complex complex35 = complex28.exp();
        org.apache.commons.math.complex.Complex complex36 = complex28.tan();
        org.apache.commons.math.complex.Complex complex37 = complex36.sqrt();
        org.apache.commons.math.complex.Complex complex38 = complex37.tanh();
        org.apache.commons.math.complex.Complex complex39 = complex38.asin();
        org.apache.commons.math.complex.Complex complex40 = complex20.divide(complex38);
        org.apache.commons.math.complex.Complex complex41 = complex20.log();
        org.apache.commons.math.complex.Complex complex42 = complex41.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + Double.POSITIVE_INFINITY + "'", double31 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
    }

    @Test
    public void test08301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08301");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        laguerreSolver6.setAbsoluteAccuracy((double) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = laguerreSolver6.getPolynomialFunction();
        int int22 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.setAbsoluteAccuracy(Double.POSITIVE_INFINITY);
        double double25 = laguerreSolver6.getAbsoluteAccuracy();
        int int26 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = laguerreSolver6.getPolynomialFunction();
        double double30 = polynomialFunction28.value((-1.0303676605150726E8d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + Double.POSITIVE_INFINITY + "'", double25 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 100 + "'", int26 == 100);
        org.junit.Assert.assertNotNull(polynomialFunction28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0303676604150726E10d) + "'", double30 == (-1.0303676604150726E10d));
    }

    @Test
    public void test08302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08302");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.resetFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((-99.0d));
        laguerreSolver6.resetRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
    }

    @Test
    public void test08303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08303");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex7.exp();
        org.apache.commons.math.complex.Complex complex15 = complex7.tan();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        double double18 = complex16.abs();
        org.apache.commons.math.complex.Complex complex19 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        double double22 = complex20.abs();
        org.apache.commons.math.complex.Complex complex23 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex26 = complex23.atan();
        org.apache.commons.math.complex.Complex complex27 = complex16.subtract(complex23);
        org.apache.commons.math.complex.Complex complex28 = complex7.subtract(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.sqrt1z();
        org.apache.commons.math.complex.Complex complex30 = complex27.log();
        org.apache.commons.math.complex.Complex complex31 = complex27.cos();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = complex31.sin();
        boolean boolean34 = complex31.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + Double.POSITIVE_INFINITY + "'", double18 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test08304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08304");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        laguerreSolver6.setFunctionValueAccuracy((double) (byte) -1);
        int int12 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.resetFunctionValueAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = laguerreSolver6.solve((-16099.0d), (-1.441290552272185E46d), (-2.24308280799E11d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [-16099.0,-1.441290552272185E46]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
    }

    @Test
    public void test08305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08305");
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray10, (java.lang.Throwable) convergenceException14);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException16 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.FunctionEvaluationException: ", objArray10);
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray23);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException26 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray23);
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("", objArray33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray33);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException36 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) maxIterationsExceededException36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("", objArray23, (java.lang.Throwable) functionEvaluationException37);
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray10, (java.lang.Throwable) convergenceException38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException38);
        java.lang.Object[] objArray41 = convergenceException38.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray41);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException43 = new org.apache.commons.math.MaxIterationsExceededException(5, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", objArray41);
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex47 = complex45.log();
        org.apache.commons.math.complex.Complex complex48 = complex45.cos();
        org.apache.commons.math.complex.Complex complex49 = complex48.negate();
        org.apache.commons.math.complex.Complex complex50 = complex49.tan();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((-9.89965E7d), "org.apache.commons.math.ConvergenceException: Convergence failed");
        boolean boolean54 = complex49.equals((java.lang.Object) functionEvaluationException53);
        java.lang.String str55 = functionEvaluationException53.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((-1.4823291286E10d), (java.lang.Throwable) functionEvaluationException53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException((-1.3499999269843102d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 35", objArray41, (java.lang.Throwable) functionEvaluationException56);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "org.apache.commons.math.ConvergenceException: Convergence failed" + "'", str55, "org.apache.commons.math.ConvergenceException: Convergence failed");
    }

    @Test
    public void test08306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08306");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray8);
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray8, (java.lang.Throwable) convergenceException12);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException15 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException16 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray8, (java.lang.Throwable) functionEvaluationException15);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException17 = new org.apache.commons.math.MaxIterationsExceededException(32, "org.apache.commons.math.MaxIterationsExceededException: ", objArray8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((-1.0003990597689866E16d), "org.apache.commons.math.ConvergenceException: hi!", objArray8);
        double double19 = functionEvaluationException18.getArgument();
        java.lang.String str20 = functionEvaluationException18.getPattern();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-1.0003990597689866E16d) + "'", double19 == (-1.0003990597689866E16d));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str20, "org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test08307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08307");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.setMaximalIterationCount((int) ' ');
        double double15 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.setMaximalIterationCount(100);
        int int18 = laguerreSolver6.getMaximalIterationCount();
        double double19 = laguerreSolver6.getRelativeAccuracy();
        int int20 = laguerreSolver6.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-14d + "'", double19 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
    }

    @Test
    public void test08308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08308");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = laguerreSolver6.solveAll(doubleArray14, 10001.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = laguerreSolver6.getPolynomialFunction();
        double[] doubleArray21 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray21);
        double double24 = polynomialFunction22.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver25 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction22);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = laguerreSolver25.getPolynomialFunction();
        double double27 = laguerreSolver25.getAbsoluteAccuracy();
        double[] doubleArray33 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray36 = laguerreSolver25.solveAll(doubleArray33, 10001.0d);
        laguerreSolver25.setFunctionValueAccuracy((double) 10.0f);
        double double39 = laguerreSolver25.getRelativeAccuracy();
        double[] doubleArray45 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray45);
        double double48 = polynomialFunction46.value((double) 0);
        double double50 = polynomialFunction46.value((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction51 = polynomialFunction46.polynomialDerivative();
        double[] doubleArray52 = polynomialFunction46.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray54 = laguerreSolver25.solveAll(doubleArray52, (-1.6365376E7d));
        org.apache.commons.math.complex.Complex[] complexArray56 = laguerreSolver6.solveAll(doubleArray52, (double) 100L);
        double double57 = laguerreSolver6.getRelativeAccuracy();
        double double58 = laguerreSolver6.getAbsoluteAccuracy();
        double double59 = laguerreSolver6.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10001.0d + "'", double24 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.0E-6d + "'", double27 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0E-14d + "'", double39 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 0.0d + "'", double48 == 0.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray54);
        org.junit.Assert.assertNotNull(complexArray56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.0E-14d + "'", double57 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.0E-6d + "'", double58 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0E-6d + "'", double59 == 1.0E-6d);
    }

    @Test
    public void test08309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08309");
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("", objArray4);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException5);
        java.lang.Object[] objArray7 = functionEvaluationException6.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray7);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException((-1.0015971948223661E64d), (java.lang.Throwable) convergenceException8);
        java.lang.String str11 = convergenceException8.getPattern();
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray18);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray18);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray18, (java.lang.Throwable) convergenceException22);
        java.lang.String str24 = functionEvaluationException23.getPattern();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException26 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 1);
        java.lang.Throwable throwable28 = null;
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", throwable28);
        maxIterationsExceededException26.addSuppressed((java.lang.Throwable) convergenceException29);
        java.lang.Throwable[] throwableArray31 = maxIterationsExceededException26.getSuppressed();
        functionEvaluationException23.addSuppressed((java.lang.Throwable) maxIterationsExceededException26);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10,001", (java.lang.Throwable) functionEvaluationException23);
        convergenceException8.addSuppressed((java.lang.Throwable) functionEvaluationException23);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "org.apache.commons.math.ConvergenceException: Convergence failed" + "'", str11, "org.apache.commons.math.ConvergenceException: Convergence failed");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!" + "'", str24, "hi!");
        org.junit.Assert.assertNotNull(throwableArray31);
    }

    @Test
    public void test08310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08310");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        java.lang.Object[] objArray9 = functionEvaluationException8.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException10 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) -1, "", objArray9);
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: ", objArray9);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "Maximal number of iterations ({0}) exceeded", objArray9);
        java.lang.Object[] objArray19 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException20 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray19);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException21 = new org.apache.commons.math.MaxIterationsExceededException((-1), "", objArray19);
        int int22 = maxIterationsExceededException21.getMaxIterations();
        java.lang.Object[] objArray23 = maxIterationsExceededException21.getArguments();
        int int24 = maxIterationsExceededException21.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 100", objArray9, (java.lang.Throwable) maxIterationsExceededException21);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException(1.2250000000001261E-12d, (java.lang.Throwable) maxIterationsExceededException21);
        int int27 = maxIterationsExceededException21.getMaxIterations();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[100.0]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test08311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08311");
        java.lang.Object[] objArray4 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException("", objArray4);
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray7);
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray4, (java.lang.Throwable) convergenceException8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "", (java.lang.Throwable) convergenceException9);
        double double11 = functionEvaluationException10.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException10);
        java.lang.String str13 = convergenceException12.toString();
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "org.apache.commons.math.ConvergenceException: " + "'", str13, "org.apache.commons.math.ConvergenceException: ");
    }

    @Test
    public void test08312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08312");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        boolean boolean14 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex6.divide(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex6.cos();
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt1z();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex22.sin();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex22.multiply(complex25);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.abs();
        org.apache.commons.math.complex.Complex complex31 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex31.conjugate();
        boolean boolean33 = complex31.isInfinite();
        org.apache.commons.math.complex.Complex complex34 = complex31.cos();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        double double37 = complex35.abs();
        org.apache.commons.math.complex.Complex complex38 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex39 = complex38.conjugate();
        boolean boolean40 = complex38.isInfinite();
        org.apache.commons.math.complex.Complex complex41 = complex38.asin();
        boolean boolean42 = complex38.isNaN();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex38.divide(complex43);
        org.apache.commons.math.complex.Complex complex46 = complex34.divide(complex43);
        org.apache.commons.math.complex.Complex complex47 = complex22.subtract(complex34);
        org.apache.commons.math.complex.Complex complex48 = complex47.asin();
        org.apache.commons.math.complex.Complex complex49 = complex20.subtract(complex47);
        org.apache.commons.math.complex.Complex complex50 = complex47.conjugate();
        double double51 = complex50.abs();
        double[] doubleArray54 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction55 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray54);
        double double57 = polynomialFunction55.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver58 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction55);
        double double62 = laguerreSolver58.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver58.setMaximalIterationCount((int) '#');
        laguerreSolver58.setMaximalIterationCount((int) ' ');
        double double67 = laguerreSolver58.getRelativeAccuracy();
        double double68 = laguerreSolver58.getFunctionValueAccuracy();
        laguerreSolver58.setRelativeAccuracy((double) 100);
        double double71 = laguerreSolver58.getResult();
        double double72 = laguerreSolver58.getResult();
        boolean boolean73 = complex50.equals((java.lang.Object) double72);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + Double.POSITIVE_INFINITY + "'", double37 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10001.0d + "'", double57 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-0.01d) + "'", double62 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 1.0E-14d + "'", double67 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 1.0E-15d + "'", double68 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-0.01d) + "'", double71 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + (-0.01d) + "'", double72 == (-0.01d));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test08313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08313");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.exp();
        org.apache.commons.math.complex.Complex complex2 = complex1.acos();
        org.apache.commons.math.complex.Complex complex3 = complex2.acos();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.tan();
        org.apache.commons.math.complex.Complex complex6 = complex3.pow(complex5);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        boolean boolean11 = complex7.isNaN();
        boolean boolean12 = complex7.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex7.log();
        org.apache.commons.math.complex.Complex complex14 = complex13.log();
        org.apache.commons.math.complex.Complex complex15 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.abs();
        org.apache.commons.math.complex.Complex complex20 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex20.conjugate();
        boolean boolean22 = complex20.isInfinite();
        org.apache.commons.math.complex.Complex complex23 = complex20.asin();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex27 = complex26.sin();
        org.apache.commons.math.complex.Complex complex28 = complex24.pow(complex26);
        org.apache.commons.math.complex.Complex complex29 = complex28.asin();
        org.apache.commons.math.complex.Complex complex30 = complex28.tan();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        double double33 = complex31.abs();
        org.apache.commons.math.complex.Complex complex34 = complex31.conjugate();
        org.apache.commons.math.complex.Complex complex35 = complex34.conjugate();
        boolean boolean36 = complex34.isInfinite();
        org.apache.commons.math.complex.Complex complex37 = complex34.asin();
        boolean boolean38 = complex34.isNaN();
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex41 = complex34.divide(complex39);
        org.apache.commons.math.complex.Complex complex42 = complex30.pow(complex39);
        org.apache.commons.math.complex.Complex complex43 = complex23.subtract(complex30);
        boolean boolean44 = complex30.isInfinite();
        org.apache.commons.math.complex.Complex complex45 = complex30.sqrt();
        org.apache.commons.math.complex.Complex complex46 = complex6.add(complex45);
        double double47 = complex46.getImaginary();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + Double.POSITIVE_INFINITY + "'", double19 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + Double.POSITIVE_INFINITY + "'", double33 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
    }

    @Test
    public void test08314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08314");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        double double6 = polynomialFunction4.value((-1.27398901900236288E17d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 35.0d + "'", double6 == 35.0d);
    }

    @Test
    public void test08315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08315");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException6 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        java.lang.Object[] objArray7 = functionEvaluationException6.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException(0.7853981633974483d, "hi!", (java.lang.Throwable) functionEvaluationException6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException(101.0d, "hi!", (java.lang.Throwable) functionEvaluationException6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException((-2.8667065448436136E59d), (java.lang.Throwable) functionEvaluationException6);
        java.lang.Throwable[] throwableArray11 = functionEvaluationException10.getSuppressed();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[100.0]");
        org.junit.Assert.assertNotNull(throwableArray11);
    }

    @Test
    public void test08316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08316");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(3.8807843725528085E24d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!");
        java.lang.String str3 = functionEvaluationException2.getPattern();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!" + "'", str3, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test08317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08317");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex5.log();
        org.apache.commons.math.complex.Complex complex8 = complex0.divide(complex7);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex9.sin();
        org.apache.commons.math.complex.Complex complex12 = complex8.pow(complex9);
        org.apache.commons.math.complex.Complex complex13 = complex9.sin();
        double double14 = complex13.abs();
        double double15 = complex13.abs();
        double double16 = complex13.getReal();
        org.apache.commons.math.complex.Complex complex17 = complex13.log();
        org.apache.commons.math.complex.Complex complex18 = complex17.sinh();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        org.apache.commons.math.complex.Complex complex21 = complex19.log();
        org.apache.commons.math.complex.Complex complex22 = complex19.sin();
        org.apache.commons.math.complex.Complex complex23 = complex19.log();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex19.divide(complex25);
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex28.acos();
        double double30 = complex28.getReal();
        org.apache.commons.math.complex.Complex complex31 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex32 = complex19.pow(complex28);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex33.log();
        org.apache.commons.math.complex.Complex complex36 = complex35.cos();
        org.apache.commons.math.complex.Complex complex37 = complex28.multiply(complex35);
        org.apache.commons.math.complex.Complex complex38 = complex35.tanh();
        org.apache.commons.math.complex.Complex complex39 = complex38.asin();
        double[] doubleArray45 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray45);
        int int47 = polynomialFunction46.degree();
        boolean boolean48 = complex38.equals((java.lang.Object) polynomialFunction46);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        double double51 = complex49.abs();
        org.apache.commons.math.complex.Complex complex52 = complex49.conjugate();
        org.apache.commons.math.complex.Complex complex53 = complex52.conjugate();
        boolean boolean54 = complex52.isInfinite();
        org.apache.commons.math.complex.Complex complex55 = complex52.asin();
        boolean boolean56 = complex52.isNaN();
        org.apache.commons.math.complex.Complex complex57 = complex52.negate();
        org.apache.commons.math.complex.Complex complex58 = complex38.pow(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex38.exp();
        org.apache.commons.math.complex.Complex complex60 = complex59.atan();
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex62 = complex18.pow(complex60);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 4 + "'", int47 == 4);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + Double.POSITIVE_INFINITY + "'", double51 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
    }

    @Test
    public void test08318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08318");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException(6.952589180540997E117d);
    }

    @Test
    public void test08319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08319");
        java.lang.Object[] objArray12 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException13 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException14 = new org.apache.commons.math.MaxIterationsExceededException((-1), "", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", objArray12);
        java.lang.Object[] objArray26 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException27 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray26);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException28 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray26);
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray31);
        java.lang.Object[] objArray34 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("", objArray34);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("", objArray31, (java.lang.Throwable) convergenceException35);
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray26, (java.lang.Throwable) convergenceException35);
        java.lang.Object[] objArray38 = convergenceException35.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "hi!", (java.lang.Throwable) convergenceException35);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) functionEvaluationException39);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((double) (-1), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", objArray12, (java.lang.Throwable) convergenceException40);
        java.lang.Object[] objArray46 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("", objArray46);
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray49);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("", objArray46, (java.lang.Throwable) convergenceException50);
        java.lang.Throwable[] throwableArray52 = convergenceException51.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((-99.0d), "Evaluation failed for argument = {0}", (java.lang.Object[]) throwableArray52);
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray12, (java.lang.Throwable) functionEvaluationException53);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException(3.999800035E9d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) functionEvaluationException53);
        double double56 = functionEvaluationException55.getArgument();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 3.999800035E9d + "'", double56 == 3.999800035E9d);
    }

    @Test
    public void test08320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08320");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex6.sinh();
        org.apache.commons.math.complex.Complex complex14 = complex13.acos();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex15.log();
        org.apache.commons.math.complex.Complex complex18 = complex15.sin();
        org.apache.commons.math.complex.Complex complex19 = complex15.log();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex22 = complex15.divide(complex21);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        double double25 = complex23.abs();
        org.apache.commons.math.complex.Complex complex26 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex26.conjugate();
        org.apache.commons.math.complex.Complex complex28 = complex22.subtract(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex22.exp();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex32 = complex31.acos();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex33.log();
        org.apache.commons.math.complex.Complex complex36 = complex33.sin();
        org.apache.commons.math.complex.Complex complex37 = complex36.tanh();
        org.apache.commons.math.complex.Complex complex38 = complex31.add(complex37);
        boolean boolean39 = complex22.equals((java.lang.Object) complex31);
        org.apache.commons.math.complex.Complex complex40 = complex13.multiply(complex22);
        double double41 = complex22.abs();
        boolean boolean42 = complex22.isNaN();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex43.log();
        org.apache.commons.math.complex.Complex complex46 = complex45.cos();
        double double47 = complex46.abs();
        org.apache.commons.math.complex.Complex complex48 = complex46.sqrt();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex51 = complex50.sqrt();
        org.apache.commons.math.complex.Complex complex52 = complex51.sin();
        org.apache.commons.math.complex.Complex complex53 = complex49.pow(complex51);
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex55 = complex54.cosh();
        org.apache.commons.math.complex.Complex complex56 = complex54.log();
        org.apache.commons.math.complex.Complex complex57 = complex49.divide(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex48.subtract(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex48.conjugate();
        org.apache.commons.math.complex.Complex complex60 = complex48.conjugate();
        org.apache.commons.math.complex.Complex complex61 = complex48.cos();
        org.apache.commons.math.complex.Complex complex62 = complex61.negate();
        org.apache.commons.math.complex.Complex complex63 = complex61.acos();
        org.apache.commons.math.complex.Complex complex64 = complex61.asin();
        org.apache.commons.math.complex.Complex complex65 = complex22.pow(complex61);
        double double66 = complex65.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + Double.POSITIVE_INFINITY + "'", double25 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
    }

    @Test
    public void test08321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08321");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        boolean boolean13 = complex11.isInfinite();
        org.apache.commons.math.complex.Complex complex14 = complex11.cos();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        boolean boolean20 = complex18.isInfinite();
        org.apache.commons.math.complex.Complex complex21 = complex18.asin();
        boolean boolean22 = complex18.isNaN();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex18.divide(complex23);
        org.apache.commons.math.complex.Complex complex26 = complex14.divide(complex23);
        org.apache.commons.math.complex.Complex complex27 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex28 = complex7.multiply(complex23);
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = complex32.sin();
        org.apache.commons.math.complex.Complex complex34 = complex30.pow(complex32);
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex35.log();
        org.apache.commons.math.complex.Complex complex38 = complex30.divide(complex37);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex40 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex41 = complex39.sin();
        org.apache.commons.math.complex.Complex complex42 = complex38.pow(complex39);
        org.apache.commons.math.complex.Complex complex43 = complex39.sin();
        org.apache.commons.math.complex.Complex complex44 = complex29.pow(complex39);
        org.apache.commons.math.complex.Complex complex45 = complex44.tanh();
        boolean boolean46 = complex45.isNaN();
        boolean boolean47 = complex45.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test08322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08322");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 100, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        double double7 = complex5.abs();
        org.apache.commons.math.complex.Complex complex8 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex3.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex10.log();
        org.apache.commons.math.complex.Complex complex13 = complex10.sin();
        org.apache.commons.math.complex.Complex complex14 = complex10.log();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex16);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        double double20 = complex18.abs();
        org.apache.commons.math.complex.Complex complex21 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex17.subtract(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex9.multiply(complex17);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex25.log();
        org.apache.commons.math.complex.Complex complex28 = complex27.cos();
        double double29 = complex28.abs();
        org.apache.commons.math.complex.Complex complex30 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex complex34 = complex33.sin();
        org.apache.commons.math.complex.Complex complex35 = complex31.pow(complex33);
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex36.log();
        org.apache.commons.math.complex.Complex complex39 = complex31.divide(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex30.subtract(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex17.pow(complex30);
        org.apache.commons.math.complex.Complex complex42 = complex17.tanh();
        org.apache.commons.math.complex.Complex complex43 = complex42.tan();
        org.apache.commons.math.complex.Complex complex44 = complex2.add(complex42);
        org.apache.commons.math.complex.Complex complex45 = complex2.tanh();
        org.apache.commons.math.complex.Complex complex46 = complex2.sin();
        double[] doubleArray49 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction50 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray49);
        double double52 = polynomialFunction50.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver53 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction50);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction54 = laguerreSolver53.getPolynomialFunction();
        laguerreSolver53.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction57 = laguerreSolver53.getPolynomialFunction();
        laguerreSolver53.resetRelativeAccuracy();
        laguerreSolver53.resetAbsoluteAccuracy();
        double double60 = laguerreSolver53.getFunctionValueAccuracy();
        boolean boolean61 = complex2.equals((java.lang.Object) laguerreSolver53);
        laguerreSolver53.setMaximalIterationCount(5);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + Double.POSITIVE_INFINITY + "'", double7 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + Double.POSITIVE_INFINITY + "'", double20 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10001.0d + "'", double52 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction54);
        org.junit.Assert.assertNotNull(polynomialFunction57);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0E-15d + "'", double60 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test08323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08323");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        int int7 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double9 = laguerreSolver8.getFunctionValueAccuracy();
        double double13 = laguerreSolver8.solve((double) (byte) 100, 2.799833927635354E75d, 0.0d);
        double double16 = laguerreSolver8.solve(0.0d, 0.0d);
        laguerreSolver8.setMaximalIterationCount(3);
        double[] doubleArray23 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray23);
        double double26 = polynomialFunction24.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver27 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction24);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction28 = laguerreSolver27.getPolynomialFunction();
        double[] doubleArray31 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        org.apache.commons.math.complex.Complex[] complexArray34 = laguerreSolver27.solveAll(doubleArray31, 1.0d);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        java.lang.Object[] objArray37 = functionEvaluationException36.getArguments();
        java.lang.String str38 = functionEvaluationException36.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException(1.0E-15d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: Evaluation failed for argument = {0}", (java.lang.Object[]) complexArray34, (java.lang.Throwable) functionEvaluationException36);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex40.log();
        org.apache.commons.math.complex.Complex complex43 = complex42.cos();
        double double44 = complex43.abs();
        org.apache.commons.math.complex.Complex complex45 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex47 = complex46.sqrt();
        boolean boolean48 = complex46.isNaN();
        double double49 = complex46.getReal();
        boolean boolean50 = complex46.isNaN();
        org.apache.commons.math.complex.Complex complex51 = complex46.asin();
        org.apache.commons.math.complex.Complex complex52 = complex45.pow(complex51);
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        double double55 = complex53.abs();
        org.apache.commons.math.complex.Complex complex56 = complex53.conjugate();
        org.apache.commons.math.complex.Complex complex57 = complex56.conjugate();
        org.apache.commons.math.complex.Complex complex58 = complex56.tanh();
        org.apache.commons.math.complex.Complex complex59 = complex58.tan();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex61 = complex60.cosh();
        double double62 = complex60.abs();
        org.apache.commons.math.complex.Complex complex63 = complex60.conjugate();
        org.apache.commons.math.complex.Complex complex64 = complex63.conjugate();
        org.apache.commons.math.complex.Complex complex65 = complex59.subtract(complex63);
        org.apache.commons.math.complex.Complex complex66 = complex63.negate();
        java.lang.Object[] objArray70 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("", objArray70);
        java.lang.Object[] objArray76 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("", objArray76);
        java.lang.Object[] objArray79 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException("", objArray79);
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException("", objArray76, (java.lang.Throwable) convergenceException80);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray76, (java.lang.Throwable) functionEvaluationException83);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray70, (java.lang.Throwable) functionEvaluationException84);
        java.lang.String str86 = functionEvaluationException85.getPattern();
        boolean boolean87 = complex66.equals((java.lang.Object) functionEvaluationException85);
        org.apache.commons.math.complex.Complex complex88 = complex45.subtract(complex66);
        org.apache.commons.math.complex.Complex complex89 = complex45.negate();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.complex.Complex complex90 = laguerreSolver8.solve(complexArray34, complex89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Polynomial degree must be positive: degree=0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-15d + "'", double9 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10001.0d + "'", double26 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray34);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[100.0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Evaluation failed for argument = {0}" + "'", str38, "Evaluation failed for argument = {0}");
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + Double.POSITIVE_INFINITY + "'", double49 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + Double.POSITIVE_INFINITY + "'", double55 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + Double.POSITIVE_INFINITY + "'", double62 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
    }

    @Test
    public void test08324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08324");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        int int7 = polynomialFunction6.degree();
        int int8 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction9.polynomialDerivative();
        double[] doubleArray11 = polynomialFunction10.getCoefficients();
        int int12 = polynomialFunction10.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = polynomialFunction10.polynomialDerivative();
        double double15 = polynomialFunction13.value(134.0d);
        int int16 = polynomialFunction13.degree();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[200.0, 0.0, -12.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-3216.0d) + "'", double15 == (-3216.0d));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test08325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08325");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.cos();
        org.apache.commons.math.complex.Complex complex4 = complex3.negate();
        org.apache.commons.math.complex.Complex complex5 = complex4.tan();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        double double8 = complex6.abs();
        org.apache.commons.math.complex.Complex complex9 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex10 = complex9.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex9.tanh();
        org.apache.commons.math.complex.Complex complex12 = complex11.tan();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = complex13.cosh();
        double double15 = complex13.abs();
        org.apache.commons.math.complex.Complex complex16 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex16.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex12.subtract(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex16.negate();
        org.apache.commons.math.complex.Complex complex20 = complex19.acos();
        org.apache.commons.math.complex.Complex complex21 = complex19.sinh();
        org.apache.commons.math.complex.Complex complex22 = complex4.divide(complex21);
        boolean boolean23 = complex4.isInfinite();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex25.acos();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        org.apache.commons.math.complex.Complex complex29 = complex27.log();
        org.apache.commons.math.complex.Complex complex30 = complex27.sin();
        org.apache.commons.math.complex.Complex complex31 = complex30.tanh();
        org.apache.commons.math.complex.Complex complex32 = complex25.add(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex32.exp();
        org.apache.commons.math.complex.Complex complex34 = complex33.exp();
        org.apache.commons.math.complex.Complex complex35 = complex4.add(complex34);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + Double.POSITIVE_INFINITY + "'", double8 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + Double.POSITIVE_INFINITY + "'", double15 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
    }

    @Test
    public void test08326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08326");
        double[] doubleArray5 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver9.getPolynomialFunction();
        laguerreSolver9.resetRelativeAccuracy();
        double[] doubleArray17 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray17);
        org.apache.commons.math.complex.Complex[] complexArray21 = laguerreSolver9.solveAll(doubleArray17, 101.0d);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        java.lang.Object[] objArray26 = functionEvaluationException25.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException27 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) -1, "", objArray26);
        java.lang.Object[] objArray28 = maxIterationsExceededException27.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", (java.lang.Object[]) complexArray21, (java.lang.Throwable) maxIterationsExceededException27);
        java.lang.Object[] objArray30 = convergenceException29.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException31 = new org.apache.commons.math.MaxIterationsExceededException((int) '#', "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray30);
        java.lang.Throwable[] throwableArray32 = maxIterationsExceededException31.getSuppressed();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10001.0d + "'", double8 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray21);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[100.0]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[100.0]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
    }

    @Test
    public void test08327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08327");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        boolean boolean7 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex6.subtract(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex9.sqrt1z();
        org.apache.commons.math.complex.Complex complex12 = complex9.cos();
        boolean boolean13 = complex12.isNaN();
        double double14 = complex12.getImaginary();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex15.log();
        org.apache.commons.math.complex.Complex complex18 = complex17.cos();
        org.apache.commons.math.complex.Complex complex19 = complex17.exp();
        boolean boolean20 = complex17.isNaN();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        double double23 = complex21.abs();
        org.apache.commons.math.complex.Complex complex24 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex24.conjugate();
        org.apache.commons.math.complex.Complex complex26 = complex24.tanh();
        org.apache.commons.math.complex.Complex complex27 = complex17.multiply(complex24);
        org.apache.commons.math.complex.Complex complex28 = complex24.acos();
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex28.sqrt1z();
        org.apache.commons.math.complex.Complex complex31 = complex28.tan();
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex31.tanh();
        org.apache.commons.math.complex.Complex complex34 = complex12.subtract(complex33);
        boolean boolean35 = complex12.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + Double.POSITIVE_INFINITY + "'", double23 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test08328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08328");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        double double10 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        double double13 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.setMaximalIterationCount((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = laguerreSolver6.solve(1.03000000990101E14d, (-1.49889849063436E14d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [1.03000000990101E14,-1.49889849063436E14]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-15d + "'", double10 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-15d + "'", double13 == 1.0E-15d);
    }

    @Test
    public void test08329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08329");
        java.lang.Throwable throwable2 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((-4.012132225300969E15d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10,001", throwable2);
    }

    @Test
    public void test08330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08330");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver9.resetMaximalIterationCount();
        laguerreSolver9.resetRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = laguerreSolver9.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction12.polynomialDerivative();
        int int15 = polynomialFunction14.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = polynomialFunction14.polynomialDerivative();
        double double18 = polynomialFunction14.value((-9.631547407031818E12d));
        double[] doubleArray19 = polynomialFunction14.getCoefficients();
        double[] doubleArray20 = polynomialFunction14.getCoefficients();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction12);
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 3.573947685493632E39d + "'", double18 == 3.573947685493632E39d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[35.0, 200.0, 0.0, -4.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[35.0, 200.0, 0.0, -4.0]");
    }

    @Test
    public void test08331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08331");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        laguerreSolver6.setMaximalIterationCount(4);
        laguerreSolver6.setAbsoluteAccuracy((double) 'a');
        double double11 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((-1.0303676599E10d));
        laguerreSolver6.resetFunctionValueAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 97.0d + "'", double11 == 97.0d);
    }

    @Test
    public void test08332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08332");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex7.exp();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex16.acos();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex18.log();
        org.apache.commons.math.complex.Complex complex21 = complex18.sin();
        org.apache.commons.math.complex.Complex complex22 = complex21.tanh();
        org.apache.commons.math.complex.Complex complex23 = complex16.add(complex22);
        boolean boolean24 = complex7.equals((java.lang.Object) complex16);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.sqrt();
        org.apache.commons.math.complex.Complex complex28 = complex27.sin();
        org.apache.commons.math.complex.Complex complex29 = complex25.pow(complex27);
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex32 = complex30.log();
        org.apache.commons.math.complex.Complex complex33 = complex25.divide(complex32);
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex35 = complex34.sqrt();
        org.apache.commons.math.complex.Complex complex36 = complex34.sin();
        org.apache.commons.math.complex.Complex complex37 = complex33.pow(complex34);
        org.apache.commons.math.complex.Complex complex38 = complex16.pow(complex37);
        org.apache.commons.math.complex.Complex complex39 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex40 = complex16.tan();
        org.apache.commons.math.complex.Complex complex41 = complex40.tanh();
        double double42 = complex41.getReal();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex43.log();
        org.apache.commons.math.complex.Complex complex46 = complex45.cos();
        org.apache.commons.math.complex.Complex complex47 = complex45.exp();
        boolean boolean48 = complex45.isNaN();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        double double51 = complex49.abs();
        org.apache.commons.math.complex.Complex complex52 = complex49.conjugate();
        org.apache.commons.math.complex.Complex complex53 = complex52.conjugate();
        org.apache.commons.math.complex.Complex complex54 = complex52.tanh();
        org.apache.commons.math.complex.Complex complex55 = complex45.multiply(complex52);
        org.apache.commons.math.complex.Complex complex56 = complex52.acos();
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        org.apache.commons.math.complex.Complex complex58 = complex56.sqrt1z();
        java.lang.Object[] objArray64 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("", objArray64);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException66 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray64);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException67 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray64);
        java.lang.Object[] objArray68 = maxIterationsExceededException67.getArguments();
        int int69 = maxIterationsExceededException67.getMaxIterations();
        boolean boolean70 = complex56.equals((java.lang.Object) int69);
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex72 = complex71.tan();
        org.apache.commons.math.complex.Complex complex73 = complex72.sinh();
        org.apache.commons.math.complex.Complex complex74 = complex72.tanh();
        org.apache.commons.math.complex.Complex complex75 = complex56.multiply(complex74);
        org.apache.commons.math.complex.Complex complex76 = complex75.sqrt();
        org.apache.commons.math.complex.Complex complex77 = complex41.multiply(complex76);
        org.apache.commons.math.complex.Complex complex78 = complex76.sqrt();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + Double.POSITIVE_INFINITY + "'", double51 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
    }

    @Test
    public void test08333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08333");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        laguerreSolver9.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver9.resetFunctionValueAccuracy();
        double double22 = laguerreSolver9.getAbsoluteAccuracy();
        double double23 = laguerreSolver9.getResult();
        int int24 = laguerreSolver9.getIterationCount();
        laguerreSolver9.resetAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = laguerreSolver9.getPolynomialFunction();
        // The following exception was thrown during execution in test generation
        try {
            double double29 = laguerreSolver9.solve((-9.626568200569E12d), 1.3009991E7d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [-9.626568200569E12,1.3009991E7]  Values: [-8.587880012111776E51,-2.8648902177414897E28]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-6d + "'", double22 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(polynomialFunction26);
    }

    @Test
    public void test08334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08334");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double10 = laguerreSolver9.getAbsoluteAccuracy();
        double double11 = laguerreSolver9.getFunctionValueAccuracy();
        laguerreSolver9.resetMaximalIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = laguerreSolver9.solve((-1.3716580925304711E31d), 1.0E-14d, (-1.1271166782382828E40d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid interval, initial value parameters:  lower=-1.3716580925304711E31 initial=-1.1271166782382828E40 upper=1.0E-14");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-6d + "'", double10 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-15d + "'", double11 == 1.0E-15d);
    }

    @Test
    public void test08335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08335");
        java.lang.Object[] objArray13 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray13);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException15 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray13, (java.lang.Throwable) convergenceException17);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException19 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray13);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray13);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray13);
        java.lang.Object[] objArray27 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException28 = new org.apache.commons.math.ConvergenceException("", objArray27);
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("", objArray33);
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("", objArray36);
        org.apache.commons.math.ConvergenceException convergenceException38 = new org.apache.commons.math.ConvergenceException("", objArray33, (java.lang.Throwable) convergenceException37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray33, (java.lang.Throwable) functionEvaluationException40);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray27, (java.lang.Throwable) functionEvaluationException41);
        java.lang.Object[] objArray50 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException51 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray50);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException52 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray50);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) maxIterationsExceededException52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException(10.0d, "", objArray27, (java.lang.Throwable) maxIterationsExceededException52);
        java.lang.Object[] objArray55 = functionEvaluationException54.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException54);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, "hi!", objArray13, (java.lang.Throwable) functionEvaluationException54);
        java.lang.Object[] objArray63 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("", objArray63);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException64);
        java.lang.Object[] objArray66 = functionEvaluationException65.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray66);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException67);
        java.lang.Throwable[] throwableArray69 = convergenceException67.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((-0.010000000000000009d), "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) convergenceException67);
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10,101", objArray13, (java.lang.Throwable) convergenceException67);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(throwableArray69);
    }

    @Test
    public void test08336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08336");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex7);
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex14 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex14.sin();
        org.apache.commons.math.complex.Complex complex16 = complex12.pow(complex14);
        org.apache.commons.math.complex.Complex complex17 = complex16.asin();
        org.apache.commons.math.complex.Complex complex18 = complex17.atan();
        boolean boolean19 = complex18.isInfinite();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex21 = complex18.subtract(complex20);
        org.apache.commons.math.complex.Complex complex22 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex18.tan();
        org.apache.commons.math.complex.Complex complex24 = complex11.pow(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex24.atan();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex26.log();
        org.apache.commons.math.complex.Complex complex29 = complex28.cos();
        org.apache.commons.math.complex.Complex complex30 = complex28.exp();
        boolean boolean31 = complex28.isNaN();
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.abs();
        org.apache.commons.math.complex.Complex complex35 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex36 = complex35.conjugate();
        boolean boolean37 = complex35.isInfinite();
        org.apache.commons.math.complex.Complex complex38 = complex35.asin();
        org.apache.commons.math.complex.Complex complex39 = complex28.pow(complex35);
        org.apache.commons.math.complex.Complex complex40 = complex24.pow(complex35);
        org.apache.commons.math.complex.Complex complex41 = complex24.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + Double.POSITIVE_INFINITY + "'", double34 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
    }

    @Test
    public void test08337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08337");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double[] doubleArray7 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray7);
        double[] doubleArray9 = polynomialFunction8.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction11 = polynomialFunction10.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction11);
    }

    @Test
    public void test08338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08338");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.abs();
        org.apache.commons.math.complex.Complex complex6 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex8.tan();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        double double13 = complex11.getReal();
        boolean boolean14 = complex9.equals((java.lang.Object) complex11);
        org.apache.commons.math.complex.Complex complex15 = complex7.subtract(complex11);
        org.apache.commons.math.complex.Complex complex16 = complex11.exp();
        org.apache.commons.math.complex.Complex complex17 = complex0.divide(complex11);
        org.apache.commons.math.complex.Complex complex18 = complex11.asin();
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        double double20 = complex19.getReal();
        org.apache.commons.math.complex.Complex complex21 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex23 = complex22.tan();
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex26 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex27 = complex26.sin();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        org.apache.commons.math.complex.Complex complex30 = complex28.log();
        double double31 = complex30.getImaginary();
        double double32 = complex30.getImaginary();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex34.acos();
        double double36 = complex34.getReal();
        org.apache.commons.math.complex.Complex complex37 = complex34.sqrt();
        org.apache.commons.math.complex.Complex complex38 = complex30.subtract(complex34);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        double double41 = complex39.abs();
        org.apache.commons.math.complex.Complex complex42 = complex39.conjugate();
        org.apache.commons.math.complex.Complex complex43 = complex42.conjugate();
        boolean boolean44 = complex42.isInfinite();
        org.apache.commons.math.complex.Complex complex45 = complex42.cos();
        org.apache.commons.math.complex.Complex complex46 = complex45.sin();
        org.apache.commons.math.complex.Complex complex47 = complex30.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        org.apache.commons.math.complex.Complex complex50 = complex49.acos();
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex51.log();
        org.apache.commons.math.complex.Complex complex54 = complex51.sin();
        org.apache.commons.math.complex.Complex complex55 = complex54.tanh();
        org.apache.commons.math.complex.Complex complex56 = complex49.add(complex55);
        org.apache.commons.math.complex.Complex complex57 = complex55.acos();
        org.apache.commons.math.complex.Complex complex58 = complex47.pow(complex57);
        org.apache.commons.math.complex.Complex complex59 = complex47.exp();
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        boolean boolean62 = complex60.isNaN();
        org.apache.commons.math.complex.Complex complex63 = complex60.tanh();
        org.apache.commons.math.complex.Complex complex64 = complex60.cosh();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex66 = complex65.cosh();
        double double67 = complex65.abs();
        org.apache.commons.math.complex.Complex complex68 = complex65.conjugate();
        org.apache.commons.math.complex.Complex complex69 = complex68.conjugate();
        boolean boolean70 = complex68.isInfinite();
        org.apache.commons.math.complex.Complex complex71 = complex68.cos();
        org.apache.commons.math.complex.Complex complex72 = complex68.conjugate();
        org.apache.commons.math.complex.Complex complex73 = complex68.sin();
        boolean boolean74 = complex68.isNaN();
        org.apache.commons.math.complex.Complex complex75 = complex68.atan();
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex77 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex78 = complex77.sqrt();
        org.apache.commons.math.complex.Complex complex79 = complex78.sin();
        org.apache.commons.math.complex.Complex complex80 = complex76.pow(complex78);
        org.apache.commons.math.complex.Complex complex81 = complex80.asin();
        org.apache.commons.math.complex.Complex complex82 = complex81.atan();
        org.apache.commons.math.complex.Complex complex83 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex84 = complex83.cosh();
        boolean boolean85 = complex82.equals((java.lang.Object) complex83);
        org.apache.commons.math.complex.Complex complex86 = complex82.conjugate();
        org.apache.commons.math.complex.Complex complex87 = complex68.pow(complex82);
        org.apache.commons.math.complex.Complex complex88 = complex82.atan();
        org.apache.commons.math.complex.Complex complex89 = complex60.divide(complex88);
        org.apache.commons.math.complex.Complex complex90 = complex47.multiply(complex60);
        org.apache.commons.math.complex.Complex complex91 = complex27.subtract(complex47);
        org.apache.commons.math.complex.Complex complex92 = complex21.pow(complex27);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.7853981633974483d + "'", double31 == 0.7853981633974483d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.7853981633974483d + "'", double32 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + Double.POSITIVE_INFINITY + "'", double41 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + Double.POSITIVE_INFINITY + "'", double67 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
    }

    @Test
    public void test08339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08339");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 100.0f, (double) 4);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((double) 3, (double) (-1.0f));
        org.apache.commons.math.complex.Complex complex6 = complex2.pow(complex5);
        org.apache.commons.math.complex.Complex complex7 = complex2.sin();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
    }

    @Test
    public void test08340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08340");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.acos();
        double double11 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex0.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex14.sin();
        org.apache.commons.math.complex.Complex complex18 = complex14.log();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex21 = complex14.divide(complex20);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.abs();
        org.apache.commons.math.complex.Complex complex25 = complex22.conjugate();
        org.apache.commons.math.complex.Complex complex26 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex21.subtract(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex21.exp();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.sqrt();
        org.apache.commons.math.complex.Complex complex32 = complex31.sin();
        org.apache.commons.math.complex.Complex complex33 = complex29.pow(complex31);
        org.apache.commons.math.complex.Complex complex34 = complex33.asin();
        org.apache.commons.math.complex.Complex complex35 = complex34.atan();
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        boolean boolean38 = complex35.equals((java.lang.Object) complex36);
        org.apache.commons.math.complex.Complex complex39 = complex21.divide(complex36);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex41.acos();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex43.log();
        org.apache.commons.math.complex.Complex complex46 = complex43.sin();
        org.apache.commons.math.complex.Complex complex47 = complex46.tanh();
        org.apache.commons.math.complex.Complex complex48 = complex41.add(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex48.exp();
        org.apache.commons.math.complex.Complex complex50 = complex21.multiply(complex49);
        double double51 = complex49.getImaginary();
        org.apache.commons.math.complex.Complex complex52 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex53 = complex52.cosh();
        double double54 = complex52.abs();
        org.apache.commons.math.complex.Complex complex55 = complex52.conjugate();
        org.apache.commons.math.complex.Complex complex56 = complex55.conjugate();
        org.apache.commons.math.complex.Complex complex57 = complex55.tanh();
        org.apache.commons.math.complex.Complex complex58 = complex57.tan();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        double double61 = complex59.abs();
        org.apache.commons.math.complex.Complex complex62 = complex59.conjugate();
        org.apache.commons.math.complex.Complex complex63 = complex62.conjugate();
        org.apache.commons.math.complex.Complex complex64 = complex58.subtract(complex62);
        org.apache.commons.math.complex.Complex complex65 = complex62.negate();
        org.apache.commons.math.complex.Complex complex66 = complex62.tanh();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        org.apache.commons.math.complex.Complex complex69 = complex67.log();
        org.apache.commons.math.complex.Complex complex70 = complex69.cos();
        double double71 = complex70.abs();
        org.apache.commons.math.complex.Complex complex72 = complex70.sqrt();
        org.apache.commons.math.complex.Complex complex73 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex74 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex75 = complex74.sqrt();
        org.apache.commons.math.complex.Complex complex76 = complex75.sin();
        org.apache.commons.math.complex.Complex complex77 = complex73.pow(complex75);
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex79 = complex78.cosh();
        org.apache.commons.math.complex.Complex complex80 = complex78.log();
        org.apache.commons.math.complex.Complex complex81 = complex73.divide(complex80);
        org.apache.commons.math.complex.Complex complex82 = complex72.subtract(complex81);
        org.apache.commons.math.complex.Complex complex83 = complex72.conjugate();
        org.apache.commons.math.complex.Complex complex84 = complex72.cos();
        org.apache.commons.math.complex.Complex complex85 = complex84.negate();
        boolean boolean86 = complex62.equals((java.lang.Object) complex84);
        org.apache.commons.math.complex.Complex complex87 = complex49.subtract(complex62);
        org.apache.commons.math.complex.Complex complex88 = complex62.sqrt1z();
        double double89 = complex62.getImaginary();
        double double90 = complex62.getImaginary();
        org.apache.commons.math.complex.Complex complex91 = complex0.multiply(complex62);
        org.apache.commons.math.complex.Complex complex92 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex93 = complex92.tan();
        org.apache.commons.math.complex.Complex complex94 = complex93.sinh();
        org.apache.commons.math.complex.Complex complex95 = complex93.tanh();
        org.apache.commons.math.complex.Complex complex96 = complex93.asin();
        org.apache.commons.math.complex.Complex complex97 = complex96.sqrt1z();
        org.apache.commons.math.complex.Complex complex98 = complex62.divide(complex96);
        org.apache.commons.math.complex.Complex complex99 = complex98.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + Double.POSITIVE_INFINITY + "'", double54 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + Double.POSITIVE_INFINITY + "'", double61 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + Double.NEGATIVE_INFINITY + "'", double89 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + Double.NEGATIVE_INFINITY + "'", double90 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertNotNull(complex93);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertNotNull(complex95);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
        org.junit.Assert.assertNotNull(complex98);
        org.junit.Assert.assertNotNull(complex99);
    }

    @Test
    public void test08341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08341");
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: ", objArray10);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray15);
        java.lang.Object[] objArray21 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException22 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray21);
        convergenceException16.addSuppressed((java.lang.Throwable) maxIterationsExceededException22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray10, (java.lang.Throwable) maxIterationsExceededException22);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray10);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: hi!", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException(10001.0d, "Maximal number of iterations ({0}) exceeded", (java.lang.Throwable) convergenceException26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) 2);
        convergenceException26.addSuppressed((java.lang.Throwable) functionEvaluationException29);
        double double31 = functionEvaluationException29.getArgument();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2.0d + "'", double31 == 2.0d);
    }

    @Test
    public void test08342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08342");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        // The following exception was thrown during execution in test generation
        try {
            double double10 = laguerreSolver6.solve((-1.273080024475272E25d), (double) 5, (double) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid interval, initial value parameters:  lower=-1.273080024475272E25 initial=100.0 upper=5.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
    }

    @Test
    public void test08343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08343");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        int int11 = laguerreSolver6.getIterationCount();
        laguerreSolver6.setRelativeAccuracy(0.0d);
        double double16 = laguerreSolver6.solve((double) (-1.0f), 10001.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = laguerreSolver6.solve((-4.5613214195472375E24d), (-9.9998989899E10d), 1.000000000001d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [-4.5613214195472375E24,-9.9998989899E10]  Values: [-4.5613214195472374E26,-9.999898989899E12]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.01d) + "'", double16 == (-0.01d));
    }

    @Test
    public void test08344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08344");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex7);
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        double double13 = complex12.getReal();
        boolean boolean14 = complex12.isNaN();
        boolean boolean15 = complex12.isInfinite();
        org.apache.commons.math.complex.Complex complex16 = complex12.cosh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test08345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08345");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray8);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException10 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray8);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException11 = new org.apache.commons.math.MaxIterationsExceededException((int) 'a', "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray8);
        int int12 = maxIterationsExceededException11.getMaxIterations();
        int int13 = maxIterationsExceededException11.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException11);
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray22);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray28);
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("", objArray31);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("", objArray28, (java.lang.Throwable) convergenceException32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException36 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray28, (java.lang.Throwable) functionEvaluationException35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray22, (java.lang.Throwable) functionEvaluationException36);
        java.lang.String str38 = functionEvaluationException37.getPattern();
        double double39 = functionEvaluationException37.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, (java.lang.Throwable) functionEvaluationException37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException(1.0E-6d, "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Throwable) functionEvaluationException37);
        java.lang.Throwable[] throwableArray42 = functionEvaluationException37.getSuppressed();
        double double43 = functionEvaluationException37.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException44 = new org.apache.commons.math.FunctionEvaluationException(64.0d, (java.lang.Throwable) functionEvaluationException37);
        double double45 = functionEvaluationException37.getArgument();
        java.lang.Object[] objArray46 = functionEvaluationException37.getArguments();
        convergenceException14.addSuppressed((java.lang.Throwable) functionEvaluationException37);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException37);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((-6.780721063026763E80d), (java.lang.Throwable) convergenceException48);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((-196499.0d), "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) convergenceException48);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 35.0d + "'", double39 == 35.0d);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 35.0d + "'", double43 == 35.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 35.0d + "'", double45 == 35.0d);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
    }

    @Test
    public void test08346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08346");
        java.lang.Object[] objArray6 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException7 = new org.apache.commons.math.ConvergenceException("", objArray6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException8 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray6);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException9 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray6);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) maxIterationsExceededException9);
        double double11 = functionEvaluationException10.getArgument();
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test08347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08347");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        int int9 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.resetMaximalIterationCount();
        double double14 = laguerreSolver6.solve((-0.01d), 0.0d, (-161.0d));
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.setMaximalIterationCount(18);
        double[] doubleArray20 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray20);
        double double23 = polynomialFunction21.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction21);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = laguerreSolver24.getPolynomialFunction();
        double[] doubleArray28 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction29 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray31 = laguerreSolver24.solveAll(doubleArray28, 1.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray28);
        org.apache.commons.math.complex.Complex[] complexArray34 = laguerreSolver6.solveAll(doubleArray28, 10001.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 100 + "'", int9 == 100);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-0.01d) + "'", double14 == (-0.01d));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10001.0d + "'", double23 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray31);
        org.junit.Assert.assertNotNull(complexArray34);
    }

    @Test
    public void test08348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08348");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        double double3 = complex2.getImaginary();
        double double4 = complex2.getImaginary();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex6.acos();
        double double8 = complex6.getReal();
        org.apache.commons.math.complex.Complex complex9 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex2.subtract(complex6);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.abs();
        org.apache.commons.math.complex.Complex complex14 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex14.conjugate();
        boolean boolean16 = complex14.isInfinite();
        org.apache.commons.math.complex.Complex complex17 = complex14.cos();
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex2.multiply(complex18);
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex21.acos();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex23.log();
        org.apache.commons.math.complex.Complex complex26 = complex23.sin();
        org.apache.commons.math.complex.Complex complex27 = complex26.tanh();
        org.apache.commons.math.complex.Complex complex28 = complex21.add(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex27.acos();
        org.apache.commons.math.complex.Complex complex30 = complex19.pow(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex19.exp();
        org.apache.commons.math.complex.Complex complex32 = complex19.asin();
        org.apache.commons.math.complex.Complex complex33 = complex19.log();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt1z();
        org.apache.commons.math.complex.Complex complex35 = complex33.acos();
        org.apache.commons.math.complex.Complex complex36 = complex33.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.7853981633974483d + "'", double3 == 0.7853981633974483d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.7853981633974483d + "'", double4 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + Double.POSITIVE_INFINITY + "'", double13 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
    }

    @Test
    public void test08349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08349");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        boolean boolean2 = complex0.isNaN();
        org.apache.commons.math.complex.Complex complex3 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex4 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        double double7 = complex5.abs();
        org.apache.commons.math.complex.Complex complex8 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex8.conjugate();
        boolean boolean10 = complex8.isInfinite();
        org.apache.commons.math.complex.Complex complex11 = complex8.cos();
        org.apache.commons.math.complex.Complex complex12 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex8.sin();
        boolean boolean14 = complex8.isNaN();
        org.apache.commons.math.complex.Complex complex15 = complex8.atan();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = complex18.sin();
        org.apache.commons.math.complex.Complex complex20 = complex16.pow(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex20.asin();
        org.apache.commons.math.complex.Complex complex22 = complex21.atan();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        boolean boolean25 = complex22.equals((java.lang.Object) complex23);
        org.apache.commons.math.complex.Complex complex26 = complex22.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex8.pow(complex22);
        org.apache.commons.math.complex.Complex complex28 = complex22.atan();
        org.apache.commons.math.complex.Complex complex29 = complex0.divide(complex28);
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = complex32.sin();
        org.apache.commons.math.complex.Complex complex34 = complex30.pow(complex32);
        org.apache.commons.math.complex.Complex complex35 = complex30.exp();
        org.apache.commons.math.complex.Complex complex36 = complex35.exp();
        org.apache.commons.math.complex.Complex complex37 = complex0.divide(complex36);
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.abs();
        org.apache.commons.math.complex.Complex complex41 = complex38.conjugate();
        org.apache.commons.math.complex.Complex complex42 = complex41.conjugate();
        boolean boolean43 = complex41.isInfinite();
        org.apache.commons.math.complex.Complex complex44 = complex41.cos();
        org.apache.commons.math.complex.Complex complex45 = complex44.sin();
        double double46 = complex45.abs();
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        double double49 = complex47.abs();
        org.apache.commons.math.complex.Complex complex50 = complex47.conjugate();
        org.apache.commons.math.complex.Complex complex51 = complex50.conjugate();
        boolean boolean52 = complex50.isInfinite();
        org.apache.commons.math.complex.Complex complex53 = complex50.asin();
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex complex57 = complex56.sin();
        org.apache.commons.math.complex.Complex complex58 = complex54.pow(complex56);
        org.apache.commons.math.complex.Complex complex59 = complex58.asin();
        org.apache.commons.math.complex.Complex complex60 = complex58.tan();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex62 = complex61.cosh();
        double double63 = complex61.abs();
        org.apache.commons.math.complex.Complex complex64 = complex61.conjugate();
        org.apache.commons.math.complex.Complex complex65 = complex64.conjugate();
        boolean boolean66 = complex64.isInfinite();
        org.apache.commons.math.complex.Complex complex67 = complex64.asin();
        boolean boolean68 = complex64.isNaN();
        org.apache.commons.math.complex.Complex complex69 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex70 = complex69.cosh();
        org.apache.commons.math.complex.Complex complex71 = complex64.divide(complex69);
        org.apache.commons.math.complex.Complex complex72 = complex60.pow(complex69);
        org.apache.commons.math.complex.Complex complex73 = complex53.subtract(complex60);
        boolean boolean74 = complex60.isInfinite();
        org.apache.commons.math.complex.Complex complex75 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex76 = complex45.multiply(complex75);
        org.apache.commons.math.complex.Complex complex77 = complex0.divide(complex75);
        double double78 = complex77.getImaginary();
        org.apache.commons.math.complex.Complex complex79 = complex77.tan();
        org.apache.commons.math.complex.Complex complex82 = new org.apache.commons.math.complex.Complex((double) 'a', 0.0d);
        org.apache.commons.math.complex.Complex complex83 = complex79.subtract(complex82);
        org.apache.commons.math.complex.Complex complex84 = complex82.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + Double.POSITIVE_INFINITY + "'", double7 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + Double.POSITIVE_INFINITY + "'", double40 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + Double.POSITIVE_INFINITY + "'", double49 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + Double.POSITIVE_INFINITY + "'", double63 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
    }

    @Test
    public void test08350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08350");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        double double13 = laguerreSolver6.getAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = laguerreSolver6.getPolynomialFunction();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = laguerreSolver6.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-6d + "'", double13 == 1.0E-6d);
        org.junit.Assert.assertNotNull(polynomialFunction14);
    }

    @Test
    public void test08351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08351");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray11);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "hi!", objArray11);
        java.lang.Throwable throwable14 = null;
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray11, throwable14);
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray19);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray25);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray25, (java.lang.Throwable) convergenceException29);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray25, (java.lang.Throwable) functionEvaluationException32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray19, (java.lang.Throwable) functionEvaluationException33);
        java.lang.String str35 = functionEvaluationException34.getPattern();
        double double36 = functionEvaluationException34.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException(101.01d, "", objArray11, (java.lang.Throwable) functionEvaluationException34);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException38 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Convergence failed", objArray11);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 35.0d + "'", double36 == 35.0d);
    }

    @Test
    public void test08352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08352");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (byte) 10);
        double double7 = polynomialFunction3.value((double) (byte) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction3.polynomialDerivative();
        int int10 = polynomialFunction3.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 349.0d + "'", double5 == 349.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 349.0d + "'", double7 == 349.0d);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test08353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08353");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 1.0f, 1484.0d);
        org.apache.commons.math.complex.Complex complex3 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.atan();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
    }

    @Test
    public void test08354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08354");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver5 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        laguerreSolver5.setFunctionValueAccuracy(Double.POSITIVE_INFINITY);
        laguerreSolver5.setFunctionValueAccuracy((double) 1.0f);
        double double10 = laguerreSolver5.getAbsoluteAccuracy();
        double double11 = laguerreSolver5.getAbsoluteAccuracy();
        laguerreSolver5.setAbsoluteAccuracy((double) (byte) 1);
        double double14 = laguerreSolver5.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-6d + "'", double10 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-6d + "'", double11 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
    }

    @Test
    public void test08355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08355");
        org.apache.commons.math.ConvergenceException convergenceException1 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 350");
    }

    @Test
    public void test08356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08356");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.acos();
        double double10 = complex8.getReal();
        boolean boolean11 = complex6.equals((java.lang.Object) complex8);
        org.apache.commons.math.complex.Complex complex12 = complex4.subtract(complex8);
        org.apache.commons.math.complex.Complex complex13 = complex8.tanh();
        org.apache.commons.math.complex.Complex complex14 = complex13.sinh();
        double double15 = complex14.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test08357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08357");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        double double3 = complex2.getImaginary();
        double double4 = complex2.getImaginary();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex6.acos();
        double double8 = complex6.getReal();
        org.apache.commons.math.complex.Complex complex9 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex2.subtract(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex10.log();
        org.apache.commons.math.complex.Complex complex12 = complex10.tanh();
        org.apache.commons.math.complex.Complex complex13 = complex10.sin();
        org.apache.commons.math.complex.Complex complex14 = complex10.acos();
        double[] doubleArray21 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray21);
        double double24 = polynomialFunction22.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver25 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction22);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = laguerreSolver25.getPolynomialFunction();
        laguerreSolver25.resetRelativeAccuracy();
        double[] doubleArray33 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray33);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray33);
        org.apache.commons.math.complex.Complex[] complexArray37 = laguerreSolver25.solveAll(doubleArray33, 101.0d);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException38 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 1, "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray37);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException39 = new org.apache.commons.math.MaxIterationsExceededException(52, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) complexArray37);
        boolean boolean40 = complex14.equals((java.lang.Object) 52);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.7853981633974483d + "'", double3 == 0.7853981633974483d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.7853981633974483d + "'", double4 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 10001.0d + "'", double24 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test08358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08358");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex7);
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        double double13 = complex12.getReal();
        org.apache.commons.math.complex.Complex complex14 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex16 = complex14.pow(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex20 = complex19.sin();
        org.apache.commons.math.complex.Complex complex21 = complex17.pow(complex19);
        org.apache.commons.math.complex.Complex complex22 = complex21.asin();
        org.apache.commons.math.complex.Complex complex23 = complex21.tan();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex24.log();
        org.apache.commons.math.complex.Complex complex27 = complex26.cos();
        org.apache.commons.math.complex.Complex complex28 = complex26.exp();
        boolean boolean29 = complex26.isNaN();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        double double32 = complex30.abs();
        org.apache.commons.math.complex.Complex complex33 = complex30.conjugate();
        org.apache.commons.math.complex.Complex complex34 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex35 = complex33.tanh();
        org.apache.commons.math.complex.Complex complex36 = complex26.multiply(complex33);
        org.apache.commons.math.complex.Complex complex37 = complex33.acos();
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        org.apache.commons.math.complex.Complex complex39 = complex37.sqrt1z();
        java.lang.Object[] objArray45 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException46 = new org.apache.commons.math.ConvergenceException("", objArray45);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray45);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException48 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray45);
        java.lang.Object[] objArray49 = maxIterationsExceededException48.getArguments();
        int int50 = maxIterationsExceededException48.getMaxIterations();
        boolean boolean51 = complex37.equals((java.lang.Object) int50);
        boolean boolean52 = complex37.isNaN();
        org.apache.commons.math.complex.Complex complex53 = complex21.divide(complex37);
        org.apache.commons.math.complex.Complex complex56 = new org.apache.commons.math.complex.Complex((-99999.0d), (double) (short) -1);
        org.apache.commons.math.complex.Complex complex57 = complex21.subtract(complex56);
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        double double60 = complex58.abs();
        org.apache.commons.math.complex.Complex complex61 = complex58.conjugate();
        org.apache.commons.math.complex.Complex complex62 = complex61.conjugate();
        boolean boolean63 = complex61.isInfinite();
        org.apache.commons.math.complex.Complex complex64 = complex61.cos();
        org.apache.commons.math.complex.Complex complex65 = complex61.conjugate();
        org.apache.commons.math.complex.Complex complex66 = complex61.sin();
        org.apache.commons.math.complex.Complex complex67 = complex66.negate();
        org.apache.commons.math.complex.Complex complex68 = complex67.sinh();
        org.apache.commons.math.complex.Complex complex69 = complex68.conjugate();
        org.apache.commons.math.complex.Complex complex70 = complex68.acos();
        org.apache.commons.math.complex.Complex complex71 = complex57.multiply(complex70);
        org.apache.commons.math.complex.Complex complex72 = complex16.pow(complex70);
        boolean boolean73 = complex72.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + Double.POSITIVE_INFINITY + "'", double32 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test08359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08359");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(134.02310093999603d, (double) (-1.0f));
        org.apache.commons.math.complex.Complex complex3 = complex2.negate();
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt1z();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        boolean boolean7 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.tan();
        org.apache.commons.math.complex.Complex complex10 = complex8.cos();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex11.log();
        org.apache.commons.math.complex.Complex complex14 = complex11.cos();
        org.apache.commons.math.complex.Complex complex15 = complex8.subtract(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex8.acos();
        org.apache.commons.math.complex.Complex complex17 = complex6.add(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex16.sinh();
        org.apache.commons.math.complex.Complex complex19 = complex4.divide(complex16);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
    }

    @Test
    public void test08360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08360");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex3.sqrt1z();
        org.apache.commons.math.complex.Complex complex7 = complex6.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt1z();
        org.apache.commons.math.complex.Complex complex9 = complex8.log();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test08361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08361");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        double double13 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) (short) -1);
        int int16 = laguerreSolver6.getIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = laguerreSolver6.solve(12.586779040970088d, 10.0d, (-0.010000001639127731d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [12.586779040970088,10.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-6d + "'", double13 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
    }

    @Test
    public void test08362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08362");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        double double3 = complex2.getImaginary();
        double double4 = complex2.getImaginary();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex6.acos();
        double double8 = complex6.getReal();
        org.apache.commons.math.complex.Complex complex9 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex10 = complex2.subtract(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex10.log();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        org.apache.commons.math.complex.Complex complex14 = complex12.log();
        double double15 = complex14.getImaginary();
        org.apache.commons.math.complex.Complex complex16 = complex11.multiply(complex14);
        org.apache.commons.math.complex.Complex complex17 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex18 = complex11.negate();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        double double21 = complex19.abs();
        org.apache.commons.math.complex.Complex complex22 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex22.conjugate();
        boolean boolean24 = complex22.isInfinite();
        org.apache.commons.math.complex.Complex complex25 = complex22.cos();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        double double28 = complex26.abs();
        org.apache.commons.math.complex.Complex complex29 = complex26.conjugate();
        org.apache.commons.math.complex.Complex complex30 = complex29.conjugate();
        boolean boolean31 = complex29.isInfinite();
        org.apache.commons.math.complex.Complex complex32 = complex29.asin();
        boolean boolean33 = complex29.isNaN();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex29.divide(complex34);
        org.apache.commons.math.complex.Complex complex37 = complex25.divide(complex34);
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex39 = complex38.tan();
        org.apache.commons.math.complex.Complex complex40 = complex38.cos();
        boolean boolean41 = complex38.isInfinite();
        org.apache.commons.math.complex.Complex complex42 = complex37.multiply(complex38);
        org.apache.commons.math.complex.Complex complex43 = complex11.divide(complex42);
        org.apache.commons.math.complex.Complex complex44 = complex42.cos();
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt1z();
        boolean boolean46 = complex44.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.7853981633974483d + "'", double3 == 0.7853981633974483d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.7853981633974483d + "'", double4 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.7853981633974483d + "'", double15 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + Double.POSITIVE_INFINITY + "'", double21 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + Double.POSITIVE_INFINITY + "'", double28 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test08363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08363");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setAbsoluteAccuracy(Double.NEGATIVE_INFINITY);
        double double13 = laguerreSolver6.solve((double) (-1), (double) 100);
        laguerreSolver6.resetFunctionValueAccuracy();
        int int15 = laguerreSolver6.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-0.01d) + "'", double13 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test08364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08364");
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        java.lang.Object[] objArray15 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray15);
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray12, (java.lang.Throwable) convergenceException16);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException18 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.FunctionEvaluationException: ", objArray12);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray25);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray25);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException28 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray25);
        java.lang.Object[] objArray35 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("", objArray35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray35);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException38 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray35);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) maxIterationsExceededException38);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("", objArray25, (java.lang.Throwable) functionEvaluationException39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray12, (java.lang.Throwable) convergenceException40);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) convergenceException41);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) convergenceException41);
        java.lang.Object[] objArray44 = convergenceException41.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray44);
        java.lang.Object[] objArray50 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("", objArray50);
        java.lang.Object[] objArray53 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException54 = new org.apache.commons.math.ConvergenceException("", objArray53);
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("", objArray50, (java.lang.Throwable) convergenceException54);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "", (java.lang.Throwable) convergenceException55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("", objArray44, (java.lang.Throwable) convergenceException55);
        org.apache.commons.math.ConvergenceException convergenceException58 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) convergenceException55);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((-3.110133412E9d), (java.lang.Throwable) convergenceException55);
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException55);
        java.lang.Throwable[] throwableArray61 = convergenceException55.getSuppressed();
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray35), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray35), "[]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(throwableArray61);
    }

    @Test
    public void test08365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08365");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex6.log();
        double double9 = complex8.getImaginary();
        org.apache.commons.math.complex.Complex complex10 = complex8.asin();
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.abs();
        org.apache.commons.math.complex.Complex complex15 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex11.multiply(complex16);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex18.log();
        org.apache.commons.math.complex.Complex complex21 = complex18.sin();
        org.apache.commons.math.complex.Complex complex22 = complex18.log();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = complex23.sqrt();
        org.apache.commons.math.complex.Complex complex25 = complex18.divide(complex24);
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        org.apache.commons.math.complex.Complex complex28 = complex27.acos();
        double double29 = complex27.getReal();
        org.apache.commons.math.complex.Complex complex30 = complex27.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex18.pow(complex27);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex32.log();
        org.apache.commons.math.complex.Complex complex35 = complex34.cos();
        org.apache.commons.math.complex.Complex complex36 = complex27.multiply(complex34);
        org.apache.commons.math.complex.Complex complex37 = complex11.subtract(complex27);
        org.apache.commons.math.complex.Complex complex38 = complex5.multiply(complex37);
        org.apache.commons.math.complex.Complex complex39 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex40 = complex39.cosh();
        org.apache.commons.math.complex.Complex complex41 = complex39.log();
        org.apache.commons.math.complex.Complex complex42 = complex39.cos();
        org.apache.commons.math.complex.Complex complex43 = complex42.negate();
        org.apache.commons.math.complex.Complex complex44 = complex43.tan();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException((-9.89965E7d), "org.apache.commons.math.ConvergenceException: Convergence failed");
        boolean boolean48 = complex43.equals((java.lang.Object) functionEvaluationException47);
        double double49 = complex43.getImaginary();
        org.apache.commons.math.complex.Complex complex50 = complex38.add(complex43);
        org.apache.commons.math.complex.Complex complex51 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex52 = complex51.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.7853981633974483d + "'", double9 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + Double.POSITIVE_INFINITY + "'", double14 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
    }

    @Test
    public void test08366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08366");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.sin();
        boolean boolean9 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex10 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex10.acos();
        org.apache.commons.math.complex.Complex complex13 = complex12.log();
        org.apache.commons.math.complex.Complex complex14 = complex12.cos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
    }

    @Test
    public void test08367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08367");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray9, (java.lang.Throwable) convergenceException13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) 1, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException((double) 3, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", objArray9, (java.lang.Throwable) functionEvaluationException18);
        java.lang.Throwable throwable22 = null;
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException(throwable22);
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex27 = complex26.sin();
        org.apache.commons.math.complex.Complex complex28 = complex24.pow(complex26);
        org.apache.commons.math.complex.Complex complex29 = complex28.asin();
        org.apache.commons.math.complex.Complex complex30 = complex28.tan();
        java.lang.Object[] objArray34 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("", objArray34);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException36 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray34);
        int int37 = maxIterationsExceededException36.getMaxIterations();
        boolean boolean38 = complex30.equals((java.lang.Object) maxIterationsExceededException36);
        java.lang.String str39 = maxIterationsExceededException36.getPattern();
        convergenceException23.addSuppressed((java.lang.Throwable) maxIterationsExceededException36);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 10, "", (java.lang.Throwable) convergenceException23);
        java.lang.String str42 = convergenceException23.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", objArray9, (java.lang.Throwable) convergenceException23);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ", objArray9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException(349.0d, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) convergenceException44);
        double double46 = functionEvaluationException45.getArgument();
        java.lang.Throwable[] throwableArray47 = functionEvaluationException45.getSuppressed();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hi!" + "'", str39, "hi!");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 349.0d + "'", double46 == 349.0d);
        org.junit.Assert.assertNotNull(throwableArray47);
    }

    @Test
    public void test08368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08368");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        int int14 = laguerreSolver6.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
    }

    @Test
    public void test08369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08369");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) 100, (double) (byte) 10);
        org.apache.commons.math.complex.Complex complex3 = complex2.conjugate();
        double[] doubleArray9 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray9);
        double[] doubleArray12 = polynomialFunction11.getCoefficients();
        int int13 = polynomialFunction11.degree();
        double[] doubleArray14 = polynomialFunction11.getCoefficients();
        int int15 = polynomialFunction11.degree();
        boolean boolean16 = complex3.equals((java.lang.Object) polynomialFunction11);
        int int17 = polynomialFunction11.degree();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
    }

    @Test
    public void test08370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08370");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        double double3 = complex0.getImaginary();
        double double4 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = complex7.sin();
        org.apache.commons.math.complex.Complex complex9 = complex5.pow(complex7);
        org.apache.commons.math.complex.Complex complex10 = complex9.asin();
        org.apache.commons.math.complex.Complex complex11 = complex10.atan();
        boolean boolean12 = complex11.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex14 = complex11.subtract(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex0.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.abs();
        org.apache.commons.math.complex.Complex complex20 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex20.tanh();
        org.apache.commons.math.complex.Complex complex23 = complex22.tan();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex24.cos();
        org.apache.commons.math.complex.Complex complex26 = complex25.exp();
        org.apache.commons.math.complex.Complex complex27 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex28 = complex16.add(complex25);
        double double29 = complex16.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + Double.POSITIVE_INFINITY + "'", double3 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + Double.POSITIVE_INFINITY + "'", double4 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + Double.POSITIVE_INFINITY + "'", double19 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test08371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08371");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException((-3089.0d));
    }

    @Test
    public void test08372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08372");
        java.lang.Object[] objArray8 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("", objArray8);
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray8, (java.lang.Throwable) convergenceException12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray8);
        java.lang.Throwable[] throwableArray15 = convergenceException14.getSuppressed();
        java.lang.Object[] objArray16 = convergenceException14.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray16);
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("", objArray32);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException34 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray32);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray32, (java.lang.Throwable) convergenceException36);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException38 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException39 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray32);
        java.lang.Object[] objArray49 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException50 = new org.apache.commons.math.ConvergenceException("", objArray49);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException51 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray49);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "hi!", objArray49, (java.lang.Throwable) convergenceException53);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException55 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 100, "", objArray49);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException(1.0d, "", objArray49);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: ", objArray32, (java.lang.Throwable) functionEvaluationException56);
        java.lang.Throwable[] throwableArray58 = functionEvaluationException56.getSuppressed();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException59 = new org.apache.commons.math.MaxIterationsExceededException(10, "", (java.lang.Object[]) throwableArray58);
        java.lang.Object[] objArray65 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("", objArray65);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException67 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException66);
        java.lang.Object[] objArray68 = functionEvaluationException67.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException69 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray68);
        java.lang.Throwable[] throwableArray70 = maxIterationsExceededException69.getSuppressed();
        int int71 = maxIterationsExceededException69.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException72 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 1, (java.lang.Throwable) maxIterationsExceededException69);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException73 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) throwableArray58, (java.lang.Throwable) functionEvaluationException72);
        double double74 = functionEvaluationException72.getArgument();
        java.lang.Object[] objArray75 = functionEvaluationException72.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException76 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 100", objArray16, (java.lang.Throwable) functionEvaluationException72);
        java.lang.Object[] objArray77 = functionEvaluationException72.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException78 = new org.apache.commons.math.FunctionEvaluationException((-7.173051538824589E30d), "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10,101", objArray77);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 1.0d + "'", double74 == 1.0d);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[]");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
    }

    @Test
    public void test08373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08373");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex9.acos();
        double double11 = complex9.getReal();
        org.apache.commons.math.complex.Complex complex12 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex13 = complex0.pow(complex9);
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.cos();
        org.apache.commons.math.complex.Complex complex18 = complex9.multiply(complex16);
        org.apache.commons.math.complex.Complex complex19 = complex16.tanh();
        org.apache.commons.math.complex.Complex complex20 = complex19.asin();
        org.apache.commons.math.complex.Complex complex21 = complex19.acos();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.abs();
        org.apache.commons.math.complex.Complex complex25 = complex22.conjugate();
        org.apache.commons.math.complex.Complex complex26 = complex25.conjugate();
        boolean boolean27 = complex25.isInfinite();
        org.apache.commons.math.complex.Complex complex28 = complex25.cos();
        org.apache.commons.math.complex.Complex complex29 = complex21.subtract(complex25);
        org.apache.commons.math.complex.Complex complex30 = complex25.acos();
        org.apache.commons.math.complex.Complex complex31 = complex30.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
    }

    @Test
    public void test08374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08374");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        int int11 = laguerreSolver6.getIterationCount();
        laguerreSolver6.setRelativeAccuracy(0.0d);
        laguerreSolver6.resetRelativeAccuracy();
        double double15 = laguerreSolver6.getAbsoluteAccuracy();
        double double16 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.setMaximalIterationCount(0);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-6d + "'", double15 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-15d + "'", double16 == 1.0E-15d);
    }

    @Test
    public void test08375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08375");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver9.resetMaximalIterationCount();
        laguerreSolver9.resetRelativeAccuracy();
        laguerreSolver9.resetAbsoluteAccuracy();
        double double13 = laguerreSolver9.getAbsoluteAccuracy();
        laguerreSolver9.setAbsoluteAccuracy((double) (short) -1);
        int int16 = laguerreSolver9.getMaximalIterationCount();
        double double17 = laguerreSolver9.getAbsoluteAccuracy();
        double double18 = laguerreSolver9.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-6d + "'", double13 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + (-1.0d) + "'", double17 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0E-14d + "'", double18 == 1.0E-14d);
    }

    @Test
    public void test08376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08376");
        java.lang.Object[] objArray11 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException12 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray11);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException13 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray11);
        java.lang.Object[] objArray16 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException17 = new org.apache.commons.math.ConvergenceException("", objArray16);
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray19);
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray16, (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.ConvergenceException convergenceException22 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray11, (java.lang.Throwable) convergenceException20);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray11);
        java.lang.Object[] objArray33 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException34 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray33);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException35 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray33);
        java.lang.Object[] objArray38 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray38);
        java.lang.Object[] objArray41 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("", objArray41);
        org.apache.commons.math.ConvergenceException convergenceException43 = new org.apache.commons.math.ConvergenceException("", objArray38, (java.lang.Throwable) convergenceException42);
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray33, (java.lang.Throwable) convergenceException42);
        java.lang.Object[] objArray45 = convergenceException42.getArguments();
        java.lang.Object[] objArray48 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("", objArray48);
        java.lang.Object[] objArray51 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("", objArray51);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("", objArray48, (java.lang.Throwable) convergenceException52);
        java.lang.Throwable[] throwableArray54 = convergenceException53.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) 10.0f, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray45, (java.lang.Throwable) convergenceException53);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray11, (java.lang.Throwable) convergenceException53);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException57 = new org.apache.commons.math.MaxIterationsExceededException(97, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MaxIterationsExceededException: ", objArray11);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(throwableArray54);
    }

    @Test
    public void test08377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08377");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.tan();
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex3 = complex1.tanh();
        org.apache.commons.math.complex.Complex complex4 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex5 = complex4.sin();
        boolean boolean6 = complex5.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test08378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08378");
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException9 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, (java.lang.Throwable) convergenceException8);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException10 = new org.apache.commons.math.FunctionEvaluationException(350.0d, "org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) convergenceException8);
        java.lang.Object[] objArray11 = convergenceException8.getArguments();
        java.lang.Throwable throwable12 = null;
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: ", objArray11, throwable12);
        java.lang.Object[] objArray26 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("", objArray26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray26);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException29 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray26);
        java.lang.Throwable[] throwableArray30 = maxIterationsExceededException29.getSuppressed();
        java.lang.Object[] objArray37 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException38 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray37);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException39 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray37);
        int int40 = maxIterationsExceededException39.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, "hi!", (java.lang.Object[]) throwableArray30, (java.lang.Throwable) maxIterationsExceededException39);
        java.lang.Object[] objArray46 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("", objArray46);
        java.lang.Object[] objArray52 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("", objArray52);
        java.lang.Object[] objArray55 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("", objArray55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("", objArray52, (java.lang.Throwable) convergenceException56);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException59 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException60 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray52, (java.lang.Throwable) functionEvaluationException59);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray46, (java.lang.Throwable) functionEvaluationException60);
        java.lang.String str62 = functionEvaluationException61.getPattern();
        java.lang.String str63 = functionEvaluationException61.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException64 = new org.apache.commons.math.FunctionEvaluationException((-9.89965E7d), (java.lang.Throwable) functionEvaluationException61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException65 = new org.apache.commons.math.FunctionEvaluationException((-9.89965E7d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray30, (java.lang.Throwable) functionEvaluationException64);
        org.apache.commons.math.ConvergenceException convergenceException66 = new org.apache.commons.math.ConvergenceException("Maximal number of iterations ({0}) exceeded", (java.lang.Object[]) throwableArray30);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException67 = new org.apache.commons.math.MaxIterationsExceededException((int) '4', "", (java.lang.Object[]) throwableArray30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException68 = new org.apache.commons.math.FunctionEvaluationException((-1.0064041017817517E256d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray11, (java.lang.Throwable) maxIterationsExceededException67);
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: hi!", (java.lang.Throwable) maxIterationsExceededException67);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 32 + "'", int40 == 32);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test08379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08379");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double7 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.setAbsoluteAccuracy(100.0d);
        int int11 = laguerreSolver6.getMaximalIterationCount();
        double double12 = laguerreSolver6.getAbsoluteAccuracy();
        double double13 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.setMaximalIterationCount(0);
        laguerreSolver6.setRelativeAccuracy((-1.0015971948223661E64d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0E-6d + "'", double7 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-15d + "'", double13 == 1.0E-15d);
    }

    @Test
    public void test08380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08380");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.setMaximalIterationCount((int) (short) 1);
        double double16 = laguerreSolver6.getResult();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = laguerreSolver6.getPolynomialFunction();
        double double19 = polynomialFunction17.value((-3.464877501E9d));
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction20 = polynomialFunction17.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver21 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction17);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.01d) + "'", double16 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + (-3.46487750099E11d) + "'", double19 == (-3.46487750099E11d));
        org.junit.Assert.assertNotNull(univariateRealFunction20);
    }

    @Test
    public void test08381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08381");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        int int11 = laguerreSolver6.getIterationCount();
        laguerreSolver6.setRelativeAccuracy(0.0d);
        double double16 = laguerreSolver6.solve((double) (-1.0f), 10001.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = laguerreSolver6.getPolynomialFunction();
        int int18 = polynomialFunction17.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.01d) + "'", double16 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test08382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08382");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        double double6 = complex5.getImaginary();
        org.apache.commons.math.complex.Complex complex7 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex8 = complex7.exp();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
    }

    @Test
    public void test08383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08383");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        double double13 = laguerreSolver6.getAbsoluteAccuracy();
        double double14 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetFunctionValueAccuracy();
        int int16 = laguerreSolver6.getIterationCount();
        laguerreSolver6.setFunctionValueAccuracy(1.0E-14d);
        laguerreSolver6.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-6d + "'", double13 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
    }

    @Test
    public void test08384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08384");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.resetFunctionValueAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((-0.3400000100000003d));
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.setFunctionValueAccuracy(2.799833927635354E77d);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = laguerreSolver6.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
    }

    @Test
    public void test08385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08385");
        java.lang.Object[] objArray12 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException13 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray12);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException14 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray12);
        java.lang.Object[] objArray19 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("", objArray19);
        java.lang.Object[] objArray22 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("", objArray22);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray19, (java.lang.Throwable) convergenceException23);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException26 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray19, (java.lang.Throwable) functionEvaluationException26);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "org.apache.commons.math.ConvergenceException: hi!", objArray12, (java.lang.Throwable) functionEvaluationException27);
        java.lang.Object[] objArray37 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException38 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray37);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException39 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray37);
        java.lang.Object[] objArray44 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("", objArray44);
        java.lang.Object[] objArray47 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", objArray47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("", objArray44, (java.lang.Throwable) convergenceException48);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray44, (java.lang.Throwable) functionEvaluationException51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) 100L, "org.apache.commons.math.ConvergenceException: hi!", objArray37, (java.lang.Throwable) functionEvaluationException52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray12, (java.lang.Throwable) functionEvaluationException52);
        java.lang.Object[] objArray55 = functionEvaluationException52.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((-0.009999997913837433d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray55);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
    }

    @Test
    public void test08386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08386");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-1.0849059202183432E74d), 13403.310093999602d);
    }

    @Test
    public void test08387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08387");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.cosh();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex10 = complex7.atan();
        org.apache.commons.math.complex.Complex complex11 = complex0.subtract(complex7);
        org.apache.commons.math.complex.Complex complex12 = complex11.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.negate();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex16.cos();
        double double18 = complex17.abs();
        org.apache.commons.math.complex.Complex complex19 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex22.sin();
        org.apache.commons.math.complex.Complex complex24 = complex20.pow(complex22);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex25.log();
        org.apache.commons.math.complex.Complex complex28 = complex20.divide(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex19.subtract(complex28);
        org.apache.commons.math.complex.Complex complex30 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex19.cos();
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex35.log();
        org.apache.commons.math.complex.Complex complex38 = complex35.sin();
        org.apache.commons.math.complex.Complex complex39 = complex35.log();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.sqrt();
        org.apache.commons.math.complex.Complex complex42 = complex35.divide(complex41);
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        org.apache.commons.math.complex.Complex complex45 = complex44.acos();
        double double46 = complex44.getReal();
        org.apache.commons.math.complex.Complex complex47 = complex44.sqrt();
        org.apache.commons.math.complex.Complex complex48 = complex35.pow(complex44);
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = complex49.cosh();
        org.apache.commons.math.complex.Complex complex51 = complex49.log();
        org.apache.commons.math.complex.Complex complex52 = complex51.cos();
        org.apache.commons.math.complex.Complex complex53 = complex44.multiply(complex51);
        org.apache.commons.math.complex.Complex complex54 = complex51.tanh();
        org.apache.commons.math.complex.Complex complex55 = complex33.divide(complex51);
        org.apache.commons.math.complex.Complex complex56 = complex32.pow(complex51);
        org.apache.commons.math.complex.Complex complex57 = complex12.pow(complex56);
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        org.apache.commons.math.complex.Complex complex60 = complex58.log();
        org.apache.commons.math.complex.Complex complex61 = complex60.cos();
        org.apache.commons.math.complex.Complex complex62 = complex60.exp();
        boolean boolean63 = complex60.isNaN();
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        double double66 = complex64.abs();
        org.apache.commons.math.complex.Complex complex67 = complex64.conjugate();
        org.apache.commons.math.complex.Complex complex68 = complex67.conjugate();
        org.apache.commons.math.complex.Complex complex69 = complex67.tanh();
        org.apache.commons.math.complex.Complex complex70 = complex60.multiply(complex67);
        org.apache.commons.math.complex.Complex complex71 = complex67.asin();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex73 = complex72.sqrt();
        org.apache.commons.math.complex.Complex complex74 = complex73.sin();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        double double77 = complex75.abs();
        org.apache.commons.math.complex.Complex complex78 = complex75.conjugate();
        org.apache.commons.math.complex.Complex complex79 = complex78.conjugate();
        boolean boolean80 = complex78.isInfinite();
        org.apache.commons.math.complex.Complex complex81 = complex78.cos();
        org.apache.commons.math.complex.Complex complex82 = complex74.add(complex78);
        org.apache.commons.math.complex.Complex complex83 = complex74.conjugate();
        org.apache.commons.math.complex.Complex complex84 = complex83.sin();
        org.apache.commons.math.complex.Complex complex85 = complex84.cosh();
        org.apache.commons.math.complex.Complex complex86 = complex67.multiply(complex84);
        org.apache.commons.math.complex.Complex complex87 = complex86.sqrt();
        org.apache.commons.math.complex.Complex complex88 = complex56.add(complex87);
        org.apache.commons.math.complex.Complex complex89 = complex87.tan();
        org.apache.commons.math.complex.Complex complex90 = complex89.atan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + Double.POSITIVE_INFINITY + "'", double6 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + Double.POSITIVE_INFINITY + "'", double66 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + Double.POSITIVE_INFINITY + "'", double77 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
    }

    @Test
    public void test08388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08388");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        boolean boolean2 = complex0.isNaN();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex6.sin();
        org.apache.commons.math.complex.Complex complex8 = complex4.pow(complex6);
        org.apache.commons.math.complex.Complex complex9 = complex8.asin();
        org.apache.commons.math.complex.Complex complex10 = complex9.atan();
        boolean boolean11 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex13 = complex10.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex13.sin();
        org.apache.commons.math.complex.Complex complex15 = complex0.divide(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex0.tan();
        org.apache.commons.math.complex.Complex complex17 = complex16.log();
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        double double20 = complex18.abs();
        org.apache.commons.math.complex.Complex complex21 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        double double24 = complex22.abs();
        org.apache.commons.math.complex.Complex complex25 = complex22.conjugate();
        org.apache.commons.math.complex.Complex complex26 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex25.tanh();
        org.apache.commons.math.complex.Complex complex28 = complex25.atan();
        org.apache.commons.math.complex.Complex complex29 = complex18.subtract(complex25);
        org.apache.commons.math.complex.Complex complex30 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = complex31.sqrt();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        double double35 = complex33.abs();
        org.apache.commons.math.complex.Complex complex36 = complex33.conjugate();
        org.apache.commons.math.complex.Complex complex37 = complex31.divide(complex36);
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex40 = complex38.log();
        org.apache.commons.math.complex.Complex complex41 = complex38.sin();
        org.apache.commons.math.complex.Complex complex42 = complex38.log();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex45 = complex38.divide(complex44);
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex47 = complex46.cosh();
        double double48 = complex46.abs();
        org.apache.commons.math.complex.Complex complex49 = complex46.conjugate();
        org.apache.commons.math.complex.Complex complex50 = complex49.conjugate();
        org.apache.commons.math.complex.Complex complex51 = complex45.subtract(complex50);
        org.apache.commons.math.complex.Complex complex52 = complex37.multiply(complex45);
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex54 = complex53.cosh();
        org.apache.commons.math.complex.Complex complex55 = complex53.log();
        org.apache.commons.math.complex.Complex complex56 = complex55.cos();
        double double57 = complex56.abs();
        org.apache.commons.math.complex.Complex complex58 = complex56.sqrt();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex60 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex61 = complex60.sqrt();
        org.apache.commons.math.complex.Complex complex62 = complex61.sin();
        org.apache.commons.math.complex.Complex complex63 = complex59.pow(complex61);
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex complex66 = complex64.log();
        org.apache.commons.math.complex.Complex complex67 = complex59.divide(complex66);
        org.apache.commons.math.complex.Complex complex68 = complex58.subtract(complex67);
        org.apache.commons.math.complex.Complex complex69 = complex45.pow(complex58);
        org.apache.commons.math.complex.Complex complex70 = complex58.exp();
        org.apache.commons.math.complex.Complex complex71 = complex58.sinh();
        org.apache.commons.math.complex.Complex complex72 = complex71.tanh();
        org.apache.commons.math.complex.Complex complex73 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex74 = complex30.multiply(complex73);
        org.apache.commons.math.complex.Complex complex75 = complex17.add(complex74);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + Double.POSITIVE_INFINITY + "'", double20 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + Double.POSITIVE_INFINITY + "'", double24 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + Double.POSITIVE_INFINITY + "'", double35 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + Double.POSITIVE_INFINITY + "'", double48 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
    }

    @Test
    public void test08389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08389");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        laguerreSolver6.setAbsoluteAccuracy((double) 1);
        double double21 = laguerreSolver6.getRelativeAccuracy();
        double double22 = laguerreSolver6.getResult();
        laguerreSolver6.setAbsoluteAccuracy((double) 32);
        laguerreSolver6.setFunctionValueAccuracy((-1000.0d));
        laguerreSolver6.setMaximalIterationCount((int) (byte) 1);
        double double29 = laguerreSolver6.getAbsoluteAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double33 = laguerreSolver6.solve((-0.010000000000000009d), 1.2559781975128798E-12d, (double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid interval, initial value parameters:  lower=-0.010000000000000009 initial=10.0 upper=1.2559781975128798E-12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.0d + "'", double22 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 32.0d + "'", double29 == 32.0d);
    }

    @Test
    public void test08390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08390");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.acos();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex7.tan();
        org.apache.commons.math.complex.Complex complex10 = complex7.tanh();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.abs();
        org.apache.commons.math.complex.Complex complex14 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        boolean boolean17 = complex15.isNaN();
        org.apache.commons.math.complex.Complex complex18 = complex15.sin();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex22 = complex21.sin();
        org.apache.commons.math.complex.Complex complex23 = complex19.pow(complex21);
        org.apache.commons.math.complex.Complex complex24 = complex23.asin();
        org.apache.commons.math.complex.Complex complex25 = complex24.atan();
        boolean boolean26 = complex25.isInfinite();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex28 = complex25.subtract(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex28.sin();
        org.apache.commons.math.complex.Complex complex30 = complex15.divide(complex29);
        org.apache.commons.math.complex.Complex complex31 = complex11.subtract(complex29);
        org.apache.commons.math.complex.Complex complex34 = new org.apache.commons.math.complex.Complex(1.0E-14d, (double) (byte) 1);
        org.apache.commons.math.complex.Complex complex35 = complex11.multiply(complex34);
        org.apache.commons.math.complex.Complex complex36 = complex11.acos();
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex10.pow(complex37);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + Double.POSITIVE_INFINITY + "'", double13 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
    }

    @Test
    public void test08391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08391");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        double double3 = complex0.getImaginary();
        org.apache.commons.math.complex.Complex complex4 = complex0.asin();
        org.apache.commons.math.complex.Complex complex5 = complex0.tan();
        java.lang.Class<?> wildcardClass6 = complex5.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + Double.POSITIVE_INFINITY + "'", double3 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test08392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08392");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        laguerreSolver6.setFunctionValueAccuracy((double) (byte) -1);
        int int12 = laguerreSolver6.getMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = laguerreSolver6.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double double16 = polynomialFunction13.value(0.8760844767819809d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = polynomialFunction13.polynomialDerivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 88.60844767819809d + "'", double16 == 88.60844767819809d);
        org.junit.Assert.assertNotNull(polynomialFunction17);
    }

    @Test
    public void test08393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08393");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        laguerreSolver6.setMaximalIterationCount(4);
        double double9 = laguerreSolver6.getAbsoluteAccuracy();
        int int10 = laguerreSolver6.getMaximalIterationCount();
        double double11 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-6d + "'", double9 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-15d + "'", double11 == 1.0E-15d);
    }

    @Test
    public void test08394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08394");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = laguerreSolver6.solveAll(doubleArray14, 10001.0d);
        laguerreSolver6.setAbsoluteAccuracy((double) 3);
        double double20 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.setAbsoluteAccuracy((double) 1L);
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.setRelativeAccuracy(6.728282640565594d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-15d + "'", double20 == 1.0E-15d);
    }

    @Test
    public void test08395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08395");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        double double12 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.setMaximalIterationCount(3);
        laguerreSolver6.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
    }

    @Test
    public void test08396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08396");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex1 = complex0.tan();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex3.acos();
        double double5 = complex3.getReal();
        boolean boolean6 = complex1.equals((java.lang.Object) complex3);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.cos();
        org.apache.commons.math.complex.Complex complex14 = complex10.conjugate();
        boolean boolean15 = complex1.equals((java.lang.Object) complex10);
        org.apache.commons.math.complex.Complex complex16 = complex1.sqrt1z();
        org.apache.commons.math.complex.Complex complex17 = complex1.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
    }

    @Test
    public void test08397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08397");
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException11 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray9);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: ", objArray9);
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray14);
        java.lang.Object[] objArray20 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException21 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray20);
        convergenceException15.addSuppressed((java.lang.Throwable) maxIterationsExceededException21);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray9, (java.lang.Throwable) maxIterationsExceededException21);
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray9);
        java.lang.Throwable[] throwableArray25 = convergenceException24.getSuppressed();
        double[] doubleArray32 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction33 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray32);
        double double35 = polynomialFunction33.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver36 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction33);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction37 = laguerreSolver36.getPolynomialFunction();
        laguerreSolver36.setRelativeAccuracy((double) 0);
        double[] doubleArray42 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction43 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray42);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction44 = polynomialFunction43.polynomialDerivative();
        double[] doubleArray45 = polynomialFunction43.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction46 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray45);
        org.apache.commons.math.complex.Complex[] complexArray48 = laguerreSolver36.solveAll(doubleArray45, (double) 4);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) 1L, "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray48);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException50 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray48);
        org.apache.commons.math.ConvergenceException convergenceException51 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray25, (java.lang.Throwable) maxIterationsExceededException50);
        java.lang.String str52 = maxIterationsExceededException50.getPattern();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((double) ' ', "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
        maxIterationsExceededException50.addSuppressed((java.lang.Throwable) functionEvaluationException55);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException55);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[0.0, 1]");
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10001.0d + "'", double35 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction37);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray48);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "org.apache.commons.math.ConvergenceException: hi!" + "'", str52, "org.apache.commons.math.ConvergenceException: hi!");
    }

    @Test
    public void test08398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08398");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        boolean boolean14 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex6.divide(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex6.log();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex22.sin();
        org.apache.commons.math.complex.Complex complex24 = complex20.pow(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex24.asin();
        org.apache.commons.math.complex.Complex complex26 = complex24.tan();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        double double29 = complex27.abs();
        org.apache.commons.math.complex.Complex complex30 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex30.conjugate();
        boolean boolean32 = complex30.isInfinite();
        org.apache.commons.math.complex.Complex complex33 = complex30.asin();
        boolean boolean34 = complex30.isNaN();
        org.apache.commons.math.complex.Complex complex35 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex36 = complex35.cosh();
        org.apache.commons.math.complex.Complex complex37 = complex30.divide(complex35);
        org.apache.commons.math.complex.Complex complex38 = complex26.pow(complex35);
        org.apache.commons.math.complex.Complex complex39 = complex26.sinh();
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        double double42 = complex40.abs();
        org.apache.commons.math.complex.Complex complex43 = complex40.conjugate();
        org.apache.commons.math.complex.Complex complex44 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex45 = complex44.sqrt();
        boolean boolean46 = complex44.isNaN();
        org.apache.commons.math.complex.Complex complex47 = complex44.sin();
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = complex49.sqrt();
        org.apache.commons.math.complex.Complex complex51 = complex50.sin();
        org.apache.commons.math.complex.Complex complex52 = complex48.pow(complex50);
        org.apache.commons.math.complex.Complex complex53 = complex52.asin();
        org.apache.commons.math.complex.Complex complex54 = complex53.atan();
        boolean boolean55 = complex54.isInfinite();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex57 = complex54.subtract(complex56);
        org.apache.commons.math.complex.Complex complex58 = complex57.sin();
        org.apache.commons.math.complex.Complex complex59 = complex44.divide(complex58);
        org.apache.commons.math.complex.Complex complex60 = complex40.subtract(complex58);
        boolean boolean61 = complex60.isNaN();
        org.apache.commons.math.complex.Complex complex62 = complex39.subtract(complex60);
        org.apache.commons.math.complex.Complex complex63 = complex19.divide(complex62);
        boolean boolean64 = complex63.isInfinite();
        org.apache.commons.math.complex.Complex complex65 = complex63.acos();
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex67 = complex66.cosh();
        org.apache.commons.math.complex.Complex complex68 = complex66.log();
        double double69 = complex68.getImaginary();
        double double70 = complex68.getImaginary();
        org.apache.commons.math.complex.Complex complex71 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex72 = complex71.cosh();
        org.apache.commons.math.complex.Complex complex73 = complex72.acos();
        double double74 = complex72.getReal();
        org.apache.commons.math.complex.Complex complex75 = complex72.sqrt();
        org.apache.commons.math.complex.Complex complex76 = complex68.subtract(complex72);
        org.apache.commons.math.complex.Complex complex77 = complex65.add(complex72);
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex79 = complex78.cosh();
        double double80 = complex78.abs();
        org.apache.commons.math.complex.Complex complex81 = complex78.conjugate();
        org.apache.commons.math.complex.Complex complex82 = complex81.conjugate();
        boolean boolean83 = complex81.isInfinite();
        org.apache.commons.math.complex.Complex complex84 = complex81.asin();
        boolean boolean85 = complex81.isNaN();
        org.apache.commons.math.complex.Complex complex86 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex87 = complex86.cosh();
        org.apache.commons.math.complex.Complex complex88 = complex81.divide(complex86);
        boolean boolean89 = complex81.isNaN();
        org.apache.commons.math.complex.Complex complex90 = complex77.pow(complex81);
        org.apache.commons.math.complex.Complex complex91 = complex81.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + Double.POSITIVE_INFINITY + "'", double29 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + Double.POSITIVE_INFINITY + "'", double42 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 0.7853981633974483d + "'", double69 == 0.7853981633974483d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.7853981633974483d + "'", double70 == 0.7853981633974483d);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + Double.POSITIVE_INFINITY + "'", double80 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
    }

    @Test
    public void test08399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08399");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex2.log();
        org.apache.commons.math.complex.Complex complex5 = complex2.sin();
        org.apache.commons.math.complex.Complex complex6 = complex2.log();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = complex2.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        double double13 = complex11.getReal();
        org.apache.commons.math.complex.Complex complex14 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex2.pow(complex11);
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex16.log();
        org.apache.commons.math.complex.Complex complex19 = complex18.cos();
        org.apache.commons.math.complex.Complex complex20 = complex11.multiply(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex18.tanh();
        org.apache.commons.math.complex.Complex complex22 = complex0.divide(complex18);
        org.apache.commons.math.complex.Complex complex23 = complex18.atan();
        org.apache.commons.math.complex.Complex complex24 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex25 = complex23.tanh();
        org.apache.commons.math.complex.Complex complex26 = complex23.acos();
        org.apache.commons.math.complex.Complex complex27 = complex26.acos();
        boolean boolean28 = complex27.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test08400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08400");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        double double10 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setMaximalIterationCount((int) (short) 10);
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.resetFunctionValueAccuracy();
        double[] doubleArray18 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray18);
        double double21 = polynomialFunction19.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver22 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction19);
        double double26 = laguerreSolver22.solve((double) (-1L), 349.0d, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = laguerreSolver22.getPolynomialFunction();
        double double29 = polynomialFunction27.value((double) (short) 1);
        double double31 = polynomialFunction27.value(101.0d);
        int int32 = polynomialFunction27.degree();
        double[] doubleArray33 = polynomialFunction27.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray35 = laguerreSolver6.solveAll(doubleArray33, (-0.00999999999476131d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction36 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-15d + "'", double10 == 1.0E-15d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10001.0d + "'", double21 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-0.01d) + "'", double26 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 101.0d + "'", double29 == 101.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10101.0d + "'", double31 == 10101.0d);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray35);
    }

    @Test
    public void test08401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08401");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex5.log();
        org.apache.commons.math.complex.Complex complex8 = complex0.divide(complex7);
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex9.sin();
        org.apache.commons.math.complex.Complex complex12 = complex8.pow(complex9);
        org.apache.commons.math.complex.Complex complex13 = complex9.sin();
        double double14 = complex13.abs();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex15.log();
        org.apache.commons.math.complex.Complex complex18 = complex15.sin();
        org.apache.commons.math.complex.Complex complex19 = complex15.log();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.sqrt();
        org.apache.commons.math.complex.Complex complex22 = complex15.divide(complex21);
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        double double25 = complex23.abs();
        org.apache.commons.math.complex.Complex complex26 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex26.conjugate();
        org.apache.commons.math.complex.Complex complex28 = complex22.subtract(complex27);
        org.apache.commons.math.complex.Complex complex29 = complex22.exp();
        org.apache.commons.math.complex.Complex complex30 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex31 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex32 = complex31.acos();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex33.log();
        org.apache.commons.math.complex.Complex complex36 = complex33.sin();
        org.apache.commons.math.complex.Complex complex37 = complex36.tanh();
        org.apache.commons.math.complex.Complex complex38 = complex31.add(complex37);
        boolean boolean39 = complex22.equals((java.lang.Object) complex31);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        org.apache.commons.math.complex.Complex complex42 = complex40.log();
        org.apache.commons.math.complex.Complex complex43 = complex42.cos();
        double double44 = complex43.abs();
        org.apache.commons.math.complex.Complex complex45 = complex43.sqrt();
        org.apache.commons.math.complex.Complex complex46 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex48 = complex47.sqrt();
        org.apache.commons.math.complex.Complex complex49 = complex48.sin();
        org.apache.commons.math.complex.Complex complex50 = complex46.pow(complex48);
        org.apache.commons.math.complex.Complex complex51 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex52 = complex51.cosh();
        org.apache.commons.math.complex.Complex complex53 = complex51.log();
        org.apache.commons.math.complex.Complex complex54 = complex46.divide(complex53);
        org.apache.commons.math.complex.Complex complex55 = complex45.subtract(complex54);
        org.apache.commons.math.complex.Complex complex56 = complex45.conjugate();
        org.apache.commons.math.complex.Complex complex57 = complex45.cos();
        org.apache.commons.math.complex.Complex complex58 = complex45.sqrt();
        org.apache.commons.math.complex.Complex complex59 = complex31.subtract(complex45);
        org.apache.commons.math.complex.Complex complex60 = complex45.sinh();
        org.apache.commons.math.complex.Complex complex61 = complex13.add(complex45);
        org.apache.commons.math.complex.Complex complex64 = new org.apache.commons.math.complex.Complex(35.0d, (double) 1.0f);
        org.apache.commons.math.complex.Complex complex65 = complex45.multiply(complex64);
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.ONE;
        org.apache.commons.math.complex.Complex complex67 = complex66.asin();
        boolean boolean68 = complex66.isInfinite();
        org.apache.commons.math.complex.Complex complex69 = complex66.sqrt();
        org.apache.commons.math.complex.Complex complex70 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex71 = complex70.cosh();
        org.apache.commons.math.complex.Complex complex72 = complex70.log();
        org.apache.commons.math.complex.Complex complex73 = complex70.sin();
        org.apache.commons.math.complex.Complex complex74 = complex70.log();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex76 = complex75.sqrt();
        org.apache.commons.math.complex.Complex complex77 = complex70.divide(complex76);
        org.apache.commons.math.complex.Complex complex78 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex79 = complex78.cosh();
        org.apache.commons.math.complex.Complex complex80 = complex79.acos();
        double double81 = complex79.getReal();
        org.apache.commons.math.complex.Complex complex82 = complex79.sqrt();
        org.apache.commons.math.complex.Complex complex83 = complex70.pow(complex79);
        org.apache.commons.math.complex.Complex complex84 = complex83.sqrt1z();
        org.apache.commons.math.complex.Complex complex85 = complex83.atan();
        org.apache.commons.math.complex.Complex complex86 = complex83.atan();
        boolean boolean87 = complex83.isInfinite();
        org.apache.commons.math.complex.Complex complex88 = complex83.sqrt();
        org.apache.commons.math.complex.Complex complex89 = complex69.subtract(complex88);
        org.apache.commons.math.complex.Complex complex90 = complex64.add(complex69);
        org.apache.commons.math.complex.Complex complex91 = complex90.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + Double.POSITIVE_INFINITY + "'", double25 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
    }

    @Test
    public void test08402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08402");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex4.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        boolean boolean14 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex6.pow(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex6.sinh();
        org.apache.commons.math.complex.Complex complex20 = complex19.cos();
        org.apache.commons.math.complex.Complex complex21 = complex19.cos();
        org.apache.commons.math.complex.Complex complex22 = complex19.conjugate();
        boolean boolean23 = complex19.isInfinite();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test08403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08403");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        laguerreSolver9.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver9.resetRelativeAccuracy();
        laguerreSolver9.resetMaximalIterationCount();
        int int23 = laguerreSolver9.getMaximalIterationCount();
        double double24 = laguerreSolver9.getAbsoluteAccuracy();
        double double28 = laguerreSolver9.solve(0.0d, (double) (short) 1, 100.0d);
        double[] doubleArray31 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray31);
        double double34 = polynomialFunction32.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver35 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction32);
        double double36 = laguerreSolver35.getAbsoluteAccuracy();
        laguerreSolver35.resetAbsoluteAccuracy();
        laguerreSolver35.setFunctionValueAccuracy(64.0d);
        double double40 = laguerreSolver35.getRelativeAccuracy();
        int int41 = laguerreSolver35.getMaximalIterationCount();
        double[] doubleArray44 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction45 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray44);
        double double47 = polynomialFunction45.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver48 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction45);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction49 = laguerreSolver48.getPolynomialFunction();
        laguerreSolver48.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction52 = laguerreSolver48.getPolynomialFunction();
        laguerreSolver48.resetRelativeAccuracy();
        laguerreSolver48.setRelativeAccuracy(10.0d);
        laguerreSolver48.setAbsoluteAccuracy((-1.6365376E7d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction58 = laguerreSolver48.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver59 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction58);
        double[] doubleArray60 = polynomialFunction58.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction61 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray60);
        double[] doubleArray62 = polynomialFunction61.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray64 = laguerreSolver35.solveAll(doubleArray62, (-3.2273645162588404E16d));
        org.apache.commons.math.complex.Complex[] complexArray66 = laguerreSolver9.solveAll(doubleArray62, 1.120340101E9d);
        laguerreSolver9.setMaximalIterationCount((int) ' ');
        laguerreSolver9.resetMaximalIterationCount();
        laguerreSolver9.resetRelativeAccuracy();
        laguerreSolver9.resetFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0E-6d + "'", double24 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10001.0d + "'", double34 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0E-6d + "'", double36 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 1.0E-14d + "'", double40 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 100 + "'", int41 == 100);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10001.0d + "'", double47 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction49);
        org.junit.Assert.assertNotNull(polynomialFunction52);
        org.junit.Assert.assertNotNull(polynomialFunction58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray64);
        org.junit.Assert.assertNotNull(complexArray66);
    }

    @Test
    public void test08404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08404");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (byte) 0, (double) 3);
        double double3 = complex2.abs();
        boolean boolean4 = complex2.isInfinite();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.0d + "'", double3 == 3.0d);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test08405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08405");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException((-1461412.0d));
    }

    @Test
    public void test08406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08406");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex4.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        boolean boolean14 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex6.pow(complex15);
        boolean boolean19 = complex15.isInfinite();
        org.apache.commons.math.complex.Complex complex20 = complex15.atan();
        org.apache.commons.math.complex.Complex complex21 = complex20.negate();
        org.apache.commons.math.complex.Complex complex22 = complex21.sin();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex24 = complex23.exp();
        org.apache.commons.math.complex.Complex complex25 = complex24.acos();
        org.apache.commons.math.complex.Complex complex26 = complex25.acos();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex28 = complex27.tan();
        org.apache.commons.math.complex.Complex complex29 = complex26.pow(complex28);
        boolean boolean30 = complex26.isNaN();
        org.apache.commons.math.complex.Complex complex31 = complex22.divide(complex26);
        java.lang.Class<?> wildcardClass32 = complex26.getClass();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test08407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08407");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) (-1.0f));
        // The following exception was thrown during execution in test generation
        try {
            double double12 = laguerreSolver6.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
    }

    @Test
    public void test08408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08408");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = complex1.sin();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex5 = complex4.sin();
        org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex4);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.cos();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double double16 = complex14.abs();
        org.apache.commons.math.complex.Complex complex17 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex18 = complex17.conjugate();
        boolean boolean19 = complex17.isInfinite();
        org.apache.commons.math.complex.Complex complex20 = complex17.asin();
        boolean boolean21 = complex17.isNaN();
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex17.divide(complex22);
        org.apache.commons.math.complex.Complex complex25 = complex13.divide(complex22);
        org.apache.commons.math.complex.Complex complex26 = complex1.subtract(complex13);
        org.apache.commons.math.complex.Complex complex27 = complex1.sinh();
        org.apache.commons.math.complex.Complex complex30 = new org.apache.commons.math.complex.Complex((double) (short) 100, (double) 0);
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex31.tan();
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex34.acos();
        double double36 = complex34.getReal();
        boolean boolean37 = complex32.equals((java.lang.Object) complex34);
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.abs();
        org.apache.commons.math.complex.Complex complex41 = complex38.conjugate();
        org.apache.commons.math.complex.Complex complex42 = complex41.conjugate();
        boolean boolean43 = complex41.isInfinite();
        org.apache.commons.math.complex.Complex complex44 = complex41.cos();
        org.apache.commons.math.complex.Complex complex45 = complex41.conjugate();
        boolean boolean46 = complex32.equals((java.lang.Object) complex41);
        org.apache.commons.math.complex.Complex complex47 = complex32.sqrt1z();
        org.apache.commons.math.complex.Complex complex48 = complex30.add(complex47);
        org.apache.commons.math.complex.Complex complex49 = complex1.multiply(complex47);
        org.apache.commons.math.complex.Complex complex50 = complex49.atan();
        double double51 = complex50.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + Double.POSITIVE_INFINITY + "'", double16 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + Double.POSITIVE_INFINITY + "'", double40 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
    }

    @Test
    public void test08409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08409");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        double double11 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((-1.0003990597689866E16d));
        laguerreSolver6.setMaximalIterationCount((int) '#');
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setAbsoluteAccuracy(3.999878801222116E21d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-6d + "'", double11 == 1.0E-6d);
        org.junit.Assert.assertNotNull(polynomialFunction16);
    }

    @Test
    public void test08410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08410");
        java.lang.Object[] objArray2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException((-7.173051538824589E30d), "", objArray2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08411");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.setMaximalIterationCount((int) ' ');
        double double15 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.setMaximalIterationCount(100);
        laguerreSolver6.setAbsoluteAccuracy((-9.820178719278598d));
        // The following exception was thrown during execution in test generation
        try {
            double double23 = laguerreSolver6.solve((-8.758498599E9d), (-2.9811081908222352E41d), 1.030000009901E12d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [-8.758498599E9,-2.9811081908222352E41]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
    }

    @Test
    public void test08412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08412");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        int int9 = polynomialFunction6.degree();
        double double11 = polynomialFunction6.value(64.0d);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = polynomialFunction6.derivative();
        int int13 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction14 = polynomialFunction6.derivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver15 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double16 = laguerreSolver15.getRelativeAccuracy();
        double double20 = laguerreSolver15.solve((-4.819265226515003E7d), 0.0d, (-1.0410151717904442E16d));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-1.6365376E7d) + "'", double11 == (-1.6365376E7d));
        org.junit.Assert.assertNotNull(univariateRealFunction12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(univariateRealFunction14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-14d + "'", double16 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test08413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08413");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.setMaximalIterationCount((int) ' ');
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((-161.0d));
        laguerreSolver6.setMaximalIterationCount((int) (short) 10);
        int int20 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.resetRelativeAccuracy();
        int int22 = laguerreSolver6.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 10 + "'", int22 == 10);
    }

    @Test
    public void test08414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08414");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex5.atan();
        boolean boolean7 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex9 = complex6.subtract(complex8);
        org.apache.commons.math.complex.Complex complex10 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex6.tan();
        org.apache.commons.math.complex.Complex complex12 = complex6.exp();
        double[] doubleArray18 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray18);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver20 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction19);
        double double21 = laguerreSolver20.getAbsoluteAccuracy();
        laguerreSolver20.resetMaximalIterationCount();
        boolean boolean23 = complex12.equals((java.lang.Object) laguerreSolver20);
        laguerreSolver20.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0E-6d + "'", double21 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test08415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08415");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        double double19 = laguerreSolver6.getRelativeAccuracy();
        double double20 = laguerreSolver6.getResult();
        laguerreSolver6.setRelativeAccuracy((-9.89965E7d));
        int int23 = laguerreSolver6.getMaximalIterationCount();
        double double24 = laguerreSolver6.getFunctionValueAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0E-15d + "'", double24 == 1.0E-15d);
    }

    @Test
    public void test08416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08416");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        double double11 = laguerreSolver6.getRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = laguerreSolver6.solve(64.0d, 1340101.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [64.0,1340101.0]  Values: [6401.0,1.34010101E8]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test08417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08417");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        double double10 = polynomialFunction6.value((double) (byte) 0);
        double[] doubleArray11 = polynomialFunction6.getCoefficients();
        double double13 = polynomialFunction6.value((-1.9610495997078995E34d));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.4789527957023382E137d) + "'", double13 == (-1.4789527957023382E137d));
    }

    @Test
    public void test08418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08418");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (byte) 10);
        double double7 = polynomialFunction3.value((double) (byte) 10);
        double[] doubleArray8 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction3.polynomialDerivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 349.0d + "'", double5 == 349.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 349.0d + "'", double7 == 349.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction9);
    }

    @Test
    public void test08419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08419");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        laguerreSolver9.resetRelativeAccuracy();
        laguerreSolver9.resetFunctionValueAccuracy();
        laguerreSolver9.setMaximalIterationCount(18);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
    }

    @Test
    public void test08420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08420");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver5 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction4);
        laguerreSolver5.setFunctionValueAccuracy(Double.POSITIVE_INFINITY);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = laguerreSolver5.getPolynomialFunction();
        laguerreSolver5.setAbsoluteAccuracy((double) (short) 10);
        double[] doubleArray13 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        double double16 = polynomialFunction14.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver17 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction14);
        laguerreSolver17.setMaximalIterationCount(4);
        int int20 = laguerreSolver17.getMaximalIterationCount();
        double[] doubleArray23 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray23);
        double double26 = polynomialFunction24.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver27 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction24);
        double double31 = laguerreSolver27.solve((double) (-1L), 349.0d, (double) (short) 10);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction32 = laguerreSolver27.getPolynomialFunction();
        double double34 = polynomialFunction32.value((double) (short) 1);
        double double36 = polynomialFunction32.value(101.0d);
        int int37 = polynomialFunction32.degree();
        double[] doubleArray38 = polynomialFunction32.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray40 = laguerreSolver17.solveAll(doubleArray38, 33.000004d);
        org.apache.commons.math.complex.Complex[] complexArray42 = laguerreSolver5.solveAll(doubleArray38, 1.0300000099E10d);
        // The following exception was thrown during execution in test generation
        try {
            double double45 = laguerreSolver5.solve(6401.0d, 1.030000009901E12d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [6401.0,1.030000009901E12]  Values: [35.0,35.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10001.0d + "'", double16 == 10001.0d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10001.0d + "'", double26 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-0.01d) + "'", double31 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 101.0d + "'", double34 == 101.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10101.0d + "'", double36 == 10101.0d);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray40);
        org.junit.Assert.assertNotNull(complexArray42);
    }

    @Test
    public void test08421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08421");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double7 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.setAbsoluteAccuracy(100.0d);
        double[] doubleArray13 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray13);
        double double16 = polynomialFunction14.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver17 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction14);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = laguerreSolver17.getPolynomialFunction();
        laguerreSolver17.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = laguerreSolver17.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = polynomialFunction21.polynomialDerivative();
        double double24 = polynomialFunction21.value((double) ' ');
        double[] doubleArray25 = polynomialFunction21.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray27 = laguerreSolver6.solveAll(doubleArray25, 0.0d);
        double double28 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        int int30 = laguerreSolver6.getIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0E-6d + "'", double7 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10001.0d + "'", double16 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertNotNull(polynomialFunction22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 3201.0d + "'", double24 == 3201.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 1.0E-14d + "'", double28 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test08422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08422");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction8 = polynomialFunction7.derivative();
        double double10 = polynomialFunction7.value((-1.0004040611101011E24d));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(univariateRealFunction8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 4.004850692769658E72d + "'", double10 == 4.004850692769658E72d);
    }

    @Test
    public void test08423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08423");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        double double11 = laguerreSolver6.getResult();
        double double12 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        double double14 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setAbsoluteAccuracy((double) 0L);
        laguerreSolver6.setMaximalIterationCount((int) 'a');
        double double19 = laguerreSolver6.getAbsoluteAccuracy();
        double double22 = laguerreSolver6.solve((-8.7584986E7d), 0.7853981633974483d);
        double double25 = laguerreSolver6.solve((-99.0d), 1.0E-15d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = laguerreSolver6.getPolynomialFunction();
        int int27 = laguerreSolver6.getIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.01d) + "'", double11 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-6d + "'", double14 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.0d + "'", double19 == 0.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-0.01d) + "'", double22 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-0.01d) + "'", double25 == (-0.01d));
        org.junit.Assert.assertNotNull(polynomialFunction26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
    }

    @Test
    public void test08424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08424");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((double) 100.0f);
        laguerreSolver6.setFunctionValueAccuracy((double) 32);
        laguerreSolver6.resetAbsoluteAccuracy();
        double[] doubleArray19 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver21 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction20);
        laguerreSolver21.resetAbsoluteAccuracy();
        double[] doubleArray25 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray25);
        double double28 = polynomialFunction26.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver29 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction26);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction30 = laguerreSolver29.getPolynomialFunction();
        laguerreSolver29.resetRelativeAccuracy();
        double[] doubleArray37 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction38 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray41 = laguerreSolver29.solveAll(doubleArray37, 101.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray37);
        org.apache.commons.math.complex.Complex[] complexArray44 = laguerreSolver21.solveAll(doubleArray37, 10101.0d);
        org.apache.commons.math.complex.Complex complex47 = new org.apache.commons.math.complex.Complex(134.02310093999603d, (double) (-1.0f));
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        org.apache.commons.math.complex.Complex complex49 = complex48.cos();
        org.apache.commons.math.complex.Complex complex50 = laguerreSolver6.solve(complexArray44, complex48);
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.setRelativeAccuracy(1880101.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10001.0d + "'", double28 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction30);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertNotNull(complexArray44);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
    }

    @Test
    public void test08425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08425");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        org.apache.commons.math.complex.Complex complex4 = complex2.log();
        org.apache.commons.math.complex.Complex complex5 = complex2.sin();
        org.apache.commons.math.complex.Complex complex6 = complex2.log();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = complex2.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex11.acos();
        double double13 = complex11.getReal();
        org.apache.commons.math.complex.Complex complex14 = complex11.sqrt();
        org.apache.commons.math.complex.Complex complex15 = complex2.pow(complex11);
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = complex16.cosh();
        org.apache.commons.math.complex.Complex complex18 = complex16.log();
        org.apache.commons.math.complex.Complex complex19 = complex18.cos();
        org.apache.commons.math.complex.Complex complex20 = complex11.multiply(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex18.tanh();
        org.apache.commons.math.complex.Complex complex22 = complex0.divide(complex18);
        org.apache.commons.math.complex.Complex complex23 = complex22.tanh();
        org.apache.commons.math.complex.Complex complex24 = complex23.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
    }

    @Test
    public void test08426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08426");
        java.lang.Object[] objArray10 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException11 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException(35.0d, "hi!", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException13 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) -1, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException14 = new org.apache.commons.math.FunctionEvaluationException(1.0E-15d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException13);
        java.lang.String str15 = functionEvaluationException13.toString();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[0.0, 1]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: " + "'", str15, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test08427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08427");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-9.89965E7d), 1.0E-15d);
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.abs();
        org.apache.commons.math.complex.Complex complex6 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex6.tanh();
        org.apache.commons.math.complex.Complex complex9 = complex8.tan();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.abs();
        org.apache.commons.math.complex.Complex complex13 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex13.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex9.subtract(complex13);
        org.apache.commons.math.complex.Complex complex16 = complex13.negate();
        org.apache.commons.math.complex.Complex complex17 = complex13.tanh();
        org.apache.commons.math.complex.Complex complex18 = complex2.multiply(complex17);
        org.apache.commons.math.complex.Complex complex19 = complex2.sinh();
        org.apache.commons.math.complex.Complex complex20 = complex2.conjugate();
        double double21 = complex2.getReal();
        org.apache.commons.math.complex.Complex complex22 = complex2.log();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex25.sin();
        org.apache.commons.math.complex.Complex complex27 = complex23.pow(complex25);
        org.apache.commons.math.complex.Complex complex28 = complex27.asin();
        org.apache.commons.math.complex.Complex complex29 = complex28.atan();
        boolean boolean30 = complex29.isInfinite();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex32 = complex29.subtract(complex31);
        org.apache.commons.math.complex.Complex complex33 = complex29.conjugate();
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = null;
        org.apache.commons.math.complex.Complex complex36 = complex34.subtract(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex36.tanh();
        org.apache.commons.math.complex.Complex complex38 = complex37.atan();
        org.apache.commons.math.complex.Complex complex39 = complex22.divide(complex37);
        double double40 = complex37.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-9.89965E7d) + "'", double21 == (-9.89965E7d));
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
    }

    @Test
    public void test08428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08428");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double10 = laguerreSolver9.getAbsoluteAccuracy();
        double double13 = laguerreSolver9.solve(10101.0d, 0.0d);
        int int14 = laguerreSolver9.getMaximalIterationCount();
        laguerreSolver9.resetRelativeAccuracy();
        laguerreSolver9.resetFunctionValueAccuracy();
        int int17 = laguerreSolver9.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0E-6d + "'", double10 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
    }

    @Test
    public void test08429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08429");
        double[] doubleArray4 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction5 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray4);
        double double7 = polynomialFunction5.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver8 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction5);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = laguerreSolver8.getPolynomialFunction();
        laguerreSolver8.resetRelativeAccuracy();
        double[] doubleArray16 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray16);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray16);
        org.apache.commons.math.complex.Complex[] complexArray20 = laguerreSolver8.solveAll(doubleArray16, 101.0d);
        org.apache.commons.math.ConvergenceException convergenceException23 = new org.apache.commons.math.ConvergenceException();
        java.lang.Object[] objArray31 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException32 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray31);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException33 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray31);
        java.lang.Object[] objArray36 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException37 = new org.apache.commons.math.ConvergenceException("", objArray36);
        java.lang.Object[] objArray39 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("", objArray39);
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("", objArray36, (java.lang.Throwable) convergenceException40);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray31, (java.lang.Throwable) convergenceException40);
        java.lang.Object[] objArray43 = convergenceException40.getArguments();
        convergenceException23.addSuppressed((java.lang.Throwable) convergenceException40);
        java.lang.Throwable[] throwableArray45 = convergenceException40.getSuppressed();
        java.lang.Object[] objArray51 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("", objArray51);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray51);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException54 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray51);
        java.lang.Object[] objArray55 = maxIterationsExceededException54.getArguments();
        int int56 = maxIterationsExceededException54.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray45, (java.lang.Throwable) maxIterationsExceededException54);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException58 = new org.apache.commons.math.FunctionEvaluationException(Double.NEGATIVE_INFINITY, "", (java.lang.Object[]) complexArray20, (java.lang.Throwable) functionEvaluationException57);
        java.lang.Object[] objArray68 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("", objArray68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray68);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException71 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray68);
        java.lang.Object[] objArray78 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException79 = new org.apache.commons.math.ConvergenceException("", objArray78);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException80 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray78);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException81 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray78);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException82 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) maxIterationsExceededException81);
        org.apache.commons.math.ConvergenceException convergenceException83 = new org.apache.commons.math.ConvergenceException("", objArray68, (java.lang.Throwable) functionEvaluationException82);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException((-1.273080024475272E25d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray68);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException((-2.8667065448436136E59d), (java.lang.Throwable) functionEvaluationException84);
        functionEvaluationException58.addSuppressed((java.lang.Throwable) functionEvaluationException84);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 10001.0d + "'", double7 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray20);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray36), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray36), "[]");
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertNotNull(objArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray78), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray78), "[]");
    }

    @Test
    public void test08430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08430");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray14, 101.0d);
        int int19 = laguerreSolver6.getMaximalIterationCount();
        double double20 = laguerreSolver6.getFunctionValueAccuracy();
        int int21 = laguerreSolver6.getIterationCount();
        double double22 = laguerreSolver6.getRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = laguerreSolver6.getPolynomialFunction();
        // The following exception was thrown during execution in test generation
        try {
            double double27 = laguerreSolver6.solve((-2.90204126246E11d), 1.0000000001255978d, (double) 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid interval, initial value parameters:  lower=-2.90204126246E11 initial=12.0 upper=1.0000000001255978");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 100 + "'", int19 == 100);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-15d + "'", double20 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 18 + "'", int21 == 18);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-14d + "'", double22 == 1.0E-14d);
        org.junit.Assert.assertNotNull(polynomialFunction23);
    }

    @Test
    public void test08431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08431");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.asin();
        boolean boolean7 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex3.divide(complex8);
        boolean boolean11 = complex3.isNaN();
        double double12 = complex3.getReal();
        org.apache.commons.math.complex.Complex complex13 = complex3.acos();
        org.apache.commons.math.complex.Complex complex14 = complex3.exp();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        boolean boolean20 = complex18.isInfinite();
        org.apache.commons.math.complex.Complex complex21 = complex18.cos();
        org.apache.commons.math.complex.Complex complex22 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex18.sin();
        boolean boolean24 = complex18.isNaN();
        org.apache.commons.math.complex.Complex complex25 = complex18.sqrt();
        org.apache.commons.math.complex.Complex complex26 = complex25.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex14.add(complex26);
        org.apache.commons.math.complex.Complex complex28 = complex26.tanh();
        org.apache.commons.math.complex.Complex complex29 = complex28.log();
        org.apache.commons.math.complex.Complex complex30 = complex29.acos();
        boolean boolean31 = complex30.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test08432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08432");
        double[] doubleArray7 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray7);
        double double10 = polynomialFunction8.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = laguerreSolver11.getPolynomialFunction();
        double double13 = laguerreSolver11.getAbsoluteAccuracy();
        double[] doubleArray19 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray19);
        org.apache.commons.math.complex.Complex[] complexArray22 = laguerreSolver11.solveAll(doubleArray19, 10001.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = laguerreSolver11.getPolynomialFunction();
        double[] doubleArray26 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction27 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray26);
        double double29 = polynomialFunction27.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver30 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction27);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = laguerreSolver30.getPolynomialFunction();
        double double32 = laguerreSolver30.getAbsoluteAccuracy();
        double[] doubleArray38 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction39 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray38);
        org.apache.commons.math.complex.Complex[] complexArray41 = laguerreSolver30.solveAll(doubleArray38, 10001.0d);
        laguerreSolver30.setFunctionValueAccuracy((double) 10.0f);
        double double44 = laguerreSolver30.getRelativeAccuracy();
        double[] doubleArray50 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction51 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray50);
        double double53 = polynomialFunction51.value((double) 0);
        double double55 = polynomialFunction51.value((double) (byte) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction56 = polynomialFunction51.polynomialDerivative();
        double[] doubleArray57 = polynomialFunction51.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray59 = laguerreSolver30.solveAll(doubleArray57, (-1.6365376E7d));
        org.apache.commons.math.complex.Complex[] complexArray61 = laguerreSolver11.solveAll(doubleArray57, (double) 100L);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException62 = new org.apache.commons.math.FunctionEvaluationException((-8.881784197001252E-16d), "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) complexArray61);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException63 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 0, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray61);
        java.lang.String str64 = functionEvaluationException63.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException65 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) functionEvaluationException63);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10001.0d + "'", double10 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-6d + "'", double13 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray22);
        org.junit.Assert.assertNotNull(polynomialFunction23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10001.0d + "'", double29 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.0E-6d + "'", double32 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0E-14d + "'", double44 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 0.0d + "'", double53 == 0.0d);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray59);
        org.junit.Assert.assertNotNull(complexArray61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: " + "'", str64, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test08433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08433");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        int int19 = laguerreSolver9.getIterationCount();
        laguerreSolver9.resetAbsoluteAccuracy();
        laguerreSolver9.setMaximalIterationCount((int) 'a');
        laguerreSolver9.setRelativeAccuracy((-8.7584986E7d));
        // The following exception was thrown during execution in test generation
        try {
            double double28 = laguerreSolver9.solve(2050.0d, 6.6194706314463305d, 4.5126449834479465E48d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [2050.0,6.6194706314463305]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
    }

    @Test
    public void test08434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08434");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver9.setAbsoluteAccuracy(0.0d);
        int int12 = laguerreSolver9.getMaximalIterationCount();
        laguerreSolver9.setAbsoluteAccuracy((-1.8260159415627717E125d));
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
    }

    @Test
    public void test08435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08435");
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray7);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException9 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray7);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException10 = new org.apache.commons.math.MaxIterationsExceededException((int) 'a', "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", objArray7);
        int int11 = maxIterationsExceededException10.getMaxIterations();
        int int12 = maxIterationsExceededException10.getMaxIterations();
        java.lang.Object[] objArray13 = maxIterationsExceededException10.getArguments();
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray20);
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray20, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray20);
        org.apache.commons.math.ConvergenceException convergenceException27 = new org.apache.commons.math.ConvergenceException("hi!", objArray20);
        java.lang.Object[] objArray28 = convergenceException27.getArguments();
        java.lang.Throwable[] throwableArray29 = convergenceException27.getSuppressed();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException30 = new org.apache.commons.math.FunctionEvaluationException(0.7853981633974483d, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10,101", (java.lang.Throwable) convergenceException27);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) convergenceException27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((-1.0064041017817517E256d), "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10,101", objArray13, (java.lang.Throwable) convergenceException27);
        double double33 = functionEvaluationException32.getArgument();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-1.0064041017817517E256d) + "'", double33 == (-1.0064041017817517E256d));
    }

    @Test
    public void test08436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08436");
        org.apache.commons.math.ConvergenceException convergenceException9 = new org.apache.commons.math.ConvergenceException("");
        java.lang.Object[] objArray10 = convergenceException9.getArguments();
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray14);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException16 = new org.apache.commons.math.MaxIterationsExceededException(0, "hi!", objArray14);
        int int17 = maxIterationsExceededException16.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", objArray10, (java.lang.Throwable) maxIterationsExceededException16);
        java.lang.Object[] objArray25 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException26 = new org.apache.commons.math.ConvergenceException("", objArray25);
        java.lang.Object[] objArray28 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", objArray28);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("", objArray25, (java.lang.Throwable) convergenceException29);
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray25);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("hi!", objArray25);
        java.lang.Object[] objArray33 = convergenceException32.getArguments();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        java.lang.Object[] objArray38 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException39 = new org.apache.commons.math.ConvergenceException("", objArray38);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException40 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException39);
        boolean boolean41 = complex34.equals((java.lang.Object) functionEvaluationException40);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException42 = new org.apache.commons.math.FunctionEvaluationException((double) 18, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", objArray33, (java.lang.Throwable) functionEvaluationException40);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((double) '4', "Evaluation failed for argument = {0}", objArray10, (java.lang.Throwable) functionEvaluationException40);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException44 = new org.apache.commons.math.MaxIterationsExceededException(35, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", objArray10);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray10);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException46 = new org.apache.commons.math.MaxIterationsExceededException((int) 'a', "org.apache.commons.math.ConvergenceException: Evaluation failed for argument = 100", objArray10);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[]");
        org.junit.Assert.assertNotNull(objArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray28), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray28), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test08437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08437");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((double) (short) 100, (double) 0);
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex4 = complex3.tan();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex6.acos();
        double double8 = complex6.getReal();
        boolean boolean9 = complex4.equals((java.lang.Object) complex6);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        double double12 = complex10.abs();
        org.apache.commons.math.complex.Complex complex13 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex14 = complex13.conjugate();
        boolean boolean15 = complex13.isInfinite();
        org.apache.commons.math.complex.Complex complex16 = complex13.cos();
        org.apache.commons.math.complex.Complex complex17 = complex13.conjugate();
        boolean boolean18 = complex4.equals((java.lang.Object) complex13);
        org.apache.commons.math.complex.Complex complex19 = complex4.sqrt1z();
        org.apache.commons.math.complex.Complex complex20 = complex2.add(complex19);
        double double21 = complex2.getImaginary();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + Double.POSITIVE_INFINITY + "'", double12 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.0d + "'", double21 == 0.0d);
    }

    @Test
    public void test08438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08438");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = complex1.sin();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.cosh();
        double double5 = complex3.abs();
        org.apache.commons.math.complex.Complex complex6 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex7 = complex6.conjugate();
        boolean boolean8 = complex6.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex6.cos();
        org.apache.commons.math.complex.Complex complex10 = complex2.add(complex6);
        org.apache.commons.math.complex.Complex complex11 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex12.exp();
        org.apache.commons.math.complex.Complex complex14 = complex12.acos();
        org.apache.commons.math.complex.Complex complex15 = complex12.atan();
        org.apache.commons.math.complex.Complex complex16 = complex12.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + Double.POSITIVE_INFINITY + "'", double5 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test08439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08439");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.asin();
        boolean boolean7 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex8 = complex3.negate();
        org.apache.commons.math.complex.Complex complex9 = complex3.asin();
        org.apache.commons.math.complex.Complex complex10 = complex9.tan();
        org.apache.commons.math.complex.Complex complex11 = complex9.sin();
        org.apache.commons.math.complex.Complex complex12 = complex9.tanh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
    }

    @Test
    public void test08440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08440");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex8 = complex3.sin();
        org.apache.commons.math.complex.Complex complex9 = complex8.negate();
        org.apache.commons.math.complex.Complex complex10 = complex9.exp();
        org.apache.commons.math.complex.Complex complex11 = complex9.acos();
        double double12 = complex9.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test08441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08441");
        double[] doubleArray10 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray10);
        double double13 = polynomialFunction11.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver14 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction11);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = laguerreSolver14.getPolynomialFunction();
        laguerreSolver14.setRelativeAccuracy((double) 0);
        double[] doubleArray20 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray20);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = polynomialFunction21.polynomialDerivative();
        double[] doubleArray23 = polynomialFunction21.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray23);
        org.apache.commons.math.complex.Complex[] complexArray26 = laguerreSolver14.solveAll(doubleArray23, (double) 4);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) 1L, "org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Object[]) complexArray26);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException28 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray26);
        org.apache.commons.math.ConvergenceException convergenceException29 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) complexArray26);
        org.apache.commons.math.ConvergenceException convergenceException30 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray26);
        java.lang.Throwable throwable32 = null;
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException33 = new org.apache.commons.math.FunctionEvaluationException((double) 32, throwable32);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException37 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        java.lang.Object[] objArray38 = functionEvaluationException37.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException39 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) -1, "", objArray38);
        java.lang.Object[] objArray40 = maxIterationsExceededException39.getArguments();
        functionEvaluationException33.addSuppressed((java.lang.Throwable) maxIterationsExceededException39);
        int int42 = maxIterationsExceededException39.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException43 = new org.apache.commons.math.FunctionEvaluationException((-9.730091830127586d), "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10", (java.lang.Object[]) complexArray26, (java.lang.Throwable) maxIterationsExceededException39);
        java.lang.String str44 = maxIterationsExceededException39.toString();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10001.0d + "'", double13 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray26);
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray38), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray38), "[100.0]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[100.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "org.apache.commons.math.MaxIterationsExceededException: " + "'", str44, "org.apache.commons.math.MaxIterationsExceededException: ");
    }

    @Test
    public void test08442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08442");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        java.lang.Object[] objArray6 = functionEvaluationException5.getArguments();
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException7 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) -1, "", objArray6);
        java.lang.Object[] objArray18 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("", objArray18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException21 = new org.apache.commons.math.FunctionEvaluationException(0.0d, "org.apache.commons.math.FunctionEvaluationException: ", objArray18);
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray23);
        java.lang.Object[] objArray29 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException30 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray29);
        convergenceException24.addSuppressed((java.lang.Throwable) maxIterationsExceededException30);
        org.apache.commons.math.ConvergenceException convergenceException32 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", objArray18, (java.lang.Throwable) maxIterationsExceededException30);
        org.apache.commons.math.ConvergenceException convergenceException33 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", objArray18);
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("", objArray18);
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("", objArray43);
        java.lang.Object[] objArray46 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("", objArray46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", objArray43, (java.lang.Throwable) convergenceException47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray43, (java.lang.Throwable) functionEvaluationException50);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException52 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 100, "", objArray43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException53 = new org.apache.commons.math.FunctionEvaluationException((double) 1L, (java.lang.Throwable) maxIterationsExceededException52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException54 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) maxIterationsExceededException52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException55 = new org.apache.commons.math.FunctionEvaluationException((-99999.0d), "org.apache.commons.math.MaxIterationsExceededException: ", objArray18, (java.lang.Throwable) functionEvaluationException54);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException56 = new org.apache.commons.math.FunctionEvaluationException((-1.0d), "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MaxIterationsExceededException: ", objArray6, (java.lang.Throwable) functionEvaluationException54);
        org.apache.commons.math.ConvergenceException convergenceException57 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException56);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[100.0]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[0.0, 1]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
    }

    @Test
    public void test08443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08443");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        double double11 = laguerreSolver6.getResult();
        double double12 = laguerreSolver6.getFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.resetRelativeAccuracy();
        double double16 = laguerreSolver6.getResult();
        int int17 = laguerreSolver6.getMaximalIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double21 = laguerreSolver6.solve((-0.3400000100000003d), 0.0d, 9.01559499725988E23d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid interval, initial value parameters:  lower=-0.3400000100000003 initial=9.01559499725988E23 upper=0.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.01d) + "'", double11 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-15d + "'", double12 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.01d) + "'", double16 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
    }

    @Test
    public void test08444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08444");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(45401.0d, (-7.173051538824589E28d));
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        double double7 = complex5.abs();
        org.apache.commons.math.complex.Complex complex8 = complex5.conjugate();
        org.apache.commons.math.complex.Complex complex9 = complex3.divide(complex8);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex10.log();
        org.apache.commons.math.complex.Complex complex13 = complex10.sin();
        org.apache.commons.math.complex.Complex complex14 = complex10.log();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex16);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        double double20 = complex18.abs();
        org.apache.commons.math.complex.Complex complex21 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex17.subtract(complex22);
        org.apache.commons.math.complex.Complex complex24 = complex9.multiply(complex17);
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.cosh();
        org.apache.commons.math.complex.Complex complex27 = complex25.log();
        org.apache.commons.math.complex.Complex complex28 = complex27.cos();
        double double29 = complex28.abs();
        org.apache.commons.math.complex.Complex complex30 = complex28.sqrt();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.sqrt();
        org.apache.commons.math.complex.Complex complex34 = complex33.sin();
        org.apache.commons.math.complex.Complex complex35 = complex31.pow(complex33);
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        org.apache.commons.math.complex.Complex complex38 = complex36.log();
        org.apache.commons.math.complex.Complex complex39 = complex31.divide(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex30.subtract(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex17.pow(complex30);
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex43 = complex42.cosh();
        org.apache.commons.math.complex.Complex complex44 = complex43.acos();
        org.apache.commons.math.complex.Complex complex45 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex46 = complex45.cosh();
        org.apache.commons.math.complex.Complex complex47 = complex45.log();
        org.apache.commons.math.complex.Complex complex48 = complex45.sin();
        org.apache.commons.math.complex.Complex complex49 = complex48.tanh();
        org.apache.commons.math.complex.Complex complex50 = complex43.add(complex49);
        org.apache.commons.math.complex.Complex complex51 = complex50.exp();
        org.apache.commons.math.complex.Complex complex52 = complex30.divide(complex50);
        double double53 = complex52.abs();
        org.apache.commons.math.complex.Complex complex54 = complex52.sqrt1z();
        boolean boolean55 = complex54.isInfinite();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = complex56.sqrt();
        org.apache.commons.math.complex.Complex complex58 = complex57.sin();
        org.apache.commons.math.complex.Complex complex59 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex60 = complex59.cosh();
        double double61 = complex59.abs();
        org.apache.commons.math.complex.Complex complex62 = complex59.conjugate();
        org.apache.commons.math.complex.Complex complex63 = complex62.conjugate();
        boolean boolean64 = complex62.isInfinite();
        org.apache.commons.math.complex.Complex complex65 = complex62.cos();
        org.apache.commons.math.complex.Complex complex66 = complex58.add(complex62);
        org.apache.commons.math.complex.Complex complex67 = complex58.conjugate();
        org.apache.commons.math.complex.Complex complex68 = complex67.sin();
        org.apache.commons.math.complex.Complex complex69 = complex68.sqrt1z();
        org.apache.commons.math.complex.Complex complex70 = complex68.tan();
        org.apache.commons.math.complex.Complex complex71 = complex54.pow(complex68);
        org.apache.commons.math.complex.Complex complex72 = complex2.subtract(complex68);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + Double.POSITIVE_INFINITY + "'", double7 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + Double.POSITIVE_INFINITY + "'", double20 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + Double.POSITIVE_INFINITY + "'", double61 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
    }

    @Test
    public void test08445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08445");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double7 = laguerreSolver6.getAbsoluteAccuracy();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = laguerreSolver6.getPolynomialFunction();
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver16 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction13);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction17 = laguerreSolver16.getPolynomialFunction();
        laguerreSolver16.setRelativeAccuracy((double) 0);
        double[] doubleArray22 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray22);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = polynomialFunction23.polynomialDerivative();
        double[] doubleArray25 = polynomialFunction23.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction26 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray25);
        org.apache.commons.math.complex.Complex[] complexArray28 = laguerreSolver16.solveAll(doubleArray25, (double) 4);
        org.apache.commons.math.complex.Complex[] complexArray30 = laguerreSolver6.solveAll(doubleArray25, (-9.631547407031818E12d));
        double[] doubleArray33 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction34 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray33);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction35 = polynomialFunction34.polynomialDerivative();
        double[] doubleArray36 = polynomialFunction34.getCoefficients();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction37 = polynomialFunction34.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction38 = polynomialFunction34.derivative();
        double[] doubleArray39 = polynomialFunction34.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray41 = laguerreSolver6.solveAll(doubleArray39, (-3.675813734281057E148d));
        int int42 = laguerreSolver6.getIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0E-6d + "'", double7 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction17);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(complexArray30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(univariateRealFunction37);
        org.junit.Assert.assertNotNull(univariateRealFunction38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
    }

    @Test
    public void test08446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08446");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        double double10 = polynomialFunction6.value((double) (byte) 0);
        double[] doubleArray11 = polynomialFunction6.getCoefficients();
        double double13 = polynomialFunction6.value(64.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction6.polynomialDerivative();
        int int15 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction16 = polynomialFunction6.derivative();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.6365376E7d) + "'", double13 == (-1.6365376E7d));
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(univariateRealFunction16);
    }

    @Test
    public void test08447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08447");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt();
        org.apache.commons.math.complex.Complex complex8 = complex7.sin();
        org.apache.commons.math.complex.Complex complex9 = complex5.pow(complex7);
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex10.log();
        org.apache.commons.math.complex.Complex complex13 = complex5.divide(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex0.subtract(complex12);
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        double[] doubleArray21 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray21);
        double double24 = polynomialFunction22.value((double) 0);
        int int25 = polynomialFunction22.degree();
        double double27 = polynomialFunction22.value(Double.NaN);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver28 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction22);
        boolean boolean29 = complex15.equals((java.lang.Object) laguerreSolver28);
        int int30 = laguerreSolver28.getMaximalIterationCount();
        int int31 = laguerreSolver28.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 100 + "'", int30 == 100);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 100 + "'", int31 == 100);
    }

    @Test
    public void test08448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08448");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        laguerreSolver6.setAbsoluteAccuracy((double) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((-1000.0d));
        int int24 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.setAbsoluteAccuracy((double) ' ');
        laguerreSolver6.resetAbsoluteAccuracy();
        int int28 = laguerreSolver6.getIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
    }

    @Test
    public void test08449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08449");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        double double4 = complex3.abs();
        org.apache.commons.math.complex.Complex complex5 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex6 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.sqrt();
        org.apache.commons.math.complex.Complex complex9 = complex8.sin();
        org.apache.commons.math.complex.Complex complex10 = complex6.pow(complex8);
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        org.apache.commons.math.complex.Complex complex13 = complex11.log();
        org.apache.commons.math.complex.Complex complex14 = complex6.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = complex5.subtract(complex14);
        org.apache.commons.math.complex.Complex complex16 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex17 = complex14.cos();
        double double18 = complex17.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test08450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08450");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException1 = new org.apache.commons.math.FunctionEvaluationException(134.02310093999603d);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((double) 10, "Maximal number of iterations ({0}) exceeded");
        org.apache.commons.math.ConvergenceException convergenceException5 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) functionEvaluationException4);
        functionEvaluationException1.addSuppressed((java.lang.Throwable) functionEvaluationException4);
    }

    @Test
    public void test08451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08451");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        java.lang.Object[] objArray6 = functionEvaluationException5.getArguments();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) 0.0f, "org.apache.commons.math.ConvergenceException: Convergence failed", objArray6);
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", objArray6);
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray14);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray20);
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray20, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException28 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray20, (java.lang.Throwable) functionEvaluationException27);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException29 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray14, (java.lang.Throwable) functionEvaluationException28);
        java.lang.Object[] objArray37 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException38 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray37);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException39 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray37);
        org.apache.commons.math.ConvergenceException convergenceException40 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) maxIterationsExceededException39);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException41 = new org.apache.commons.math.FunctionEvaluationException(10.0d, "", objArray14, (java.lang.Throwable) maxIterationsExceededException39);
        org.apache.commons.math.ConvergenceException convergenceException42 = new org.apache.commons.math.ConvergenceException((java.lang.Throwable) maxIterationsExceededException39);
        java.lang.String str43 = maxIterationsExceededException39.getPattern();
        java.lang.Throwable[] throwableArray44 = maxIterationsExceededException39.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: ", objArray6, (java.lang.Throwable) maxIterationsExceededException39);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[100.0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[100.0]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[0.0, 1]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(throwableArray44);
    }

    @Test
    public void test08452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08452");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        laguerreSolver9.resetMaximalIterationCount();
        laguerreSolver9.resetRelativeAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = laguerreSolver9.getPolynomialFunction();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver13 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction12.polynomialDerivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction15 = polynomialFunction12.derivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = polynomialFunction12.polynomialDerivative();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(polynomialFunction12);
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(univariateRealFunction15);
        org.junit.Assert.assertNotNull(polynomialFunction16);
    }

    @Test
    public void test08453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08453");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex0.log();
        org.apache.commons.math.complex.Complex complex3 = complex0.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.log();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.sqrt();
        org.apache.commons.math.complex.Complex complex7 = complex0.divide(complex6);
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        double double10 = complex8.abs();
        org.apache.commons.math.complex.Complex complex11 = complex8.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex13 = complex7.subtract(complex12);
        org.apache.commons.math.complex.Complex complex14 = complex7.exp();
        org.apache.commons.math.complex.Complex complex15 = complex14.exp();
        org.apache.commons.math.complex.Complex complex16 = complex14.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + Double.POSITIVE_INFINITY + "'", double10 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
    }

    @Test
    public void test08454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08454");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        double double19 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((-8.758498599E9d));
        // The following exception was thrown during execution in test generation
        try {
            double double24 = laguerreSolver6.solve((-1.49889849063436E14d), 6.707867633300283E88d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.MaxIterationsExceededException; message: Maximal number of iterations (100) exceeded");
        } catch (org.apache.commons.math.MaxIterationsExceededException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-6d + "'", double19 == 1.0E-6d);
    }

    @Test
    public void test08455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08455");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        int int11 = laguerreSolver6.getIterationCount();
        laguerreSolver6.setRelativeAccuracy(0.0d);
        laguerreSolver6.resetRelativeAccuracy();
        double double15 = laguerreSolver6.getAbsoluteAccuracy();
        double double16 = laguerreSolver6.getFunctionValueAccuracy();
        int int17 = laguerreSolver6.getMaximalIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = laguerreSolver6.solve((-2.24308280799E11d), (-2.223274668713691E34d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [-2.24308280799E11,-2.223274668713691E34]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-6d + "'", double15 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-15d + "'", double16 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 100 + "'", int17 == 100);
    }

    @Test
    public void test08456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08456");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = laguerreSolver6.solveAll(doubleArray14, 10001.0d);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = laguerreSolver6.getPolynomialFunction();
        double double19 = laguerreSolver6.getAbsoluteAccuracy();
        double double20 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setMaximalIterationCount(10);
        laguerreSolver6.setAbsoluteAccuracy(0.0d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0E-6d + "'", double19 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.0E-6d + "'", double20 == 1.0E-6d);
    }

    @Test
    public void test08457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08457");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException4 = new org.apache.commons.math.FunctionEvaluationException((double) 32, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException5 = new org.apache.commons.math.FunctionEvaluationException((-1.1271166809295781E34d), "org.apache.commons.math.ConvergenceException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Throwable) functionEvaluationException4);
    }

    @Test
    public void test08458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08458");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.asin();
        boolean boolean7 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = complex3.divide(complex8);
        boolean boolean11 = complex8.isNaN();
        org.apache.commons.math.complex.Complex complex12 = complex8.cos();
        org.apache.commons.math.complex.Complex complex13 = complex8.tanh();
        boolean boolean14 = complex8.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08459");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setRelativeAccuracy((double) (short) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = laguerreSolver6.getPolynomialFunction();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = laguerreSolver6.getResult();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-14d + "'", double8 == 1.0E-14d);
        org.junit.Assert.assertNotNull(polynomialFunction12);
    }

    @Test
    public void test08460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08460");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        double[] doubleArray12 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = polynomialFunction13.polynomialDerivative();
        double[] doubleArray15 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray15);
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver6.solveAll(doubleArray15, (double) 4);
        laguerreSolver6.setAbsoluteAccuracy((double) 1);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction21 = laguerreSolver6.getPolynomialFunction();
        int int22 = laguerreSolver6.getMaximalIterationCount();
        laguerreSolver6.setAbsoluteAccuracy(Double.POSITIVE_INFINITY);
        laguerreSolver6.resetMaximalIterationCount();
        double double26 = laguerreSolver6.getRelativeAccuracy();
        laguerreSolver6.setRelativeAccuracy(0.0d);
        double double29 = laguerreSolver6.getResult();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertNotNull(polynomialFunction21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    }

    @Test
    public void test08461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08461");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        org.apache.commons.math.complex.Complex complex6 = complex4.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        boolean boolean14 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex6.pow(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex15.tanh();
        org.apache.commons.math.complex.Complex complex20 = complex15.cos();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex21.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.cos();
        org.apache.commons.math.complex.Complex complex25 = complex23.exp();
        boolean boolean26 = complex23.isNaN();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        double double29 = complex27.abs();
        org.apache.commons.math.complex.Complex complex30 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex30.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex30.tanh();
        org.apache.commons.math.complex.Complex complex33 = complex23.multiply(complex30);
        org.apache.commons.math.complex.Complex complex34 = complex30.acos();
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex34.sqrt1z();
        org.apache.commons.math.complex.Complex complex37 = complex34.tan();
        org.apache.commons.math.complex.Complex complex38 = complex37.cosh();
        boolean boolean39 = complex20.equals((java.lang.Object) complex37);
        org.apache.commons.math.complex.Complex complex40 = complex37.sin();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + Double.POSITIVE_INFINITY + "'", double29 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(complex40);
    }

    @Test
    public void test08462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08462");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        laguerreSolver6.setMaximalIterationCount(4);
        double double9 = laguerreSolver6.getAbsoluteAccuracy();
        int int10 = laguerreSolver6.getMaximalIterationCount();
        double double11 = laguerreSolver6.getAbsoluteAccuracy();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction12 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetFunctionValueAccuracy();
        laguerreSolver6.setRelativeAccuracy((double) (-1L));
        double double16 = laguerreSolver6.getRelativeAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0E-6d + "'", double9 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-6d + "'", double11 == 1.0E-6d);
        org.junit.Assert.assertNotNull(polynomialFunction12);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0d) + "'", double16 == (-1.0d));
    }

    @Test
    public void test08463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08463");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex8.acos();
        double double10 = complex8.getReal();
        boolean boolean11 = complex6.equals((java.lang.Object) complex8);
        org.apache.commons.math.complex.Complex complex12 = complex4.subtract(complex8);
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt1z();
        org.apache.commons.math.complex.Complex complex16 = new org.apache.commons.math.complex.Complex(101.0d, (double) 1L);
        org.apache.commons.math.complex.Complex complex17 = complex12.pow(complex16);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex18.log();
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex22 = complex21.tan();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        org.apache.commons.math.complex.Complex complex25 = complex24.acos();
        double double26 = complex24.getReal();
        boolean boolean27 = complex22.equals((java.lang.Object) complex24);
        org.apache.commons.math.complex.Complex complex28 = complex18.add(complex24);
        org.apache.commons.math.complex.Complex complex31 = new org.apache.commons.math.complex.Complex((double) 1.0f, 1.0E-15d);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.sqrt();
        org.apache.commons.math.complex.Complex complex35 = complex34.sin();
        org.apache.commons.math.complex.Complex complex36 = complex32.pow(complex34);
        org.apache.commons.math.complex.Complex complex37 = complex36.asin();
        org.apache.commons.math.complex.Complex complex38 = complex37.atan();
        org.apache.commons.math.complex.Complex complex39 = complex37.log();
        org.apache.commons.math.complex.Complex complex40 = complex31.pow(complex39);
        org.apache.commons.math.complex.Complex complex41 = complex24.add(complex31);
        org.apache.commons.math.complex.Complex complex42 = complex16.divide(complex41);
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex44 = complex43.exp();
        org.apache.commons.math.complex.Complex complex45 = complex44.acos();
        org.apache.commons.math.complex.Complex complex46 = complex41.add(complex44);
        org.apache.commons.math.complex.Complex complex49 = new org.apache.commons.math.complex.Complex(134.02310093999603d, (double) (-1.0f));
        org.apache.commons.math.complex.Complex complex50 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex51 = complex50.cosh();
        org.apache.commons.math.complex.Complex complex52 = complex50.log();
        org.apache.commons.math.complex.Complex complex53 = complex50.sin();
        org.apache.commons.math.complex.Complex complex54 = complex50.log();
        org.apache.commons.math.complex.Complex complex55 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex56 = complex55.sqrt();
        org.apache.commons.math.complex.Complex complex57 = complex50.divide(complex56);
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        double double60 = complex58.abs();
        org.apache.commons.math.complex.Complex complex61 = complex58.conjugate();
        org.apache.commons.math.complex.Complex complex62 = complex61.conjugate();
        org.apache.commons.math.complex.Complex complex63 = complex57.subtract(complex62);
        org.apache.commons.math.complex.Complex complex64 = complex57.exp();
        org.apache.commons.math.complex.Complex complex65 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex66 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex67 = complex66.sqrt();
        org.apache.commons.math.complex.Complex complex68 = complex67.sin();
        org.apache.commons.math.complex.Complex complex69 = complex65.pow(complex67);
        org.apache.commons.math.complex.Complex complex70 = complex69.asin();
        org.apache.commons.math.complex.Complex complex71 = complex70.atan();
        org.apache.commons.math.complex.Complex complex72 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex73 = complex72.cosh();
        boolean boolean74 = complex71.equals((java.lang.Object) complex72);
        org.apache.commons.math.complex.Complex complex75 = complex57.divide(complex72);
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex77 = complex76.cosh();
        org.apache.commons.math.complex.Complex complex78 = complex76.log();
        org.apache.commons.math.complex.Complex complex79 = complex78.cos();
        org.apache.commons.math.complex.Complex complex80 = complex78.exp();
        boolean boolean81 = complex78.isNaN();
        org.apache.commons.math.complex.Complex complex82 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex83 = complex82.cosh();
        double double84 = complex82.abs();
        org.apache.commons.math.complex.Complex complex85 = complex82.conjugate();
        org.apache.commons.math.complex.Complex complex86 = complex85.conjugate();
        org.apache.commons.math.complex.Complex complex87 = complex85.tanh();
        org.apache.commons.math.complex.Complex complex88 = complex78.multiply(complex85);
        org.apache.commons.math.complex.Complex complex89 = complex72.add(complex78);
        org.apache.commons.math.complex.Complex complex90 = complex72.negate();
        double double91 = complex90.getReal();
        org.apache.commons.math.complex.Complex complex92 = complex49.multiply(complex90);
        boolean boolean93 = complex44.equals((java.lang.Object) complex90);
        org.apache.commons.math.complex.Complex complex94 = complex44.negate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + Double.POSITIVE_INFINITY + "'", double60 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + Double.POSITIVE_INFINITY + "'", double84 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + Double.NEGATIVE_INFINITY + "'", double91 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(complex94);
    }

    @Test
    public void test08464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08464");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.asin();
        boolean boolean14 = complex10.isNaN();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex15);
        org.apache.commons.math.complex.Complex complex18 = complex6.divide(complex15);
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex20 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex21 = complex20.cosh();
        org.apache.commons.math.complex.Complex complex22 = complex20.log();
        org.apache.commons.math.complex.Complex complex23 = complex20.sin();
        org.apache.commons.math.complex.Complex complex24 = complex20.log();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex27 = complex20.divide(complex26);
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = complex28.cosh();
        double double30 = complex28.abs();
        org.apache.commons.math.complex.Complex complex31 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex31.conjugate();
        org.apache.commons.math.complex.Complex complex33 = complex27.subtract(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex27.exp();
        org.apache.commons.math.complex.Complex complex35 = complex18.subtract(complex34);
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.abs();
        org.apache.commons.math.complex.Complex complex39 = complex36.conjugate();
        org.apache.commons.math.complex.Complex complex40 = complex39.conjugate();
        boolean boolean41 = complex39.isInfinite();
        org.apache.commons.math.complex.Complex complex42 = complex39.cos();
        org.apache.commons.math.complex.Complex complex43 = complex39.conjugate();
        org.apache.commons.math.complex.Complex complex44 = complex39.sin();
        org.apache.commons.math.complex.Complex complex45 = complex44.negate();
        org.apache.commons.math.complex.Complex complex46 = complex45.sinh();
        org.apache.commons.math.complex.Complex complex47 = complex35.pow(complex45);
        org.apache.commons.math.complex.Complex complex48 = complex45.tan();
        org.apache.commons.math.complex.Complex complex49 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex50 = complex49.tan();
        org.apache.commons.math.complex.Complex complex51 = complex50.sinh();
        org.apache.commons.math.complex.Complex complex52 = complex50.tanh();
        org.apache.commons.math.complex.Complex complex53 = complex45.divide(complex50);
        org.apache.commons.math.complex.Complex complex54 = complex45.sinh();
        org.apache.commons.math.complex.Complex complex55 = complex54.cosh();
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        org.apache.commons.math.complex.Complex complex58 = complex56.log();
        org.apache.commons.math.complex.Complex complex59 = complex56.sin();
        org.apache.commons.math.complex.Complex complex60 = complex56.log();
        org.apache.commons.math.complex.Complex complex61 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex62 = complex61.sqrt();
        org.apache.commons.math.complex.Complex complex63 = complex56.divide(complex62);
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        double double66 = complex64.abs();
        org.apache.commons.math.complex.Complex complex67 = complex64.conjugate();
        org.apache.commons.math.complex.Complex complex68 = complex67.conjugate();
        org.apache.commons.math.complex.Complex complex69 = complex63.subtract(complex68);
        org.apache.commons.math.complex.Complex complex70 = complex63.exp();
        org.apache.commons.math.complex.Complex complex71 = complex63.tan();
        org.apache.commons.math.complex.Complex complex72 = complex71.sqrt();
        org.apache.commons.math.complex.Complex complex73 = complex72.tanh();
        double double74 = complex72.abs();
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex76 = complex75.tan();
        org.apache.commons.math.complex.Complex complex77 = complex76.cosh();
        org.apache.commons.math.complex.Complex complex78 = complex77.cos();
        double double79 = complex78.getReal();
        org.apache.commons.math.complex.Complex complex80 = complex72.divide(complex78);
        org.apache.commons.math.complex.Complex complex81 = complex55.add(complex78);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + Double.POSITIVE_INFINITY + "'", double30 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + Double.POSITIVE_INFINITY + "'", double38 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + Double.POSITIVE_INFINITY + "'", double66 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 0.5403023058681398d + "'", double79 == 0.5403023058681398d);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
    }

    @Test
    public void test08465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08465");
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray10);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException13 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray10);
        java.lang.Throwable[] throwableArray14 = maxIterationsExceededException13.getSuppressed();
        java.lang.Object[] objArray21 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException22 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray21);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException23 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray21);
        int int24 = maxIterationsExceededException23.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, "hi!", (java.lang.Object[]) throwableArray14, (java.lang.Throwable) maxIterationsExceededException23);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException26 = new org.apache.commons.math.MaxIterationsExceededException(0, "org.apache.commons.math.MaxIterationsExceededException: ", (java.lang.Object[]) throwableArray14);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException27 = new org.apache.commons.math.FunctionEvaluationException(349.0d, (java.lang.Throwable) maxIterationsExceededException26);
        int int28 = maxIterationsExceededException26.getMaxIterations();
        java.lang.String str29 = maxIterationsExceededException26.getPattern();
        int int30 = maxIterationsExceededException26.getMaxIterations();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "org.apache.commons.math.MaxIterationsExceededException: " + "'", str29, "org.apache.commons.math.MaxIterationsExceededException: ");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test08466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08466");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.asin();
        boolean boolean7 = complex3.isNaN();
        org.apache.commons.math.complex.Complex complex8 = complex3.negate();
        org.apache.commons.math.complex.Complex complex9 = complex8.sqrt1z();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex10.log();
        org.apache.commons.math.complex.Complex complex13 = complex10.sin();
        org.apache.commons.math.complex.Complex complex14 = complex10.log();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex16);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        double double20 = complex18.abs();
        org.apache.commons.math.complex.Complex complex21 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex21.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex17.subtract(complex22);
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex24.log();
        org.apache.commons.math.complex.Complex complex27 = complex24.sin();
        org.apache.commons.math.complex.Complex complex28 = complex24.log();
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex24.divide(complex30);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        double double34 = complex32.abs();
        org.apache.commons.math.complex.Complex complex35 = complex32.conjugate();
        org.apache.commons.math.complex.Complex complex36 = complex35.conjugate();
        org.apache.commons.math.complex.Complex complex37 = complex31.subtract(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex31.exp();
        org.apache.commons.math.complex.Complex complex39 = complex23.multiply(complex38);
        org.apache.commons.math.complex.Complex complex40 = complex38.cosh();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex42 = complex41.sqrt();
        org.apache.commons.math.complex.Complex complex43 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex44 = complex43.cosh();
        double double45 = complex43.abs();
        org.apache.commons.math.complex.Complex complex46 = complex43.conjugate();
        org.apache.commons.math.complex.Complex complex47 = complex41.divide(complex46);
        org.apache.commons.math.complex.Complex complex48 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex49 = complex48.cosh();
        org.apache.commons.math.complex.Complex complex50 = complex48.log();
        org.apache.commons.math.complex.Complex complex51 = complex48.sin();
        org.apache.commons.math.complex.Complex complex52 = complex48.log();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex54 = complex53.sqrt();
        org.apache.commons.math.complex.Complex complex55 = complex48.divide(complex54);
        org.apache.commons.math.complex.Complex complex56 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex57 = complex56.cosh();
        double double58 = complex56.abs();
        org.apache.commons.math.complex.Complex complex59 = complex56.conjugate();
        org.apache.commons.math.complex.Complex complex60 = complex59.conjugate();
        org.apache.commons.math.complex.Complex complex61 = complex55.subtract(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex47.multiply(complex55);
        boolean boolean63 = complex55.isInfinite();
        org.apache.commons.math.complex.Complex complex64 = complex55.negate();
        org.apache.commons.math.complex.Complex complex65 = complex38.subtract(complex55);
        org.apache.commons.math.complex.Complex complex66 = complex9.subtract(complex55);
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        org.apache.commons.math.complex.Complex complex69 = complex68.acos();
        double double70 = complex68.getReal();
        org.apache.commons.math.complex.Complex complex71 = complex68.tanh();
        org.apache.commons.math.complex.Complex complex72 = complex68.sqrt1z();
        boolean boolean73 = complex55.equals((java.lang.Object) complex68);
        double double74 = complex68.abs();
        org.apache.commons.math.complex.Complex complex75 = complex68.sinh();
        org.apache.commons.math.complex.Complex complex76 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex77 = complex76.tan();
        double double78 = complex76.getReal();
        org.apache.commons.math.complex.Complex complex79 = complex76.cosh();
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex81 = complex80.cosh();
        java.lang.Object[] objArray84 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException85 = new org.apache.commons.math.ConvergenceException("", objArray84);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException86 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException85);
        boolean boolean87 = complex80.equals((java.lang.Object) functionEvaluationException86);
        org.apache.commons.math.complex.Complex complex88 = complex76.subtract(complex80);
        org.apache.commons.math.complex.Complex complex89 = complex75.add(complex80);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + Double.POSITIVE_INFINITY + "'", double20 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + Double.POSITIVE_INFINITY + "'", double34 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + Double.POSITIVE_INFINITY + "'", double45 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + Double.POSITIVE_INFINITY + "'", double58 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + Double.POSITIVE_INFINITY + "'", double78 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
    }

    @Test
    public void test08467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08467");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        org.apache.commons.math.complex.Complex complex2 = complex1.cosh();
        org.apache.commons.math.complex.Complex complex3 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex2.atan();
        org.apache.commons.math.complex.Complex complex5 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex6 = complex5.cosh();
        org.apache.commons.math.complex.Complex complex7 = complex5.log();
        org.apache.commons.math.complex.Complex complex8 = complex7.cos();
        org.apache.commons.math.complex.Complex complex9 = complex7.exp();
        boolean boolean10 = complex7.isNaN();
        org.apache.commons.math.complex.Complex complex11 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex12 = complex11.cosh();
        double double13 = complex11.abs();
        org.apache.commons.math.complex.Complex complex14 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex15 = complex14.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex14.tanh();
        org.apache.commons.math.complex.Complex complex17 = complex7.multiply(complex14);
        org.apache.commons.math.complex.Complex complex18 = complex7.cos();
        org.apache.commons.math.complex.Complex complex19 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex20 = complex19.cosh();
        double double21 = complex19.abs();
        org.apache.commons.math.complex.Complex complex22 = complex19.conjugate();
        org.apache.commons.math.complex.Complex complex23 = complex22.conjugate();
        boolean boolean24 = complex22.isInfinite();
        org.apache.commons.math.complex.Complex complex25 = complex22.cos();
        org.apache.commons.math.complex.Complex complex26 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex27 = complex26.cosh();
        double double28 = complex26.abs();
        org.apache.commons.math.complex.Complex complex29 = complex26.conjugate();
        org.apache.commons.math.complex.Complex complex30 = complex29.conjugate();
        boolean boolean31 = complex29.isInfinite();
        org.apache.commons.math.complex.Complex complex32 = complex29.asin();
        boolean boolean33 = complex29.isNaN();
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        org.apache.commons.math.complex.Complex complex36 = complex29.divide(complex34);
        org.apache.commons.math.complex.Complex complex37 = complex25.divide(complex34);
        org.apache.commons.math.complex.Complex complex38 = complex25.cos();
        org.apache.commons.math.complex.Complex complex39 = complex7.divide(complex25);
        org.apache.commons.math.complex.Complex complex40 = complex39.cos();
        org.apache.commons.math.complex.Complex complex41 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex42 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex43 = complex42.sqrt();
        org.apache.commons.math.complex.Complex complex44 = complex43.sin();
        org.apache.commons.math.complex.Complex complex45 = complex41.pow(complex43);
        org.apache.commons.math.complex.Complex complex46 = complex40.pow(complex43);
        org.apache.commons.math.complex.Complex complex47 = complex46.tanh();
        org.apache.commons.math.complex.Complex complex48 = complex4.pow(complex46);
        double double49 = complex4.abs();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + Double.POSITIVE_INFINITY + "'", double13 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + Double.POSITIVE_INFINITY + "'", double21 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + Double.POSITIVE_INFINITY + "'", double28 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
    }

    @Test
    public void test08468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08468");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double[] doubleArray12 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray12);
        double double15 = polynomialFunction13.value((double) (short) 100);
        double[] doubleArray16 = polynomialFunction13.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray18 = laguerreSolver9.solveAll(doubleArray16, (double) (short) 10);
        laguerreSolver9.setMaximalIterationCount((int) (byte) 10);
        laguerreSolver9.resetRelativeAccuracy();
        double double25 = laguerreSolver9.solve(1.0E-6d, (double) 32, 0.0d);
        int int26 = laguerreSolver9.getIterationCount();
        laguerreSolver9.resetAbsoluteAccuracy();
        laguerreSolver9.resetRelativeAccuracy();
        laguerreSolver9.resetAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10001.0d + "'", double15 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray18);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
    }

    @Test
    public void test08469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08469");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex(350.0d, (-1.03036766E8d));
        org.apache.commons.math.complex.Complex complex3 = complex2.cos();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        org.apache.commons.math.complex.Complex complex6 = complex5.sin();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        boolean boolean12 = complex10.isInfinite();
        org.apache.commons.math.complex.Complex complex13 = complex10.cos();
        org.apache.commons.math.complex.Complex complex14 = complex6.add(complex10);
        org.apache.commons.math.complex.Complex complex15 = complex6.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex6.conjugate();
        boolean boolean17 = complex2.equals((java.lang.Object) complex16);
        org.apache.commons.math.complex.Complex complex18 = complex2.sinh();
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(complex18);
    }

    @Test
    public void test08470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08470");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        laguerreSolver6.setMaximalIterationCount((int) '#');
        double double13 = laguerreSolver6.getAbsoluteAccuracy();
        double double14 = laguerreSolver6.getFunctionValueAccuracy();
        double double15 = laguerreSolver6.getFunctionValueAccuracy();
        double double16 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        int int18 = laguerreSolver6.getMaximalIterationCount();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = laguerreSolver6.solve(0.0d, (-1.8260159415627717E125d), (-3.60628680966E11d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Endpoints do not specify an interval: [0.0,-1.8260159415627717E125]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0E-6d + "'", double13 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0E-15d + "'", double14 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-15d + "'", double15 == 1.0E-15d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-6d + "'", double16 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
    }

    @Test
    public void test08471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08471");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        int int7 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction6.polynomialDerivative();
        double double10 = polynomialFunction6.value((double) 100.0f);
        double[] doubleArray11 = polynomialFunction6.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        double double14 = polynomialFunction6.value((double) 2);
        int int15 = polynomialFunction6.degree();
        double double17 = polynomialFunction6.value((-9.820178719278598d));
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction19 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction20 = polynomialFunction6.polynomialDerivative();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-9.89965E7d) + "'", double10 == (-9.89965E7d));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 454.0d + "'", double14 == 454.0d);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.2559781975128798E-12d + "'", double17 == 1.2559781975128798E-12d);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertNotNull(polynomialFunction19);
        org.junit.Assert.assertNotNull(polynomialFunction20);
    }

    @Test
    public void test08472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08472");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.tanh();
        org.apache.commons.math.complex.Complex complex6 = complex5.tan();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        double double9 = complex7.abs();
        org.apache.commons.math.complex.Complex complex10 = complex7.conjugate();
        org.apache.commons.math.complex.Complex complex11 = complex10.conjugate();
        org.apache.commons.math.complex.Complex complex12 = complex6.subtract(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex10.negate();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.cosh();
        org.apache.commons.math.complex.Complex complex16 = complex14.log();
        org.apache.commons.math.complex.Complex complex17 = complex14.sin();
        org.apache.commons.math.complex.Complex complex18 = complex17.atan();
        org.apache.commons.math.complex.Complex complex19 = complex18.exp();
        org.apache.commons.math.complex.Complex complex20 = complex10.add(complex18);
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex21.log();
        org.apache.commons.math.complex.Complex complex24 = complex23.cos();
        org.apache.commons.math.complex.Complex complex25 = complex23.exp();
        boolean boolean26 = complex23.isNaN();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        double double29 = complex27.abs();
        org.apache.commons.math.complex.Complex complex30 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex30.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex30.tanh();
        org.apache.commons.math.complex.Complex complex33 = complex23.multiply(complex30);
        org.apache.commons.math.complex.Complex complex34 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex35 = complex34.cosh();
        double double36 = complex34.abs();
        org.apache.commons.math.complex.Complex complex37 = complex34.conjugate();
        org.apache.commons.math.complex.Complex complex38 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex39 = complex38.cosh();
        double double40 = complex38.abs();
        org.apache.commons.math.complex.Complex complex41 = complex38.conjugate();
        org.apache.commons.math.complex.Complex complex42 = complex41.conjugate();
        org.apache.commons.math.complex.Complex complex43 = complex41.tanh();
        org.apache.commons.math.complex.Complex complex44 = complex41.atan();
        org.apache.commons.math.complex.Complex complex45 = complex34.subtract(complex41);
        org.apache.commons.math.complex.Complex complex46 = complex45.log();
        double double47 = complex46.getReal();
        org.apache.commons.math.complex.Complex complex48 = complex46.cosh();
        org.apache.commons.math.complex.Complex complex49 = complex46.sin();
        org.apache.commons.math.complex.Complex complex50 = complex30.subtract(complex46);
        org.apache.commons.math.complex.Complex complex51 = complex10.multiply(complex46);
        org.apache.commons.math.complex.Complex complex52 = complex46.sinh();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + Double.POSITIVE_INFINITY + "'", double9 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + Double.POSITIVE_INFINITY + "'", double29 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + Double.POSITIVE_INFINITY + "'", double36 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + Double.POSITIVE_INFINITY + "'", double40 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertNotNull(complex51);
        org.junit.Assert.assertNotNull(complex52);
    }

    @Test
    public void test08473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08473");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException2 = new org.apache.commons.math.FunctionEvaluationException(14.0d, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = {0}");
    }

    @Test
    public void test08474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08474");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex5 = complex4.sqrt();
        boolean boolean6 = complex4.isNaN();
        org.apache.commons.math.complex.Complex complex7 = complex4.sin();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = complex8.pow(complex10);
        org.apache.commons.math.complex.Complex complex13 = complex12.asin();
        org.apache.commons.math.complex.Complex complex14 = complex13.atan();
        boolean boolean15 = complex14.isInfinite();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.ZERO;
        org.apache.commons.math.complex.Complex complex17 = complex14.subtract(complex16);
        org.apache.commons.math.complex.Complex complex18 = complex17.sin();
        org.apache.commons.math.complex.Complex complex19 = complex4.divide(complex18);
        org.apache.commons.math.complex.Complex complex20 = complex0.subtract(complex18);
        org.apache.commons.math.complex.Complex complex21 = complex0.tanh();
        org.apache.commons.math.complex.Complex complex22 = complex21.tanh();
        org.apache.commons.math.complex.Complex complex23 = complex22.sqrt1z();
        org.apache.commons.math.complex.Complex complex24 = complex23.sinh();
        org.apache.commons.math.complex.Complex complex25 = complex23.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
    }

    @Test
    public void test08475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08475");
        org.apache.commons.math.complex.Complex complex2 = new org.apache.commons.math.complex.Complex((-1.0019968919675491E80d), 100.0d);
        org.apache.commons.math.complex.Complex complex5 = new org.apache.commons.math.complex.Complex((-9.631547407031818E12d), (-9.631547407031818E12d));
        org.apache.commons.math.complex.Complex complex6 = complex5.sin();
        org.apache.commons.math.complex.Complex complex7 = complex2.subtract(complex6);
        boolean boolean8 = complex2.isInfinite();
        org.apache.commons.math.complex.Complex complex9 = complex2.asin();
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(complex9);
    }

    @Test
    public void test08476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08476");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        laguerreSolver6.setFunctionValueAccuracy((double) (byte) -1);
        int int12 = laguerreSolver6.getMaximalIterationCount();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction13 = laguerreSolver6.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction14 = laguerreSolver6.getPolynomialFunction();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = laguerreSolver6.solve((double) 1.0f, 6401.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Function values at endpoints do not have different signs.  Endpoints: [1.0,6401.0]  Values: [101.0,640101.0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(polynomialFunction13);
        org.junit.Assert.assertNotNull(polynomialFunction14);
    }

    @Test
    public void test08477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08477");
        double[] doubleArray5 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        double double8 = polynomialFunction6.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver9 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction6);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver9.getPolynomialFunction();
        laguerreSolver9.resetRelativeAccuracy();
        laguerreSolver9.resetMaximalIterationCount();
        laguerreSolver9.setMaximalIterationCount((int) '#');
        laguerreSolver9.resetMaximalIterationCount();
        laguerreSolver9.resetFunctionValueAccuracy();
        double double17 = laguerreSolver9.getAbsoluteAccuracy();
        double[] doubleArray23 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction24 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray23);
        double double26 = polynomialFunction24.value((double) 0);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver27 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction24);
        double[] doubleArray30 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction31 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray30);
        double double33 = polynomialFunction31.value((double) (short) 100);
        double[] doubleArray34 = polynomialFunction31.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray36 = laguerreSolver27.solveAll(doubleArray34, (double) (short) 10);
        org.apache.commons.math.complex.Complex[] complexArray38 = laguerreSolver9.solveAll(doubleArray34, 3861431.0d);
        double[] doubleArray41 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction42 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray41);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver43 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction42);
        double[] doubleArray49 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction50 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray49);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction51 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray49);
        org.apache.commons.math.complex.Complex[] complexArray53 = laguerreSolver43.solveAll(doubleArray49, 1.0E-6d);
        org.apache.commons.math.complex.Complex[] complexArray55 = laguerreSolver9.solveAll(doubleArray49, 1000.0d);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: hi!", (java.lang.Object[]) complexArray55);
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("", objArray59);
        java.lang.Object[] objArray65 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException66 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray65);
        convergenceException60.addSuppressed((java.lang.Throwable) maxIterationsExceededException66);
        int int68 = maxIterationsExceededException66.getMaxIterations();
        org.apache.commons.math.ConvergenceException convergenceException69 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) maxIterationsExceededException66);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((-1.499398775E10d), "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = 10", (java.lang.Object[]) complexArray55, (java.lang.Throwable) maxIterationsExceededException66);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10001.0d + "'", double8 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0E-6d + "'", double17 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10001.0d + "'", double33 == 10001.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(complexArray36);
        org.junit.Assert.assertNotNull(complexArray38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray53);
        org.junit.Assert.assertNotNull(complexArray55);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 100 + "'", int68 == 100);
    }

    @Test
    public void test08478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08478");
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException12 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray10);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException13 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray10);
        java.lang.Throwable[] throwableArray14 = maxIterationsExceededException13.getSuppressed();
        java.lang.Object[] objArray21 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException22 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray21);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException23 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray21);
        int int24 = maxIterationsExceededException23.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException25 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, "hi!", (java.lang.Object[]) throwableArray14, (java.lang.Throwable) maxIterationsExceededException23);
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("", objArray33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray33);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException36 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray33);
        java.lang.Throwable[] throwableArray37 = maxIterationsExceededException36.getSuppressed();
        java.lang.Object[] objArray44 = new java.lang.Object[] { 0.0f, (short) 1 };
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException45 = new org.apache.commons.math.MaxIterationsExceededException(100, "", objArray44);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException46 = new org.apache.commons.math.MaxIterationsExceededException((int) ' ', "hi!", objArray44);
        int int47 = maxIterationsExceededException46.getMaxIterations();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException(Double.POSITIVE_INFINITY, "hi!", (java.lang.Object[]) throwableArray37, (java.lang.Throwable) maxIterationsExceededException46);
        double double49 = functionEvaluationException48.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException(35.0002d, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: ", (java.lang.Object[]) throwableArray14, (java.lang.Throwable) functionEvaluationException48);
        java.lang.Object[] objArray59 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("", objArray59);
        java.lang.Object[] objArray62 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException63 = new org.apache.commons.math.ConvergenceException("", objArray62);
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("", objArray59, (java.lang.Throwable) convergenceException63);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException65 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.FunctionEvaluationException: ", objArray59);
        java.lang.Object[] objArray70 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException71 = new org.apache.commons.math.ConvergenceException("", objArray70);
        java.lang.Object[] objArray76 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException77 = new org.apache.commons.math.ConvergenceException("", objArray76);
        java.lang.Object[] objArray79 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException80 = new org.apache.commons.math.ConvergenceException("", objArray79);
        org.apache.commons.math.ConvergenceException convergenceException81 = new org.apache.commons.math.ConvergenceException("", objArray76, (java.lang.Throwable) convergenceException80);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException83 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException84 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray76, (java.lang.Throwable) functionEvaluationException83);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException85 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray70, (java.lang.Throwable) functionEvaluationException84);
        java.lang.String str86 = functionEvaluationException85.getPattern();
        double double87 = functionEvaluationException85.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException88 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, (java.lang.Throwable) functionEvaluationException85);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException89 = new org.apache.commons.math.FunctionEvaluationException(349.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray59, (java.lang.Throwable) functionEvaluationException85);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException90 = new org.apache.commons.math.FunctionEvaluationException(134.0d, "org.apache.commons.math.ConvergenceException: ", objArray59);
        org.apache.commons.math.ConvergenceException convergenceException91 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Object[]) throwableArray14, (java.lang.Throwable) functionEvaluationException90);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 32 + "'", int24 == 32);
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[0.0, 1]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[0.0, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 32 + "'", int47 == 32);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + Double.POSITIVE_INFINITY + "'", double49 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 35.0d + "'", double87 == 35.0d);
    }

    @Test
    public void test08479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08479");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction11 = polynomialFunction10.polynomialDerivative();
        int int12 = polynomialFunction10.degree();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction13 = polynomialFunction10.derivative();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction14 = polynomialFunction10.derivative();
        double double16 = polynomialFunction10.value(3861431.0d);
        int int17 = polynomialFunction10.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction18 = polynomialFunction10.polynomialDerivative();
        double[] doubleArray19 = polynomialFunction10.getCoefficients();
        int int20 = polynomialFunction10.degree();
        double double22 = polynomialFunction10.value(131.67847730989726d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(polynomialFunction11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(univariateRealFunction13);
        org.junit.Assert.assertNotNull(univariateRealFunction14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.86143101E8d + "'", double16 == 3.86143101E8d);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(polynomialFunction18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 13168.847730989726d + "'", double22 == 13168.847730989726d);
    }

    @Test
    public void test08480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08480");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("", objArray5);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException7 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray5);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException8 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray5);
        java.lang.Object[] objArray9 = maxIterationsExceededException8.getArguments();
        int int10 = maxIterationsExceededException8.getMaxIterations();
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray20);
        java.lang.Object[] objArray23 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException24 = new org.apache.commons.math.ConvergenceException("", objArray23);
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("", objArray20, (java.lang.Throwable) convergenceException24);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException26 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.FunctionEvaluationException: ", objArray20);
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException34 = new org.apache.commons.math.ConvergenceException("", objArray33);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException35 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray33);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException36 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray33);
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("", objArray43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException45 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray43);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException46 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray43);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) maxIterationsExceededException46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", objArray33, (java.lang.Throwable) functionEvaluationException47);
        org.apache.commons.math.ConvergenceException convergenceException49 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray20, (java.lang.Throwable) convergenceException48);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) convergenceException49);
        java.lang.String str51 = functionEvaluationException50.getPattern();
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("hi!", (java.lang.Throwable) functionEvaluationException50);
        java.lang.Throwable[] throwableArray53 = convergenceException52.getSuppressed();
        java.lang.Object[] objArray63 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException64 = new org.apache.commons.math.ConvergenceException("", objArray63);
        java.lang.Object[] objArray66 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException67 = new org.apache.commons.math.ConvergenceException("", objArray66);
        org.apache.commons.math.ConvergenceException convergenceException68 = new org.apache.commons.math.ConvergenceException("", objArray63, (java.lang.Throwable) convergenceException67);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException70 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException71 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray63, (java.lang.Throwable) functionEvaluationException70);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException72 = new org.apache.commons.math.MaxIterationsExceededException(32, "org.apache.commons.math.MaxIterationsExceededException: ", objArray63);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException73 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 1, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ", objArray63);
        org.apache.commons.math.ConvergenceException convergenceException74 = new org.apache.commons.math.ConvergenceException("", (java.lang.Throwable) maxIterationsExceededException73);
        org.apache.commons.math.ConvergenceException convergenceException75 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = -14,823,291,286", (java.lang.Object[]) throwableArray53, (java.lang.Throwable) maxIterationsExceededException73);
        maxIterationsExceededException8.addSuppressed((java.lang.Throwable) convergenceException75);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: " + "'", str51, "org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: ");
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
    }

    @Test
    public void test08481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08481");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        org.apache.commons.math.complex.Complex complex5 = complex3.log();
        org.apache.commons.math.complex.Complex complex6 = complex3.acos();
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex7.log();
        org.apache.commons.math.complex.Complex complex10 = complex7.sin();
        org.apache.commons.math.complex.Complex complex11 = complex7.log();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex7.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex14.subtract(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex14.exp();
        org.apache.commons.math.complex.Complex complex22 = complex14.tan();
        org.apache.commons.math.complex.Complex complex23 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex24 = complex23.cosh();
        double double25 = complex23.abs();
        org.apache.commons.math.complex.Complex complex26 = complex23.conjugate();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        double double29 = complex27.abs();
        org.apache.commons.math.complex.Complex complex30 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex30.conjugate();
        org.apache.commons.math.complex.Complex complex32 = complex30.tanh();
        org.apache.commons.math.complex.Complex complex33 = complex30.atan();
        org.apache.commons.math.complex.Complex complex34 = complex23.subtract(complex30);
        org.apache.commons.math.complex.Complex complex35 = complex14.subtract(complex34);
        org.apache.commons.math.complex.Complex complex36 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex37 = complex36.cosh();
        double double38 = complex36.abs();
        org.apache.commons.math.complex.Complex complex39 = complex36.conjugate();
        org.apache.commons.math.complex.Complex complex40 = complex39.conjugate();
        boolean boolean41 = complex39.isInfinite();
        org.apache.commons.math.complex.Complex complex42 = complex39.cos();
        org.apache.commons.math.complex.Complex complex43 = complex39.conjugate();
        org.apache.commons.math.complex.Complex complex44 = complex39.sin();
        boolean boolean45 = complex39.isNaN();
        org.apache.commons.math.complex.Complex complex46 = complex39.sqrt();
        org.apache.commons.math.complex.Complex complex47 = complex14.multiply(complex46);
        org.apache.commons.math.complex.Complex complex48 = complex47.log();
        org.apache.commons.math.complex.Complex complex49 = complex6.subtract(complex48);
        org.apache.commons.math.complex.Complex complex50 = complex48.acos();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + Double.POSITIVE_INFINITY + "'", double25 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + Double.POSITIVE_INFINITY + "'", double29 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + Double.POSITIVE_INFINITY + "'", double38 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
    }

    @Test
    public void test08482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08482");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex3 = complex2.cosh();
        double double4 = complex2.abs();
        org.apache.commons.math.complex.Complex complex5 = complex2.conjugate();
        org.apache.commons.math.complex.Complex complex6 = complex0.divide(complex5);
        org.apache.commons.math.complex.Complex complex7 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex8 = complex7.cosh();
        org.apache.commons.math.complex.Complex complex9 = complex7.log();
        org.apache.commons.math.complex.Complex complex10 = complex7.sin();
        org.apache.commons.math.complex.Complex complex11 = complex7.log();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.sqrt();
        org.apache.commons.math.complex.Complex complex14 = complex7.divide(complex13);
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.cosh();
        double double17 = complex15.abs();
        org.apache.commons.math.complex.Complex complex18 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex19 = complex18.conjugate();
        org.apache.commons.math.complex.Complex complex20 = complex14.subtract(complex19);
        org.apache.commons.math.complex.Complex complex21 = complex6.multiply(complex14);
        org.apache.commons.math.complex.Complex complex22 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex23 = complex22.cosh();
        org.apache.commons.math.complex.Complex complex24 = complex22.log();
        org.apache.commons.math.complex.Complex complex25 = complex24.cos();
        double double26 = complex25.abs();
        org.apache.commons.math.complex.Complex complex27 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex28 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex29 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex30 = complex29.sqrt();
        org.apache.commons.math.complex.Complex complex31 = complex30.sin();
        org.apache.commons.math.complex.Complex complex32 = complex28.pow(complex30);
        org.apache.commons.math.complex.Complex complex33 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex34 = complex33.cosh();
        org.apache.commons.math.complex.Complex complex35 = complex33.log();
        org.apache.commons.math.complex.Complex complex36 = complex28.divide(complex35);
        org.apache.commons.math.complex.Complex complex37 = complex27.subtract(complex36);
        org.apache.commons.math.complex.Complex complex38 = complex14.pow(complex27);
        org.apache.commons.math.complex.Complex complex39 = complex27.exp();
        org.apache.commons.math.complex.Complex complex40 = complex27.sinh();
        org.apache.commons.math.complex.Complex complex41 = complex40.tanh();
        org.apache.commons.math.complex.Complex complex42 = complex41.conjugate();
        org.apache.commons.math.complex.Complex complex43 = complex42.log();
        org.apache.commons.math.complex.Complex complex46 = new org.apache.commons.math.complex.Complex((double) 5, (-0.7853981633974483d));
        org.apache.commons.math.complex.Complex complex47 = complex42.add(complex46);
        boolean boolean48 = complex42.isNaN();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + Double.POSITIVE_INFINITY + "'", double4 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + Double.POSITIVE_INFINITY + "'", double17 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertNotNull(complex42);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test08483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08483");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double10 = laguerreSolver6.solve((double) (-1L), 349.0d, (double) (short) 10);
        double double11 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((-1.0003990597689866E16d));
        laguerreSolver6.setMaximalIterationCount((int) '#');
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction16 = laguerreSolver6.getPolynomialFunction();
        double double18 = polynomialFunction16.value(64.00000000000502d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.01d) + "'", double10 == (-0.01d));
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0E-6d + "'", double11 == 1.0E-6d);
        org.junit.Assert.assertNotNull(polynomialFunction16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 6401.000000000502d + "'", double18 == 6401.000000000502d);
    }

    @Test
    public void test08484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08484");
        java.lang.Object[] objArray7 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException8 = new org.apache.commons.math.ConvergenceException("", objArray7);
        java.lang.Object[] objArray10 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException11 = new org.apache.commons.math.ConvergenceException("", objArray10);
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray7, (java.lang.Throwable) convergenceException11);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException13 = new org.apache.commons.math.MaxIterationsExceededException((int) (short) 0, "org.apache.commons.math.FunctionEvaluationException: ", objArray7);
        java.lang.Object[] objArray20 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException21 = new org.apache.commons.math.ConvergenceException("", objArray20);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException22 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray20);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException23 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray20);
        java.lang.Object[] objArray30 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException31 = new org.apache.commons.math.ConvergenceException("", objArray30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException32 = new org.apache.commons.math.FunctionEvaluationException((double) (short) 10, "hi!", objArray30);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException33 = new org.apache.commons.math.MaxIterationsExceededException((int) (byte) 0, "org.apache.commons.math.ConvergenceException: hi!", objArray30);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException34 = new org.apache.commons.math.FunctionEvaluationException(0.0d, (java.lang.Throwable) maxIterationsExceededException33);
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("", objArray20, (java.lang.Throwable) functionEvaluationException34);
        org.apache.commons.math.ConvergenceException convergenceException36 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: Convergence failed", objArray7, (java.lang.Throwable) convergenceException35);
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("", objArray43);
        java.lang.Object[] objArray46 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException47 = new org.apache.commons.math.ConvergenceException("", objArray46);
        org.apache.commons.math.ConvergenceException convergenceException48 = new org.apache.commons.math.ConvergenceException("", objArray43, (java.lang.Throwable) convergenceException47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException50 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException51 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray43, (java.lang.Throwable) functionEvaluationException50);
        org.apache.commons.math.ConvergenceException convergenceException52 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: ", (java.lang.Throwable) functionEvaluationException50);
        org.apache.commons.math.ConvergenceException convergenceException53 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) functionEvaluationException50);
        double double54 = functionEvaluationException50.getArgument();
        org.apache.commons.math.ConvergenceException convergenceException55 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.MaxIterationsExceededException: hi!", objArray7, (java.lang.Throwable) functionEvaluationException50);
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("hi!", objArray7);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
    }

    @Test
    public void test08485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08485");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (byte) 10);
        double double7 = polynomialFunction3.value((double) 10.0f);
        int int8 = polynomialFunction3.degree();
        double[] doubleArray9 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction3.polynomialDerivative();
        int int11 = polynomialFunction3.degree();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 349.0d + "'", double5 == 349.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 349.0d + "'", double7 == 349.0d);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test08486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08486");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex2 = complex1.sqrt();
        org.apache.commons.math.complex.Complex complex3 = complex2.sin();
        org.apache.commons.math.complex.Complex complex4 = complex0.pow(complex2);
        org.apache.commons.math.complex.Complex complex5 = complex4.asin();
        double double6 = complex4.abs();
        org.apache.commons.math.complex.Complex complex7 = complex4.acos();
        org.apache.commons.math.complex.Complex complex8 = complex7.conjugate();
        boolean boolean9 = complex7.isInfinite();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex10.log();
        org.apache.commons.math.complex.Complex complex13 = complex12.cos();
        double double14 = complex13.abs();
        org.apache.commons.math.complex.Complex complex15 = complex13.sqrt();
        org.apache.commons.math.complex.Complex complex16 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.sqrt();
        org.apache.commons.math.complex.Complex complex19 = complex18.sin();
        org.apache.commons.math.complex.Complex complex20 = complex16.pow(complex18);
        org.apache.commons.math.complex.Complex complex21 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex22 = complex21.cosh();
        org.apache.commons.math.complex.Complex complex23 = complex21.log();
        org.apache.commons.math.complex.Complex complex24 = complex16.divide(complex23);
        org.apache.commons.math.complex.Complex complex25 = complex15.subtract(complex24);
        org.apache.commons.math.complex.Complex complex26 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex27 = complex15.conjugate();
        org.apache.commons.math.complex.Complex complex28 = complex15.cos();
        boolean boolean29 = complex28.isNaN();
        org.apache.commons.math.complex.Complex complex30 = complex28.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex30.sinh();
        org.apache.commons.math.complex.Complex complex32 = complex30.cosh();
        org.apache.commons.math.complex.Complex complex33 = complex7.multiply(complex32);
        org.apache.commons.math.complex.Complex complex34 = complex32.conjugate();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
    }

    @Test
    public void test08487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08487");
        double[] doubleArray7 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray7);
        double double10 = polynomialFunction8.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver11 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction8);
        double double12 = laguerreSolver11.getAbsoluteAccuracy();
        laguerreSolver11.resetAbsoluteAccuracy();
        laguerreSolver11.resetFunctionValueAccuracy();
        double double15 = laguerreSolver11.getRelativeAccuracy();
        double double16 = laguerreSolver11.getRelativeAccuracy();
        double[] doubleArray22 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction23 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray22);
        int int24 = polynomialFunction23.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction25 = polynomialFunction23.polynomialDerivative();
        double[] doubleArray26 = polynomialFunction23.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray28 = laguerreSolver11.solveAll(doubleArray26, (double) 100.0f);
        org.apache.commons.math.MaxIterationsExceededException maxIterationsExceededException29 = new org.apache.commons.math.MaxIterationsExceededException(100, "org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: hi!", (java.lang.Object[]) complexArray28);
        java.lang.Object[] objArray34 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException35 = new org.apache.commons.math.ConvergenceException("", objArray34);
        java.lang.Object[] objArray40 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException41 = new org.apache.commons.math.ConvergenceException("", objArray40);
        java.lang.Object[] objArray43 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException44 = new org.apache.commons.math.ConvergenceException("", objArray43);
        org.apache.commons.math.ConvergenceException convergenceException45 = new org.apache.commons.math.ConvergenceException("", objArray40, (java.lang.Throwable) convergenceException44);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException47 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException48 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray40, (java.lang.Throwable) functionEvaluationException47);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException49 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray34, (java.lang.Throwable) functionEvaluationException48);
        java.lang.String str50 = functionEvaluationException49.getPattern();
        double double51 = functionEvaluationException49.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException52 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, (java.lang.Throwable) functionEvaluationException49);
        java.lang.Object[] objArray55 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException56 = new org.apache.commons.math.ConvergenceException("", objArray55);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException57 = new org.apache.commons.math.FunctionEvaluationException(10.0d, (java.lang.Throwable) convergenceException56);
        functionEvaluationException52.addSuppressed((java.lang.Throwable) functionEvaluationException57);
        java.lang.Throwable[] throwableArray59 = functionEvaluationException52.getSuppressed();
        org.apache.commons.math.ConvergenceException convergenceException60 = new org.apache.commons.math.ConvergenceException("", (java.lang.Object[]) complexArray28, (java.lang.Throwable) functionEvaluationException52);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException61 = new org.apache.commons.math.FunctionEvaluationException(10.170609052699179d, "org.apache.commons.math.FunctionEvaluationException: Evaluation failed for argument = -161", (java.lang.Throwable) functionEvaluationException52);
        java.lang.String str62 = functionEvaluationException52.toString();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10001.0d + "'", double10 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0E-6d + "'", double12 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0E-14d + "'", double15 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0E-14d + "'", double16 == 1.0E-14d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction25);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray28);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray40), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray40), "[]");
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 35.0d + "'", double51 == 35.0d);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "org.apache.commons.math.FunctionEvaluationException: " + "'", str62, "org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test08488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08488");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex3.conjugate();
        boolean boolean5 = complex3.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex3.cos();
        org.apache.commons.math.complex.Complex complex7 = complex6.sin();
        org.apache.commons.math.complex.Complex complex8 = complex7.tan();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = complex9.sqrt();
        org.apache.commons.math.complex.Complex complex11 = complex10.sin();
        org.apache.commons.math.complex.Complex complex12 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex13 = complex12.cosh();
        double double14 = complex12.abs();
        org.apache.commons.math.complex.Complex complex15 = complex12.conjugate();
        org.apache.commons.math.complex.Complex complex16 = complex15.conjugate();
        boolean boolean17 = complex15.isInfinite();
        org.apache.commons.math.complex.Complex complex18 = complex15.cos();
        org.apache.commons.math.complex.Complex complex19 = complex11.add(complex15);
        org.apache.commons.math.complex.Complex complex20 = complex11.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex11.conjugate();
        boolean boolean22 = complex7.equals((java.lang.Object) complex21);
        double double23 = complex21.abs();
        org.apache.commons.math.complex.Complex complex24 = complex21.acos();
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex27 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex28 = complex27.cosh();
        double double29 = complex27.abs();
        org.apache.commons.math.complex.Complex complex30 = complex27.conjugate();
        org.apache.commons.math.complex.Complex complex31 = complex25.divide(complex30);
        org.apache.commons.math.complex.Complex complex32 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex33 = complex32.cosh();
        org.apache.commons.math.complex.Complex complex34 = complex32.log();
        org.apache.commons.math.complex.Complex complex35 = complex32.sin();
        org.apache.commons.math.complex.Complex complex36 = complex32.log();
        org.apache.commons.math.complex.Complex complex37 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex38 = complex37.sqrt();
        org.apache.commons.math.complex.Complex complex39 = complex32.divide(complex38);
        org.apache.commons.math.complex.Complex complex40 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex41 = complex40.cosh();
        double double42 = complex40.abs();
        org.apache.commons.math.complex.Complex complex43 = complex40.conjugate();
        org.apache.commons.math.complex.Complex complex44 = complex43.conjugate();
        org.apache.commons.math.complex.Complex complex45 = complex39.subtract(complex44);
        org.apache.commons.math.complex.Complex complex46 = complex31.multiply(complex39);
        org.apache.commons.math.complex.Complex complex47 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex48 = complex47.cosh();
        org.apache.commons.math.complex.Complex complex49 = complex47.log();
        org.apache.commons.math.complex.Complex complex50 = complex49.cos();
        double double51 = complex50.abs();
        org.apache.commons.math.complex.Complex complex52 = complex50.sqrt();
        org.apache.commons.math.complex.Complex complex53 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex54 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex55 = complex54.sqrt();
        org.apache.commons.math.complex.Complex complex56 = complex55.sin();
        org.apache.commons.math.complex.Complex complex57 = complex53.pow(complex55);
        org.apache.commons.math.complex.Complex complex58 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex59 = complex58.cosh();
        org.apache.commons.math.complex.Complex complex60 = complex58.log();
        org.apache.commons.math.complex.Complex complex61 = complex53.divide(complex60);
        org.apache.commons.math.complex.Complex complex62 = complex52.subtract(complex61);
        org.apache.commons.math.complex.Complex complex63 = complex39.pow(complex52);
        org.apache.commons.math.complex.Complex complex64 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex65 = complex64.cosh();
        org.apache.commons.math.complex.Complex complex66 = complex65.acos();
        org.apache.commons.math.complex.Complex complex67 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex68 = complex67.cosh();
        org.apache.commons.math.complex.Complex complex69 = complex67.log();
        org.apache.commons.math.complex.Complex complex70 = complex67.sin();
        org.apache.commons.math.complex.Complex complex71 = complex70.tanh();
        org.apache.commons.math.complex.Complex complex72 = complex65.add(complex71);
        org.apache.commons.math.complex.Complex complex73 = complex72.exp();
        org.apache.commons.math.complex.Complex complex74 = complex52.divide(complex72);
        org.apache.commons.math.complex.Complex complex75 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex76 = complex75.cosh();
        org.apache.commons.math.complex.Complex complex77 = complex75.log();
        org.apache.commons.math.complex.Complex complex78 = complex75.sin();
        org.apache.commons.math.complex.Complex complex79 = complex75.log();
        org.apache.commons.math.complex.Complex complex80 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex81 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex82 = complex81.sqrt();
        org.apache.commons.math.complex.Complex complex83 = complex82.sin();
        org.apache.commons.math.complex.Complex complex84 = complex80.pow(complex82);
        org.apache.commons.math.complex.Complex complex85 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex86 = complex85.cosh();
        org.apache.commons.math.complex.Complex complex87 = complex85.log();
        org.apache.commons.math.complex.Complex complex88 = complex80.divide(complex87);
        org.apache.commons.math.complex.Complex complex89 = complex75.subtract(complex87);
        org.apache.commons.math.complex.Complex complex90 = complex89.cosh();
        org.apache.commons.math.complex.Complex complex91 = complex72.multiply(complex90);
        org.apache.commons.math.complex.Complex complex92 = complex91.asin();
        boolean boolean93 = complex92.isInfinite();
        org.apache.commons.math.complex.Complex complex94 = complex92.tan();
        boolean boolean95 = complex92.isInfinite();
        org.apache.commons.math.complex.Complex complex96 = complex21.subtract(complex92);
        org.apache.commons.math.complex.Complex complex97 = complex96.sqrt1z();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + Double.POSITIVE_INFINITY + "'", double14 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + Double.POSITIVE_INFINITY + "'", double29 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertNotNull(complex40);
        org.junit.Assert.assertNotNull(complex41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + Double.POSITIVE_INFINITY + "'", double42 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex43);
        org.junit.Assert.assertNotNull(complex44);
        org.junit.Assert.assertNotNull(complex45);
        org.junit.Assert.assertNotNull(complex46);
        org.junit.Assert.assertNotNull(complex47);
        org.junit.Assert.assertNotNull(complex48);
        org.junit.Assert.assertNotNull(complex49);
        org.junit.Assert.assertNotNull(complex50);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(complex52);
        org.junit.Assert.assertNotNull(complex53);
        org.junit.Assert.assertNotNull(complex54);
        org.junit.Assert.assertNotNull(complex55);
        org.junit.Assert.assertNotNull(complex56);
        org.junit.Assert.assertNotNull(complex57);
        org.junit.Assert.assertNotNull(complex58);
        org.junit.Assert.assertNotNull(complex59);
        org.junit.Assert.assertNotNull(complex60);
        org.junit.Assert.assertNotNull(complex61);
        org.junit.Assert.assertNotNull(complex62);
        org.junit.Assert.assertNotNull(complex63);
        org.junit.Assert.assertNotNull(complex64);
        org.junit.Assert.assertNotNull(complex65);
        org.junit.Assert.assertNotNull(complex66);
        org.junit.Assert.assertNotNull(complex67);
        org.junit.Assert.assertNotNull(complex68);
        org.junit.Assert.assertNotNull(complex69);
        org.junit.Assert.assertNotNull(complex70);
        org.junit.Assert.assertNotNull(complex71);
        org.junit.Assert.assertNotNull(complex72);
        org.junit.Assert.assertNotNull(complex73);
        org.junit.Assert.assertNotNull(complex74);
        org.junit.Assert.assertNotNull(complex75);
        org.junit.Assert.assertNotNull(complex76);
        org.junit.Assert.assertNotNull(complex77);
        org.junit.Assert.assertNotNull(complex78);
        org.junit.Assert.assertNotNull(complex79);
        org.junit.Assert.assertNotNull(complex80);
        org.junit.Assert.assertNotNull(complex81);
        org.junit.Assert.assertNotNull(complex82);
        org.junit.Assert.assertNotNull(complex83);
        org.junit.Assert.assertNotNull(complex84);
        org.junit.Assert.assertNotNull(complex85);
        org.junit.Assert.assertNotNull(complex86);
        org.junit.Assert.assertNotNull(complex87);
        org.junit.Assert.assertNotNull(complex88);
        org.junit.Assert.assertNotNull(complex89);
        org.junit.Assert.assertNotNull(complex90);
        org.junit.Assert.assertNotNull(complex91);
        org.junit.Assert.assertNotNull(complex92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(complex94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(complex96);
        org.junit.Assert.assertNotNull(complex97);
    }

    @Test
    public void test08489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08489");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        boolean boolean4 = complex0.isNaN();
        boolean boolean5 = complex0.isInfinite();
        org.apache.commons.math.complex.Complex complex6 = complex0.log();
        org.apache.commons.math.complex.Complex complex7 = complex6.sqrt1z();
        org.apache.commons.math.complex.Complex complex8 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex9 = complex8.cosh();
        org.apache.commons.math.complex.Complex complex10 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex11 = complex10.cosh();
        org.apache.commons.math.complex.Complex complex12 = complex10.log();
        org.apache.commons.math.complex.Complex complex13 = complex10.sin();
        org.apache.commons.math.complex.Complex complex14 = complex10.log();
        org.apache.commons.math.complex.Complex complex15 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex16 = complex15.sqrt();
        org.apache.commons.math.complex.Complex complex17 = complex10.divide(complex16);
        org.apache.commons.math.complex.Complex complex18 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex19 = complex18.cosh();
        org.apache.commons.math.complex.Complex complex20 = complex19.acos();
        double double21 = complex19.getReal();
        org.apache.commons.math.complex.Complex complex22 = complex19.sqrt();
        org.apache.commons.math.complex.Complex complex23 = complex10.pow(complex19);
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = complex24.cosh();
        org.apache.commons.math.complex.Complex complex26 = complex24.log();
        org.apache.commons.math.complex.Complex complex27 = complex26.cos();
        org.apache.commons.math.complex.Complex complex28 = complex19.multiply(complex26);
        org.apache.commons.math.complex.Complex complex29 = complex26.tanh();
        org.apache.commons.math.complex.Complex complex30 = complex8.divide(complex26);
        org.apache.commons.math.complex.Complex complex31 = complex26.atan();
        org.apache.commons.math.complex.Complex complex32 = complex31.conjugate();
        org.apache.commons.math.complex.Complex complex33 = complex31.exp();
        org.apache.commons.math.complex.Complex complex34 = complex7.pow(complex33);
        double double35 = complex34.getReal();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertNotNull(complex19);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertNotNull(complex33);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
    }

    @Test
    public void test08490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08490");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        double double8 = laguerreSolver6.getAbsoluteAccuracy();
        double[] doubleArray14 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction15 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray14);
        org.apache.commons.math.complex.Complex[] complexArray17 = laguerreSolver6.solveAll(doubleArray14, 10001.0d);
        double double18 = laguerreSolver6.getResult();
        laguerreSolver6.resetFunctionValueAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        int int21 = laguerreSolver6.getMaximalIterationCount();
        double double22 = laguerreSolver6.getRelativeAccuracy();
        double double23 = laguerreSolver6.getAbsoluteAccuracy();
        double double24 = laguerreSolver6.getAbsoluteAccuracy();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0E-6d + "'", double8 == 1.0E-6d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 100 + "'", int21 == 100);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0E-14d + "'", double22 == 1.0E-14d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.0E-6d + "'", double23 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.0E-6d + "'", double24 == 1.0E-6d);
    }

    @Test
    public void test08491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08491");
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ");
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException3 = new org.apache.commons.math.FunctionEvaluationException(349.0d, (java.lang.Throwable) convergenceException2);
        java.lang.Throwable[] throwableArray4 = convergenceException2.getSuppressed();
        java.lang.String str5 = convergenceException2.toString();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: " + "'", str5, "org.apache.commons.math.ConvergenceException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.FunctionEvaluationException: ");
    }

    @Test
    public void test08492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08492");
        java.lang.Object[] objArray5 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException6 = new org.apache.commons.math.ConvergenceException("", objArray5);
        java.lang.Object[] objArray11 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException12 = new org.apache.commons.math.ConvergenceException("", objArray11);
        java.lang.Object[] objArray14 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray14);
        org.apache.commons.math.ConvergenceException convergenceException16 = new org.apache.commons.math.ConvergenceException("", objArray11, (java.lang.Throwable) convergenceException15);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException18 = new org.apache.commons.math.FunctionEvaluationException((double) 100);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException19 = new org.apache.commons.math.FunctionEvaluationException(100.0d, "org.apache.commons.math.ConvergenceException: hi!", objArray11, (java.lang.Throwable) functionEvaluationException18);
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException20 = new org.apache.commons.math.FunctionEvaluationException((double) '#', "", objArray5, (java.lang.Throwable) functionEvaluationException19);
        java.lang.String str21 = functionEvaluationException20.getPattern();
        double double22 = functionEvaluationException20.getArgument();
        org.apache.commons.math.FunctionEvaluationException functionEvaluationException23 = new org.apache.commons.math.FunctionEvaluationException((double) (byte) 0, (java.lang.Throwable) functionEvaluationException20);
        java.lang.Object[] objArray24 = functionEvaluationException23.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException25 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) functionEvaluationException23);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray5), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray5), "[]");
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 35.0d + "'", double22 == 35.0d);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
    }

    @Test
    public void test08493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08493");
        org.apache.commons.math.ConvergenceException convergenceException2 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: org.apache.commons.math.ConvergenceException: Convergence failed");
        java.lang.Object[] objArray3 = convergenceException2.getArguments();
        java.lang.Object[] objArray9 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException10 = new org.apache.commons.math.ConvergenceException("", objArray9);
        java.lang.Object[] objArray12 = new java.lang.Object[] {};
        org.apache.commons.math.ConvergenceException convergenceException13 = new org.apache.commons.math.ConvergenceException("", objArray12);
        org.apache.commons.math.ConvergenceException convergenceException14 = new org.apache.commons.math.ConvergenceException("", objArray9, (java.lang.Throwable) convergenceException13);
        org.apache.commons.math.ConvergenceException convergenceException15 = new org.apache.commons.math.ConvergenceException("", objArray9);
        java.lang.Throwable[] throwableArray16 = convergenceException15.getSuppressed();
        java.lang.Object[] objArray17 = convergenceException15.getArguments();
        org.apache.commons.math.ConvergenceException convergenceException18 = new org.apache.commons.math.ConvergenceException("", objArray17);
        org.apache.commons.math.ConvergenceException convergenceException19 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.FunctionEvaluationException: org.apache.commons.math.ConvergenceException: Convergence failed", (java.lang.Throwable) convergenceException18);
        org.apache.commons.math.ConvergenceException convergenceException20 = new org.apache.commons.math.ConvergenceException("org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MaxIterationsExceededException: org.apache.commons.math.MaxIterationsExceededException: ", objArray3, (java.lang.Throwable) convergenceException19);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
    }

    @Test
    public void test08494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08494");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.setRelativeAccuracy((double) 0);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setRelativeAccuracy(10.0d);
        laguerreSolver6.setAbsoluteAccuracy((-1.6365376E7d));
        double[] doubleArray21 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction22 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray21);
        int int23 = polynomialFunction22.degree();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver24 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction22);
        double[] doubleArray25 = polynomialFunction22.getCoefficients();
        org.apache.commons.math.complex.Complex[] complexArray27 = laguerreSolver6.solveAll(doubleArray25, 1.0E-6d);
        laguerreSolver6.setRelativeAccuracy((-1.04987708700666E14d));
        laguerreSolver6.setRelativeAccuracy((-8.808275266783596E15d));
        int int32 = laguerreSolver6.getMaximalIterationCount();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertNotNull(complexArray27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
    }

    @Test
    public void test08495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08495");
        double[] doubleArray5 = new double[] { 0L, '#', 100.0f, 0L, (-1.0d) };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        int int7 = polynomialFunction6.degree();
        int int8 = polynomialFunction6.degree();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction9 = polynomialFunction6.polynomialDerivative();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction10 = polynomialFunction9.polynomialDerivative();
        double[] doubleArray11 = polynomialFunction10.getCoefficients();
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver12 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction10);
        int int13 = polynomialFunction10.degree();
        double double15 = polynomialFunction10.value((double) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[0.0, 35.0, 100.0, 0.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(polynomialFunction9);
        org.junit.Assert.assertNotNull(polynomialFunction10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[200.0, 0.0, -12.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-1000.0d) + "'", double15 == (-1000.0d));
    }

    @Test
    public void test08496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08496");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = laguerreSolver6.getPolynomialFunction();
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.setMaximalIterationCount((int) '#');
        laguerreSolver6.resetMaximalIterationCount();
        laguerreSolver6.resetFunctionValueAccuracy();
        laguerreSolver6.resetFunctionValueAccuracy();
        laguerreSolver6.resetRelativeAccuracy();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = laguerreSolver6.getIterationCount();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No result available");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertNotNull(polynomialFunction7);
    }

    @Test
    public void test08497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08497");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.sqrt();
        org.apache.commons.math.complex.Complex complex2 = complex1.sin();
        org.apache.commons.math.complex.Complex complex3 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex4 = complex3.sqrt();
        org.apache.commons.math.complex.Complex complex5 = complex4.sin();
        org.apache.commons.math.complex.Complex complex6 = complex1.multiply(complex4);
        org.apache.commons.math.complex.Complex complex7 = complex4.negate();
        org.apache.commons.math.complex.Complex complex8 = complex4.negate();
        org.apache.commons.math.complex.Complex complex9 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex10 = complex9.cosh();
        org.apache.commons.math.complex.Complex complex11 = complex9.log();
        org.apache.commons.math.complex.Complex complex12 = complex9.sin();
        org.apache.commons.math.complex.Complex complex13 = complex9.log();
        org.apache.commons.math.complex.Complex complex14 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex15 = complex14.sqrt();
        org.apache.commons.math.complex.Complex complex16 = complex9.divide(complex15);
        org.apache.commons.math.complex.Complex complex17 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex18 = complex17.cosh();
        double double19 = complex17.abs();
        org.apache.commons.math.complex.Complex complex20 = complex17.conjugate();
        org.apache.commons.math.complex.Complex complex21 = complex20.conjugate();
        org.apache.commons.math.complex.Complex complex22 = complex16.subtract(complex21);
        org.apache.commons.math.complex.Complex complex23 = complex16.exp();
        org.apache.commons.math.complex.Complex complex24 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex25 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex26 = complex25.sqrt();
        org.apache.commons.math.complex.Complex complex27 = complex26.sin();
        org.apache.commons.math.complex.Complex complex28 = complex24.pow(complex26);
        org.apache.commons.math.complex.Complex complex29 = complex28.asin();
        org.apache.commons.math.complex.Complex complex30 = complex29.atan();
        org.apache.commons.math.complex.Complex complex31 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex32 = complex31.cosh();
        boolean boolean33 = complex30.equals((java.lang.Object) complex31);
        org.apache.commons.math.complex.Complex complex34 = complex16.divide(complex31);
        org.apache.commons.math.complex.Complex complex35 = complex34.acos();
        org.apache.commons.math.complex.Complex complex36 = complex34.acos();
        org.apache.commons.math.complex.Complex complex37 = complex36.sin();
        org.apache.commons.math.complex.Complex complex38 = complex36.tan();
        org.apache.commons.math.complex.Complex complex39 = complex36.cosh();
        boolean boolean40 = complex8.equals((java.lang.Object) complex39);
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertNotNull(complex2);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
        org.junit.Assert.assertNotNull(complex7);
        org.junit.Assert.assertNotNull(complex8);
        org.junit.Assert.assertNotNull(complex9);
        org.junit.Assert.assertNotNull(complex10);
        org.junit.Assert.assertNotNull(complex11);
        org.junit.Assert.assertNotNull(complex12);
        org.junit.Assert.assertNotNull(complex13);
        org.junit.Assert.assertNotNull(complex14);
        org.junit.Assert.assertNotNull(complex15);
        org.junit.Assert.assertNotNull(complex16);
        org.junit.Assert.assertNotNull(complex17);
        org.junit.Assert.assertNotNull(complex18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + Double.POSITIVE_INFINITY + "'", double19 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex20);
        org.junit.Assert.assertNotNull(complex21);
        org.junit.Assert.assertNotNull(complex22);
        org.junit.Assert.assertNotNull(complex23);
        org.junit.Assert.assertNotNull(complex24);
        org.junit.Assert.assertNotNull(complex25);
        org.junit.Assert.assertNotNull(complex26);
        org.junit.Assert.assertNotNull(complex27);
        org.junit.Assert.assertNotNull(complex28);
        org.junit.Assert.assertNotNull(complex29);
        org.junit.Assert.assertNotNull(complex30);
        org.junit.Assert.assertNotNull(complex31);
        org.junit.Assert.assertNotNull(complex32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(complex34);
        org.junit.Assert.assertNotNull(complex35);
        org.junit.Assert.assertNotNull(complex36);
        org.junit.Assert.assertNotNull(complex37);
        org.junit.Assert.assertNotNull(complex38);
        org.junit.Assert.assertNotNull(complex39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test08498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08498");
        double[] doubleArray2 = new double[] { (byte) -1, '#' };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction4 = polynomialFunction3.polynomialDerivative();
        double[] doubleArray5 = polynomialFunction3.getCoefficients();
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction6 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction7 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray5);
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction8 = polynomialFunction7.polynomialDerivative();
        double double10 = polynomialFunction7.value((-1.0303676599E10d));
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction11 = polynomialFunction7.derivative();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 35.0]");
        org.junit.Assert.assertNotNull(polynomialFunction8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-3.60628680966E11d) + "'", double10 == (-3.60628680966E11d));
        org.junit.Assert.assertNotNull(univariateRealFunction11);
    }

    @Test
    public void test08499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08499");
        double[] doubleArray2 = new double[] { (byte) 1, 100 };
        org.apache.commons.math.analysis.PolynomialFunction polynomialFunction3 = new org.apache.commons.math.analysis.PolynomialFunction(doubleArray2);
        double double5 = polynomialFunction3.value((double) (short) 100);
        org.apache.commons.math.analysis.LaguerreSolver laguerreSolver6 = new org.apache.commons.math.analysis.LaguerreSolver((org.apache.commons.math.analysis.UnivariateRealFunction) polynomialFunction3);
        double double7 = laguerreSolver6.getAbsoluteAccuracy();
        laguerreSolver6.resetAbsoluteAccuracy();
        laguerreSolver6.resetFunctionValueAccuracy();
        laguerreSolver6.setRelativeAccuracy((double) (short) 1);
        laguerreSolver6.setMaximalIterationCount(5);
        double double16 = laguerreSolver6.solve((-1.4823291286E10d), 13403.310093999602d);
        laguerreSolver6.resetRelativeAccuracy();
        laguerreSolver6.setFunctionValueAccuracy((-4.012132225300969E15d));
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10001.0d + "'", double5 == 10001.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0E-6d + "'", double7 == 1.0E-6d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.01d) + "'", double16 == (-0.01d));
    }

    @Test
    public void test08500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08500");
        org.apache.commons.math.complex.Complex complex0 = org.apache.commons.math.complex.Complex.INF;
        org.apache.commons.math.complex.Complex complex1 = complex0.cosh();
        double double2 = complex0.abs();
        org.apache.commons.math.complex.Complex complex3 = complex0.conjugate();
        org.apache.commons.math.complex.Complex complex4 = complex0.exp();
        org.apache.commons.math.complex.Complex complex5 = complex0.cos();
        org.apache.commons.math.complex.Complex complex6 = complex0.tan();
        org.junit.Assert.assertNotNull(complex0);
        org.junit.Assert.assertNotNull(complex1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(complex3);
        org.junit.Assert.assertNotNull(complex4);
        org.junit.Assert.assertNotNull(complex5);
        org.junit.Assert.assertNotNull(complex6);
    }
}

